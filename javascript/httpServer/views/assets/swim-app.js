/*!
  * SWIM Library - APP
  * Version: 0.3.1
  * Copyright Â© 2016-2018 SWIM Inc. All Rights Reserved
  * Website: https://www.swim.ai
  * Date: Thu Jan 17 2019 12:00:20 GMT-0800 (STD)
*/
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.swim = {})));
}(this, (function (exports) { 'use strict';

var hashArrayBuffer = new ArrayBuffer(8);
var hashFloat64Array = new Float64Array(hashArrayBuffer);
var hashInt32Array = new Int32Array(hashArrayBuffer);
var Murmur3 = {
    hash: function (value) {
        if (value === null) {
            return 0;
        }
        else if (typeof value === 'string') {
            var code = 0;
            for (var i = 0, n = value.length; i < n; i += 1) {
                code = Murmur3.mix(code, value.charCodeAt(i));
            }
            code = Murmur3.mash(code);
            return code;
        }
        else if (typeof value === 'number') {
            if (~~value === value) {
                return ~~value;
            }
            hashFloat64Array[0] = value;
            return hashInt32Array[0] ^ hashInt32Array[1];
        }
        else {
            throw new TypeError('' + value);
        }
    },
    mix: function (code, value) {
        value *= 0xcc9e2d51;
        value = rotl(value, 15);
        value *= 0x1b873593;
        code ^= value;
        code = rotl(code, 13);
        code = code * 5 + 0xe6546b64;
        return code;
    },
    mash: function (code) {
        code ^= code >>> 16;
        code *= 0x85ebca6b;
        code ^= code >>> 13;
        code *= 0xc2b2ae35;
        code ^= code >>> 16;
        return code;
    },
};
function rotl(value, distance) {
    return (value << distance) | (value >>> (32 - distance));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVybXVyMy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm11cm11cjMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTSxlQUFlLEdBQUcsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0MsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUMzRCxJQUFNLGNBQWMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUV2RCxNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUc7SUFDckIsSUFBSSxFQUFKLFVBQUssS0FBNkI7UUFDaEMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7YUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUNwQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7WUFDYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQy9DLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDL0M7WUFDRCxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQixPQUFPLElBQUksQ0FBQztTQUNiO2FBQU0sSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDcEMsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtnQkFDckIsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDO2FBQ2hCO1lBQ0QsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQzVCLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5QzthQUFNO1lBQ0wsTUFBTSxJQUFJLFNBQVMsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQsR0FBRyxFQUFILFVBQUksSUFBWSxFQUFFLEtBQWE7UUFDN0IsS0FBSyxJQUFJLFVBQVUsQ0FBQztRQUNwQixLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4QixLQUFLLElBQUksVUFBVSxDQUFDO1FBQ3BCLElBQUksSUFBSSxLQUFLLENBQUM7UUFDZCxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0QixJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxVQUFVLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxFQUFKLFVBQUssSUFBWTtRQUNmLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3BCLElBQUksSUFBSSxVQUFVLENBQUM7UUFDbkIsSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFLENBQUM7UUFDcEIsSUFBSSxJQUFJLFVBQVUsQ0FBQztRQUNuQixJQUFJLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNwQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDO0FBRUYsU0FBUyxJQUFJLENBQUMsS0FBYSxFQUFFLFFBQWdCO0lBQzNDLE9BQU8sQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUMzRCxDQUFDIn0=

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

var Cursor = (function () {
    function Cursor() {
    }
    Cursor.prototype.set = function (newValue) {
        throw new Error('immutable');
    };
    Cursor.prototype.delete = function () {
        throw new Error('immutable');
    };
    Cursor.Empty = undefined;
    return Cursor;
}());
var EmptyCursor = (function (_super) {
    __extends(EmptyCursor, _super);
    function EmptyCursor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EmptyCursor.prototype.isEmpty = function () {
        return true;
    };
    EmptyCursor.prototype.head = function () {
        throw new Error('empty head');
    };
    EmptyCursor.prototype.step = function () {
        throw new Error('empty step');
    };
    EmptyCursor.prototype.skip = function (count) {
    };
    EmptyCursor.prototype.hasNext = function () {
        return false;
    };
    EmptyCursor.prototype.nextIndex = function () {
        return 0;
    };
    EmptyCursor.prototype.next = function () {
        return { done: true };
    };
    EmptyCursor.prototype.hasPrevious = function () {
        return false;
    };
    EmptyCursor.prototype.previousIndex = function () {
        return -1;
    };
    EmptyCursor.prototype.previous = function () {
        return { done: true };
    };
    return EmptyCursor;
}(Cursor));
Cursor.Empty = new EmptyCursor();
var UnitCursor = (function (_super) {
    __extends(UnitCursor, _super);
    function UnitCursor(value) {
        var _this = _super.call(this) || this;
        _this._value = value;
        _this._index = 0;
        return _this;
    }
    UnitCursor.prototype.isEmpty = function () {
        return this._index !== 0;
    };
    UnitCursor.prototype.head = function () {
        if (this._index === 0) {
            return this._value;
        }
        else {
            throw new Error('empty head');
        }
    };
    UnitCursor.prototype.step = function () {
        if (this._index === 0) {
            this._index = 1;
        }
        else {
            throw new Error('empty step');
        }
    };
    UnitCursor.prototype.skip = function (count) {
        this._index = Math.min(Math.max(0, this._index + count), 1);
    };
    UnitCursor.prototype.hasNext = function () {
        return this._index === 0;
    };
    UnitCursor.prototype.nextIndex = function () {
        return this._index;
    };
    UnitCursor.prototype.next = function () {
        if (this._index === 0) {
            this._index = 1;
            return { value: this._value, done: true };
        }
        else {
            return { done: true };
        }
    };
    UnitCursor.prototype.hasPrevious = function () {
        return this._index === 1;
    };
    UnitCursor.prototype.previousIndex = function () {
        return this._index - 1;
    };
    UnitCursor.prototype.previous = function () {
        if (this._index === 1) {
            this._index = 0;
            return { value: this._value, done: true };
        }
        else {
            return { done: true };
        }
    };
    return UnitCursor;
}(Cursor));
var KeyCursor = (function (_super) {
    __extends(KeyCursor, _super);
    function KeyCursor(cursor) {
        var _this = _super.call(this) || this;
        _this.cursor = cursor;
        return _this;
    }
    KeyCursor.prototype.isEmpty = function () {
        return this.cursor.isEmpty();
    };
    KeyCursor.prototype.head = function () {
        return this.cursor.head()[0];
    };
    KeyCursor.prototype.step = function () {
        this.cursor.step();
    };
    KeyCursor.prototype.skip = function (count) {
        this.cursor.skip(count);
    };
    KeyCursor.prototype.hasNext = function () {
        return this.cursor.hasNext();
    };
    KeyCursor.prototype.nextIndex = function () {
        return this.cursor.nextIndex();
    };
    KeyCursor.prototype.next = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value[0], done: done };
    };
    KeyCursor.prototype.hasPrevious = function () {
        return this.cursor.hasPrevious();
    };
    KeyCursor.prototype.previousIndex = function () {
        return this.cursor.previousIndex();
    };
    KeyCursor.prototype.previous = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value[0], done: done };
    };
    KeyCursor.prototype.delete = function () {
        this.cursor.delete();
    };
    return KeyCursor;
}(Cursor));
var ValueCursor = (function (_super) {
    __extends(ValueCursor, _super);
    function ValueCursor(cursor) {
        var _this = _super.call(this) || this;
        _this.cursor = cursor;
        return _this;
    }
    ValueCursor.prototype.isEmpty = function () {
        return this.cursor.isEmpty();
    };
    ValueCursor.prototype.head = function () {
        return this.cursor.head()[1];
    };
    ValueCursor.prototype.step = function () {
        this.cursor.step();
    };
    ValueCursor.prototype.skip = function (count) {
        this.cursor.skip(count);
    };
    ValueCursor.prototype.hasNext = function () {
        return this.cursor.hasNext();
    };
    ValueCursor.prototype.nextIndex = function () {
        return this.cursor.nextIndex();
    };
    ValueCursor.prototype.next = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value[1], done: done };
    };
    ValueCursor.prototype.hasPrevious = function () {
        return this.cursor.hasPrevious();
    };
    ValueCursor.prototype.previousIndex = function () {
        return this.cursor.previousIndex();
    };
    ValueCursor.prototype.previous = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value[1], done: done };
    };
    ValueCursor.prototype.delete = function () {
        this.cursor.delete();
    };
    return ValueCursor;
}(Cursor));
var LeafCursor = (function (_super) {
    __extends(LeafCursor, _super);
    function LeafCursor(_array, index) {
        if (index === void 0) { index = 0; }
        var _this = _super.call(this) || this;
        _this._array = _array;
        _this._index = index;
        return _this;
    }
    LeafCursor.prototype.isEmpty = function () {
        return this._index >= this._array.length;
    };
    LeafCursor.prototype.head = function () {
        if (this._index < this._array.length) {
            return this._array[this._index];
        }
        else {
            throw new Error('empty head');
        }
    };
    LeafCursor.prototype.step = function () {
        if (this._index < this._array.length) {
            this._index = 1;
        }
        else {
            throw new Error('empty step');
        }
    };
    LeafCursor.prototype.skip = function (count) {
        this._index = Math.min(this._index + count, this._array.length);
    };
    LeafCursor.prototype.hasNext = function () {
        return this._index < this._array.length;
    };
    LeafCursor.prototype.nextIndex = function () {
        return this._index;
    };
    LeafCursor.prototype.next = function () {
        var index = this._index;
        if (index < this._array.length) {
            this._index = index + 1;
            return { value: this._array[index], done: this._index === this._array.length };
        }
        else {
            this._index = this._array.length;
            return { done: true };
        }
    };
    LeafCursor.prototype.hasPrevious = function () {
        return this._index > 0;
    };
    LeafCursor.prototype.previousIndex = function () {
        return this._index - 1;
    };
    LeafCursor.prototype.previous = function () {
        var index = this._index - 1;
        if (index >= 0) {
            this._index = index;
            return { value: this._array[index], done: index === 0 };
        }
        else {
            this._index = 0;
            return { done: true };
        }
    };
    return LeafCursor;
}(Cursor));
var NodeCursor = (function (_super) {
    __extends(NodeCursor, _super);
    function NodeCursor(pages, index, pageIndex, _subCursor) {
        if (index === void 0) { index = 0; }
        if (pageIndex === void 0) { pageIndex = 0; }
        var _this = _super.call(this) || this;
        _this.pages = pages;
        _this._index = index;
        _this._pageIndex = pageIndex;
        _this._subCursor = _subCursor;
        return _this;
    }
    NodeCursor.prototype.isEmpty = function () {
        do {
            if (this._subCursor) {
                if (!this._subCursor.isEmpty()) {
                    return false;
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else if (this._pageIndex < this.pages.length) {
                this._subCursor = this.pageCursor(this.pages[this._pageIndex]);
                this._pageIndex += 1;
            }
            else {
                this._pageIndex = this.pages.length;
                return true;
            }
        } while (true);
    };
    NodeCursor.prototype.head = function () {
        do {
            if (this._subCursor) {
                if (!this._subCursor.isEmpty()) {
                    return this._subCursor.head();
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else {
                if (this._pageIndex < this.pages.length) {
                    this._subCursor = this.pageCursor(this.pages[this._pageIndex]);
                    this._pageIndex += 1;
                }
                else {
                    this._pageIndex = this.pages.length;
                    throw new Error('empty head');
                }
            }
        } while (true);
    };
    NodeCursor.prototype.step = function () {
        do {
            if (this._subCursor) {
                if (!this._subCursor.isEmpty()) {
                    this._index += 1;
                    return;
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else {
                if (this._pageIndex < this.pages.length) {
                    this._subCursor = this.pageCursor(this.pages[this._pageIndex]);
                    this._pageIndex += 1;
                }
                else {
                    this._pageIndex = this.pages.length;
                    throw new Error('empty step');
                }
            }
        } while (true);
    };
    NodeCursor.prototype.skip = function (count) {
        while (count > 0) {
            if (this._subCursor) {
                if (this._subCursor.hasNext()) {
                    this._index += 1;
                    count -= 1;
                    this._subCursor.next();
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else if (this._pageIndex < this.pages.length) {
                var subPage = this.pages[this._pageIndex];
                var subPageSize = this.pageSize(subPage);
                this._pageIndex += 1;
                if (subPageSize < count) {
                    this._subCursor = this.pageCursor(subPage);
                    if (count > 0) {
                        this._index += count;
                        this._subCursor.skip(count);
                        count = 0;
                    }
                    break;
                }
                else {
                    this._index += subPageSize;
                    count -= subPageSize;
                }
            }
            else {
                break;
            }
        }
    };
    NodeCursor.prototype.hasNext = function () {
        do {
            if (this._subCursor) {
                if (this._subCursor.hasNext()) {
                    return true;
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else if (this._pageIndex < this.pages.length) {
                this._subCursor = this.pageCursor(this.pages[this._pageIndex]);
                this._pageIndex += 1;
            }
            else {
                this._pageIndex = this.pages.length;
                return false;
            }
        } while (true);
    };
    NodeCursor.prototype.nextIndex = function () {
        return this._index;
    };
    NodeCursor.prototype.next = function () {
        do {
            if (this._subCursor) {
                if (this._subCursor.hasNext()) {
                    this._index += 1;
                    return this._subCursor.next();
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else {
                if (this._pageIndex < this.pages.length) {
                    this._subCursor = this.pageCursor(this.pages[this._pageIndex]);
                    this._pageIndex += 1;
                }
                else {
                    this._pageIndex = this.pages.length;
                    return { done: true };
                }
            }
        } while (true);
    };
    NodeCursor.prototype.hasPrevious = function () {
        do {
            if (this._subCursor) {
                if (this._subCursor.hasPrevious()) {
                    return true;
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else if (this._pageIndex > 0) {
                this._subCursor = this.reversePageCursor(this.pages[this._pageIndex - 1]);
                this._pageIndex -= 1;
            }
            else {
                this._pageIndex = 0;
                return false;
            }
        } while (true);
    };
    NodeCursor.prototype.previousIndex = function () {
        return this._index - 1;
    };
    NodeCursor.prototype.previous = function () {
        do {
            if (this._subCursor) {
                if (this._subCursor.hasPrevious()) {
                    this._index -= 1;
                    return this._subCursor.previous();
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else if (this._pageIndex > 0) {
                this._subCursor = this.reversePageCursor(this.pages[this._pageIndex - 1]);
                this._pageIndex -= 1;
            }
            else {
                this._pageIndex = 0;
                return { done: true };
            }
        } while (true);
    };
    NodeCursor.prototype.set = function (newValue) {
        this._subCursor.set(newValue);
    };
    NodeCursor.prototype.delete = function () {
        this._subCursor.delete();
    };
    return NodeCursor;
}(Cursor));

//# sourceMappingURL=data:application/json;base64,

var Input = (function () {
    function Input() {
    }
    Input.done = function () {
        return new StringInput('');
    };
    return Input;
}());
var StringInput = (function (_super) {
    __extends(StringInput, _super);
    function StringInput(buffer, index, more) {
        if (index === void 0) { index = 0; }
        if (more === void 0) { more = false; }
        var _this = _super.call(this) || this;
        _this.buffer = buffer;
        _this.index = index;
        _this.more = more;
        return _this;
    }
    StringInput.prototype.isDone = function () {
        return this.isEmpty() && !this.more;
    };
    StringInput.prototype.isEmpty = function () {
        return this.index >= this.buffer.length;
    };
    StringInput.prototype.head = function () {
        var c1 = this.buffer.charCodeAt(this.index);
        if (c1 <= 0xD7FF || c1 >= 0xE000) {
            return c1;
        }
        else if (c1 <= 0xDBFF && this.index + 1 < this.buffer.length) {
            var c2 = this.buffer.charCodeAt(this.index + 1);
            if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
                return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;
            }
            else {
                return 0xFFFD;
            }
        }
        else {
            return 0xFFFD;
        }
    };
    StringInput.prototype.step = function () {
        var c1 = this.buffer.charCodeAt(this.index);
        if (c1 <= 0xD7FF || c1 >= 0xE000) {
            this.index += 1;
        }
        else if (c1 <= 0xDBFF && this.index + 1 < this.buffer.length) {
            var c2 = this.buffer.charCodeAt(this.index + 1);
            if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
                this.index += 2;
            }
            else {
                this.index += 1;
            }
        }
        else {
            this.index += 1;
        }
    };
    StringInput.prototype.clone = function () {
        return new StringInput(this.buffer, this.index, this.more);
    };
    return StringInput;
}(Input));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7SUFBQTtJQWNBLENBQUM7SUFIUSxVQUFJLEdBQVg7UUFDRSxPQUFPLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFDSCxZQUFDO0FBQUQsQ0FBQyxBQWRELElBY0M7O0FBRUQ7SUFBaUMsdUNBQUs7SUFLcEMscUJBQVksTUFBYyxFQUFFLEtBQWlCLEVBQUUsSUFBcUI7UUFBeEMsc0JBQUEsRUFBQSxTQUFpQjtRQUFFLHFCQUFBLEVBQUEsWUFBcUI7UUFBcEUsWUFDRSxpQkFBTyxTQUlSO1FBSEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0lBQ25CLENBQUM7SUFFRCw0QkFBTSxHQUFOO1FBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3RDLENBQUM7SUFFRCw2QkFBTyxHQUFQO1FBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzFDLENBQUM7SUFFRCwwQkFBSSxHQUFKO1FBQ0UsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlDLElBQUksRUFBRSxJQUFJLE1BQU0sSUFBSSxFQUFFLElBQUksTUFBTSxFQUFFO1lBQ2hDLE9BQU8sRUFBRSxDQUFDO1NBQ1g7YUFBTSxJQUFJLEVBQUUsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDOUQsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNsRCxJQUFJLEVBQUUsSUFBSSxNQUFNLElBQUksRUFBRSxJQUFJLE1BQU0sRUFBRTtnQkFDaEMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUM7YUFDeEQ7aUJBQU07Z0JBQ0wsT0FBTyxNQUFNLENBQUM7YUFDZjtTQUNGO2FBQU07WUFDTCxPQUFPLE1BQU0sQ0FBQztTQUNmO0lBQ0gsQ0FBQztJQUVELDBCQUFJLEdBQUo7UUFDRSxJQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsSUFBSSxFQUFFLElBQUksTUFBTSxJQUFJLEVBQUUsSUFBSSxNQUFNLEVBQUU7WUFDaEMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7U0FDakI7YUFBTSxJQUFJLEVBQUUsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDOUQsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNsRCxJQUFJLEVBQUUsSUFBSSxNQUFNLElBQUksRUFBRSxJQUFJLE1BQU0sRUFBRTtnQkFDaEMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7YUFDakI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7YUFDakI7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7U0FDakI7SUFDSCxDQUFDO0lBRUQsMkJBQUssR0FBTDtRQUNFLE9BQU8sSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBQ0gsa0JBQUM7QUFBRCxDQUFDLEFBdkRELENBQWlDLEtBQUssR0F1RHJDIn0=

var StringOutput = (function () {
    function StringOutput(buffer) {
        if (buffer === void 0) { buffer = ''; }
        this.buffer = buffer;
    }
    StringOutput.prototype.isDone = function () {
        return false;
    };
    StringOutput.prototype.isFull = function () {
        return false;
    };
    StringOutput.prototype.push = function () {
        var cs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            cs[_i] = arguments[_i];
        }
        for (var i = 0, n = cs.length; i < n; i += 1) {
            var c = cs[i];
            if (typeof c === 'number') {
                if ((c >= 0x0000 && c <= 0xD7FF) || (c >= 0xE000 && c <= 0xFFFF)) {
                    this.buffer += String.fromCharCode(c);
                }
                else if (c >= 0x10000 && c <= 0x10FFFF) {
                    var u = c - 0x10000;
                    this.buffer += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));
                }
                else {
                    this.buffer += String.fromCharCode(0xFFFD);
                }
            }
            else if (typeof c === 'string') {
                var cs_1 = new StringInput(c);
                while (!cs_1.isEmpty()) {
                    this.push(cs_1.head());
                    cs_1.step();
                }
            }
        }
    };
    StringOutput.prototype.bind = function () {
        return this.buffer;
    };
    return StringOutput;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0cHV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsib3V0cHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFZcEM7SUFJRSxzQkFBWSxNQUFtQjtRQUFuQix1QkFBQSxFQUFBLFdBQW1CO1FBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCw2QkFBTSxHQUFOO1FBQ0UsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsNkJBQU0sR0FBTjtRQUNFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELDJCQUFJLEdBQUo7UUFBSyxZQUEwQjthQUExQixVQUEwQixFQUExQixxQkFBMEIsRUFBMUIsSUFBMEI7WUFBMUIsdUJBQTBCOztRQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUMsSUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUN6QixJQUFJLENBQUMsQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksTUFBTSxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsRUFBRTtvQkFDaEUsSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN2QztxQkFBTSxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLFFBQVEsRUFBRTtvQkFDeEMsSUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQztvQkFDdEIsSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztpQkFDL0U7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUM1QzthQUNGO2lCQUFNLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUNoQyxJQUFNLElBQUUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsT0FBTyxDQUFDLElBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztvQkFDckIsSUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUNYO2FBQ0Y7U0FDRjtJQUNILENBQUM7SUFFRCwyQkFBSSxHQUFKO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUF6Q0QsSUF5Q0MifQ==

var Item = (function () {
    function Item() {
    }
    Item.prototype.isDefined = function () {
        return true;
    };
    Item.prototype.isDistinct = function () {
        return true;
    };
    Item.prototype.isEmpty = function () {
        return false;
    };
    Item.prototype.stringValue = function (orElse) {
        return orElse;
    };
    Item.prototype.numberValue = function (orElse) {
        return orElse;
    };
    Item.prototype.booleanValue = function (orElse) {
        return orElse;
    };
    Item.prototype.concat = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = Item.empty();
        record.push(this);
        for (var i = 0, n = items.length; i < n; i += 1) {
            var item = Item.fromAny(items[i]);
            item.forEach(function (item) {
                record.push(item);
            });
        }
        return record;
    };
    Item.prototype.withField = function (key, newValue) {
        var record = Item.empty(2);
        record.push(this);
        return record.withField(key, newValue);
    };
    Item.prototype.withAttr = function (key, newValue) {
        var record = Item.empty(2);
        record.push(this);
        return record.withAttr(key, newValue);
    };
    Item.prototype.withSlot = function (key, newValue) {
        var record = Item.empty(2);
        record.push(this);
        return record.withSlot(key, newValue);
    };
    Item.prototype.withItem = function (newItem) {
        var record = Item.empty(2);
        record.push(this);
        return record.withItem(newItem);
    };
    Item.prototype.withItems = function () {
        var newItem = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItem[_i] = arguments[_i];
        }
        var record = Item.empty(1 + arguments.length);
        record.push(this);
        return record.withItems.apply(record, arguments);
    };
    Item.prototype.forEach = function (callback, thisArg) {
        return callback.call(thisArg, this, 0);
    };
    Item.prototype.iterator = function () {
        return new UnitCursor(this);
    };
    Item.prototype.lt = function (that) {
        that = Item.of(that);
        return this.compare(that) < 0 ? Item.True : Item.Absent;
    };
    Item.prototype.le = function (that) {
        that = Item.of(that);
        return this.compare(that) <= 0 ? Item.True : Item.Absent;
    };
    Item.prototype.eq = function (that) {
        that = Item.of(that);
        return this.equals(that) ? Item.True : Item.Absent;
    };
    Item.prototype.ne = function (that) {
        that = Item.of(that);
        return !this.equals(that) ? Item.True : Item.Absent;
    };
    Item.prototype.ge = function (that) {
        that = Item.of(that);
        return this.compare(that) >= 0 ? Item.True : Item.Absent;
    };
    Item.prototype.gt = function (that) {
        that = Item.of(that);
        return this.compare(that) > 0 ? Item.True : Item.Absent;
    };
    Item.prototype.filter = function (predicate) {
        var selector = Item.Selector.literal(this);
        return selector.filter.apply(selector, arguments);
    };
    Item.prototype.max = function (that) {
        return this.compare(that) >= 0 ? this : that;
    };
    Item.prototype.min = function (that) {
        return this.compare(that) <= 0 ? this : that;
    };
    Item.prototype.evaluate = function (stack) {
        return this;
    };
    Item.prototype.substitute = function (stack) {
        return this;
    };
    Object.defineProperty(Item.prototype, "precedence", {
        get: function () {
            return 11;
        },
        enumerable: true,
        configurable: true
    });
    Item.prototype.writeReconBlock = function (output) {
        return this.writeRecon(output);
    };
    Item.prototype.toRecon = function () {
        var output = new StringOutput();
        this.writeRecon(output);
        return output.bind();
    };
    Item.prototype.toReconBlock = function () {
        var output = new StringOutput();
        this.writeReconBlock(output);
        return output.bind();
    };
    Item.prototype.writeString = function (output) {
        output.push(this.toString());
    };
    Item.Recon = undefined;
    Item.Field = undefined;
    Item.Attr = undefined;
    Item.Slot = undefined;
    Item.Value = undefined;
    Item.Record = undefined;
    Item.Data = undefined;
    Item.Text = undefined;
    Item.Num = undefined;
    Item.Bool = undefined;
    Item.DynamicValue = undefined;
    Item.Selector = undefined;
    Item.IdentitySelector = undefined;
    Item.LiteralSelector = undefined;
    Item.GetSelector = undefined;
    Item.GetAttrSelector = undefined;
    Item.GetItemSelector = undefined;
    Item.KeysSelector = undefined;
    Item.ChildrenSelector = undefined;
    Item.DescendantsSelector = undefined;
    Item.FilterSelector = undefined;
    Item.Func = undefined;
    Item.Expr = undefined;
    Item.CondExpr = undefined;
    Item.LorExpr = undefined;
    Item.LandExpr = undefined;
    Item.BorExpr = undefined;
    Item.BxorExpr = undefined;
    Item.BandExpr = undefined;
    Item.LtExpr = undefined;
    Item.LeExpr = undefined;
    Item.EqExpr = undefined;
    Item.NeExpr = undefined;
    Item.GeExpr = undefined;
    Item.GtExpr = undefined;
    Item.AddExpr = undefined;
    Item.SubExpr = undefined;
    Item.MulExpr = undefined;
    Item.DivExpr = undefined;
    Item.ModExpr = undefined;
    Item.LnotExpr = undefined;
    Item.BnotExpr = undefined;
    Item.NegExpr = undefined;
    Item.PosExpr = undefined;
    Item.InvokeExpr = undefined;
    Item.Empty = undefined;
    Item.True = undefined;
    Item.False = undefined;
    Item.Extant = undefined;
    Item.Absent = undefined;
    Item.GlobalScope = undefined;
    Item.empty = undefined;
    Item.of = undefined;
    Item.fromAny = undefined;
    return Item;
}());

//# sourceMappingURL=data:application/json;base64,

var Value = (function (_super) {
    __extends(Value, _super);
    function Value() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Value.prototype, "key", {
        get: function () {
            return Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    Value.prototype.toValue = function () {
        return this;
    };
    Object.defineProperty(Value.prototype, "length", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Value.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Value.prototype, "target", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Value.prototype.flattened = function () {
        return this;
    };
    Value.prototype.header = function (tag) {
        return Value.Absent;
    };
    Value.prototype.headers = function (tag) {
        return undefined;
    };
    Value.prototype.head = function () {
        return Value.Absent;
    };
    Value.prototype.tail = function () {
        return Value.Empty;
    };
    Value.prototype.body = function () {
        return this;
    };
    Value.prototype.get = function (key) {
        return Value.Absent;
    };
    Value.prototype.getAttr = function (key) {
        return Value.Absent;
    };
    Value.prototype.getItem = function (index) {
        return Value.Absent;
    };
    Value.prototype.withoutKey = function (key) {
        return this;
    };
    Value.prototype.cond = function (thenTerm, elseTerm) {
        thenTerm = Item.of(thenTerm);
        return thenTerm;
    };
    Value.prototype.or = function (that) {
        return this;
    };
    Value.prototype.and = function (that) {
        that = Item.of(that);
        return that;
    };
    Value.prototype.bor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BorExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.bor(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.bor(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.bxor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BxorExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.bxor(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.bxor(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.band = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BandExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.band(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.band(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.lt = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.LtExpr(this, that);
        }
        return _super.prototype.lt.call(this, that);
    };
    Value.prototype.le = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.LeExpr(this, that);
        }
        return _super.prototype.le.call(this, that);
    };
    Value.prototype.eq = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.EqExpr(this, that);
        }
        return _super.prototype.eq.call(this, that);
    };
    Value.prototype.ne = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.NeExpr(this, that);
        }
        return _super.prototype.ne.call(this, that);
    };
    Value.prototype.ge = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.GeExpr(this, that);
        }
        return _super.prototype.ge.call(this, that);
    };
    Value.prototype.gt = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.GtExpr(this, that);
        }
        return _super.prototype.gt.call(this, that);
    };
    Value.prototype.plus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.AddExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.plus(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.plus(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.minus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.SubExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.minus(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.minus(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.times = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.MulExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.times(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.times(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.divide = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.DivExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.divide(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.divide(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.modulo = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.ModExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.modulo(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.modulo(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.not = function () {
        return Value.Absent;
    };
    Value.prototype.bnot = function () {
        return Value.Absent;
    };
    Value.prototype.neg = function () {
        return Value.Absent;
    };
    Value.prototype.pos = function () {
        return Value.Absent;
    };
    Value.prototype.inv = function () {
        return Value.Absent;
    };
    Value.prototype.isAliased = function () {
        return false;
    };
    Value.prototype.isMutable = function () {
        return false;
    };
    Value.prototype.alias = function () {
    };
    Value.prototype.branch = function () {
        return this;
    };
    Value.prototype.clone = function () {
        return this;
    };
    Value.prototype.commit = function () {
        return this;
    };
    Value.prototype.cast = function (form, orElse) {
        var object = form.cast(this);
        if (object === undefined) {
            object = orElse;
        }
        return object;
    };
    Value.prototype.coerce = function (form) {
        var object = form.cast(this);
        if (object === undefined) {
            object = form.unit;
        }
        return object;
    };
    Value.of = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        if (items.length === 0) {
            return Value.Absent;
        }
        else if (items.length === 1) {
            return Value.fromAny(items[0]);
        }
        else {
            return Value.Record.fromArray(arguments);
        }
    };
    Value.fromAny = function (value) {
        if (value === undefined) {
            return Value.Absent;
        }
        else if (value === null) {
            return Value.Extant;
        }
        else if (value instanceof Value) {
            return value;
        }
        else if (value instanceof Item) {
            return value.toValue();
        }
        else if (value instanceof Uint8Array) {
            return Value.Data.valueOf(value);
        }
        else if (typeof value === 'string') {
            return Value.Text.valueOf(value);
        }
        else if (typeof value === 'number') {
            return Value.Num.valueOf(value);
        }
        else if (typeof value === 'boolean') {
            return Value.Bool.valueOf(value);
        }
        else if (Array.isArray(value)) {
            return Value.Record.fromArray(value);
        }
        else if (typeof value === 'object') {
            return Value.Record.fromObject(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Value.parseRecon = function (input) {
        return Value.Recon.Factory.parseRecon(input);
    };
    Value.Empty = undefined;
    Value.True = undefined;
    Value.False = undefined;
    Value.Extant = undefined;
    Value.Absent = undefined;
    Value.empty = undefined;
    return Value;
}(Item));
Item.Value = Value;
Item.of = function () {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        items[_i] = arguments[_i];
    }
    if (items.length === 0) {
        return Value.Absent;
    }
    else if (items.length === 1) {
        return Item.fromAny(items[0]);
    }
    else {
        return Value.Record.fromArray(arguments);
    }
};
Item.fromAny = function (item) {
    if (item instanceof Item) {
        return item;
    }
    else {
        return Value.fromAny(item);
    }
};
//# sourceMappingURL=data:application/json;base64,

var Iteratee = (function () {
    function Iteratee() {
    }
    Iteratee.prototype.isCont = function () {
        return true;
    };
    Iteratee.prototype.isDone = function () {
        return false;
    };
    Iteratee.prototype.isError = function () {
        return false;
    };
    Iteratee.prototype.run = function (input) {
        var next = this;
        while (next.isCont() && (!input.isEmpty() || input.isDone())) {
            next = next.feed(input);
        }
        if (next.isCont() && input.isEmpty() && !input.isDone()) {
            next = next.feed(Input.done());
        }
        return next;
    };
    Iteratee.prototype.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = this.run(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    Iteratee.prototype.bind = function () {
        throw this;
    };
    Iteratee.prototype.trap = function () {
        throw this;
    };
    Iteratee.prototype.asVariant = function () {
        return this;
    };
    Iteratee.prototype.asError = function () {
        throw this;
    };
    Iteratee.done = function (value) {
        return new IterateeDone(value);
    };
    Iteratee.error = function (cause) {
        return new IterateeError(cause);
    };
    Iteratee.unexpected = function (input) {
        var message = 'unexpected ';
        if (!input.isEmpty()) {
            message += JSON.stringify(String.fromCharCode(input.head()));
        }
        else {
            message += 'end of input';
        }
        return Iteratee.error(message);
    };
    Iteratee.expected = function (expected, input) {
        if (typeof expected === 'number') {
            expected = String.fromCharCode(expected);
        }
        if (expected.length === 1) {
            expected = JSON.stringify(expected);
        }
        var message = 'expected ' + expected;
        if (!input.isEmpty()) {
            message += ', but found ' + JSON.stringify(String.fromCharCode(input.head()));
        }
        return Iteratee.error(message);
    };
    Iteratee.isSpace = function (c) {
        return c === 0x20 || c === 0x9;
    };
    Iteratee.isNewline = function (c) {
        return c === 0xA || c === 0xD;
    };
    Iteratee.isWhitespace = function (c) {
        return Iteratee.isSpace(c) || Iteratee.isNewline(c);
    };
    Iteratee.isAlpha = function (c) {
        return c >= 65 && c <= 90
            || c >= 97 && c <= 122;
    };
    Iteratee.toLowerCase = function (c) {
        if (c >= 65 && c <= 90) {
            return c + (97 - 65);
        }
        else {
            return c;
        }
    };
    Iteratee.isDigit = function (c) {
        return c >= 48 && c <= 57;
    };
    Iteratee.decodeDigit = function (c) {
        if (c >= 48 && c <= 57) {
            return c - 48;
        }
        else {
            throw c;
        }
    };
    Iteratee.isHexChar = function (c) {
        return c >= 65 && c <= 70
            || c >= 97 && c <= 102
            || c >= 48 && c <= 57;
    };
    Iteratee.decodeHexChar = function (c) {
        if (c >= 48 && c <= 57) {
            return c - 48;
        }
        else if (c >= 65 && c <= 70) {
            return 10 + (c - 65);
        }
        else if (c >= 97 && c <= 102) {
            return 10 + (c - 97);
        }
        else {
            throw c;
        }
    };
    Iteratee.isBase64Char = function (c) {
        return c >= 48 && c <= 57
            || c >= 65 && c <= 90
            || c >= 97 && c <= 122
            || c === 43 || c === 45
            || c === 47 || c === 95;
    };
    Iteratee.decodeBase64Digit = function (c) {
        if (c >= 65 && c <= 90) {
            return c - 65;
        }
        else if (c >= 97 && c <= 122) {
            return c - 71;
        }
        else if (c >= 48 && c <= 57) {
            return c + 4;
        }
        else if (c === 43 || c === 45) {
            return 62;
        }
        else if (c === 47 || c === 95) {
            return 63;
        }
        else {
            throw c;
        }
    };
    return Iteratee;
}());
var IterateeDone = (function (_super) {
    __extends(IterateeDone, _super);
    function IterateeDone(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    IterateeDone.prototype.isCont = function () {
        return false;
    };
    IterateeDone.prototype.isDone = function () {
        return true;
    };
    IterateeDone.prototype.feed = function (input) {
        return this;
    };
    IterateeDone.prototype.bind = function () {
        return this.value;
    };
    return IterateeDone;
}(Iteratee));
var IterateeError = (function (_super) {
    __extends(IterateeError, _super);
    function IterateeError(cause) {
        var _this = _super.call(this) || this;
        _this.cause = cause;
        return _this;
    }
    IterateeError.prototype.isCont = function () {
        return false;
    };
    IterateeError.prototype.isError = function () {
        return true;
    };
    IterateeError.prototype.feed = function (input) {
        return this;
    };
    IterateeError.prototype.bind = function () {
        throw this.cause;
    };
    IterateeError.prototype.trap = function () {
        return this.cause;
    };
    IterateeError.prototype.asError = function () {
        return this;
    };
    return IterateeError;
}(Iteratee));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlcmF0ZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpdGVyYXRlZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLEtBQUssRUFBRSxXQUFXLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFM0M7SUFBQTtJQThLQSxDQUFDO0lBN0tDLHlCQUFNLEdBQU47UUFDRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCx5QkFBTSxHQUFOO1FBQ0UsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsMEJBQU8sR0FBUDtRQUNFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUlELHNCQUFHLEdBQUgsVUFBSSxLQUFZO1FBQ2QsSUFBSSxJQUFJLEdBQWdCLElBQUksQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFO1lBQzVELElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3ZELElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsd0JBQUssR0FBTCxVQUFNLEtBQXFCO1FBQ3pCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLEtBQUssR0FBRyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoQztRQUNELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsSUFBSSxD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

var Data = (function (_super) {
    __extends(Data, _super);
    function Data(array, size, flags) {
        var _this = _super.call(this) || this;
        _this._array = array;
        _this._size = size;
        _this._flags = flags;
        return _this;
    }
    Object.defineProperty(Data.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    Data.prototype.isDone = function () {
        return false;
    };
    Data.prototype.isFull = function () {
        return false;
    };
    Data.prototype.push = function () {
        var bs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            bs[_i] = arguments[_i];
        }
        if ((this._flags & Data.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if ((this._flags & Data.ALIASED) !== 0) {
            this.pushAliased.apply(this, bs);
        }
        else {
            this.pushMutable.apply(this, bs);
        }
    };
    Data.prototype.pushAliased = function () {
        var bs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            bs[_i] = arguments[_i];
        }
        var bn = bs.length;
        var n = this._size;
        var oldArray = this._array;
        var newArray = new Uint8Array(Data.expand(n + bn));
        if (oldArray !== null) {
            newArray.set(oldArray);
        }
        for (var i = 0; i < bn; i += 1) {
            newArray[n + i] = bs[i];
        }
        this._array = newArray;
        this._size = n + bn;
        this._flags &= ~Data.ALIASED;
    };
    Data.prototype.pushMutable = function () {
        var bs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            bs[_i] = arguments[_i];
        }
        var bn = bs.length;
        var n = this._size;
        var oldArray = this._array;
        var newArray;
        if (oldArray === null || n + bn > oldArray.length) {
            newArray = new Uint8Array(Data.expand(n + bn));
            if (oldArray !== null) {
                newArray.set(oldArray);
            }
            this._array = newArray;
        }
        else {
            newArray = oldArray;
        }
        for (var i = 0; i < bn; i += 1) {
            newArray[n + i] = bs[i];
        }
        this._size = n + bn;
    };
    Data.prototype.isAliased = function () {
        return (this._flags & Data.ALIASED) !== 0;
    };
    Data.prototype.isMutable = function () {
        return (this._flags & Data.IMMUTABLE) === 0;
    };
    Data.prototype.alias = function () {
        this._flags |= Data.ALIASED;
    };
    Data.prototype.branch = function () {
        this._flags |= Data.ALIASED;
        return new Data(this._array, this._size, Data.ALIASED);
    };
    Data.prototype.clone = function () {
        return this.branch();
    };
    Data.prototype.commit = function () {
        this._flags |= Data.IMMUTABLE;
        return this;
    };
    Data.prototype.bind = function () {
        return this;
    };
    Data.prototype.toAny = function () {
        return this.valueOf();
    };
    Data.prototype.valueOf = function () {
        var n = this._size;
        var oldArray = this._array;
        if ((this._flags & (Data.ALIASED | Data.IMMUTABLE)) !== 0 || n !== oldArray.length) {
            var newArray = oldArray !== null ? oldArray.slice(0, n) : new Uint8Array(0);
            if ((this._flags & Data.IMMUTABLE) === 0) {
                this._array = newArray;
                this._size = n;
                this._flags &= ~Data.ALIASED;
            }
            return newArray;
        }
        return oldArray;
    };
    Data.prototype.writeRecon = function (output) {
        output.push(37);
        Data.writeBase64(this._array, this._size, output);
    };
    Data.writeBase64 = function (array, size, output) {
        var i = 0;
        while (i + 2 < size) {
            var x = array[i];
            var y = array[i + 1];
            var z = array[i + 2];
            output.push(Data.encodeBase64Digit(x >>> 2), Data.encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F), Data.encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F), Data.encodeBase64Digit(z & 0x3F));
            i += 3;
        }
        if (i + 1 < size) {
            var x = array[i];
            var y = array[i + 1];
            output.push(Data.encodeBase64Digit(x >>> 2), Data.encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F), Data.encodeBase64Digit((y << 2) & 0x3F), 61);
            i += 2;
        }
        else if (i < size) {
            var x = array[i];
            output.push(Data.encodeBase64Digit(x >>> 2), Data.encodeBase64Digit((x << 4) & 0x3F), 61, 61);
            i += 1;
        }
    };
    Data.prototype.toBase64 = function () {
        var output = new StringOutput();
        Data.writeBase64(this._array, this._size, output);
        return output.bind();
    };
    Data.prototype.compare = function (that) {
        if (that instanceof Data) {
            var xn = this._size;
            var yn = that._size;
            var xs = this._array;
            var ys = that._array;
            var order = 0;
            var i = 0;
            while (order === 0 && i < xn && i < yn) {
                order = xs[i] - ys[i];
                i += 1;
            }
            if (order > 0) {
                return 1;
            }
            else if (order < 0) {
                return -1;
            }
            else if (xn > yn) {
                return 1;
            }
            else if (xn < yn) {
                return -1;
            }
            else {
                return 0;
            }
        }
        else if (that instanceof Item.Field || that instanceof Item.Record) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Data.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Data) {
            var n = this._size;
            if (n !== that._size) {
                return false;
            }
            var xs = this._array;
            var ys = that._array;
            for (var i = 0; i < n; i += 1) {
                if (xs[i] !== ys[i]) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    Data.prototype.hashCode = function () {
        var h = 0x51FBE1BC;
        var xs = this._array;
        for (var i = 0, n = this._size; i < n; i += 1) {
            h = Murmur3.mix(h, xs[i]);
        }
        return Murmur3.mash(h);
    };
    Data.prototype.toString = function () {
        return this.toBase64();
    };
    Data.empty = function (initialCapacity) {
        if (initialCapacity === undefined) {
            return new Data(null, 0, 0);
        }
        else {
            return new Data(new Uint8Array(initialCapacity), 0, 0);
        }
    };
    Data.valueOf = function (array) {
        return new Data(array, array.length, Data.ALIASED);
    };
    Data.of = function (value) {
        if (value instanceof Data) {
            return value;
        }
        else if (value instanceof Uint8Array) {
            return Data.valueOf(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Data.base64 = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = Value.Recon.Factory.parseBase64(input);
        if (parser.isDone()) {
            if (!input.isEmpty()) {
                parser = Iteratee.unexpected(input);
            }
        }
        return parser.bind();
    };
    Data.expand = function (n) {
        n = Math.max(32, n) - 1;
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
        return n + 1;
    };
    Data.encodeBase64Digit = function (x) {
        if (x >= 0 && x < 26) {
            return x + 65;
        }
        else if (x >= 26 && x < 52) {
            return x + 71;
        }
        else if (x >= 52 && x < 62) {
            return x - 4;
        }
        else if (x === 62) {
            return 43;
        }
        else if (x === 63) {
            return 47;
        }
        else {
            throw x;
        }
    };
    Data.ALIASED = 1;
    Data.IMMUTABLE = 2;
    Data.Empty = new Data(null, 0, Data.ALIASED | Data.IMMUTABLE);
    return Data;
}(Value));
Item.Data = Data;
//# sourceMappingURL=data:application/json;base64,

var crypto = (typeof window !== 'undefined' &&
    (window.crypto || window.msCrypto));
function fillBytesCrypto(typedArray) {
    crypto.getRandomValues(typedArray);
}
function fillBytesMath(typedArray) {
    if (typedArray instanceof Int8Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = 128 - Math.round(Math.random() * 256);
        }
    }
    else if (typedArray instanceof Uint8Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = Math.round(Math.random() * 256);
        }
    }
    else if (typedArray instanceof Int16Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = 32768 - Math.round(Math.random() * 65536);
        }
    }
    else if (typedArray instanceof Uint16Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = Math.round(Math.random() * 65536);
        }
    }
    else if (typedArray instanceof Int32Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = 2147483648 - Math.round(Math.random() * 4294967296);
        }
    }
    else if (typedArray instanceof Uint32Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = Math.round(Math.random() * 4294967296);
        }
    }
    else {
        throw new TypeError('' + typedArray);
    }
}
var Random = {
    fillBytes: crypto ? fillBytesCrypto : fillBytesMath,
    generateId: function (size) {
        if (size === void 0) { size = 12; }
        var id = new Uint8Array(size);
        Random.fillBytes(id);
        var output = new StringOutput();
        Data.writeBase64(id, size, output);
        return output.bind();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmFuZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUV0QyxJQUFNLE1BQU0sR0FBRyxDQUNiLE9BQU8sTUFBTSxLQUFLLFdBQVc7SUFDN0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFLLE1BQWMsQ0FBQyxRQUFRLENBQUMsQ0FDaEIsQ0FBQztBQUU5QixTQUFTLGVBQWUsQ0FBQyxVQUVvQztJQUMzRCxNQUFPLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxVQUVvQztJQUN6RCxJQUFJLFVBQVUsWUFBWSxTQUFTLEVBQUU7UUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM3QyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZEO0tBQ0Y7U0FBTSxJQUFJLFVBQVUsWUFBWSxVQUFVLEVBQUU7UUFDM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM3QyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDakQ7S0FDRjtTQUFNLElBQUksVUFBVSxZQUFZLFVBQVUsRUFBRTtRQUMzQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7U0FDM0Q7S0FDRjtTQUFNLElBQUksVUFBVSxZQUFZLFdBQVcsRUFBRTtRQUM1QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztTQUNuRDtLQUNGO1NBQU0sSUFBSSxVQUFVLFlBQVksVUFBVSxFQUFFO1FBQzNDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0MsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQztTQUNyRTtLQUNGO1NBQU0sSUFBSSxVQUFVLFlBQVksV0FBVyxFQUFFO1FBQzVDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0MsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO1NBQ3hEO0tBQ0Y7U0FBTTtRQUNMLE1BQU0sSUFBSSxTQUFTLENBQUMsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO0tBQ3RDO0FBQ0gsQ0FBQztBQUdELE1BQU0sQ0FBQyxJQUFNLE1BQU0sR0FBRztJQUNwQixTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLGFBQWE7SUFFbkQsVUFBVSxFQUFWLFVBQVcsSUFBaUI7UUFBakIscUJBQUEsRUFBQSxTQUFpQjtRQUMxQixJQUFNLEVBQUUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCLElBQU0sTUFBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLE9BQU8sTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRixDQUFDIn0=

function equal(x, y) {
    if (x instanceof Date) {
        x = x.getTime();
    }
    if (y instanceof Date) {
        y = y.getTime();
    }
    if (x === y) {
        return true;
    }
    else if (x && typeof x === 'object' && typeof x.equals === 'function') {
        return x.equals(y);
    }
    else if (Array.isArray(x)) {
        if (Array.isArray(y)) {
            return equalArray(x, y);
        }
    }
    else if (x && typeof x === 'object') {
        if (y && typeof y === 'object') {
            return equalObject(x, y);
        }
    }
    return false;
}
function equalArray(x, y) {
    var n = x.length;
    if (n !== y.length) {
        return false;
    }
    for (var i = 0; i < n; i += 1) {
        if (!equal(x[i], y[i])) {
            return false;
        }
    }
    return true;
}
function equalObject(x, y) {
    var xKeys = Object.keys(x);
    var yKeys = Object.keys(y);
    var n = xKeys.length;
    if (n !== yKeys.length) {
        return false;
    }
    for (var i = 0; i < n; i += 1) {
        var key = xKeys[i];
        if (key !== yKeys[i] || !equal(x[key], y[key])) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXF1YWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlcXVhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFVBQVUsS0FBSyxDQUFDLENBQU0sRUFBRSxDQUFNO0lBQ2xDLElBQUksQ0FBQyxZQUFZLElBQUksRUFBRTtRQUNyQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ2pCO0lBQ0QsSUFBSSxDQUFDLFlBQVksSUFBSSxFQUFFO1FBQ3JCLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDakI7SUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDWCxPQUFPLElBQUksQ0FBQztLQUNiO1NBQU0sSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQVEsQ0FBUyxDQUFDLE1BQU0sS0FBSyxVQUFVLEVBQUU7UUFDaEYsT0FBUSxDQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzdCO1NBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQzNCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNwQixPQUFPLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDekI7S0FDRjtTQUFNLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUNyQyxJQUFJLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDOUIsT0FBTyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0tBQ0Y7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxDQUFRLEVBQUUsQ0FBUTtJQUNwQyxJQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBZ0IsQ0FBQztJQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQ2xCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxLQUFLLENBQUM7U0FDZDtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsQ0FBdUIsRUFBRSxDQUF1QjtJQUNuRSxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsSUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUN2QixJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ3RCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDN0IsSUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLElBQUksR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDOUMsT0FBTyxLQUFLLENBQUM7U0FDZDtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIn0=

function compare(x, y) {
    if (x instanceof Date) {
        x = x.getTime();
    }
    if (y instanceof Date) {
        y = y.getTime();
    }
    if (x === undefined) {
        if (y === undefined) {
            return 0;
        }
        else {
            return 1;
        }
    }
    else if (x === null) {
        if (y === undefined) {
            return -1;
        }
        else if (y === null) {
            return 0;
        }
        else {
            return 1;
        }
    }
    else if (typeof x === 'number') {
        if (y === undefined || y === null) {
            return -1;
        }
        else if (typeof y === 'number') {
            return x < y ? -1 : x > y ? 1 : 0;
        }
        else {
            return 1;
        }
    }
    else if (typeof x === 'string') {
        if (y === undefined || y === null || typeof y === 'number') {
            return -1;
        }
        else if (typeof y === 'string') {
            return x < y ? -1 : x > y ? 1 : 0;
        }
        else {
            return 1;
        }
    }
    else if (typeof x === 'object' && typeof x.compare === 'function') {
        return x.compare(y);
    }
    else if (Array.isArray(x)) {
        if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string') {
            return -1;
        }
        else if (Array.isArray(y)) {
            return compareArray(x, y);
        }
        else {
            return 1;
        }
    }
    else {
        if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' || Array.isArray(y)) {
            return -1;
        }
        else {
            return compareObject(x, y);
        }
    }
}
function compareArray(x, y) {
    var p = x.length;
    var q = y.length;
    var order = 0;
    for (var i = 0, n = Math.min(p, q); i < n && order === 0; i += 1) {
        order = compare(x[i], y[i]);
    }
    return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;
}
function compareObject(x, y) {
    var xKeys = Object.keys(x);
    var yKeys = Object.keys(y);
    var p = xKeys.length;
    var q = yKeys.length;
    var n = Math.min(p, q);
    var order = 0;
    for (var i = 0; i < n && order === 0; i += 1) {
        var xKey = xKeys[i];
        var yKey = yKeys[i];
        order = compare(xKey, yKey);
        if (order === 0) {
            order = compare(x[xKey], y[yKey]);
        }
    }
    return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbXBhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVLE9BQU8sQ0FBQyxDQUFNLEVBQUUsQ0FBTTtJQUNwQyxJQUFJLENBQUMsWUFBWSxJQUFJLEVBQUU7UUFDckIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNqQjtJQUNELElBQUksQ0FBQyxZQUFZLElBQUksRUFBRTtRQUNyQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ2pCO0lBRUQsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO1FBQ25CLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNuQixPQUFPLENBQUMsQ0FBQztTQUNWO2FBQU07WUFDTCxPQUFPLENBQUMsQ0FBQztTQUNWO0tBQ0Y7U0FBTSxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDckIsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ25CLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDWDthQUFNLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNyQixPQUFPLENBQUMsQ0FBQztTQUNWO2FBQU07WUFDTCxPQUFPLENBQUMsQ0FBQztTQUNWO0tBQ0Y7U0FBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUNoQyxJQUFJLENBQUMsS0FBSyxTQUFTLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNqQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ1g7YUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQzthQUFNO1lBQ0wsT0FBTyxDQUFD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

var EvalStack = (function () {
    function EvalStack(array, size, capacity) {
        if (array === void 0) { array = null; }
        if (size === void 0) { size = 0; }
        if (capacity === void 0) { capacity = EvalStack.Capacity; }
        this._array = array;
        this._size = size;
        this._capacity = capacity;
    }
    EvalStack.prototype.isEmpty = function () {
        return this._size === 0;
    };
    Object.defineProperty(EvalStack.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EvalStack.prototype, "capacity", {
        get: function () {
            return this._capacity;
        },
        enumerable: true,
        configurable: true
    });
    EvalStack.prototype.get = function (key) {
        key = Value.fromAny(key);
        var value = Value.Absent;
        for (var i = this._size - 1; i >= 0; i -= 1) {
            value = this._array[i].get(key);
            if (value.isDefined()) {
                break;
            }
        }
        return value;
    };
    EvalStack.prototype.peek = function () {
        var n = this._size;
        if (n > 0) {
            return this._array[n - 1];
        }
        else {
            return undefined;
        }
    };
    EvalStack.prototype.item = function () {
        var n = this._size;
        if (n > 0) {
            return this._array[n - 1];
        }
        else {
            throw new RangeError();
        }
    };
    EvalStack.prototype.getItem = function (index) {
        if (0 <= index && index < this._size) {
            return this._array[index];
        }
        else {
            throw new RangeError('' + index);
        }
    };
    EvalStack.prototype.offer = function (newItem) {
        var n = this._size;
        if (n < this._capacity) {
            var oldArray = this._array;
            var newArray = void 0;
            if (oldArray === null || n + 1 > oldArray.length) {
                newArray = new Array(EvalStack.expand(n + 1));
                if (oldArray !== null) {
                    for (var i = 0; i < n; i += 1) {
                        newArray[i] = oldArray[i];
                    }
                }
                this._array = newArray;
            }
            else {
                newArray = oldArray;
            }
            newArray[n] = newItem;
            this._size = n + 1;
            return true;
        }
        else {
            return false;
        }
    };
    EvalStack.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var n = this._size;
        var k = arguments.length;
        if (k === 0) {
            return n;
        }
        if (n + k < this._capacity) {
            var oldArray = this._array;
            var newArray = void 0;
            if (oldArray === null || n + k > oldArray.length) {
                newArray = new Array(EvalStack.expand(n + k));
                if (oldArray !== null) {
                    for (var i = 0; i < n; i += 1) {
                        newArray[i] = oldArray[i];
                    }
                }
            }
            else {
                newArray = oldArray;
            }
            for (var i = 0; i < k; i += 1) {
                newArray[n] = arguments[i];
                n += 1;
            }
            this._array = newArray;
            this._size = n;
            return n;
        }
        else {
            throw new RangeError('' + (n + k));
        }
    };
    EvalStack.prototype.replace = function (newItem) {
        var n = this._size;
        if (n > 0) {
            var array = this._array;
            var oldItem = array[n - 1];
            array[n - 1] = newItem;
            return oldItem;
        }
        else {
            throw new RangeError();
        }
    };
    EvalStack.prototype.poll = function () {
        var n = this._size;
        if (n > 0) {
            var array = this._array;
            var item = array[n - 1];
            array[n - 1] = undefined;
            this._size = n - 1;
            return item;
        }
        else {
            return undefined;
        }
    };
    EvalStack.prototype.pop = function () {
        var n = this._size;
        if (n > 0) {
            var array = this._array;
            var item = array[n - 1];
            array[n - 1] = undefined;
            this._size = n - 1;
            return item;
        }
        else {
            throw new RangeError();
        }
    };
    EvalStack.prototype.clear = function () {
        var array = this._array;
        for (var n = this._size - 1; n >= 0; n -= 1) {
            array[n] = undefined;
        }
        this._size = 0;
    };
    EvalStack.prototype.forEach = function (callback, thisArg) {
        var array = this._array;
        for (var i = 0, n = this._size; i < n; i += 1) {
            var result = callback.call(thisArg, array[i], i);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    EvalStack.prototype.iterator = function () {
        if (this._size > 0) {
            return new LeafCursor(this._array);
        }
        else {
            return Cursor.Empty;
        }
    };
    EvalStack.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof EvalStack) {
            var n = this._size;
            if (n !== that._size) {
                return false;
            }
            var xs = this._array;
            var ys = that._array;
            for (var i = 0; i < n; i += 1) {
                if (!xs[i].equals(ys[i])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    EvalStack.prototype.hashCode = function () {
        var code = 0x7BF6F35F;
        var array = this._array;
        for (var i = 0, n = this._size; i < n; i += 1) {
            code = Murmur3.mix(code, array[i].hashCode());
        }
        return Murmur3.mash(code);
    };
    EvalStack.prototype.toString = function () {
        var output = new StringOutput();
        output.push('EvalStack', 46, 'of', 40);
        var n = this._size;
        if (n > 0) {
            var array = this._array;
            array[0].writeString(output);
            for (var i = 1; i < n; i += 1) {
                output.push(', ');
                array[i].writeString(output);
            }
        }
        output.push(')');
        return output.bind();
    };
    EvalStack.of = function () {
        var objects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            objects[_i] = arguments[_i];
        }
        var n = arguments.length;
        var items = new Array(EvalStack.expand(n));
        for (var i = 0; i < n; i += 1) {
            var item = Item.fromAny(arguments[i]);
            items[i] = item;
        }
        return new EvalStack(items, n, Math.max(n, EvalStack.Capacity));
    };
    EvalStack.fromAny = function (stack, globalScope) {
        if (globalScope === void 0) { globalScope = EvalStack.GlobalScope; }
        if (!(stack instanceof EvalStack)) {
            var scope = Item.fromAny(stack);
            stack = new EvalStack();
            if (globalScope) {
                stack.push(globalScope);
            }
            stack.push(scope);
            return stack;
        }
        return stack;
    };
    EvalStack.expand = function (n) {
        n = Math.max(32, n) - 1;
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
        return n + 1;
    };
    EvalStack.Capacity = 1024;
    EvalStack.GlobalScope = undefined;
    return EvalStack;
}());

//# sourceMappingURL=data:application/json;base64,

var Field = (function (_super) {
    __extends(Field, _super);
    function Field() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Field.prototype.toValue = function () {
        return this.value;
    };
    Object.defineProperty(Field.prototype, "length", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "target", {
        get: function () {
            return Item.Absent;
        },
        enumerable: true,
        configurable: true
    });
    Field.prototype.flattened = function () {
        return Item.Absent;
    };
    Field.prototype.header = function (tag) {
        return Item.Absent;
    };
    Field.prototype.headers = function (tag) {
        return undefined;
    };
    Field.prototype.head = function () {
        return Item.Absent;
    };
    Field.prototype.tail = function () {
        return Item.Empty;
    };
    Field.prototype.body = function () {
        return Item.Absent;
    };
    Field.prototype.get = function (key) {
        return Item.Absent;
    };
    Field.prototype.getAttr = function (key) {
        return Item.Absent;
    };
    Field.prototype.getItem = function (index) {
        return Item.Absent;
    };
    Field.prototype.stringValue = function (orElse) {
        return this.value.stringValue(orElse);
    };
    Field.prototype.numberValue = function (orElse) {
        return this.value.numberValue(orElse);
    };
    Field.prototype.booleanValue = function (orElse) {
        return this.value.booleanValue(orElse);
    };
    Field.prototype.withoutKey = function (key) {
        return this;
    };
    Field.prototype.cond = function (thenTerm, elseTerm) {
        thenTerm = Item.of(thenTerm);
        return thenTerm;
    };
    Field.prototype.or = function (that) {
        return this;
    };
    Field.prototype.and = function (that) {
        that = Item.of(that);
        return that;
    };
    Field.prototype.isAliased = function () {
        return false;
    };
    Field.prototype.cast = function (form, orElse) {
        return this.value.cast(form, orElse);
    };
    Field.prototype.coerce = function (form) {
        return this.value.coerce(form);
    };
    Field.of = function (key, value) {
        var name;
        if (typeof key === 'string') {
            name = key;
        }
        else if (key instanceof Item.Text) {
            name = key.value;
        }
        if (name !== undefined && name.charCodeAt(0) === 64) {
            return Item.Attr.of.apply(undefined, arguments);
        }
        else {
            return Item.Slot.of.apply(undefined, arguments);
        }
    };
    Field.IMMUTABLE = 1;
    return Field;
}(Item));
Item.Field = Field;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmaWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFVLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQU9yQztJQUFvQyxpQ0FBSTtJQUF4Qzs7SUErSUEsQ0FBQztJQXRJQyx1QkFBTyxHQUFQO1FBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxzQkFBSSx5QkFBTTthQUFWO1lBQ0UsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHNCQUFHO2FBQVA7WUFDRSxPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHlCQUFNO2FBQVY7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFlLENBQUM7UUFDOUIsQ0FBQzs7O09BQUE7SUFFRCx5QkFBUyxHQUFUO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBZSxDQUFDO0lBQzlCLENBQUM7SUFFRCxzQkFBTSxHQUFOLFVBQU8sR0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxNQUFlLENBQUM7SUFDOUIsQ0FBQztJQUVELHVCQUFPLEdBQVAsVUFBUSxHQUFXO1FBQ2pCLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxvQkFBSSxHQUFKO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBZSxDQUFDO0lBQzlCLENBQUM7SUFFRCxvQkFBSSxHQUFKO1FBQ0UsT0FBTyxJQUFJLENBQUMsS0FBZSxDQUFDO0lBQzlCLENBQUM7SUFFRCxvQkFBSSxHQUFKO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBZSxDQUFDO0lBQzlCLENBQUM7SUFFRCxtQkFBRyxHQUFILFVBQUksR0FBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQWUsQ0FBQztJQUM5QixDQUFDO0lBRUQsdUJBQU8sR0FBUCxVQUFRLEdBQVk7UUFDbEIsT0FBTyxJQUFJLENBQUMsTUFBZSxDQUFDO0lBQzlC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

var Attr$1 = (function (_super) {
    __extends(Attr, _super);
    function Attr(key, value, flags) {
        if (value === void 0) { value = Value.Extant; }
        if (flags === void 0) { flags = 0; }
        var _this = _super.call(this) || this;
        _this._key = key;
        _this._value = value;
        _this._flags = flags;
        return _this;
    }
    Object.defineProperty(Attr.prototype, "key", {
        get: function () {
            return this._key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Attr.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Attr.prototype.setValue = function (newValue) {
        if ((this._flags & Field.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        var oldValue = this._value;
        this._value = newValue;
        return oldValue;
    };
    Attr.prototype.withValue = function (newValue) {
        return new Attr(this._key, newValue);
    };
    Attr.prototype.bor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BorExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.bor(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.bor(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.bxor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BxorExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.bxor(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.bxor(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.band = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BandExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.band(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.band(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.plus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.AddExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.plus(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.plus(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.minus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.SubExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.minus(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.minus(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.times = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.MulExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.times(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.times(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.divide = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.DivExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.divide(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.divide(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.modulo = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.ModExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.modulo(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.modulo(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.not = function () {
        var newValue = this._value.not();
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.bnot = function () {
        var newValue = this._value.bnot();
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.neg = function () {
        var newValue = this._value.neg();
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.pos = function () {
        var newValue = this._value.pos();
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.inv = function () {
        var newValue = this._value.inv();
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.evaluate(stack).toValue();
        var value = this._value.evaluate(stack).toValue();
        if (key === this._key && value === this._value) {
            return this;
        }
        else if (key.isDefined() && value.isDefined()) {
            if (key instanceof Item.Text) {
                return new Attr(key, value);
            }
            else {
                return new Item.Slot(key, value);
            }
        }
        return Item.Absent;
    };
    Attr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.substitute(stack).toValue();
        var value = this._value.substitute(stack).toValue();
        if (key === this._key && value === this._value) {
            return this;
        }
        else if (key.isDefined() && value.isDefined()) {
            if (key instanceof Item.Text) {
                return new Attr(key, value);
            }
            else {
                return new Item.Slot(key, value);
            }
        }
        return Item.Absent;
    };
    Attr.prototype.isMutable = function () {
        return (this._flags & Field.IMMUTABLE) === 0;
    };
    Attr.prototype.alias = function () {
        this._flags |= Field.IMMUTABLE;
    };
    Attr.prototype.branch = function () {
        if ((this._flags & Field.IMMUTABLE) !== 0) {
            return new Attr(this._key, this._value, this._flags & ~Field.IMMUTABLE);
        }
        else {
            return this;
        }
    };
    Attr.prototype.clone = function () {
        return new Attr(this._key.clone(), this._value.clone());
    };
    Attr.prototype.commit = function () {
        if ((this._flags & Field.IMMUTABLE) === 0) {
            this._flags |= Field.IMMUTABLE;
            this._value.commit();
        }
        return this;
    };
    Attr.prototype.writeRecon = function (output) {
        output.push(64);
        this._key.writeRecon(output);
        if (this._value !== Value.Extant) {
            output.push(40);
            this._value.writeReconBlock(output);
            output.push(41);
        }
    };
    Attr.prototype.compare = function (that) {
        if (that instanceof Attr) {
            var order = this._key.compare(that._key);
            if (order === 0) {
                order = this._value.compare(that._value);
            }
            return order;
        }
        else {
            return -1;
        }
    };
    Attr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Attr) {
            return this._key.equals(that._key) && this._value.equals(that._value);
        }
        return false;
    };
    Attr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x28F6E2E9, this._key.hashCode()), this._value.hashCode()));
    };
    Attr.prototype.toString = function () {
        return this.toRecon();
    };
    Attr.of = function (key, value) {
        key = Item.Text.of(key);
        value = (arguments.length === 2 ? Item.Value.of(value) : Item.Value.Extant);
        return new Attr(key, value);
    };
    return Attr;
}(Field));
Item.Attr = Attr$1;
//# sourceMappingURL=data:application/json;base64,

var Slot = (function (_super) {
    __extends(Slot, _super);
    function Slot(key, value, flags) {
        if (value === void 0) { value = Value.Extant; }
        if (flags === void 0) { flags = 0; }
        var _this = _super.call(this) || this;
        _this._key = key;
        _this._value = value;
        _this._flags = flags;
        return _this;
    }
    Object.defineProperty(Slot.prototype, "key", {
        get: function () {
            return this._key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slot.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Slot.prototype.setValue = function (newValue) {
        if ((this._flags & Field.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        var oldValue = this._value;
        this._value = newValue;
        return oldValue;
    };
    Slot.prototype.withValue = function (newValue) {
        return new Slot(this._key, newValue);
    };
    Slot.prototype.bor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BorExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.bor(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.bor(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.bxor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BxorExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.bxor(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.bxor(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.band = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BandExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.band(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.band(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.plus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.AddExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.plus(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.plus(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.minus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.SubExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.minus(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.minus(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.times = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.MulExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.times(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.times(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.divide = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.DivExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.divide(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.divide(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.modulo = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.ModExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.modulo(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.modulo(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.not = function () {
        var newValue = this._value.not();
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.bnot = function () {
        var newValue = this._value.bnot();
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.neg = function () {
        var newValue = this._value.neg();
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.pos = function () {
        var newValue = this._value.pos();
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.inv = function () {
        var newValue = this._value.inv();
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.evaluate(stack).toValue();
        var value = this._value.evaluate(stack).toValue();
        if (key === this._key && value === this._value) {
            return this;
        }
        else if (key.isDefined() && value.isDefined()) {
            return new Slot(key, value);
        }
        return Item.Absent;
    };
    Slot.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.substitute(stack).toValue();
        var value = this._value.substitute(stack).toValue();
        if (key === this._key && value === this._value) {
            return this;
        }
        else if (key.isDefined() && value.isDefined()) {
            return new Slot(key, value);
        }
        return Item.Absent;
    };
    Slot.prototype.isMutable = function () {
        return (this._flags & Field.IMMUTABLE) === 0;
    };
    Slot.prototype.alias = function () {
        this._flags |= Field.IMMUTABLE;
    };
    Slot.prototype.branch = function () {
        if ((this._flags & Field.IMMUTABLE) !== 0) {
            return new Slot(this._key, this._value, this._flags & ~Field.IMMUTABLE);
        }
        else {
            return this;
        }
    };
    Slot.prototype.clone = function () {
        return new Slot(this._key.clone(), this._value.clone());
    };
    Slot.prototype.commit = function () {
        if ((this._flags & Field.IMMUTABLE) === 0) {
            this._flags |= Field.IMMUTABLE;
            this._value.commit();
        }
        return this;
    };
    Slot.prototype.writeRecon = function (output) {
        this._key.writeRecon(output);
        output.push(58);
        if (this._value !== Item.Extant) {
            this._value.writeRecon(output);
        }
    };
    Slot.prototype.compare = function (that) {
        if (that instanceof Slot) {
            var order = this._key.compare(that._key);
            if (order === 0) {
                order = this._value.compare(that._value);
            }
            return order;
        }
        else if (that instanceof Item.Attr) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Slot.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Slot) {
            return this._key.equals(that._key) && this._value.equals(that._value);
        }
        return false;
    };
    Slot.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x49C62B31, this._key.hashCode()), this._value.hashCode()));
    };
    Slot.prototype.toString = function () {
        return this.toRecon();
    };
    Slot.of = function (key, value) {
        key = Item.Value.of(key);
        value = arguments.length === 2 ? Item.Value.of(value) : Item.Value.Extant;
        return new Slot(key, value);
    };
    return Slot;
}(Field));
Item.Slot = Slot;
//# sourceMappingURL=data:application/json;base64,

var RecordCursor = (function (_super) {
    __extends(RecordCursor, _super);
    function RecordCursor(record, lower, upper, index) {
        if (lower === void 0) { lower = 0; }
        if (upper === void 0) { upper = record.length; }
        if (index === void 0) { index = lower; }
        var _this = _super.call(this) || this;
        _this._record = record;
        _this._lower = lower;
        _this._upper = upper;
        _this._index = index;
        _this._direction = 0;
        return _this;
    }
    RecordCursor.prototype.isEmpty = function () {
        return this._index >= this._upper;
    };
    RecordCursor.prototype.head = function () {
        this._direction = 0;
        if (this._index < this._upper) {
            return this._record.getItem(this._index);
        }
        else {
            throw new Error('empty head');
        }
    };
    RecordCursor.prototype.step = function () {
        this._direction = 0;
        if (this._index < this._upper) {
            this._index += 1;
        }
        else {
            throw new Error('empty step');
        }
    };
    RecordCursor.prototype.skip = function (count) {
        this._index = Math.min(Math.max(this._lower, this._index + count, this._upper));
    };
    RecordCursor.prototype.hasNext = function () {
        return this._index < this._upper;
    };
    RecordCursor.prototype.nextIndex = function () {
        return this._index - this._lower;
    };
    RecordCursor.prototype.next = function () {
        this._direction = 1;
        var index = this._index;
        if (index < this._upper) {
            this._index = index + 1;
            return { value: this._record.getItem(index), done: this._index === this._upper };
        }
        else {
            this._index = this._upper;
            return { done: true };
        }
    };
    RecordCursor.prototype.hasPrevious = function () {
        return this._index > this._lower;
    };
    RecordCursor.prototype.previousIndex = function () {
        return this._index - this._lower - 1;
    };
    RecordCursor.prototype.previous = function () {
        this._direction = -1;
        var index = this._index - 1;
        if (index >= this._lower) {
            this._index = index;
            return { value: this._record.getItem(index), done: index === this._lower };
        }
        else {
            this._index = 0;
            return { done: true };
        }
    };
    RecordCursor.prototype.set = function (newItem) {
        if (this._direction > 0) {
            this._record.setItem(this._index - 1, newItem);
        }
        else {
            this._record.setItem(this._index, newItem);
        }
    };
    RecordCursor.prototype.delete = function () {
        if (this._direction > 0) {
            this._index -= 1;
        }
        this._record.splice(this._index, 1);
        this._direction = 0;
    };
    return RecordCursor;
}(Cursor));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkLWN1cnNvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlY29yZC1jdXJzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFHaEM7SUFBa0Msd0NBQVk7SUFPNUMsc0JBQVksTUFBYyxFQUFFLEtBQWlCLEVBQUUsS0FBNkIsRUFBRSxLQUFxQjtRQUF2RSxzQkFBQSxFQUFBLFNBQWlCO1FBQUUsc0JBQUEsRUFBQSxRQUFnQixNQUFNLENBQUMsTUFBTTtRQUFFLHNCQUFBLEVBQUEsYUFBcUI7UUFBbkcsWUFDRSxpQkFBTyxTQU1SO1FBTEMsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsS0FBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7O0lBQ3RCLENBQUM7SUFFRCw4QkFBTyxHQUFQO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDcEMsQ0FBQztJQUVELDJCQUFJLEdBQUo7UUFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNwQixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUM3QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMxQzthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFRCwyQkFBSSxHQUFKO1FBQ0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxJQUFJLENBQUMsTUFB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

var Record = (function (_super) {
    __extends(Record, _super);
    function Record() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Record.prototype.isArray = function () {
        return !this.forEach(function (item) {
            return item instanceof Item.Field ? true : undefined;
        }, this);
    };
    Record.prototype.isObject = function () {
        return !this.forEach(function (item) {
            return item instanceof Item.Value ? true : undefined;
        }, this);
    };
    Object.defineProperty(Record.prototype, "fieldCount", {
        get: function () {
            var count = 0;
            this.forEach(function (item) {
                if (item instanceof Item.Field) {
                    count += 1;
                }
            }, this);
            return count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "valueCount", {
        get: function () {
            var count = 0;
            this.forEach(function (item) {
                if (item instanceof Item.Value) {
                    count += 1;
                }
            }, this);
            return count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "tag", {
        get: function () {
            var head = this.head();
            if (head instanceof Item.Attr) {
                return head.key.value;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "target", {
        get: function () {
            return this.forEach(function (item) {
                return item instanceof Value ? item : undefined;
            }, this) || Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    Record.prototype.flattened = function () {
        var items = this.iterator();
        if (!items.isEmpty()) {
            var head = items.head();
            items.step();
            if (items.isEmpty() && head instanceof Value) {
                return head;
            }
            else {
                return this.branch();
            }
        }
        return Value.Extant;
    };
    Record.prototype.header = function (tag) {
        var head = this.head();
        if (head instanceof Item.Attr && head.key.value === tag) {
            return head.value;
        }
        return Value.Absent;
    };
    Record.prototype.headers = function (tag) {
        var head = this.head();
        if (head instanceof Item.Attr && head.key.value === tag) {
            var header = head.value;
            if (header instanceof Record) {
                return header;
            }
            else {
                return Record.of(header);
            }
        }
        return undefined;
    };
    Record.prototype.head = function () {
        return this.forEach(function (item) {
            return item;
        }, this) || Item.Absent;
    };
    Record.prototype.tail = function () {
        var tail = Record.empty();
        this.forEach(function (item, index) {
            if (index > 0) {
                tail.push(item);
            }
        }, this);
        return tail;
    };
    Record.prototype.body = function () {
        var items = this.iterator();
        if (!items.isEmpty()) {
            items.step();
            if (!items.isEmpty()) {
                var item = items.head();
                items.step();
                if (items.isEmpty()) {
                    if (!(item instanceof Item.Value)) {
                        item = Record.of(item);
                    }
                    return item;
                }
                else {
                    return this.tail().branch();
                }
            }
        }
        return Value.Absent;
    };
    Record.prototype.has = function (key) {
        key = Value.of(key);
        return this.forEach(function (item) {
            return item instanceof Item.Field && item.key.equals(key) ? true : undefined;
        }, this) || false;
    };
    Record.prototype.get = function (key) {
        key = Value.of(key);
        return this.forEach(function (item) {
            return item instanceof Item.Field && item.key.equals(key) ? item.value : undefined;
        }, this) || Value.Absent;
    };
    Record.prototype.getAttr = function (key) {
        key = Item.Text.of(key);
        return this.forEach(function (item) {
            return item instanceof Item.Attr && item.key.equals(key) ? item.value : undefined;
        }, this) || Value.Absent;
    };
    Record.prototype.getField = function (key) {
        key = Value.of(key);
        return this.forEach(function (item) {
            return item instanceof Item.Field && item.key.equals(key) ? item : undefined;
        }, this);
    };
    Record.prototype.set = function (key, newValue) {
        key = Value.of(key);
        newValue = Value.of(newValue);
        var items = this.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item instanceof Item.Field && item.key.equals(key)) {
                if (item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(item.withValue(newValue));
                }
                return this;
            }
            items.step();
        }
        var field = new Item.Slot(key, newValue);
        this.push(field);
        return this;
    };
    Record.prototype.setAttr = function (key, newValue) {
        key = Item.Text.of(key);
        newValue = Value.of(newValue);
        var items = this.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item instanceof Item.Field && item.key.equals(key)) {
                if (item instanceof Item.Attr && item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(new Item.Attr(key, newValue));
                }
                return this;
            }
            items.step();
        }
        var field = new Item.Attr(key, newValue);
        this.push(field);
        return this;
    };
    Record.prototype.concat = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = this.branch();
        for (var i = 0, n = items.length; i < n; i += 1) {
            var item = Item.fromAny(items[i]);
            item.forEach(function (item) {
                record.push(item);
            }, this);
        }
        return record;
    };
    Record.prototype.withField = function (key, newValue) {
        key = Value.of(key);
        newValue = Value.of(newValue);
        var record = this.isMutable() ? this : this.branch();
        var items = record.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item.key.equals(key)) {
                if (item instanceof Item.Field && item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(Item.Slot.of(key, newValue));
                }
                return record;
            }
            items.step();
        }
        var field = Item.Slot.of(key, newValue);
        record.push(field);
        return record;
    };
    Record.prototype.withAttr = function (key, newValue) {
        key = Item.Text.of(key);
        newValue = Value.of(newValue);
        var record = this.isMutable() ? this : this.branch();
        var items = record.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item.key.equals(key)) {
                if (item instanceof Item.Attr && item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(Item.Attr.of(key, newValue));
                }
                return record;
            }
            items.step();
        }
        var field = Item.Attr.of(key, newValue);
        record.push(field);
        return record;
    };
    Record.prototype.withSlot = function (key, newValue) {
        key = Value.of(key);
        newValue = Value.of(newValue);
        var record = this.isMutable() ? this : this.branch();
        var items = record.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item.key.equals(key)) {
                if (item instanceof Item.Slot && item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(Item.Slot.of(key, newValue));
                }
                return record;
            }
            items.step();
        }
        var field = Item.Slot.of(key, newValue);
        record.push(field);
        return record;
    };
    Record.prototype.withItem = function (newItem) {
        var record = this.isMutable() ? this : this.branch();
        record.push(newItem);
        return record;
    };
    Record.prototype.withItems = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var record = this.isMutable() ? this : this.branch();
        record.push.apply(record, arguments);
        return record;
    };
    Record.prototype.withoutKey = function (key) {
        var record = this.isMutable() ? this : this.branch();
        record.delete(key);
        return record;
    };
    Record.prototype.slice = function (lower, upper) {
        return this.subRecord.apply(this, arguments).branch();
    };
    Record.prototype.subRecord = function (lower, upper) {
        var n = this.length;
        if (lower === undefined) {
            lower = 0;
        }
        else if (lower < 0) {
            lower = n + lower;
        }
        lower = Math.min(Math.max(0, lower), n);
        if (upper === undefined) {
            upper = n;
        }
        else if (upper < 0) {
            upper = n + upper;
        }
        var record = Record.empty();
        this.forEach(function (item, index) {
            if (index < lower) {
                return undefined;
            }
            else if (index < upper) {
                record.push(item);
                return undefined;
            }
            else {
                return null;
            }
        }, this);
        return record;
    };
    Record.prototype.attr = function (key, value) {
        this.push(Item.Attr.of.apply(undefined, arguments));
        return this;
    };
    Record.prototype.slot = function (key, value) {
        this.push(Item.Slot.of.apply(undefined, arguments));
        return this;
    };
    Record.prototype.item = function (item) {
        this.push(Item.fromAny(item));
        return this;
    };
    Record.prototype.items = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        this.push.apply(this, arguments);
        return this;
    };
    Record.prototype.iterator = function () {
        return new RecordCursor(this);
    };
    Record.prototype.indexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        item = Item.of(item);
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.max(0, index);
        var found = -1;
        this.forEach(function (it, i) {
            if (i >= index && it.equals(item)) {
                found = i;
                return null;
            }
            return undefined;
        }, this);
        return found;
    };
    Record.prototype.lastIndexOf = function (item, index) {
        item = Item.of(item);
        var n = this.length;
        if (index === undefined) {
            index = n - 1;
        }
        else if (index < 0) {
            index = n + index;
        }
        index = Math.min(index, n - 1);
        var found = -1;
        this.forEach(function (it, i) {
            if (i > index) {
                return null;
            }
            else if (it.equals(item)) {
                found = i;
            }
            return undefined;
        }, this);
        return found;
    };
    Record.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var record = Record.empty();
        stack.push(record);
        var changed = false;
        this.forEach(function (oldItem) {
            var newItem = oldItem.evaluate(stack);
            if (newItem.isDefined()) {
                record.push(newItem);
            }
            changed = changed || oldItem !== newItem;
        }, this);
        stack.pop();
        return changed ? record : this;
    };
    Record.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var record = Record.empty();
        stack.push(record);
        var changed = false;
        this.forEach(function (oldItem) {
            var newItem = oldItem.substitute(stack);
            if (newItem.isDefined()) {
                record.push(newItem);
            }
            changed = changed || oldItem !== newItem;
        }, this);
        stack.pop();
        return changed ? record : this;
    };
    Record.prototype.isAliased = function () {
        return false;
    };
    Record.prototype.isMutable = function () {
        return true;
    };
    Record.prototype.alias = function () {
    };
    Record.prototype.branch = function () {
        var branch = Record.empty();
        this.forEach(function (item) {
            branch.push(item);
        }, this);
        return branch;
    };
    Record.prototype.clone = function () {
        var clone = Record.empty();
        this.forEach(function (item) {
            clone.push(item.clone());
        }, this);
        return clone;
    };
    Record.prototype.commit = function () {
        return this;
    };
    Record.prototype.toAny = function () {
        if (!this.isEmpty() && this.isArray()) {
            return this.toArray();
        }
        else {
            return this.toObject();
        }
    };
    Record.prototype.toArray = function () {
        var array = new Array(this.length);
        this.forEach(function (item, index) {
            if (item instanceof Item.Value) {
                array[index] = item.toAny();
            }
            else if (item instanceof Item.Field) {
                array[index] = {
                    $key: item.key.toAny(),
                    $value: item.value.toAny(),
                };
            }
        }, this);
        return array;
    };
    Record.prototype.toObject = function () {
        var object = {};
        this.forEach(function (item, index) {
            if (item instanceof Item.Attr) {
                object['@' + item.key.value] = item.value.toAny();
            }
            else if (item instanceof Item.Slot) {
                if (item.key instanceof Item.Text) {
                    object[item.key.value] = item.value.toAny();
                }
                else {
                    object['$' + index] = {
                        $key: item.key.toAny(),
                        $value: item.value.toAny(),
                    };
                }
            }
            else if (item instanceof Item.Value) {
                object['$' + index] = item.toAny();
            }
        }, this);
        return object;
    };
    Record.prototype.stringValue = function (orElse) {
        var str = '';
        var valid = this.forEach(function (item) {
            if (item instanceof Item.Value) {
                var s = item.stringValue();
                if (s !== undefined) {
                    str += s;
                    return undefined;
                }
            }
            return null;
        }, this) === undefined;
        return valid ? str : undefined;
    };
    Record.prototype.bind = function () {
        return this;
    };
    Record.prototype.isBlockSafe = function () {
        return this.forEach(function (item) {
            return item instanceof Item.Attr ? false : undefined;
        }, this) === undefined;
    };
    Record.prototype.isMarkupSafe = function () {
        var count = 0;
        var foo = this.forEach(function (item, index) {
            count += 1;
            if (index === 0) {
                if (!(item instanceof Item.Attr)) {
                    return false;
                }
            }
            else if (item instanceof Item.Attr) {
                return false;
            }
            return undefined;
        }, this) === undefined && count > 0;
        return foo;
    };
    Record.prototype.writeRecon = function (output) {
        var items = this.iterator();
        if (!items.isEmpty()) {
            Record.writeItems(items, false, false, output);
        }
        else {
            output.push(123, 125);
        }
    };
    Record.prototype.writeReconBlock = function (output) {
        var items = this.iterator();
        if (!items.isEmpty()) {
            Record.writeItems(items, this.isBlockSafe(), false, output);
        }
        else {
            output.push(123, 125);
        }
    };
    Record.writeItems = function (items, inBlock, inMarkup, output) {
        var inBraces = false;
        var inBrackets = false;
        var first = true;
        var markupSafe = true;
        while (!items.isEmpty()) {
            var item = items.head();
            if (item instanceof Item.Expr || item instanceof Item.Selector) {
                markupSafe = false;
            }
            items.step();
            if (inBrackets && item instanceof Item.Attr) {
                if (inBraces) {
                    output.push(125);
                    inBraces = false;
                }
                output.push(93);
                inBrackets = false;
            }
            if (item instanceof Item.Attr) {
                if (inBraces) {
                    output.push(125);
                    inBraces = false;
                }
                else if (inBrackets) {
                    output.push(93);
                    inBrackets = false;
                }
                item.writeRecon(output);
                first = false;
            }
            else if (inBrackets && item instanceof Item.Text) {
                if (inBraces) {
                    output.push(125);
                    inBraces = false;
                }
                Item.Text.writeMarkup(item.value, output);
            }
            else if (inBraces) {
                if (!first) {
                    output.push(44);
                }
                else {
                    first = false;
                }
                item.writeRecon(output);
            }
            else if (inBrackets) {
                if (item instanceof Record && item.isMarkupSafe()) {
                    Record.writeItems(item.iterator(), false, true, output);
                    if (!items.isEmpty() && items.head() instanceof Item.Text) {
                        Item.Text.writeMarkup(items.head().stringValue(), output);
                        items.step();
                    }
                    else if (!items.isEmpty() && !(items.head() instanceof Item.Attr)) {
                        output.push(123);
                        inBraces = true;
                        first = true;
                    }
                    else {
                        output.push(93);
                        inBrackets = false;
                    }
                }
                else {
                    output.push(123);
                    item.writeRecon(output);
                    inBraces = true;
                    first = false;
                }
            }
            else if (markupSafe && item instanceof Item.Text && !items.isEmpty()
                && !(items.head() instanceof Item.Field) && !(items.head() instanceof Item.Text)
                && !(items.head() instanceof Item.Bool)) {
                output.push(91);
                Item.Text.writeMarkup(item.value, output);
                inBrackets = true;
            }
            else if (inBlock && !inBraces) {
                if (!first) {
                    output.push(44);
                }
                else {
                    first = false;
                }
                item.writeRecon(output);
            }
            else if (inMarkup && item instanceof Item.Text && items.isEmpty()) {
                output.push(91);
                Item.Text.writeMarkup(item.value, output);
                output.push(93);
            }
            else if (!inMarkup && item instanceof Value && !(item instanceof Record)
                && (!first && items.isEmpty() || !items.isEmpty() && items.head() instanceof Item.Attr)) {
                if (!first && (item instanceof Item.Text && item.isIdent()
                    || item instanceof Item.Num || item instanceof Item.Bool)) {
                    output.push(32);
                }
                item.writeRecon(output);
            }
            else {
                output.push(123);
                item.writeRecon(output);
                inBraces = true;
                first = false;
            }
        }
        if (inBraces) {
            output.push(125);
        }
        if (inBrackets) {
            output.push(93);
        }
    };
    Record.prototype.compare = function (that) {
        if (that instanceof Record) {
            var xs = this.iterator();
            var ys = that.iterator();
            var order = 0;
            while (order === 0 && !xs.isEmpty() && !ys.isEmpty()) {
                order = xs.head().compare(ys.head());
                xs.step();
                ys.step();
            }
            if (order !== 0) {
                return order;
            }
            else if (xs.isEmpty() && !ys.isEmpty()) {
                return -1;
            }
            else if (!xs.isEmpty() && ys.isEmpty()) {
                return 1;
            }
            else {
                return 0;
            }
        }
        else if (that instanceof Item.Field) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Record.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Record) {
            var xs = this.iterator();
            var ys = that.iterator();
            while (!xs.isEmpty() && !ys.isEmpty()) {
                if (!xs.head().equals(ys.head())) {
                    return false;
                }
                xs.step();
                ys.step();
            }
            return xs.isEmpty() === ys.isEmpty();
        }
        return false;
    };
    Record.prototype.hashCode = function () {
        var h = 0xCABD5F87;
        this.forEach(function (item) {
            h = Murmur3.mix(h, item.hashCode());
        }, this);
        return Murmur3.mash(h);
    };
    Record.prototype.toString = function () {
        return this.toRecon();
    };
    Record.fromAny = function (value) {
        if (value instanceof Record) {
            return value;
        }
        else if (Array.isArray(value)) {
            return Record.fromArray(value);
        }
        else if (typeof value === 'object') {
            return Record.fromObject(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Record.fromArray = function (array) {
        var n = array.length || 0;
        var record = Record.empty(n);
        for (var i = 0; i < n; i += 1) {
            record.push(Item.fromAny(array[i]));
        }
        return record;
    };
    Record.fromObject = function (object) {
        var record = Record.empty();
        var i = 0;
        for (var key in object) {
            var value = object[key];
            if (key.charCodeAt(0) === 36 && key === '$' + i) {
                if (!value || typeof value !== 'object' || !value.hasOwnProperty('$key')) {
                    record.push(Value.of(value));
                }
                else {
                    record.push(Item.Field.of(value.$key, value.$value));
                }
            }
            else {
                record.push(Item.Field.of(key, value));
            }
            i += 1;
        }
        return record;
    };
    Record.parseRecon = function (input) {
        var value = Value.parseRecon(input);
        if (value instanceof Record) {
            return value;
        }
        else if (value.isDefined()) {
            return Record.of(value);
        }
        else {
            return Record.empty();
        }
    };
    Record.expand = function (n) {
        n = Math.max(8, n) - 1;
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
        return n + 1;
    };
    Record.ALIASED = 1;
    Record.IMMUTABLE = 2;
    Record.Empty = undefined;
    Record.empty = undefined;
    Record.of = undefined;
    return Record;
}(Value));
Item.Record = Record;
//# sourceMappingURL=data:application/json;base64,

var RecordMap = (function (_super) {
    __extends(RecordMap, _super);
    function RecordMap(array, table, itemCount, fieldCount, flags) {
        var _this = _super.call(this) || this;
        _this._array = array;
        _this._table = table;
        _this._itemCount = itemCount;
        _this._fieldCount = fieldCount;
        _this._flags = flags;
        return _this;
    }
    RecordMap.prototype.isEmpty = function () {
        return this._itemCount === 0;
    };
    RecordMap.prototype.isArray = function () {
        return this._fieldCount === 0;
    };
    RecordMap.prototype.isObject = function () {
        return this._itemCount === this._fieldCount;
    };
    Object.defineProperty(RecordMap.prototype, "length", {
        get: function () {
            return this._itemCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMap.prototype, "size", {
        get: function () {
            return this._itemCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMap.prototype, "fieldCount", {
        get: function () {
            return this._itemCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMap.prototype, "valueCount", {
        get: function () {
            return this._itemCount - this._fieldCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMap.prototype, "tag", {
        get: function () {
            if (this._fieldCount > 0) {
                var head = this._array[0];
                if (head instanceof Item.Attr) {
                    return head.key.value;
                }
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMap.prototype, "target", {
        get: function () {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Value) {
                    return item;
                }
            }
            return this;
        },
        enumerable: true,
        configurable: true
    });
    RecordMap.prototype.head = function () {
        if (this._itemCount > 0) {
            return this._array[0];
        }
        return Value.Absent;
    };
    RecordMap.prototype.tail = function () {
        var n = this._itemCount;
        if (n > 0) {
            return new RecordMap.View(this, 1, n);
        }
        else {
            return Record.Empty;
        }
    };
    RecordMap.prototype.body = function () {
        var n = this._itemCount;
        if (n > 2) {
            return new RecordMap.View(this, 1, n).branch();
        }
        else if (n === 2) {
            var item = this._array[1];
            if (!(item instanceof Item.Value)) {
                item = Record.of(item);
            }
            return item;
        }
        return Value.Absent;
    };
    RecordMap.prototype.has = function (key) {
        if (this._fieldCount > 0) {
            key = Value.of(key);
            this.hash();
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== undefined) {
                    if (field.key.equals(key)) {
                        return true;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return false;
    };
    RecordMap.prototype.get = function (key) {
        if (this._fieldCount > 0) {
            key = Value.of(key);
            this.hash();
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== undefined) {
                    if (field.key.equals(key)) {
                        return field.value;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return Value.Absent;
    };
    RecordMap.prototype.getAttr = function (key) {
        if (this._fieldCount > 0) {
            key = Item.Text.of(key);
            this.hash();
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== undefined) {
                    if (field instanceof Item.Attr && field.key.equals(key)) {
                        return field.value;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return Value.Absent;
    };
    RecordMap.prototype.getField = function (key) {
        if (this._fieldCount > 0) {
            key = Value.of(key);
            this.hash();
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== undefined) {
                    if (field.key.equals(key)) {
                        return field;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return undefined;
    };
    RecordMap.prototype.getItem = function (index) {
        if (index instanceof Item.Num) {
            index = index.value;
        }
        var n = this._itemCount;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            return this._array[index];
        }
        return Item.Absent;
    };
    RecordMap.prototype.set = function (key, newValue) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        key = Value.of(key);
        newValue = Value.of(newValue);
        if ((this._flags & Record.ALIASED) !== 0) {
            if (this._fieldCount > 0) {
                this.setAliased(key, newValue);
            }
            else {
                this.pushAliased(new Item.Slot(key, newValue));
            }
        }
        else {
            if (this._fieldCount > 0) {
                if (this._table !== null) {
                    this.setMutable(key, newValue);
                }
                else {
                    this.putMutable(key, newValue);
                }
            }
            else {
                this.pushMutable(new Item.Slot(key, newValue));
            }
        }
        return this;
    };
    RecordMap.prototype.setAliased = function (key, newValue) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n + 1));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                newArray[i] = item.withValue(newValue);
                i += 1;
                while (i < n) {
                    newArray[i] = oldArray[i];
                    i += 1;
                }
                this._array = newArray;
                this._table = null;
                this._flags &= ~Record.ALIASED;
                return;
            }
            newArray[i] = item;
        }
        this._array = newArray;
        this._table = null;
        this._flags &= ~Record.ALIASED;
        var field = new Item.Slot(key, newValue);
        this.pushMutable(field);
    };
    RecordMap.prototype.setMutable = function (key, newValue) {
        var table = this._table;
        var n = table.length;
        var x = Math.abs(key.hashCode() % n);
        var i = x;
        do {
            var field_1 = table[i];
            if (field_1 !== undefined) {
                if (field_1.key.equals(key)) {
                    if (field_1.isMutable()) {
                        field_1.setValue(newValue);
                        return;
                    }
                    else {
                        this.putMutable(key, newValue);
                        return;
                    }
                }
            }
            else {
                break;
            }
            i = (i + 1) % n;
        } while (i !== x);
        var field = new Item.Slot(key, newValue);
        this.pushMutable(field);
        RecordMap.put(field, table);
    };
    RecordMap.prototype.putMutable = function (key, newValue) {
        var array = this._array;
        for (var i = 0, n = this._itemCount; i < n; i += 1) {
            var item = array[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                array[i] = item.withValue(newValue);
                this._table = null;
                return;
            }
        }
        var field = new Item.Slot(key, newValue);
        this.pushMutable(field);
        RecordMap.put(field, this._table);
    };
    RecordMap.prototype.setAttr = function (key, newValue) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        key = Item.Text.of(key);
        newValue = Value.of(newValue);
        if ((this._flags & Record.ALIASED) !== 0) {
            if (this._fieldCount > 0) {
                this.setAttrAliased(key, newValue);
            }
            else {
                this.pushAliased(new Item.Attr(key, newValue));
            }
        }
        else {
            if (this._fieldCount > 0) {
                if (this._table !== null) {
                    this.setAttrMutable(key, newValue);
                }
                else {
                    this.putAttrMutable(key, newValue);
                }
            }
            else {
                this.pushMutable(new Item.Attr(key, newValue));
            }
        }
        return this;
    };
    RecordMap.prototype.setAttrAliased = function (key, newValue) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n + 1));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                newArray[i] = Item.Attr.of(key, newValue);
                i += 1;
                while (i < n) {
                    newArray[i] = oldArray[i];
                    i += 1;
                }
                this._array = newArray;
                this._table = null;
                this._flags &= ~Record.ALIASED;
                return;
            }
            newArray[i] = item;
        }
        newArray[n] = Item.Attr.of(key, newValue);
        this._array = newArray;
        this._table = null;
        this._itemCount = n + 1;
        this._fieldCount += 1;
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.setAttrMutable = function (key, newValue) {
        var table = this._table;
        var n = table.length;
        var x = Math.abs(key.hashCode() % n);
        var i = x;
        do {
            var field_2 = table[i];
            if (field_2 !== undefined) {
                if (field_2.key.equals(key)) {
                    if (field_2 instanceof Item.Attr && field_2.isMutable()) {
                        field_2.setValue(newValue);
                    }
                    else {
                        this.putAttrMutable(key, newValue);
                    }
                    return;
                }
            }
            else {
                break;
            }
            i = (i + 1) % n;
        } while (i !== x);
        var field = Item.Attr.of(key, newValue);
        this.push(field);
        RecordMap.put(field, table);
    };
    RecordMap.prototype.putAttrMutable = function (key, newValue) {
        var array = this._array;
        var n = this._itemCount;
        for (var i = 0; i < n; i += 1) {
            var item = array[i];
            if (item.key.equals(key)) {
                array[i] = Item.Attr.of(key, newValue);
                this._table = null;
                return;
            }
        }
        var field = Item.Attr.of(key, newValue);
        this.push(field);
        RecordMap.put(field, this._table);
    };
    RecordMap.prototype.setItem = function (index, newItem) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if (index instanceof Item.Num) {
            index = index.value;
        }
        newItem = Item.of(newItem);
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            if ((this._flags & Record.ALIASED) !== 0) {
                this.setIndexAliased(index, newItem);
            }
            else {
                this.setIndexMutable(index, newItem);
            }
        }
        return this;
    };
    RecordMap.prototype.setIndexAliased = function (index, newItem) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n));
        for (var i = 0; i < n; i += 1) {
            newArray[i] = oldArray[i];
        }
        var oldItem = oldArray[index];
        newArray[index] = newItem;
        this._array = newArray;
        this._table = null;
        if (newItem instanceof Item.Field) {
            if (!(oldItem instanceof Item.Field)) {
                this._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._fieldCount -= 1;
        }
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.setIndexMutable = function (index, newItem) {
        var array = this._array;
        var oldItem = array[index];
        array[index] = newItem;
        if (newItem instanceof Item.Field) {
            this._table = null;
            if (!(oldItem instanceof Item.Field)) {
                this._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._table = null;
            this._fieldCount -= 1;
        }
    };
    RecordMap.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if ((this._flags & Record.ALIASED) !== 0) {
            this.pushAliased.apply(this, arguments);
        }
        else {
            this.pushMutable.apply(this, arguments);
        }
        return this._itemCount;
    };
    RecordMap.prototype.pushAliased = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(m + k));
        if (oldArray !== null) {
            for (var i = 0; i < m; i += 1) {
                newArray[i] = oldArray[i];
            }
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[m] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._array = newArray;
        this._table = null;
        this._itemCount = m;
        this._fieldCount = n;
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.pushMutable = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray;
        if (oldArray === null || m + k > oldArray.length) {
            newArray = new Array(Record.expand(m + k));
            if (oldArray !== null) {
                for (var i = 0; i < m; i += 1) {
                    newArray[i] = oldArray[i];
                }
            }
        }
        else {
            newArray = oldArray;
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[m] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
                this._table = null;
            }
        }
        this._array = newArray;
        this._itemCount = m;
        this._fieldCount = n;
    };
    RecordMap.prototype.splice = function (start, deleteCount) {
        if (deleteCount === void 0) { deleteCount = 0; }
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        var n = this._itemCount;
        if (start < 0) {
            start = n + start;
        }
        start = Math.min(Math.max(0, start), n);
        deleteCount = Math.min(Math.max(0, deleteCount), n - start);
        if ((this._flags & Record.ALIASED) !== 0) {
            return this.spliceAliased.apply(this, arguments);
        }
        else {
            return this.spliceMutable.apply(this, arguments);
        }
    };
    RecordMap.prototype.spliceAliased = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(m - deleteCount + k));
        for (var i = 0; i < start; i += 1) {
            newArray[i] = oldArray[i];
        }
        var oldItems = [];
        for (var i = start; i < start + deleteCount; i += 1) {
            var oldItem = oldArray[i];
            oldItems.push(oldItem);
            m -= 1;
            if (oldItem instanceof Item.Field) {
                n -= 1;
            }
        }
        for (var i = start; i < m; i += 1) {
            newArray[i + k] = oldArray[i + deleteCount];
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.of(newItems[i]);
            newArray[i + start] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._array = newArray;
        this._table = null;
        this._itemCount = m;
        this._fieldCount = n;
        this._flags &= ~Record.ALIASED;
        return oldItems;
    };
    RecordMap.prototype.spliceMutable = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray;
        if (oldArray === null || m - deleteCount + k > oldArray.length) {
            newArray = new Array(Record.expand(m - deleteCount + k));
            if (oldArray !== null) {
                for (var i = 0; i < start; i += 1) {
                    newArray[i] = oldArray[i];
                }
            }
        }
        else {
            newArray = oldArray;
        }
        var oldItems = [];
        for (var i = start; i < start + deleteCount; i += 1) {
            var oldItem = oldArray[i];
            oldItems.push(oldItem);
            m -= 1;
            if (oldItem instanceof Item.Field) {
                n -= 1;
            }
        }
        if (k > deleteCount) {
            for (var i = m - 1; i >= start; i -= 1) {
                newArray[i + k] = oldArray[i + deleteCount];
            }
        }
        else {
            for (var i = start; i < m; i += 1) {
                newArray[i + k] = oldArray[i + deleteCount];
            }
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.of(newItems[i]);
            newArray[i + start] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._array = newArray;
        this._itemCount = m;
        this._fieldCount = n;
        return oldItems;
    };
    RecordMap.prototype.delete = function (key) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        key = Value.of(key);
        if ((this._flags & Record.ALIASED) !== 0) {
            return this.deleteAliased(key);
        }
        else {
            return this.deleteMutable(key);
        }
    };
    RecordMap.prototype.deleteAliased = function (key) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    newArray[i] = oldArray[j];
                }
                this._array = newArray;
                this._table = null;
                this._itemCount = n - 1;
                this._fieldCount -= 1;
                this._flags &= ~Record.ALIASED;
                return item;
            }
            newArray[i] = item;
        }
        return Item.Absent;
    };
    RecordMap.prototype.deleteMutable = function (key) {
        var n = this._itemCount;
        var array = this._array;
        for (var i = 0; i < n; i += 1) {
            var item = array[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    array[i] = array[j];
                }
                array[n - 1] = undefined;
                this._table = null;
                this._itemCount = n - 1;
                this._fieldCount -= 1;
                return item;
            }
        }
        return Item.Absent;
    };
    RecordMap.prototype.clear = function () {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        this._array = null;
        this._table = null;
        this._itemCount = 0;
        this._fieldCount = 0;
        this._flags = 0;
    };
    RecordMap.prototype.withField = function (key, newValue) {
        key = Value.of(key);
        newValue = Value.of(newValue);
        var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
        if ((record._flags & Record.ALIASED) !== 0) {
            if (record._fieldCount > 0) {
                record.setAliased(key, newValue);
            }
            else {
                record.pushAliased(Item.Slot.of(key, newValue));
            }
        }
        else {
            if (record.fieldCount > 0) {
                if (record._table !== null) {
                    record.setMutable(key, newValue);
                }
                else {
                    record.putMutable(key, newValue);
                }
            }
            else {
                record.pushMutable(Item.Slot.of(key, newValue));
            }
        }
        return record;
    };
    RecordMap.prototype.withAttr = function (key, newValue) {
        key = Item.Text.of(key);
        newValue = Value.of(newValue);
        var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
        if ((record._flags & Record.ALIASED) !== 0) {
            if (record._fieldCount > 0) {
                record.setAttrAliased(key, newValue);
            }
            else {
                record.pushAliased(Item.Attr.of(key, newValue));
            }
        }
        else {
            if (record.fieldCount > 0) {
                if (record._table !== null) {
                    record.setAttrMutable(key, newValue);
                }
                else {
                    record.putAttrMutable(key, newValue);
                }
            }
            else {
                record.pushMutable(Item.Attr.of(key, newValue));
            }
        }
        return record;
    };
    RecordMap.prototype.withSlot = function (key, newValue) {
        key = Value.of(key);
        newValue = Value.of(newValue);
        var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
        if ((record._flags & Record.ALIASED) !== 0) {
            if (record._fieldCount > 0) {
                record.setSlotAliased(key, newValue);
            }
            else {
                record.pushAliased(Item.Slot.of(key, newValue));
            }
        }
        else {
            if (record.fieldCount > 0) {
                if (record._table !== null) {
                    record.setSlotMutable(key, newValue);
                }
                else {
                    record.putSlotMutable(key, newValue);
                }
            }
            else {
                record.pushMutable(Item.Slot.of(key, newValue));
            }
        }
        return record;
    };
    RecordMap.prototype.setSlotAliased = function (key, newValue) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n + 1));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                newArray[i] = Item.Slot.of(key, newValue);
                i += 1;
                while (i < n) {
                    newArray[i] = oldArray[i];
                    i += 1;
                }
                this._array = newArray;
                this._table = null;
                this._flags &= ~Record.ALIASED;
                return;
            }
            newArray[i] = item;
        }
        newArray[n] = Item.Slot.of(key, newValue);
        this._array = newArray;
        this._table = null;
        this._itemCount = n + 1;
        this._fieldCount += 1;
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.setSlotMutable = function (key, newValue) {
        var table = this._table;
        var n = table.length;
        var x = Math.abs(key.hashCode() % n);
        var i = x;
        do {
            var field_3 = table[i];
            if (field_3 !== undefined) {
                if (field_3.key.equals(key)) {
                    if (field_3 instanceof Item.Slot && field_3.isMutable()) {
                        field_3.setValue(newValue);
                    }
                    else {
                        this.putSlotMutable(key, newValue);
                    }
                    return;
                }
            }
            else {
                break;
            }
            i = (i + 1) % n;
        } while (i !== x);
        var field = Item.Slot.of(key, newValue);
        this.push(field);
        RecordMap.put(field, table);
    };
    RecordMap.prototype.putSlotMutable = function (key, newValue) {
        var array = this._array;
        var n = this._itemCount;
        for (var i = 0; i < n; i += 1) {
            var item = array[i];
            if (item.key.equals(key)) {
                array[i] = Item.Slot.of(key, newValue);
                this._table = null;
                return;
            }
        }
        var field = Item.Slot.of(key, newValue);
        this.push(field);
        RecordMap.put(field, this._table);
    };
    RecordMap.prototype.subRecord = function (lower, upper) {
        var n = this._itemCount;
        if (lower === undefined) {
            lower = 0;
        }
        else if (lower < 0) {
            lower = n + lower;
        }
        lower = Math.min(Math.max(0, lower), n);
        if (upper === undefined) {
            upper = n;
        }
        else if (upper < 0) {
            upper = n + upper;
        }
        upper = Math.min(Math.max(lower, upper), n);
        return new RecordMap.View(this, lower, upper);
    };
    RecordMap.prototype.forEach = function (callback, thisArg) {
        var array = this._array;
        for (var i = 0, n = this._itemCount; i < n; i += 1) {
            var result = callback.call(thisArg, array[i], i);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    RecordMap.prototype.indexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        item = Item.of(item);
        var array = this._array;
        var n = this._itemCount;
        if (index < 0) {
            index = n + index;
        }
        index = Math.max(0, index);
        while (index < n) {
            if (item.equals(array[index])) {
                return index;
            }
            index += 1;
        }
        return -1;
    };
    RecordMap.prototype.lastIndexOf = function (item, index) {
        item = Item.of(item);
        var array = this._array;
        var n = this._itemCount;
        if (index === undefined) {
            index = n - 1;
        }
        else if (index < 0) {
            index = n + index;
        }
        index = Math.min(index, n - 1);
        while (index >= 0) {
            if (item.equals(array[index])) {
                return index;
            }
            index -= 1;
        }
        return -1;
    };
    RecordMap.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var array = this._array;
        var n = this._itemCount;
        var record = Record.empty(n);
        stack.push(record);
        var changed = false;
        for (var i = 0; i < n; i += 1) {
            var oldItem = array[i];
            var newItem = oldItem.evaluate(stack);
            if (newItem.isDefined()) {
                record.push(newItem);
            }
            changed = changed || oldItem !== newItem;
        }
        stack.pop();
        return changed ? record : this;
    };
    RecordMap.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var array = this._array;
        var n = this._itemCount;
        var record = Record.empty(n);
        stack.push(record);
        var changed = false;
        for (var i = 0; i < n; i += 1) {
            var oldItem = array[i];
            var newItem = oldItem.substitute(stack);
            if (newItem.isDefined()) {
                record.push(newItem);
            }
            changed = changed || oldItem !== newItem;
        }
        stack.pop();
        return changed ? record : this;
    };
    RecordMap.prototype.isAliased = function () {
        return (this._flags & Record.ALIASED) !== 0;
    };
    RecordMap.prototype.isMutable = function () {
        return (this._flags & Record.IMMUTABLE) === 0;
    };
    RecordMap.prototype.alias = function () {
        this._flags |= Record.ALIASED;
    };
    RecordMap.prototype.branch = function () {
        if ((this._flags & (Record.ALIASED | Record.IMMUTABLE)) === 0) {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                array[i].alias();
            }
        }
        this._flags |= Record.ALIASED;
        return new RecordMap(this._array, this._table, this._itemCount, this._fieldCount, Record.ALIASED);
    };
    RecordMap.prototype.clone = function () {
        var itemCount = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(itemCount);
        for (var i = 0; i < itemCount; i += 1) {
            newArray[i] = oldArray[i].clone();
        }
        return new RecordMap(newArray, null, itemCount, this._fieldCount, 0);
    };
    RecordMap.prototype.commit = function () {
        if ((this._flags & Record.IMMUTABLE) === 0) {
            this._flags |= Record.IMMUTABLE;
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                array[i].commit();
            }
        }
        return this;
    };
    RecordMap.prototype.hash = function () {
        var n = this._fieldCount;
        if (n > 0 && this._table === null) {
            var table = new Array(Record.expand(Math.max(n, n * 10 / 7)));
            var array = this._array;
            for (var i = 0, m = this._itemCount; i < m; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field) {
                    RecordMap.put(item, table);
                }
            }
            this._table = table;
        }
    };
    RecordMap.put = function (field, table) {
        if (table !== null) {
            var n = table.length;
            var x = Math.abs(field.key.hashCode() % n);
            var i = x;
            do {
                var item = table[i];
                if (item !== undefined) {
                    if (field.key.equals(item.key)) {
                        table[i] = field;
                        return;
                    }
                }
                else {
                    table[i] = field;
                    return;
                }
                i = (i + 1) % n;
            } while (i !== x);
            throw new Error();
        }
    };
    RecordMap.empty = function (initialCapacity) {
        if (initialCapacity === undefined) {
            return new RecordMap(null, null, 0, 0, 0);
        }
        else {
            return new RecordMap(new Array(initialCapacity), null, 0, 0, 0);
        }
    };
    RecordMap.of = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var n = items.length;
        if (n === 0) {
            return new RecordMap(null, null, 0, 0, 0);
        }
        else {
            var array = new Array(n);
            var itemCount = 0;
            var fieldCount = 0;
            for (var i = 0; i < n; i += 1) {
                var item = Item.fromAny(items[i]);
                array[i] = item;
                itemCount += 1;
                if (item instanceof Item.Field) {
                    fieldCount += 1;
                }
            }
            return new RecordMap(array, null, itemCount, fieldCount, 0);
        }
    };
    RecordMap.View = undefined;
    RecordMap.Empty = new RecordMap(null, null, 0, 0, Record.ALIASED | Record.IMMUTABLE);
    return RecordMap;
}(Record));
Item.Empty = RecordMap.Empty;
Value.Empty = RecordMap.Empty;
Record.Empty = RecordMap.Empty;
Item.empty = RecordMap.empty;
Value.empty = RecordMap.empty;
Record.empty = RecordMap.empty;
Record.of = RecordMap.of;
//# sourceMappingURL=data:application/json;base64,

var RecordMapView = (function (_super) {
    __extends(RecordMapView, _super);
    function RecordMapView(record, lower, upper) {
        var _this = _super.call(this) || this;
        _this._record = record;
        _this._lower = lower;
        _this._upper = upper;
        return _this;
    }
    RecordMapView.prototype.isEmpty = function () {
        return this._lower === this._upper;
    };
    RecordMapView.prototype.isArray = function () {
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            if (array[i] instanceof Item.Field) {
                return false;
            }
        }
        return true;
    };
    RecordMapView.prototype.isObject = function () {
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            if (array[i] instanceof Item.Value) {
                return false;
            }
        }
        return true;
    };
    Object.defineProperty(RecordMapView.prototype, "length", {
        get: function () {
            return this._upper - this._lower;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMapView.prototype, "size", {
        get: function () {
            return this._upper - this._lower;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMapView.prototype, "fieldCount", {
        get: function () {
            var k = 0;
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Item.Field) {
                    k += 1;
                }
            }
            return k;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMapView.prototype, "valueCount", {
        get: function () {
            var k = 0;
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Value) {
                    k += 1;
                }
            }
            return k;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMapView.prototype, "tag", {
        get: function () {
            if (this.length > 0) {
                var item = this._record._array[this._lower];
                if (item instanceof Item.Attr) {
                    return item.key.value;
                }
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMapView.prototype, "target", {
        get: function () {
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Value) {
                    return item;
                }
            }
            return this;
        },
        enumerable: true,
        configurable: true
    });
    RecordMapView.prototype.head = function () {
        if (this.length > 0) {
            return this._record._array[this._lower];
        }
        return Value.Absent;
    };
    RecordMapView.prototype.tail = function () {
        if (this.length > 0) {
            return new RecordMapView(this._record, this._lower + 1, this._upper);
        }
        return Record.Empty;
    };
    RecordMapView.prototype.body = function () {
        var n = this.length;
        if (n > 2) {
            return new RecordMapView(this._record, this._lower + 1, this._upper).branch();
        }
        else if (n === 2) {
            var item = this._record._array[this._lower + 1];
            if (!(item instanceof Item.Value)) {
                item = Record.of(item);
            }
            return item;
        }
        return Value.Absent;
    };
    RecordMapView.prototype.getItem = function (index) {
        if (index instanceof Item.Num) {
            index = index.value;
        }
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            return this._record._array[this._lower + index];
        }
        return Item.Absent;
    };
    RecordMapView.prototype.setItem = function (index, newItem) {
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if (index instanceof Item.Num) {
            index = index.value;
        }
        newItem = Item.of(newItem);
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            if ((this._record._flags & Record.ALIASED) !== 0) {
                this.setIndexAliased(index, newItem);
            }
            else {
                this.setIndexMutable(index, newItem);
            }
        }
        return this;
    };
    RecordMapView.prototype.setIndexAliased = function (index, newItem) {
        var n = this._record._itemCount;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(n));
        for (var i = 0; i < n; i += 1) {
            newArray[i] = oldArray[i];
        }
        var oldItem = oldArray[this._lower + index];
        newArray[this._lower + index] = newItem;
        this._record._array = newArray;
        this._record._table = null;
        if (newItem instanceof Item.Field) {
            if (!(oldItem instanceof Item.Field)) {
                this._record._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._record._fieldCount -= 1;
        }
        this._record._flags &= ~Record.ALIASED;
    };
    RecordMapView.prototype.setIndexMutable = function (index, newItem) {
        var array = this._record._array;
        var oldItem = array[this._lower + index];
        array[this._lower + index] = newItem;
        if (newItem instanceof Item.Field) {
            this._record._table = null;
            if (!(oldItem instanceof Item.Field)) {
                this._record._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._record._table = null;
            this._record._fieldCount -= 1;
        }
    };
    RecordMapView.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if ((this._record._flags & Record.ALIASED) !== 0) {
            this.pushAliased.apply(this, arguments);
        }
        else {
            this.pushMutable.apply(this, arguments);
        }
        return this.length;
    };
    RecordMapView.prototype.pushAliased = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(m + k));
        if (oldArray !== null) {
            for (var i = 0; i < this._upper; i += 1) {
                newArray[i] = oldArray[i];
            }
            for (var i = this._upper; i < m; i += 1) {
                newArray[i + k] = oldArray[i];
            }
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[i + this._upper] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._record._array = newArray;
        this._record._table = null;
        this._record._itemCount = m;
        this._record._fieldCount = n;
        this._record._flags &= ~Record.ALIASED;
        this._upper += k;
    };
    RecordMapView.prototype.pushMutable = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var oldArray = this._record._array;
        var newArray;
        if (oldArray === null || m + k > oldArray.length) {
            newArray = new Array(Record.expand(m + k));
            if (oldArray !== null) {
                for (var i = 0; i < this._upper; i += 1) {
                    newArray[i] = oldArray[i];
                }
            }
        }
        else {
            newArray = oldArray;
        }
        for (var i = m - 1; i >= this._upper; i -= 1) {
            newArray[i + k] = oldArray[i];
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[i + this._upper] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
                this._record._table = null;
            }
        }
        this._record._array = newArray;
        this._record._itemCount = m;
        this._record._fieldCount = n;
        this._upper += k;
    };
    RecordMapView.prototype.splice = function (start, deleteCount) {
        if (deleteCount === void 0) { deleteCount = 0; }
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var _a, _b;
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        var n = this.length;
        if (start < 0) {
            start = n + start;
        }
        start = Math.min(Math.max(0, start), n);
        deleteCount = Math.min(Math.max(0, deleteCount), n - start);
        var deleted;
        if ((this._record._flags & Record.ALIASED) !== 0) {
            deleted = (_a = this._record).spliceAliased.apply(_a, [this._lower + start, deleteCount].concat(newItems));
        }
        else {
            deleted = (_b = this._record).spliceMutable.apply(_b, [this._lower + start, deleteCount].concat(newItems));
        }
        this._upper += newItems.length - deleted.length;
        return deleted;
    };
    RecordMapView.prototype.delete = function (key) {
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        key = Value.of(key);
        if ((this._record._flags & Record.ALIASED) !== 0) {
            return this.deleteAliased(key);
        }
        else {
            return this.deleteMutable(key);
        }
    };
    RecordMapView.prototype.deleteAliased = function (key) {
        var n = this._record._itemCount;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(n));
        for (var i = this._lower; i < this._upper; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    newArray[i] = oldArray[j];
                }
                this._record._array = newArray;
                this._record._table = null;
                this._record._itemCount = n - 1;
                this._record._fieldCount -= 1;
                this._record._flags &= ~Record.ALIASED;
                this._upper -= 1;
                return item;
            }
            newArray[i] = item;
        }
        return Item.Absent;
    };
    RecordMapView.prototype.deleteMutable = function (key) {
        var n = this._record._itemCount;
        var array = this._record._array;
        for (var i = this._lower; i < this._upper; i += 1) {
            var item = array[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    array[i] = array[j];
                }
                array[n - 1] = undefined;
                this._record._table = null;
                this._record._itemCount -= 1;
                this._record._fieldCount -= 1;
                this._upper -= 1;
                return item;
            }
        }
        return Item.Absent;
    };
    RecordMapView.prototype.clear = function () {
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if ((this._record._flags & Record.ALIASED) !== 0) {
            this.clearAliased();
        }
        else {
            this.clearMutable();
        }
    };
    RecordMapView.prototype.clearAliased = function () {
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var l = m - this.length;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(l));
        var i = 0;
        while (i < this._lower) {
            newArray[i] = oldArray[i];
            i += 1;
        }
        while (i < this._upper) {
            if (oldArray[i] instanceof Item.Field) {
                n -= 1;
            }
            i += 1;
        }
        i = this._lower;
        var j = this._upper;
        while (j < m) {
            newArray[i] = oldArray[j];
            i += 1;
            j += 1;
        }
        this._record._array = newArray;
        this._record._table = null;
        this._record._itemCount = l;
        this._record._fieldCount = n;
        this._record._flags &= ~Record.ALIASED;
        this._upper = this._lower;
    };
    RecordMapView.prototype.clearMutable = function () {
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var array = this._record._array;
        var i = this._lower;
        while (i < this._upper) {
            if (array[i] instanceof Item.Field) {
                n -= 1;
            }
            i += 1;
        }
        i = this._lower;
        var j = this._upper;
        while (j < m) {
            var item = array[j];
            if (item instanceof Item.Field) {
                this._record._table = null;
            }
            array[i] = item;
            i += 1;
            j += 1;
        }
        this._record._itemCount = i;
        this._record._fieldCount = n;
        while (i < m) {
            array[i] = undefined;
            i += 1;
        }
        this._upper = this._lower;
    };
    RecordMapView.prototype.subRecord = function (lower, upper) {
        var n = this.length;
        if (lower === undefined) {
            lower = 0;
        }
        else if (lower < 0) {
            lower = n + lower;
        }
        lower = Math.min(Math.max(0, lower), n);
        if (upper === undefined) {
            upper = n;
        }
        else if (upper < 0) {
            upper = n + upper;
        }
        upper = Math.min(Math.max(lower, upper), n);
        return new RecordMapView(this._record, this._lower + lower, this._upper + upper);
    };
    RecordMapView.prototype.forEach = function (callback, thisArg) {
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            var result = callback.call(thisArg, array[i], i);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    RecordMapView.prototype.indexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        item = Item.of(item);
        var array = this._record._array;
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        index = this._lower + Math.max(0, index);
        while (index < this._upper) {
            if (item.equals(array[index])) {
                return index - this._lower;
            }
            index += 1;
        }
        return -1;
    };
    RecordMapView.prototype.lastIndexOf = function (item, index) {
        item = Item.of(item);
        var array = this._record._array;
        var n = this.length;
        if (index === undefined) {
            index = n - 1;
        }
        else if (index < 0) {
            index = n + index;
        }
        index = this._lower + Math.min(index, n - 1);
        while (index >= this._lower) {
            if (item.equals(array[index])) {
                return index - this._lower;
            }
            index -= 1;
        }
        return -1;
    };
    RecordMapView.prototype.isAliased = function () {
        return (this._record._flags & Record.ALIASED) !== 0;
    };
    RecordMapView.prototype.isMutable = function () {
        return (this._record._flags & Record.IMMUTABLE) === 0;
    };
    RecordMapView.prototype.alias = function () {
        this._record._flags |= Record.ALIASED;
    };
    RecordMapView.prototype.branch = function () {
        var m = this.length;
        var n = 0;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(m));
        var i = this._lower;
        var j = 0;
        while (j < m) {
            var item = oldArray[i];
            newArray[j] = item;
            if (item instanceof Item.Field) {
                n += 1;
            }
            i += 1;
            j += 1;
        }
        return new RecordMap(newArray, null, m, n, 0);
    };
    RecordMapView.prototype.clone = function () {
        var m = this.length;
        var n = 0;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(m));
        var i = this._lower;
        var j = 0;
        while (j < m) {
            var item = oldArray[i];
            newArray[j] = item.clone();
            if (item instanceof Item.Field) {
                n += 1;
            }
            i += 1;
            j += 1;
        }
        return new RecordMap(newArray, null, m, n, 0);
    };
    RecordMapView.prototype.commit = function () {
        this._record.commit();
        return this;
    };
    return RecordMapView;
}(Record));
RecordMap.View = RecordMapView;
//# sourceMappingURL=data:application/json;base64,

var Bool = (function (_super) {
    __extends(Bool, _super);
    function Bool(value) {
        var _this = _super.call(this) || this;
        _this._value = value;
        return _this;
    }
    Object.defineProperty(Bool.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Bool.prototype.or = function (that) {
        return this;
    };
    Bool.prototype.and = function (that) {
        return that;
    };
    Bool.prototype.not = function () {
        return this._value ? Value.False : Value.True;
    };
    Bool.prototype.stringValue = function () {
        return this._value ? 'true' : 'false';
    };
    Bool.prototype.booleanValue = function () {
        return this._value;
    };
    Bool.prototype.toAny = function () {
        return this._value;
    };
    Bool.prototype.valueOf = function () {
        return this._value;
    };
    Bool.prototype.writeRecon = function (output) {
        if (this._value) {
            output.push(116, 114, 117, 101);
        }
        else {
            output.push(102, 97, 108, 115, 101);
        }
    };
    Bool.prototype.toRecon = function () {
        return this._value ? 'true' : 'false';
    };
    Bool.prototype.toReconBlock = function () {
        return this._value ? 'true' : 'false';
    };
    Bool.prototype.compare = function (that) {
        if (that instanceof Bool) {
            if (this._value && !that._value) {
                return -1;
            }
            else if (!this._value && that._value) {
                return 1;
            }
            else {
                return 0;
            }
        }
        else if (that instanceof Item.Field || that instanceof Item.Record
            || that instanceof Item.Data || that instanceof Item.Text
            || that instanceof Item.Num) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Bool.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Bool) {
            return this._value === that._value;
        }
        return false;
    };
    Bool.prototype.plus = function (that) {
        that = Item.of(that);
        if (that instanceof Text$1) {
            if (this._value) {
                return Text$1.valueOf(that._value);
            }
            return Text$1.valueOf('false');
        }
        return _super.prototype.plus.call(this, that);
    };
    Bool.prototype.hashCode = function () {
        return this._value ? 0x47DB14C7 : 0x9FE4B312;
    };
    Bool.prototype.toString = function () {
        return this.toRecon();
    };
    Bool.valueOf = function (value) {
        return value ? Bool.True : Bool.False;
    };
    Bool.of = function (value) {
        if (value instanceof Bool) {
            return value;
        }
        else if (typeof value === 'boolean') {
            return Bool.valueOf(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Bool.True = new Bool(true);
    Bool.False = new Bool(false);
    return Bool;
}(Value));
Item.Bool = Bool;
Item.True = Bool.True;
Item.False = Bool.False;
Value.True = Bool.True;
Value.False = Bool.False;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBVSxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDckMsT0FBTyxFQUFXLEtBQUssRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUV4QyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBSTVCO0lBQTBCLGdDQUFLO0lBSTdCLGNBQW9CLEtBQWM7UUFBbEMsWUFDRSxpQkFBTyxTQUVSO1FBREMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7O0lBQ3RCLENBQUM7SUFFRCxzQkFBSSx1QkFBSzthQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7OztPQUFBO0lBSUQsaUJBQUUsR0FBRixVQUFHLElBQVU7UUFDWCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFJRCxrQkFBRyxHQUFILFVBQUksSUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGtCQUFHLEdBQUg7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDaEQsQ0FBQztJQUVELDBCQUFXLEdBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQ3hDLENBQUM7SUFFRCwyQkFBWSxHQUFaO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxvQkFBSyxHQUFMO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxzQkFBTyxHQUFQO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCx5QkFBVSxHQUFW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

var Extant = (function (_super) {
    __extends(Extant, _super);
    function Extant() {
        return _super.call(this) || this;
    }
    Extant.prototype.isDistinct = function () {
        return false;
    };
    Extant.prototype.not = function () {
        return Value.Absent;
    };
    Extant.prototype.stringValue = function () {
        return '';
    };
    Extant.prototype.booleanValue = function () {
        return true;
    };
    Extant.prototype.toAny = function () {
        return null;
    };
    Extant.prototype.valueOf = function () {
        return null;
    };
    Extant.prototype.plus = function (that) {
        that = Item.of(that);
        if (that instanceof Text$1) {
            return Text$1.valueOf(that._value);
        }
        return _super.prototype.plus.call(this, that);
    };
    Extant.prototype.writeRecon = function (output) {
    };
    Extant.prototype.toRecon = function () {
        return '';
    };
    Extant.prototype.toReconBlock = function () {
        return '';
    };
    Extant.prototype.compare = function (that) {
        if (that instanceof Extant) {
            return 0;
        }
        else if (that === Value.Absent) {
            return -1;
        }
        else {
            return 1;
        }
    };
    Extant.prototype.equals = function (that) {
        return this === that;
    };
    Extant.prototype.hashCode = function () {
        return 0xF69C1707;
    };
    Extant.prototype.toString = function () {
        return 'extant';
    };
    return Extant;
}(Value));
Item.Extant = new Extant();
Value.Extant = Item.Extant;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0YW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXh0YW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQVUsSUFBSSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBQ3JDLE9BQU8sRUFBVyxLQUFLLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFeEMsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUU1QjtJQUE0QixrQ0FBSztJQUUvQjtlQUNFLGlCQUFPO0lBQ1QsQ0FBQztJQUVELDJCQUFVLEdBQVY7UUFDRSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxvQkFBRyxHQUFIO1FBQ0UsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQ3RCLENBQUM7SUFFRCw0QkFBVyxHQUFYO1FBQ0UsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsNkJBQVksR0FBWjtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELHNCQUFLLEdBQUw7UUFDRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCx3QkFBTyxHQUFQO1FBQ0UsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBSUQscUJBQUksR0FBSixVQUFLLElBQWE7UUFDaEIsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsSUFBSSxJQUFJLFlBQVksSUFBSSxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbEM7UUFDRCxPQUFPLGlCQUFNLElBQUksWUFBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsMkJBQVUsR0FBVixVQUFXLE1BQW1CO0lBRTlCLENBQUM7SUFFRCx3QkFBTyxHQUFQO1FBQ0UsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsNkJBQVksR0FBWjtRQUNFLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELHdCQUFPLEdBQVAsVUFBUSxJQUFVO1FBQ2hCLElBQUksSUFBSSxZQUFZLE1BQU0sRUFBRTtZQUMxQixPQUFPLENBQUMsQ0FBQztTQUNWO2FBQU0sSUFBSSxJQUFJLEtBQUssS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNoQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ1g7YUFBTTtZQUNMLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7SUFDSCxDQUFDO0lBRUQsdUJBQU0sR0FBTixVQUFPLElBQVM7UUFDZCxPQUFPLElBQUksS0FBSyxJQUFJLENBQUM7SUFDdkIsQ0FBQztJQUVELHlCQUFRLEdBQVI7UUFDRSxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQseUJBQVEsR0FBUjtRQUNFLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFDSCxhQUFDO0FBQUQsQ0FBQyxBQXpFRCxDQUE0QixLQUFLLEdBeUVoQzs7QUFDQSxJQUFZLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7QUFDbkMsS0FBYSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDIn0=

var Text$1 = (function (_super) {
    __extends(Text, _super);
    function Text(value, flags) {
        var _this = _super.call(this) || this;
        _this._value = value;
        _this._flags = flags;
        return _this;
    }
    Object.defineProperty(Text.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "size", {
        get: function () {
            return this._value.length;
        },
        enumerable: true,
        configurable: true
    });
    Text.prototype.isIdent = function () {
        var cs = new StringInput(this._value);
        if (cs.isEmpty() || !Item.Recon.isIdentStartChar(cs.head())) {
            return false;
        }
        cs.step();
        while (!cs.isEmpty() && Item.Recon.isIdentChar(cs.head())) {
            cs.step();
        }
        return cs.isEmpty();
    };
    Text.prototype.isDone = function () {
        return false;
    };
    Text.prototype.isFull = function () {
        return false;
    };
    Text.prototype.push = function () {
        var cs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            cs[_i] = arguments[_i];
        }
        if ((this._flags & Text.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        for (var i = 0, n = cs.length; i < n; i += 1) {
            var c = cs[i];
            if (typeof c === 'number') {
                if ((c >= 0x0000 && c <= 0xD7FF) || (c >= 0xE000 && c <= 0xFFFF)) {
                    this._value += String.fromCharCode(c);
                }
                else if (c >= 0x10000 && c <= 0x10FFFF) {
                    var u = c - 0x10000;
                    this._value += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));
                }
                else {
                    this._value += String.fromCharCode(0xFFFD);
                }
            }
            else if (typeof c === 'string') {
                var cs_1 = new StringInput(c);
                while (!cs_1.isEmpty()) {
                    this.push(cs_1.head());
                    cs_1.step();
                }
            }
        }
    };
    Text.prototype.isMutable = function () {
        return (this._flags & Text.IMMUTABLE) === 0;
    };
    Text.prototype.branch = function () {
        return this.clone();
    };
    Text.prototype.clone = function () {
        return new Text(this._value, 0);
    };
    Text.prototype.commit = function () {
        this._flags |= Text.IMMUTABLE;
        return this;
    };
    Text.prototype.bind = function () {
        return this;
    };
    Text.prototype.stringValue = function () {
        return this._value;
    };
    Text.prototype.numberValue = function () {
        var value = +this._value;
        if (isFinite(value)) {
            return value;
        }
        return undefined;
    };
    Text.prototype.toAny = function () {
        return this._value;
    };
    Text.prototype.valueOf = function () {
        return this._value;
    };
    Text.prototype.writeRecon = function (output) {
        if (this.isIdent()) {
            Text.writeIdent(this._value, output);
        }
        else {
            Text.writeString(this._value, output);
        }
    };
    Text.writeIdent = function (s, output) {
        var cs = new StringInput(s);
        while (!cs.isEmpty()) {
            output.push(cs.head());
            cs.step();
        }
    };
    Text.writeString = function (s, output) {
        var cs = new StringInput(s);
        output.push(34);
        while (!cs.isEmpty()) {
            var c = cs.head();
            switch (c) {
                case 34:
                case 92:
                    output.push(92, c);
                    break;
                case 8:
                    output.push(92, 98);
                    break;
                case 12:
                    output.push(92, 102);
                    break;
                case 10:
                    output.push(92, 110);
                    break;
                case 13:
                    output.push(92, 114);
                    break;
                case 9:
                    output.push(92, 116);
                    break;
                default:
                    output.push(c);
            }
            cs.step();
        }
        output.push(34);
    };
    Text.writeMarkup = function (s, output) {
        var cs = new StringInput(s);
        while (!cs.isEmpty()) {
            var c = cs.head();
            switch (c) {
                case 36:
                case 64:
                case 91:
                case 92:
                case 93:
                case 123:
                case 125:
                    output.push(92, c);
                    break;
                case 8:
                    output.push(92, 98);
                    break;
                case 12:
                    output.push(92, 102);
                    break;
                case 10:
                    output.push(92, 110);
                    break;
                case 13:
                    output.push(92, 114);
                    break;
                case 9:
                    output.push(92, 116);
                    break;
                default:
                    output.push(c);
            }
            cs.step();
        }
    };
    Text.prototype.compare = function (that) {
        if (that instanceof Text) {
            var order = this._value.localeCompare(that._value);
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        }
        else if (that instanceof Item.Field || that instanceof Item.Record
            || that instanceof Item.Data) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Text.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Text) {
            return this._value === that._value;
        }
        return false;
    };
    Text.prototype.plus = function (that) {
        that = Item.of(that);
        if (that instanceof Text) {
            return Text.valueOf(this._value + that._value);
        }
        else if (that instanceof Item.Num) {
            return Text.valueOf(this._value + that._value);
        }
        else if (that instanceof Bool) {
            if (that._value) {
                return Text.valueOf(this._value);
            }
            return Text.valueOf('false');
        }
        else if (that instanceof Extant) {
            return Text.valueOf(this._value);
        }
        return _super.prototype.plus.call(this, that);
    };
    Text.prototype.hashCode = function () {
        return Murmur3.hash(this._value);
    };
    Text.prototype.toString = function () {
        return this._value;
    };
    Text.empty = function () {
        return new Text('', 0);
    };
    Text.valueOf = function (value) {
        if (value.length === 0) {
            return Text.Empty;
        }
        else {
            return new Text(value, Text.IMMUTABLE);
        }
    };
    Text.of = function (value) {
        if (value instanceof Text) {
            return value;
        }
        else if (typeof value === 'string') {
            return Text.valueOf(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Text.IMMUTABLE = 1;
    Text.Empty = new Text('', Text.IMMUTABLE);
    return Text;
}(Value));
Item.Text = Text$1;
//# sourceMappingURL=data:application/json;base64,

var Num = (function (_super) {
    __extends(Num, _super);
    function Num(value) {
        var _this = _super.call(this) || this;
        _this._value = value;
        return _this;
    }
    Object.defineProperty(Num.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Num.prototype.bor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value | that.value);
        }
        return _super.prototype.bor.call(this, that);
    };
    Num.prototype.bxor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value ^ that.value);
        }
        return _super.prototype.bxor.call(this, that);
    };
    Num.prototype.band = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value & that.value);
        }
        return _super.prototype.band.call(this, that);
    };
    Num.prototype.plus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value + that.value);
        }
        else if (that instanceof Text$1) {
            return Text$1.valueOf(this.value + that.value);
        }
        return _super.prototype.plus.call(this, that);
    };
    Num.prototype.minus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value - that.value);
        }
        return _super.prototype.minus.call(this, that);
    };
    Num.prototype.times = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value * that.value);
        }
        return _super.prototype.times.call(this, that);
    };
    Num.prototype.divide = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value / that.value);
        }
        return _super.prototype.divide.call(this, that);
    };
    Num.prototype.modulo = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value % that.value);
        }
        return _super.prototype.modulo.call(this, that);
    };
    Num.prototype.bnot = function () {
        return Num.valueOf(~this.value);
    };
    Num.prototype.neg = function () {
        return Num.valueOf(-this.value);
    };
    Num.prototype.pos = function () {
        return this;
    };
    Num.prototype.inv = function () {
        return Num.valueOf(1 / this.value);
    };
    Num.prototype.stringValue = function () {
        return '' + this._value;
    };
    Num.prototype.numberValue = function () {
        return this._value;
    };
    Num.prototype.toAny = function () {
        return this._value;
    };
    Num.prototype.valueOf = function () {
        return this._value;
    };
    Num.prototype.writeRecon = function (output) {
        var value = this._value;
        if (isFinite(value) && value === Math.floor(value)
            && value >= -2147483648 && value <= 2147483647) {
            return Num.writeInteger(value, output);
        }
        else {
            Item.Text.writeIdent(String(value), output);
        }
    };
    Num.writeInteger = function (value, output) {
        if (value < 0) {
            output.push(45);
            value = -value;
        }
        if (value < 10) {
            output.push(48 + value);
        }
        else {
            var digits = new Uint8Array(19);
            var i = 18;
            while (value !== 0) {
                digits[i] = value % 10;
                value = Math.floor(value / 10);
                i -= 1;
            }
            i += 1;
            while (i < 19) {
                output.push(48 + digits[i]);
                i += 1;
            }
        }
    };
    Num.prototype.compare = function (that) {
        if (that instanceof Num) {
            var x = this._value;
            var y = that._value;
            return x < y ? -1 : x > y ? 1 : 0;
        }
        else if (that instanceof Item.Field || that instanceof Item.Record
            || that instanceof Item.Data || that instanceof Item.Text) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Num.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Num) {
            return this._value === that._value;
        }
        return false;
    };
    Num.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x38AB4134, Murmur3.hash(this._value)));
    };
    Num.prototype.toString = function () {
        return this.toRecon();
    };
    Num.valueOf = function (value) {
        if (value === 0) {
            return Num.Zero;
        }
        else if (value === 1) {
            return Num.One;
        }
        else {
            return new Num(value);
        }
    };
    Num.of = function (value) {
        if (value instanceof Num) {
            return value;
        }
        else if (typeof value === 'number') {
            return Num.valueOf(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Num.Zero = new Num(0);
    Num.One = new Num(1);
    return Num;
}(Value));
Item.Num = Num;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibnVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQVUsSUFBSSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBQ3JDLE9BQU8sRUFBVyxLQUFLLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFeEMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNsQyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBSTVCO0lBQXlCLCtCQUFLO0lBSTVCLGFBQW9CLEtBQWE7UUFBakMsWUFDRSxpQkFBTyxTQUVSO1FBREMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7O0lBQ3RCLENBQUM7SUFFRCxzQkFBSSxzQkFBSzthQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7OztPQUFBO0lBSUQsaUJBQUcsR0FBSCxVQUFJLElBQWE7UUFDZixJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixJQUFJLElBQUksWUFBWSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQzVCLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QztRQUNELE9BQU8saUJBQU0sR0FBRyxZQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFJRCxrQkFBSSxHQUFKLFVBQUssSUFBYTtRQUNoQixJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixJQUFJLElBQUksWUFBWSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQzVCLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QztRQUNELE9BQU8saUJBQU0sSUFBSSxZ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

var DynamicValue = (function (_super) {
    __extends(DynamicValue, _super);
    function DynamicValue() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DynamicValue.prototype.cond = function (thenExpr, elseExpr) {
        thenExpr = Item.of(thenExpr);
        elseExpr = Item.of(elseExpr);
        return new Item.CondExpr(this, thenExpr, elseExpr);
    };
    DynamicValue.prototype.or = function (that) {
        that = Item.of(that);
        return new Item.LorExpr(this, that);
    };
    DynamicValue.prototype.and = function (that) {
        that = Item.of(that);
        return new Item.LandExpr(this, that);
    };
    DynamicValue.prototype.bor = function (that) {
        that = Item.of(that);
        return new Item.BorExpr(this, that);
    };
    DynamicValue.prototype.bxor = function (that) {
        that = Item.of(that);
        return new Item.BxorExpr(this, that);
    };
    DynamicValue.prototype.band = function (that) {
        that = Item.of(that);
        return new Item.BandExpr(this, that);
    };
    DynamicValue.prototype.lt = function (that) {
        that = Item.of(that);
        return new Item.LtExpr(this, that);
    };
    DynamicValue.prototype.le = function (that) {
        that = Item.of(that);
        return new Item.LeExpr(this, that);
    };
    DynamicValue.prototype.eq = function (that) {
        that = Item.of(that);
        return new Item.EqExpr(this, that);
    };
    DynamicValue.prototype.ne = function (that) {
        that = Item.of(that);
        return new Item.NeExpr(this, that);
    };
    DynamicValue.prototype.ge = function (that) {
        that = Item.of(that);
        return new Item.GeExpr(this, that);
    };
    DynamicValue.prototype.gt = function (that) {
        that = Item.of(that);
        return new Item.GtExpr(this, that);
    };
    DynamicValue.prototype.plus = function (that) {
        that = Item.of(that);
        return new Item.AddExpr(this, that);
    };
    DynamicValue.prototype.minus = function (that) {
        that = Item.of(that);
        return new Item.SubExpr(this, that);
    };
    DynamicValue.prototype.times = function (that) {
        that = Item.of(that);
        return new Item.MulExpr(this, that);
    };
    DynamicValue.prototype.divide = function (that) {
        that = Item.of(that);
        return new Item.DivExpr(this, that);
    };
    DynamicValue.prototype.modulo = function (that) {
        that = Item.of(that);
        return new Item.ModExpr(this, that);
    };
    DynamicValue.prototype.not = function () {
        return new Item.LnotExpr(this);
    };
    DynamicValue.prototype.bnot = function () {
        return new Item.BnotExpr(this);
    };
    DynamicValue.prototype.neg = function () {
        return new Item.NegExpr(this);
    };
    DynamicValue.prototype.pos = function () {
        return new Item.PosExpr(this);
    };
    DynamicValue.prototype.inv = function () {
        return new Item.DivExpr(Item.Num.One, this);
    };
    DynamicValue.prototype.toAny = function () {
        return this;
    };
    return DynamicValue;
}(Value));
Item.DynamicValue = DynamicValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy12YWx1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImR5bmFtaWMtdmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBVSxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDckMsT0FBTyxFQUFXLEtBQUssRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUd4QztJQUEyQyx3Q0FBSztJQUFoRDs7SUFnSEEsQ0FBQztJQTdHQywyQkFBSSxHQUFKLFVBQUssUUFBaUIsRUFBRSxRQUFpQjtRQUN2QyxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QixRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QixPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCx5QkFBRSxHQUFGLFVBQUcsSUFBYTtRQUNkLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsMEJBQUcsR0FBSCxVQUFJLElBQWE7UUFDZixJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixPQUFPLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELDBCQUFHLEdBQUgsVUFBSSxJQUFhO1FBQ2YsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCwy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

var Selector = (function (_super) {
    __extends(Selector, _super);
    function Selector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Selector.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var selected = Value.empty();
        this.forSelected(stack, function (stack) {
            var item = stack.peek();
            if (item) {
                selected.push(item);
            }
        }, this);
        return selected.isEmpty() ? Value.Absent : selected.flattened();
    };
    Selector.prototype.update = function (stack, newItem) {
        stack = EvalStack.fromAny(stack);
        return this.mapSelected(stack, function (stack) {
            return stack.peek() || Item.Absent;
        }, this);
    };
    Selector.prototype.remove = function (stack) {
        stack = EvalStack.fromAny(stack);
        return this.mapSelected(stack, function (stack) {
            return Item.Absent;
        }, this);
    };
    Selector.prototype.get = function (key) {
        key = Value.of(key);
        return this.andThen(new GetSelector(key));
    };
    Selector.prototype.getAttr = function (key) {
        key = Item.Text.of(key);
        return this.andThen(new GetAttrSelector(key));
    };
    Selector.prototype.getItem = function (index) {
        index = Item.Num.of(index);
        return this.andThen(new GetItemSelector(index));
    };
    Selector.prototype.keys = function () {
        return this.andThen(Selector.Keys);
    };
    Selector.prototype.children = function () {
        return this.andThen(Selector.Children);
    };
    Selector.prototype.descendants = function () {
        return this.andThen(Selector.Descendants);
    };
    Selector.prototype.invoke = function (args) {
        return new Item.InvokeExpr(this, args);
    };
    Selector.prototype.filter = function (predicate) {
        if (arguments.length === 0) {
            return new FilterSelector(this);
        }
        else {
            predicate = Item.of(predicate);
            return this.andThen(predicate.filter());
        }
    };
    Object.defineProperty(Selector.prototype, "precedence", {
        get: function () {
            return 10;
        },
        enumerable: true,
        configurable: true
    });
    Selector.prototype.writeRecon = function (output) {
        this.writeThen(output);
    };
    Selector.prototype.compare = function (that) {
        if (that instanceof Selector) {
            return 0;
        }
        else if (that instanceof Item.Func || that instanceof Item.Expr
            || that === Value.Extant || that === Value.Absent) {
            return -1;
        }
        else {
            return 1;
        }
    };
    Selector.prototype.toString = function () {
        return this.toRecon();
    };
    Selector.literal = function (item) {
        item = Item.of(item);
        if (!(item instanceof Selector)) {
            item = new LiteralSelector(item);
        }
        return item;
    };
    Selector.get = function (key) {
        key = Value.of(key);
        return new GetSelector(key, true);
    };
    Selector.getAttr = function (key) {
        key = Item.Text.of(key);
        return new GetAttrSelector(key, true);
    };
    Selector.getItem = function (index) {
        index = Item.Num.of(index);
        return new GetItemSelector(index);
    };
    Selector.Identity = undefined;
    Selector.Keys = undefined;
    Selector.Children = undefined;
    Selector.Descendants = undefined;
    return Selector;
}(DynamicValue));
Item.Selector = Selector;
var IdentitySelector = (function (_super) {
    __extends(IdentitySelector, _super);
    function IdentitySelector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IdentitySelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            var oldItem = stack.pop();
            var newItem = oldItem.evaluate(stack);
            stack.push(newItem);
            selected = callback.call(thisArg, stack);
            stack.replace(oldItem);
        }
        return selected;
    };
    IdentitySelector.prototype.mapSelected = function (stack, transform, thisArg) {
        return transform.call(thisArg, stack);
    };
    IdentitySelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        return stack.item().substitute(stack);
    };
    IdentitySelector.prototype.get = function (key) {
        key = Value.of(key);
        return this.andThen(new GetSelector(key, true));
    };
    IdentitySelector.prototype.getAttr = function (key) {
        key = Item.Text.of(key);
        return this.andThen(new GetAttrSelector(key, true));
    };
    IdentitySelector.prototype.andThen = function (then) {
        return then;
    };
    IdentitySelector.prototype.writeRecon = function (output) {
    };
    IdentitySelector.prototype.writeThen = function (output) {
    };
    IdentitySelector.prototype.toRecon = function () {
        return '';
    };
    IdentitySelector.prototype.clone = function () {
        return this;
    };
    IdentitySelector.prototype.equals = function (that) {
        return that instanceof IdentitySelector;
    };
    IdentitySelector.prototype.hashCode = function () {
        return 0xB29D0DFC;
    };
    return IdentitySelector;
}(Selector));
Selector.Identity = new IdentitySelector();
Item.IdentitySelector = IdentitySelector;
var LiteralSelector = (function (_super) {
    __extends(LiteralSelector, _super);
    function LiteralSelector(item, then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this._item = item.commit();
        _this.then = then;
        return _this;
    }
    LiteralSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            var literal = this._item.evaluate(stack);
            if (literal.isDefined()) {
                stack.push(literal);
                selected = this.then.forSelected(stack, callback, thisArg);
                stack.pop();
            }
        }
        return selected;
    };
    LiteralSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var literal = this._item.substitute(stack);
            if (literal.isDefined()) {
                stack.push(literal);
                literal = this.then.mapSelected(stack, transform, thisArg);
                stack.pop();
            }
            return stack.item();
        }
        return Item.Absent;
    };
    LiteralSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var item = this._item.substitute(stack);
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new LiteralSelector(item, then);
    };
    LiteralSelector.prototype.andThen = function (then) {
        return new LiteralSelector(this._item, this.then.andThen(then));
    };
    Object.defineProperty(LiteralSelector.prototype, "precedence", {
        get: function () {
            return this._item.precedence;
        },
        enumerable: true,
        configurable: true
    });
    LiteralSelector.prototype.writeRecon = function (output) {
        if (this._item.precedence < this.then.precedence) {
            output.push(40);
            this._item.writeRecon(output);
            output.push(41);
        }
        else {
            this._item.writeRecon(output);
        }
        this.then.writeThen(output);
    };
    LiteralSelector.prototype.writeThen = function (output) {
    };
    LiteralSelector.prototype.clone = function () {
        return new LiteralSelector(this._item.clone(), this.then.clone());
    };
    LiteralSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LiteralSelector) {
            return this._item.equals(that._item) && this.then.equals(that.then);
        }
        return false;
    };
    LiteralSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x9754A8EF, this._item.hashCode()), this.then.hashCode()));
    };
    return LiteralSelector;
}(Selector));
Item.LiteralSelector = LiteralSelector;
var GetSelector = (function (_super) {
    __extends(GetSelector, _super);
    function GetSelector(key, top, then) {
        if (top === void 0) { top = false; }
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this._key = key.commit();
        _this._top = top;
        _this.then = then;
        return _this;
    }
    GetSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var key = this._key.evaluate(stack).toValue();
        for (var i = stack.size - 1; i >= 0; i -= 1) {
            var frame = stack.getItem(i).toValue();
            if (frame instanceof Item.Record) {
                var value = frame.get(key);
                if (value.isDefined()) {
                    stack.push(value);
                    var selected = this.then.forSelected(stack, callback, thisArg);
                    stack.pop();
                    return selected;
                }
            }
        }
        return undefined;
    };
    GetSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        var key = this._key.substitute(stack).toValue();
        if (!stack.isEmpty()) {
            var frame = stack.item().toValue();
            if (frame instanceof Item.Record) {
                var oldValue = frame.get(key);
                stack.push(oldValue);
                var newItem = this.then.mapSelected(stack, transform, thisArg);
                stack.pop();
                if (newItem.isDefined()) {
                    frame.set(this._key, newItem.toValue());
                }
                else {
                    frame.delete(this._key);
                }
            }
            return stack.item();
        }
        return Item.Absent;
    };
    GetSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.evaluate(stack).toValue();
        for (var i = stack.size - 1; i >= 0; i -= 1) {
            var frame = stack.getItem(i).toValue();
            if (frame instanceof Item.Record) {
                var value = frame.get(key);
                if (value.isDefined()) {
                    return value.substitute(stack);
                }
            }
        }
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new GetSelector(this._key, this._top, then);
    };
    GetSelector.prototype.andThen = function (then) {
        return new GetSelector(this._key, this._top, this.then.andThen(then));
    };
    GetSelector.prototype.writeRecon = function (output) {
        output.push(36);
        if (this._key instanceof Item.Record) {
            output.push(123);
            this._key.writeReconBlock(output);
            output.push(125);
        }
        else {
            this._key.writeRecon(output);
        }
        this.then.writeThen(output);
    };
    GetSelector.prototype.writeThen = function (output) {
        output.push(46);
        if (this._key instanceof Item.Record) {
            output.push(123);
            this._key.writeReconBlock(output);
            output.push(125);
        }
        else {
            this._key.writeRecon(output);
        }
        this.then.writeThen(output);
    };
    GetSelector.prototype.clone = function () {
        return new GetSelector(this._key.clone(), this._top, this.then.clone());
    };
    GetSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GetSelector) {
            return this._key.equals(that._key) && this._top === that._top && this.then.equals(that.then);
        }
        return false;
    };
    GetSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(0xE02DF528, this._key.hashCode()), this._top ? 1 : 0), this.then.hashCode()));
    };
    return GetSelector;
}(Selector));
Item.GetSelector = GetSelector;
var GetAttrSelector = (function (_super) {
    __extends(GetAttrSelector, _super);
    function GetAttrSelector(key, top, then) {
        if (top === void 0) { top = false; }
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this._key = key.commit();
        _this._top = top;
        _this.then = then;
        return _this;
    }
    GetAttrSelector.prototype.forSelected = function (stack, callback, thisArg) {
        for (var i = stack.size - 1; i >= 0; i -= 1) {
            var frame = stack.getItem(i).toValue();
            if (frame instanceof Item.Record) {
                var value = frame.getAttr(this._key);
                if (value.isDefined()) {
                    stack.push(value);
                    var selected = this.then.forSelected(stack, callback, thisArg);
                    stack.pop();
                    return selected;
                }
            }
        }
        return undefined;
    };
    GetAttrSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.item().toValue();
            if (frame instanceof Item.Record) {
                var oldValue = frame.getAttr(this._key);
                stack.push(oldValue);
                var newItem = this.then.mapSelected(stack, transform, thisArg);
                stack.pop();
                if (newItem.isDefined()) {
                    frame.setAttr(this._key, newItem.toValue());
                }
                else {
                    frame.delete(this._key);
                }
            }
            return stack.item();
        }
        return Item.Absent;
    };
    GetAttrSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.substitute(stack).toValue();
        if (!(key instanceof Text$1)) {
            key = this._key;
        }
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new GetAttrSelector(key, this._top, then);
    };
    GetAttrSelector.prototype.andThen = function (then) {
        return new GetAttrSelector(this._key, this._top, this.then.andThen(then));
    };
    GetAttrSelector.prototype.writeRecon = function (output) {
        output.push(36);
        output.push(64);
        this._key.writeRecon(output);
        this.then.writeThen(output);
    };
    GetAttrSelector.prototype.writeThen = function (output) {
        output.push(46);
        output.push(64);
        this._key.writeRecon(output);
        this.then.writeThen(output);
    };
    GetAttrSelector.prototype.clone = function () {
        return new GetAttrSelector(this._key.clone(), this._top, this.then.clone());
    };
    GetAttrSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GetAttrSelector) {
            return this._key.equals(that._key) && this._top === that._top && this.then.equals(that.then);
        }
        return false;
    };
    GetAttrSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(0x5DFA8D5E, this._key.hashCode()), this._top ? 1 : 0), this.then.hashCode()));
    };
    return GetAttrSelector;
}(Selector));
Item.GetAttrSelector = GetAttrSelector;
var GetItemSelector = (function (_super) {
    __extends(GetItemSelector, _super);
    function GetItemSelector(index, then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this._index = index;
        _this.then = then;
        return _this;
    }
    GetItemSelector.prototype.forSelected = function (stack, callback, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.item().toValue();
            var index = this._index.numberValue();
            if (frame instanceof Item.Record && index < frame.length) {
                var item = frame.getItem(index);
                stack.push(item);
                var selected = this.then.forSelected(stack, callback, thisArg);
                stack.pop();
                return selected;
            }
        }
        return undefined;
    };
    GetItemSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.item().toValue();
            var index = this._index.numberValue();
            if (frame instanceof Item.Record && index < frame.length) {
                var oldItem = frame.getItem(index);
                stack.push(oldItem);
                var newItem = this.then.mapSelected(stack, transform, thisArg);
                stack.pop();
                if (newItem.isDefined()) {
                    frame.setItem(index, newItem);
                }
                else {
                    frame.splice(index, 1);
                }
            }
            return stack.item();
        }
        return Item.Absent;
    };
    GetItemSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new GetItemSelector(this._index, then);
    };
    GetItemSelector.prototype.andThen = function (then) {
        return new GetItemSelector(this._index, this.then.andThen(then));
    };
    GetItemSelector.prototype.writeRecon = function (output) {
        output.push(36);
        this.writeThen(output);
    };
    GetItemSelector.prototype.writeThen = function (output) {
        output.push(35);
        this._index.writeRecon(output);
        this.then.writeThen(output);
    };
    GetItemSelector.prototype.clone = function () {
        return new GetItemSelector(this._index, this.then.clone());
    };
    GetItemSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GetItemSelector) {
            return this._index.equals(that._index) && this.then.equals(that.then);
        }
        return false;
    };
    GetItemSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x8009D65D, this._index.hashCode()), this.then.hashCode()));
    };
    return GetItemSelector;
}(Selector));
Item.GetItemSelector = GetItemSelector;
var KeysSelector = (function (_super) {
    __extends(KeysSelector, _super);
    function KeysSelector(then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this.then = then;
        return _this;
    }
    KeysSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame instanceof Item.Field) {
                stack.push(frame.key);
                selected = this.then.forSelected(stack, callback, thisArg);
                stack.pop();
            }
            else if (frame instanceof Item.Record) {
                selected = frame.forEach(function (item) {
                    var selected;
                    if (item instanceof Item.Field) {
                        stack.push(item.key);
                        selected = this.then.forSelected(stack, callback, thisArg);
                        stack.pop();
                    }
                    return selected;
                }, this);
            }
            stack.push(frame);
        }
        return selected;
    };
    KeysSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame instanceof Item.Field) {
                var oldKey = frame.key;
                stack.push(oldKey);
                var newKey = this.then.mapSelected(stack, transform, thisArg);
                stack.pop();
                if (newKey.isDefined() && newKey instanceof Item.Value) {
                    if (newKey !== oldKey) {
                        if (frame instanceof Item.Attr && newKey instanceof Item.Text) {
                            frame = Item.Attr.of(newKey, frame.value);
                        }
                        else {
                            frame = Item.Slot.of(newKey, frame.value);
                        }
                    }
                }
                else {
                    frame = Item.Absent;
                }
            }
            else if (frame instanceof Item.Record) {
                var items = frame.iterator();
                while (items.hasNext()) {
                    var item = items.next().value;
                    if (item instanceof Item.Field) {
                        var oldKey = item.key;
                        stack.push(oldKey);
                        var newKey = this.then.mapSelected(stack, transform, thisArg);
                        stack.pop();
                        if (newKey.isDefined() && newKey instanceof Item.Value) {
                            if (newKey !== oldKey) {
                                if (item instanceof Item.Attr && newKey instanceof Item.Text) {
                                    items.set(Item.Attr.of(newKey, item.value));
                                }
                                else {
                                    items.set(Item.Slot.of(newKey, item.value));
                                }
                            }
                        }
                        else {
                            items.delete();
                        }
                    }
                }
            }
            stack.push(frame);
            return frame;
        }
        return Item.Absent;
    };
    KeysSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new KeysSelector(then);
    };
    KeysSelector.prototype.andThen = function (then) {
        return new KeysSelector(this.then.andThen(then));
    };
    KeysSelector.prototype.writeRecon = function (output) {
        output.push(36);
        output.push(42);
        output.push(58);
        this.then.writeThen(output);
    };
    KeysSelector.prototype.writeThen = function (output) {
        output.push(46);
        output.push(42);
        output.push(58);
        this.then.writeThen(output);
    };
    KeysSelector.prototype.clone = function () {
        return new KeysSelector(this.then.clone());
    };
    KeysSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof KeysSelector) {
            return this.then.equals(that.then);
        }
        return false;
    };
    KeysSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0xA0D3933A, this.then.hashCode()));
    };
    return KeysSelector;
}(Selector));
Selector.Keys = new KeysSelector();
Item.KeysSelector = KeysSelector;
var ChildrenSelector = (function (_super) {
    __extends(ChildrenSelector, _super);
    function ChildrenSelector(then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this.then = then;
        return _this;
    }
    ChildrenSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame.toValue() instanceof Item.Record) {
                selected = frame.toValue().forEach(function (item) {
                    stack.push(item);
                    var selected = this.then.forSelected(stack, callback, thisArg);
                    stack.pop();
                    return selected;
                }, this);
            }
            stack.push(frame);
        }
        return selected;
    };
    ChildrenSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame.toValue() instanceof Item.Record) {
                var items = frame.toValue().iterator();
                while (items.hasNext()) {
                    var oldItem = items.next().value;
                    stack.push(oldItem);
                    var newItem = this.then.mapSelected(stack, transform, thisArg);
                    stack.pop();
                    if (newItem.isDefined()) {
                        if (newItem !== oldItem) {
                            items.set(newItem);
                        }
                    }
                    else {
                        items.delete();
                    }
                }
            }
            stack.push(frame);
            return frame;
        }
        return Item.Absent;
    };
    ChildrenSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new ChildrenSelector(then);
    };
    ChildrenSelector.prototype.andThen = function (then) {
        return new ChildrenSelector(this.then.andThen(then));
    };
    ChildrenSelector.prototype.writeRecon = function (output) {
        output.push(36);
        output.push(42);
        this.then.writeThen(output);
    };
    ChildrenSelector.prototype.writeThen = function (output) {
        output.push(46);
        output.push(42);
        this.then.writeThen(output);
    };
    ChildrenSelector.prototype.clone = function () {
        return new ChildrenSelector(this.then.clone());
    };
    ChildrenSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ChildrenSelector) {
            return this.then.equals(that.then);
        }
        return false;
    };
    ChildrenSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x0273131C, this.then.hashCode()));
    };
    return ChildrenSelector;
}(Selector));
Selector.Children = new ChildrenSelector();
Item.ChildrenSelector = ChildrenSelector;
var DescendantsSelector = (function (_super) {
    __extends(DescendantsSelector, _super);
    function DescendantsSelector(then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this.then = then;
        return _this;
    }
    DescendantsSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame.toValue() instanceof Item.Record) {
                selected = frame.toValue().forEach(function (item) {
                    stack.push(item);
                    var selected = this.then.forSelected(stack, callback, thisArg);
                    if (selected === undefined) {
                        this.forSelected(stack, callback, thisArg);
                    }
                    stack.pop();
                    return selected;
                }, this);
            }
            stack.push(frame);
        }
        return selected;
    };
    DescendantsSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame.toValue() instanceof Item.Record) {
                var items = frame.toValue().iterator();
                while (items.hasNext()) {
                    var oldItem = items.next().value;
                    stack.push(oldItem);
                    var newItem = this.then.mapSelected(stack, transform, thisArg);
                    if (newItem.isDefined()) {
                        newItem = this.mapSelected(stack, transform, thisArg);
                    }
                    stack.pop();
                    if (newItem.isDefined()) {
                        if (newItem !== oldItem) {
                            items.set(newItem);
                        }
                    }
                    else {
                        items.delete();
                    }
                }
            }
            stack.push(frame);
            return frame;
        }
        return Item.Absent;
    };
    DescendantsSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new DescendantsSelector(then);
    };
    DescendantsSelector.prototype.andThen = function (then) {
        return new DescendantsSelector(this.then.andThen(then));
    };
    DescendantsSelector.prototype.writeRecon = function (output) {
        output.push(36);
        output.push(42);
        output.push(42);
        this.then.writeThen(output);
    };
    DescendantsSelector.prototype.writeThen = function (output) {
        output.push(46);
        output.push(42);
        output.push(42);
        this.then.writeThen(output);
    };
    DescendantsSelector.prototype.clone = function () {
        return new DescendantsSelector(this.then.clone());
    };
    DescendantsSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof DescendantsSelector) {
            return this.then.equals(that.then);
        }
        return false;
    };
    DescendantsSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x294FD08C, this.then.hashCode()));
    };
    return DescendantsSelector;
}(Selector));
Selector.Descendants = new DescendantsSelector();
Item.DescendantsSelector = DescendantsSelector;
var FilterSelector = (function (_super) {
    __extends(FilterSelector, _super);
    function FilterSelector(predicate, then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this.predicate = predicate;
        _this.then = then;
        return _this;
    }
    FilterSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            if (this.filterSelected(stack)) {
                selected = this.then.forSelected(stack, callback, thisArg);
            }
        }
        return selected;
    };
    FilterSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            if (this.filterSelected(stack)) {
                return this.then.mapSelected(stack, transform, thisArg);
            }
            return stack.item();
        }
        return Item.Absent;
    };
    FilterSelector.prototype.filterSelected = function (stack) {
        return this.predicate.forSelected(stack, this.selected, this) !== undefined;
    };
    FilterSelector.prototype.selected = function (stack) {
        return null;
    };
    FilterSelector.prototype.filter = function (predicate) {
        if (arguments.length === 0) {
            return this;
        }
        else {
            predicate = Item.of(predicate);
            return this.andThen(predicate.filter());
        }
    };
    FilterSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var predicate = this.predicate.substitute(stack);
        if (!(predicate instanceof Selector)) {
            predicate = this.predicate;
        }
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new FilterSelector(predicate, then);
    };
    FilterSelector.prototype.andThen = function (then) {
        return new FilterSelector(this.predicate, this.then.andThen(then));
    };
    FilterSelector.prototype.writeRecon = function (output) {
        output.push(36);
        this.writeThen(output);
    };
    FilterSelector.prototype.writeThen = function (output) {
        output.push(91);
        this.predicate.writeRecon(output);
        output.push(93);
        this.then.writeThen(output);
    };
    FilterSelector.prototype.clone = function () {
        return new FilterSelector(this.predicate.clone(), this.then.clone());
    };
    FilterSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof FilterSelector) {
            return this.predicate.equals(that.predicate) && this.then.equals(that.then);
        }
        return false;
    };
    FilterSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x3A88E158, this.predicate.hashCode()), this.then.hashCode()));
    };
    return FilterSelector;
}(Selector));
Item.FilterSelector = FilterSelector;
//# sourceMappingURL=data:application/json;base64,

var Func = (function (_super) {
    __extends(Func, _super);
    function Func() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Func.prototype.partialInvoke = function (args, stack, expr) {
        return undefined;
    };
    Func.prototype.toAny = function () {
        return this;
    };
    Func.prototype.writeRecon = function (output) {
    };
    Func.prototype.toRecon = function () {
        return '';
    };
    Func.prototype.toReconBlock = function () {
        return '';
    };
    Func.prototype.compare = function (that) {
        if (that instanceof Func) {
            var order = this.name.localeCompare(that.name);
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        }
        else if (that instanceof Item.Expr || that === Value.Extant || that === Value.Absent) {
            return -1;
        }
        else {
            return 1;
        }
    };
    Func.prototype.equals = function (that) {
        if (that instanceof Func) {
            return this.name === that.name;
        }
        return false;
    };
    Func.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0xB58EA7B4, Murmur3.hash(this.name)));
    };
    Func.prototype.toString = function () {
        return '[' + 'Func' + ' ' + this.name + ']';
    };
    Func.Eager = undefined;
    Func.Abs = undefined;
    Func.Ceil = undefined;
    Func.Floor = undefined;
    Func.IsNaN = undefined;
    Func.Round = undefined;
    Func.Pow = undefined;
    Func.Sqrt = undefined;
    Func.Max = undefined;
    Func.Min = undefined;
    Func.Count = undefined;
    Func.Random = undefined;
    Func.Rate = undefined;
    Func.Percent = undefined;
    Func.Number = undefined;
    Func.String = undefined;
    Func.ConsoleLog = undefined;
    Func.NumberFormat = undefined;
    return Func;
}(Value));
Item.Func = Func;
var EagerFunc = (function (_super) {
    __extends(EagerFunc, _super);
    function EagerFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(EagerFunc.prototype, "name", {
        get: function () {
            return 'eager';
        },
        enumerable: true,
        configurable: true
    });
    EagerFunc.prototype.invoke = function (args, stack) {
        return args.evaluate(stack);
    };
    EagerFunc.prototype.partialInvoke = function (args, stack, expr) {
        return args.evaluate(stack);
    };
    return EagerFunc;
}(Func));
Func.Eager = new EagerFunc();
var AbsFunc = (function (_super) {
    __extends(AbsFunc, _super);
    function AbsFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AbsFunc.prototype, "name", {
        get: function () {
            return 'abs';
        },
        enumerable: true,
        configurable: true
    });
    AbsFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        var x = args.numberValue() || args.getItem(0).numberValue();
        if (x !== undefined) {
            return Item.Num.valueOf(Math.abs(x));
        }
        return Value.Absent;
    };
    return AbsFunc;
}(Func));
Func.Abs = new AbsFunc();
var CeilFunc = (function (_super) {
    __extends(CeilFunc, _super);
    function CeilFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(CeilFunc.prototype, "name", {
        get: function () {
            return 'ceil';
        },
        enumerable: true,
        configurable: true
    });
    CeilFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        var x = args.numberValue() || args.getItem(0).numberValue();
        if (x !== undefined) {
            return Item.Num.valueOf(Math.ceil(x));
        }
        return Value.Absent;
    };
    return CeilFunc;
}(Func));
Func.Ceil = new CeilFunc();
var FloorFunc = (function (_super) {
    __extends(FloorFunc, _super);
    function FloorFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FloorFunc.prototype, "name", {
        get: function () {
            return 'floor';
        },
        enumerable: true,
        configurable: true
    });
    FloorFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        var x = args.numberValue() || args.getItem(0).numberValue();
        if (x !== undefined) {
            return Item.Num.valueOf(Math.floor(x));
        }
        return Value.Absent;
    };
    return FloorFunc;
}(Func));
Func.Floor = new FloorFunc();
var IsNaNFunc = (function (_super) {
    __extends(IsNaNFunc, _super);
    function IsNaNFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(IsNaNFunc.prototype, "name", {
        get: function () {
            return 'isNaN';
        },
        enumerable: true,
        configurable: true
    });
    IsNaNFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        var x = args.numberValue() || args.getItem(0).numberValue();
        if (x !== undefined) {
            return Item.Bool.valueOf(isNaN(x));
        }
        return Value.Absent;
    };
    return IsNaNFunc;
}(Func));
Func.IsNaN = new IsNaNFunc();
var RoundFunc = (function (_super) {
    __extends(RoundFunc, _super);
    function RoundFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(RoundFunc.prototype, "name", {
        get: function () {
            return 'round';
        },
        enumerable: true,
        configurable: true
    });
    RoundFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        var x = args.numberValue() || args.getItem(0).numberValue();
        if (x !== undefined) {
            return Item.Num.valueOf(Math.round(x));
        }
        return Value.Absent;
    };
    return RoundFunc;
}(Func));
Func.Round = new RoundFunc();
var PowFunc = (function (_super) {
    __extends(PowFunc, _super);
    function PowFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PowFunc.prototype, "name", {
        get: function () {
            return 'pow';
        },
        enumerable: true,
        configurable: true
    });
    PowFunc.prototype.invoke = function (args, stack, expr) {
        var x = args.getItem(0).evaluate(stack).numberValue();
        var y = args.getItem(1).evaluate(stack).numberValue();
        if (x !== undefined && y !== undefined) {
            return Item.Num.valueOf(Math.pow(x, y));
        }
        return Value.Absent;
    };
    return PowFunc;
}(Func));
Func.Pow = new PowFunc();
var SqrtFunc = (function (_super) {
    __extends(SqrtFunc, _super);
    function SqrtFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SqrtFunc.prototype, "name", {
        get: function () {
            return 'sqrt';
        },
        enumerable: true,
        configurable: true
    });
    SqrtFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        var x = args.numberValue() || args.getItem(0).numberValue();
        if (x !== undefined) {
            return Item.Num.valueOf(Math.sqrt(x));
        }
        return Value.Absent;
    };
    return SqrtFunc;
}(Func));
Func.Sqrt = new SqrtFunc();
var MaxFunc = (function (_super) {
    __extends(MaxFunc, _super);
    function MaxFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MaxFunc.prototype, "name", {
        get: function () {
            return 'max';
        },
        enumerable: true,
        configurable: true
    });
    MaxFunc.prototype.invoke = function (args, stack, expr) {
        var x;
        var y;
        if (args.length >= 2) {
            x = args.getItem(0).evaluate(stack).numberValue();
            y = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            x = args.evaluate(stack).numberValue();
        }
        if (x !== undefined && isFinite(x)) {
            expr.state = expr.state || {};
            if (y === undefined) {
                y = Math.max(x, expr.state.nax || x);
                expr.state.nax = y;
            }
            if (y !== undefined && isFinite(y)) {
                return Item.Num.valueOf(Math.max(x, y));
            }
        }
        return Value.Absent;
    };
    MaxFunc.prototype.partialInvoke = function (args, stack, expr) {
        if (args.length === 1) {
            args = args.evaluate(stack).toValue();
            return this.invoke(args, stack, expr);
        }
        return undefined;
    };
    return MaxFunc;
}(Func));
Func.Max = new MaxFunc();
var MinFunc = (function (_super) {
    __extends(MinFunc, _super);
    function MinFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MinFunc.prototype, "name", {
        get: function () {
            return 'min';
        },
        enumerable: true,
        configurable: true
    });
    MinFunc.prototype.invoke = function (args, stack, expr) {
        var x;
        var y;
        if (args.length >= 2) {
            x = args.getItem(0).evaluate(stack).numberValue();
            y = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            x = args.evaluate(stack).numberValue();
        }
        if (x !== undefined && isFinite(x)) {
            expr.state = expr.state || {};
            if (y === undefined) {
                y = Math.min(x, expr.state.min || x);
                expr.state.min = y;
            }
            if (y !== undefined && isFinite(y)) {
                return Item.Num.valueOf(Math.min(x, y));
            }
        }
        return Value.Absent;
    };
    MinFunc.prototype.partialInvoke = function (args, stack, expr) {
        if (args.length === 1) {
            args = args.evaluate(stack).toValue();
            return this.invoke(args, stack, expr);
        }
        return undefined;
    };
    return MinFunc;
}(Func));
Func.Min = new MinFunc();
var CountFunc = (function (_super) {
    __extends(CountFunc, _super);
    function CountFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(CountFunc.prototype, "name", {
        get: function () {
            return 'count';
        },
        enumerable: true,
        configurable: true
    });
    CountFunc.prototype.invoke = function (args, stack, expr) {
        if (args instanceof Selector) {
            var count_1 = 0;
            args.forSelected(stack, function (stack) {
                count_1 += 1;
            }, this);
            return Item.Num.valueOf(count_1);
        }
        else if (args instanceof Record) {
            return Item.Num.valueOf(args.length);
        }
        return Value.Absent;
    };
    return CountFunc;
}(Func));
Func.Count = new CountFunc();
var PercentFunc = (function (_super) {
    __extends(PercentFunc, _super);
    function PercentFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PercentFunc.prototype, "name", {
        get: function () {
            return 'percent';
        },
        enumerable: true,
        configurable: true
    });
    PercentFunc.prototype.invoke = function (args, stack, expr) {
        var value;
        var total;
        if (args.length >= 2) {
            value = args.getItem(0).evaluate(stack).numberValue();
            total = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            value = args.evaluate(stack).numberValue();
        }
        if (value !== undefined && isFinite(value)) {
            expr.state = expr.state || {};
            if (total === undefined) {
                total = Math.max(value, expr.state.total || value);
                expr.state.total = total;
            }
            if (total !== 0 && isFinite(total)) {
                return Item.Text.valueOf(Math.round(100 * value / total) + '%');
            }
        }
        return Value.Absent;
    };
    PercentFunc.prototype.partialInvoke = function (args, stack, expr) {
        if (args.length === 1) {
            args = args.evaluate(stack).toValue();
            return this.invoke(args, stack, expr);
        }
        return undefined;
    };
    return PercentFunc;
}(Func));
Func.Percent = new PercentFunc();
var RandomFunc = (function (_super) {
    __extends(RandomFunc, _super);
    function RandomFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(RandomFunc.prototype, "name", {
        get: function () {
            return 'random';
        },
        enumerable: true,
        configurable: true
    });
    RandomFunc.prototype.invoke = function (args, stack) {
        var lower = args.length >= 1 ? args.getItem(0).evaluate(stack).numberValue(0) : 0;
        var upper = args.length >= 2 ? args.getItem(1).evaluate(stack).numberValue(lower + 1) : lower + 1;
        var value = lower + Math.random() * (upper - lower);
        return Item.Num.valueOf(value);
    };
    return RandomFunc;
}(Func));
Func.Random = new RandomFunc();
var RateFunc = (function (_super) {
    __extends(RateFunc, _super);
    function RateFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(RateFunc.prototype, "name", {
        get: function () {
            return 'rate';
        },
        enumerable: true,
        configurable: true
    });
    RateFunc.prototype.invoke = function (args, stack, expr) {
        var value;
        var period;
        if (args.length >= 2) {
            value = args.getItem(0).evaluate(stack).numberValue();
            period = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            value = args.evaluate(stack).numberValue();
        }
        if (value !== undefined && isFinite(value)) {
            expr.state = expr.state || {};
            if (period === undefined) {
                period = 1000;
            }
            if (expr.state.t0 === undefined) {
                expr.state.t0 = Date.now();
                expr.state.v0 = value;
            }
            else {
                var t1 = Date.now();
                var dt = t1 - expr.state.t0;
                if (dt > period && t1 > expr.state.t0 || dt > 2 * period) {
                    var dv = value - expr.state.v0;
                    expr.state.t0 = t1;
                    expr.state.v0 = value;
                    expr.state.dt = dt;
                    expr.state.dv = dv;
                }
                if (expr.state.dt !== undefined) {
                    var rate = period * expr.state.dv / (expr.state.dt || 1);
                    return Item.Num.valueOf(rate);
                }
            }
        }
        return Value.Absent;
    };
    RateFunc.prototype.partialInvoke = function (args, stack, expr) {
        args = args.evaluate(stack).toValue();
        return this.invoke(args, stack, expr);
    };
    return RateFunc;
}(Func));
Func.Rate = new RateFunc();
var NumberFunc = (function (_super) {
    __extends(NumberFunc, _super);
    function NumberFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NumberFunc.prototype, "name", {
        get: function () {
            return 'number';
        },
        enumerable: true,
        configurable: true
    });
    NumberFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        if (args instanceof Item.Num) {
            return args;
        }
        else {
            var x = args.numberValue() || args.getItem(0).numberValue();
            if (x !== undefined) {
                return Item.Num.valueOf(x);
            }
        }
        return Value.Absent;
    };
    return NumberFunc;
}(Func));
Func.Number = new NumberFunc();
var StringFunc = (function (_super) {
    __extends(StringFunc, _super);
    function StringFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(StringFunc.prototype, "name", {
        get: function () {
            return 'string';
        },
        enumerable: true,
        configurable: true
    });
    StringFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        if (args instanceof Item.Text) {
            return args;
        }
        else {
            var s = args.stringValue();
            if (s !== undefined) {
                return Item.Text.valueOf(s);
            }
        }
        return Value.Absent;
    };
    return StringFunc;
}(Func));
Func.String = new StringFunc();
var ConsoleLogFunc = (function (_super) {
    __extends(ConsoleLogFunc, _super);
    function ConsoleLogFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ConsoleLogFunc.prototype, "name", {
        get: function () {
            return 'console.log';
        },
        enumerable: true,
        configurable: true
    });
    ConsoleLogFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        console.log(args.toAny());
        return Item.Absent;
    };
    return ConsoleLogFunc;
}(Func));
Func.ConsoleLog = new ConsoleLogFunc();
var NumberFormatFunc = (function (_super) {
    __extends(NumberFormatFunc, _super);
    function NumberFormatFunc() {
        return _super.call(this) || this;
    }
    Object.defineProperty(NumberFormatFunc.prototype, "name", {
        get: function () {
            return 'numberFormat';
        },
        enumerable: true,
        configurable: true
    });
    NumberFormatFunc.prototype.invoke = function (args, stack) {
        var value;
        var options;
        if (args.length >= 2) {
            value = args.getItem(0).evaluate(stack).numberValue();
            options = args.getItem(1).evaluate(stack).toValue().toAny();
        }
        else {
            value = args.evaluate(stack).numberValue();
        }
        if (value === undefined) {
            return Value.Absent;
        }
        switch (options.type) {
            case 'any':
                return this.anyFormat(value, options);
            case 'prefix':
                return this.prefixFormat(value, options);
            case 'digits':
                return this.digitsFormat(value, options);
            default:
                return this.numberCommas(value, options);
        }
    };
    NumberFormatFunc.prototype.fixValue = function (value, options) {
        if (!options || options && !options.decimal) {
            return value;
        }
        var pd = Math.pow(10, options.decimal);
        var results = (options.precision) ? (Math.round(value * pd) / pd) : +value;
        return results.toFixed(options.decimal);
    };
    NumberFormatFunc.prototype.numberCommas = function (value, options) {
        var output = this.fixValue(value, options);
        var parts = output.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return Item.Text.valueOf(parts.join("."));
    };
    NumberFormatFunc.prototype.anyFormat = function (value, options) {
        var results = this.fixValue(value, options);
        return (typeof results === 'string') ? Item.Text.valueOf(results) : Item.Num.valueOf(results);
    };
    NumberFormatFunc.prototype.prefixFormat = function (value, options) {
        var PREFIXES = ['p', 'n', 'u', 'm', '', 'k', 'M', 'G', 'T'];
        var decimal = (options && options.decimal) ? options.decimal : 0;
        var se = value.toExponential(decimal + 1).split(/e/);
        var s = +se[0];
        var e = +se[1];
        var f = Math.floor(e / 3);
        var results = +(s * Math.pow(10, e - f * 3)).toFixed(decimal);
        return Item.Text.valueOf(results + PREFIXES[f + 4]);
    };
    NumberFormatFunc.prototype.digitsFormat = function (value, options) {
        var digits = (options && options.digits) ? options.digits : 1;
        var results = "" + Math.round(value);
        while (results.length < digits) {
            results = '0' + results;
        }
        return Item.Text.valueOf(results);
    };
    return NumberFormatFunc;
}(Func));
Func.NumberFormat = new NumberFormatFunc();
Item.GlobalScope = Value.empty()
    .slot('eager', Func.Eager)
    .slot('abs', Func.Abs)
    .slot('ceil', Func.Ceil)
    .slot('floor', Func.Floor)
    .slot('isNaN', Func.IsNaN)
    .slot('round', Func.Round)
    .slot('pow', Func.Pow)
    .slot('sqrt', Func.Sqrt)
    .slot('max', Func.Max)
    .slot('min', Func.Min)
    .slot('count', Func.Count)
    .slot('random', Func.Random)
    .slot('rate', Func.Rate)
    .slot('percent', Func.Percent)
    .slot('number', Func.Number)
    .slot('string', Func.String)
    .slot('console', Value.empty().slot('log', Func.ConsoleLog))
    .slot('log', Func.ConsoleLog)
    .slot('numberFormat', Func.NumberFormat)
    .commit();
EvalStack.GlobalScope = Item.GlobalScope;
//# sourceMappingURL=data:application/json;base64,

var Expr = (function (_super) {
    __extends(Expr, _super);
    function Expr() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Expr.prototype.compare = function (that) {
        if (that instanceof Expr) {
            return 0;
        }
        else if (that === Value.Extant || that === Value.Absent) {
            return -1;
        }
        else {
            return 1;
        }
    };
    Expr.prototype.toString = function () {
        return this.toRecon();
    };
    return Expr;
}(DynamicValue));
Item.Expr = Expr;
var InfixExpr = (function (_super) {
    __extends(InfixExpr, _super);
    function InfixExpr(lhs, rhs) {
        var _this = _super.call(this) || this;
        _this.lhs = lhs.commit();
        _this.rhs = rhs.commit();
        return _this;
    }
    InfixExpr.prototype.writeRecon = function (output) {
        if (this.lhs.precedence < this.precedence) {
            output.push(40);
            this.lhs.writeRecon(output);
            output.push(41);
        }
        else {
            this.lhs.writeRecon(output);
        }
        output.push(32);
        Item.Text.writeIdent(this.operator, output);
        output.push(32);
        if (this.rhs.precedence < this.precedence) {
            output.push(40);
            this.rhs.writeRecon(output);
            output.push(41);
        }
        else {
            this.rhs.writeRecon(output);
        }
    };
    return InfixExpr;
}(Expr));
var PrefixExpr = (function (_super) {
    __extends(PrefixExpr, _super);
    function PrefixExpr(rhs) {
        var _this = _super.call(this) || this;
        _this.rhs = rhs.commit();
        return _this;
    }
    PrefixExpr.prototype.writeRecon = function (output) {
        Item.Text.writeIdent(this.operator, output);
        if (this.rhs.precedence < this.precedence) {
            output.push(40);
            this.rhs.writeRecon(output);
            output.push(41);
        }
        else {
            this.rhs.writeRecon(output);
        }
    };
    return PrefixExpr;
}(Expr));
var CondExpr = (function (_super) {
    __extends(CondExpr, _super);
    function CondExpr(predExpr, thenExpr, elseExpr) {
        var _this = _super.call(this) || this;
        _this.predExpr = predExpr.commit();
        _this.thenExpr = thenExpr.commit();
        _this.elseExpr = elseExpr.commit();
        return _this;
    }
    Object.defineProperty(CondExpr.prototype, "precedence", {
        get: function () {
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    CondExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var predValue = this.predExpr.evaluate(stack);
        if (predValue.isDefined()) {
            var thenValue = this.thenExpr.evaluate(stack);
            return thenValue;
        }
        else {
            var elseValue = this.elseExpr.evaluate(stack);
            return elseValue;
        }
    };
    CondExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var predExpr = this.predExpr.substitute(stack).toValue();
        var thenExpr = this.thenExpr.substitute(stack).toValue();
        var elseExpr = this.elseExpr.substitute(stack).toValue();
        return new CondExpr(predExpr, thenExpr, elseExpr);
    };
    CondExpr.prototype.writeRecon = function (output) {
        if (this.predExpr instanceof CondExpr) {
            output.push(40);
            this.predExpr.writeRecon(output);
            output.push(41);
        }
        else {
            this.predExpr.writeRecon(output);
        }
        output.push(32);
        output.push(63);
        output.push(32);
        this.thenExpr.writeRecon(output);
        output.push(32);
        output.push(58);
        output.push(32);
        this.elseExpr.writeRecon(output);
    };
    CondExpr.prototype.clone = function () {
        return new CondExpr(this.predExpr.clone(), this.thenExpr.clone(), this.elseExpr.clone());
    };
    CondExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof CondExpr) {
            return this.predExpr.equals(that.predExpr) && this.thenExpr.equals(that.thenExpr)
                && this.elseExpr.equals(that.elseExpr);
        }
        return false;
    };
    CondExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(0xA01D34F1, this.predExpr.hashCode()), this.thenExpr.hashCode()), this.elseExpr.hashCode()));
    };
    return CondExpr;
}(Expr));
Item.CondExpr = CondExpr;
var LorExpr = (function (_super) {
    __extends(LorExpr, _super);
    function LorExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(LorExpr.prototype, "operator", {
        get: function () {
            return '||';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LorExpr.prototype, "precedence", {
        get: function () {
            return 2;
        },
        enumerable: true,
        configurable: true
    });
    LorExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        if (lvalue.isDefined()) {
            return lvalue;
        }
        else {
            var rvalue = this.rhs.evaluate(stack);
            return rvalue;
        }
    };
    LorExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.or(rvalue);
    };
    LorExpr.prototype.clone = function () {
        return new LorExpr(this.lhs.clone(), this.rhs.clone());
    };
    LorExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LorExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    LorExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xA425A728, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return LorExpr;
}(InfixExpr));
Item.LorExpr = LorExpr;
var LandExpr = (function (_super) {
    __extends(LandExpr, _super);
    function LandExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(LandExpr.prototype, "operator", {
        get: function () {
            return '&&';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LandExpr.prototype, "precedence", {
        get: function () {
            return 3;
        },
        enumerable: true,
        configurable: true
    });
    LandExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        if (lvalue.isDefined()) {
            var rvalue = this.rhs.evaluate(stack);
            return rvalue;
        }
        else {
            return lvalue;
        }
    };
    LandExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.and(rvalue);
    };
    LandExpr.prototype.clone = function () {
        return new LandExpr(this.lhs.clone(), this.rhs.clone());
    };
    LandExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LandExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    LandExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xB4CCC7B9, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return LandExpr;
}(InfixExpr));
Item.LandExpr = LandExpr;
var BorExpr = (function (_super) {
    __extends(BorExpr, _super);
    function BorExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(BorExpr.prototype, "operator", {
        get: function () {
            return '|';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BorExpr.prototype, "precedence", {
        get: function () {
            return 4;
        },
        enumerable: true,
        configurable: true
    });
    BorExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.bor(rvalue);
    };
    BorExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.bor(rvalue);
    };
    BorExpr.prototype.clone = function () {
        return new BorExpr(this.lhs.clone(), this.rhs.clone());
    };
    BorExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof BorExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    BorExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xAFE940A7, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return BorExpr;
}(InfixExpr));
Item.BorExpr = BorExpr;
var BxorExpr = (function (_super) {
    __extends(BxorExpr, _super);
    function BxorExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(BxorExpr.prototype, "operator", {
        get: function () {
            return '^';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BxorExpr.prototype, "precedence", {
        get: function () {
            return 5;
        },
        enumerable: true,
        configurable: true
    });
    BxorExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.bxor(rvalue);
    };
    BxorExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.bxor(rvalue);
    };
    BxorExpr.prototype.clone = function () {
        return new BxorExpr(this.lhs.clone(), this.rhs.clone());
    };
    BxorExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof BxorExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    BxorExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x9680D943, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return BxorExpr;
}(InfixExpr));
Item.BxorExpr = BxorExpr;
var BandExpr = (function (_super) {
    __extends(BandExpr, _super);
    function BandExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(BandExpr.prototype, "operator", {
        get: function () {
            return '&';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BandExpr.prototype, "precedence", {
        get: function () {
            return 6;
        },
        enumerable: true,
        configurable: true
    });
    BandExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.band(rvalue);
    };
    BandExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.band(rvalue);
    };
    BandExpr.prototype.clone = function () {
        return new BandExpr(this.lhs.clone(), this.rhs.clone());
    };
    BandExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof BandExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    BandExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x6849F7D0, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return BandExpr;
}(InfixExpr));
Item.BandExpr = BandExpr;
var LtExpr = (function (_super) {
    __extends(LtExpr, _super);
    function LtExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(LtExpr.prototype, "operator", {
        get: function () {
            return '<';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LtExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    LtExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.lt(rvalue);
    };
    LtExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.lt(rvalue);
    };
    LtExpr.prototype.clone = function () {
        return new LtExpr(this.lhs.clone(), this.rhs.clone());
    };
    LtExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LtExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    LtExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x39A4927F, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return LtExpr;
}(InfixExpr));
Item.LtExpr = LtExpr;
var LeExpr = (function (_super) {
    __extends(LeExpr, _super);
    function LeExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(LeExpr.prototype, "operator", {
        get: function () {
            return '<=';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LeExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    LeExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.le(rvalue);
    };
    LeExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.le(rvalue);
    };
    LeExpr.prototype.clone = function () {
        return new LeExpr(this.lhs.clone(), this.rhs.clone());
    };
    LeExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LeExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    LeExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x62DD658C, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return LeExpr;
}(InfixExpr));
Item.LeExpr = LeExpr;
var EqExpr = (function (_super) {
    __extends(EqExpr, _super);
    function EqExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(EqExpr.prototype, "operator", {
        get: function () {
            return '==';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EqExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    EqExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.eq(rvalue);
    };
    EqExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.eq(rvalue);
    };
    EqExpr.prototype.clone = function () {
        return new EqExpr(this.lhs.clone(), this.rhs.clone());
    };
    EqExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof EqExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    EqExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x09007838, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return EqExpr;
}(InfixExpr));
Item.EqExpr = EqExpr;
var NeExpr = (function (_super) {
    __extends(NeExpr, _super);
    function NeExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(NeExpr.prototype, "operator", {
        get: function () {
            return '!=';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NeExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    NeExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.ne(rvalue);
    };
    NeExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.ne(rvalue);
    };
    NeExpr.prototype.clone = function () {
        return new NeExpr(this.lhs.clone(), this.rhs.clone());
    };
    NeExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof NeExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    NeExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xCAB339BA, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return NeExpr;
}(InfixExpr));
Item.NeExpr = NeExpr;
var GeExpr = (function (_super) {
    __extends(GeExpr, _super);
    function GeExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(GeExpr.prototype, "operator", {
        get: function () {
            return '>=';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    GeExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.ge(rvalue);
    };
    GeExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.ge(rvalue);
    };
    GeExpr.prototype.clone = function () {
        return new GeExpr(this.lhs.clone(), this.rhs.clone());
    };
    GeExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GeExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    GeExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x2100DA05, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return GeExpr;
}(InfixExpr));
Item.GeExpr = GeExpr;
var GtExpr = (function (_super) {
    __extends(GtExpr, _super);
    function GtExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(GtExpr.prototype, "operator", {
        get: function () {
            return '>';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GtExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    GtExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.gt(rvalue);
    };
    GtExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.gt(rvalue);
    };
    GtExpr.prototype.clone = function () {
        return new GtExpr(this.lhs.clone(), this.rhs.clone());
    };
    GtExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GtExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    GtExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x8E6240B5, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return GtExpr;
}(InfixExpr));
Item.GtExpr = GtExpr;
var AddExpr = (function (_super) {
    __extends(AddExpr, _super);
    function AddExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(AddExpr.prototype, "operator", {
        get: function () {
            return '+';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AddExpr.prototype, "precedence", {
        get: function () {
            return 7;
        },
        enumerable: true,
        configurable: true
    });
    AddExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.plus(rvalue);
    };
    AddExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.plus(rvalue);
    };
    AddExpr.prototype.clone = function () {
        return new AddExpr(this.lhs.clone(), this.rhs.clone());
    };
    AddExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof AddExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    AddExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xBB5AB088, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return AddExpr;
}(InfixExpr));
Item.AddExpr = AddExpr;
var SubExpr = (function (_super) {
    __extends(SubExpr, _super);
    function SubExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(SubExpr.prototype, "operator", {
        get: function () {
            return '-';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubExpr.prototype, "precedence", {
        get: function () {
            return 7;
        },
        enumerable: true,
        configurable: true
    });
    SubExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.minus(rvalue);
    };
    SubExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.minus(rvalue);
    };
    SubExpr.prototype.clone = function () {
        return new SubExpr(this.lhs.clone(), this.rhs.clone());
    };
    SubExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof SubExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    SubExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x775F2746, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return SubExpr;
}(InfixExpr));
Item.SubExpr = SubExpr;
var MulExpr = (function (_super) {
    __extends(MulExpr, _super);
    function MulExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(MulExpr.prototype, "operator", {
        get: function () {
            return '*';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MulExpr.prototype, "precedence", {
        get: function () {
            return 8;
        },
        enumerable: true,
        configurable: true
    });
    MulExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.times(rvalue);
    };
    MulExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.times(rvalue);
    };
    MulExpr.prototype.clone = function () {
        return new MulExpr(this.lhs.clone(), this.rhs.clone());
    };
    MulExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof MulExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    MulExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xD19ED189, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return MulExpr;
}(InfixExpr));
Item.MulExpr = MulExpr;
var DivExpr = (function (_super) {
    __extends(DivExpr, _super);
    function DivExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(DivExpr.prototype, "operator", {
        get: function () {
            return '/';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DivExpr.prototype, "precedence", {
        get: function () {
            return 8;
        },
        enumerable: true,
        configurable: true
    });
    DivExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.divide(rvalue);
    };
    DivExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.divide(rvalue);
    };
    DivExpr.prototype.clone = function () {
        return new DivExpr(this.lhs.clone(), this.rhs.clone());
    };
    DivExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof DivExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    DivExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x2318A446, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return DivExpr;
}(InfixExpr));
Item.DivExpr = DivExpr;
var ModExpr = (function (_super) {
    __extends(ModExpr, _super);
    function ModExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(ModExpr.prototype, "operator", {
        get: function () {
            return '%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModExpr.prototype, "precedence", {
        get: function () {
            return 8;
        },
        enumerable: true,
        configurable: true
    });
    ModExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.modulo(rvalue);
    };
    ModExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.modulo(rvalue);
    };
    ModExpr.prototype.clone = function () {
        return new ModExpr(this.lhs.clone(), this.rhs.clone());
    };
    ModExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ModExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    ModExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x73A0433A, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return ModExpr;
}(InfixExpr));
Item.ModExpr = ModExpr;
var LnotExpr = (function (_super) {
    __extends(LnotExpr, _super);
    function LnotExpr(rhs) {
        return _super.call(this, rhs) || this;
    }
    Object.defineProperty(LnotExpr.prototype, "operator", {
        get: function () {
            return '!';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LnotExpr.prototype, "precedence", {
        get: function () {
            return 9;
        },
        enumerable: true,
        configurable: true
    });
    LnotExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.evaluate(stack);
        return rvalue.not();
    };
    LnotExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.substitute(stack);
        return rvalue.not();
    };
    LnotExpr.prototype.clone = function () {
        return new LnotExpr(this.rhs.clone());
    };
    LnotExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LnotExpr) {
            return this.rhs.equals(that.rhs);
        }
        return false;
    };
    LnotExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x5E85FAB0, this.rhs.hashCode()));
    };
    return LnotExpr;
}(PrefixExpr));
Item.LnotExpr = LnotExpr;
var BnotExpr = (function (_super) {
    __extends(BnotExpr, _super);
    function BnotExpr(rhs) {
        return _super.call(this, rhs) || this;
    }
    Object.defineProperty(BnotExpr.prototype, "operator", {
        get: function () {
            return '~';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BnotExpr.prototype, "precedence", {
        get: function () {
            return 9;
        },
        enumerable: true,
        configurable: true
    });
    BnotExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.evaluate(stack);
        return rvalue.bnot();
    };
    BnotExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.substitute(stack);
        return rvalue.bnot();
    };
    BnotExpr.prototype.clone = function () {
        return new BnotExpr(this.rhs.clone());
    };
    BnotExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof BnotExpr) {
            return this.rhs.equals(that.rhs);
        }
        return false;
    };
    BnotExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x25F0BBE8, this.rhs.hashCode()));
    };
    return BnotExpr;
}(PrefixExpr));
Item.BnotExpr = BnotExpr;
var NegExpr = (function (_super) {
    __extends(NegExpr, _super);
    function NegExpr(rhs) {
        return _super.call(this, rhs) || this;
    }
    Object.defineProperty(NegExpr.prototype, "operator", {
        get: function () {
            return '-';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NegExpr.prototype, "precedence", {
        get: function () {
            return 9;
        },
        enumerable: true,
        configurable: true
    });
    NegExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.evaluate(stack);
        return rvalue.neg();
    };
    NegExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.substitute(stack);
        return rvalue.neg();
    };
    NegExpr.prototype.clone = function () {
        return new NegExpr(this.rhs.clone());
    };
    NegExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof NegExpr) {
            return this.rhs.equals(that.rhs);
        }
        return false;
    };
    NegExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x2052334D, this.rhs.hashCode()));
    };
    return NegExpr;
}(PrefixExpr));
Item.NegExpr = NegExpr;
var PosExpr = (function (_super) {
    __extends(PosExpr, _super);
    function PosExpr(rhs) {
        return _super.call(this, rhs) || this;
    }
    Object.defineProperty(PosExpr.prototype, "operator", {
        get: function () {
            return '+';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PosExpr.prototype, "precedence", {
        get: function () {
            return 9;
        },
        enumerable: true,
        configurable: true
    });
    PosExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.evaluate(stack);
        return rvalue.pos();
    };
    PosExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.substitute(stack);
        return rvalue.pos();
    };
    PosExpr.prototype.clone = function () {
        return new PosExpr(this.rhs.clone());
    };
    PosExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof PosExpr) {
            return this.rhs.equals(that.rhs);
        }
        return false;
    };
    PosExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0xC4C02A1E, this.rhs.hashCode()));
    };
    return PosExpr;
}(PrefixExpr));
Item.PosExpr = PosExpr;
var InvokeExpr = (function (_super) {
    __extends(InvokeExpr, _super);
    function InvokeExpr(func, args) {
        var _this = _super.call(this) || this;
        _this.func = func;
        _this.args = args.commit();
        return _this;
    }
    Object.defineProperty(InvokeExpr.prototype, "precedence", {
        get: function () {
            return 10;
        },
        enumerable: true,
        configurable: true
    });
    InvokeExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var func = this.func.evaluate(stack);
        if (func instanceof Item.Func) {
            return func.invoke(this.args, stack, this);
        }
        return Value.Absent;
    };
    InvokeExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var func = this.func.evaluate(stack);
        if (func instanceof Item.Func) {
            var result = func.partialInvoke(this.args, stack, this);
            if (result) {
                return result;
            }
        }
        var args = this.args.substitute(stack).toValue();
        return new InvokeExpr(this.func, args);
    };
    InvokeExpr.prototype.writeRecon = function (output) {
        this.func.writeRecon(output);
        output.push(40);
        this.args.writeReconBlock(output);
        output.push(41);
    };
    InvokeExpr.prototype.clone = function () {
        return new InvokeExpr(this.func.clone(), this.args.clone());
    };
    InvokeExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof InvokeExpr) {
            return this.func.equals(that.func) && this.args.equals(that.args);
        }
        return false;
    };
    InvokeExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xA214818C, this.func.hashCode()), this.args.hashCode()));
    };
    return InvokeExpr;
}(Expr));
Item.InvokeExpr = InvokeExpr;
//# sourceMappingURL=data:application/json;base64,

var Absent = (function (_super) {
    __extends(Absent, _super);
    function Absent() {
        return _super.call(this) || this;
    }
    Absent.prototype.isDefined = function () {
        return false;
    };
    Absent.prototype.isDistinct = function () {
        return false;
    };
    Absent.prototype.isEmpty = function () {
        return true;
    };
    Absent.prototype.concat = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = Value.empty();
        for (var i = 0, n = items.length; i < n; i += 1) {
            items[i].forEach(function (item) {
                record.push(item);
            });
        }
        return record;
    };
    Absent.prototype.withField = function (key, newValue) {
        return Value.empty(1).withField(key, newValue);
    };
    Absent.prototype.withAttr = function (key, newValue) {
        return Value.empty(1).withAttr(key, newValue);
    };
    Absent.prototype.withSlot = function (key, newValue) {
        return Value.empty(1).withSlot(key, newValue);
    };
    Absent.prototype.withItem = function (newItem) {
        return Value.empty(1).withItem(newItem);
    };
    Absent.prototype.forEach = function (callback, thisArg) {
        return undefined;
    };
    Absent.prototype.iterator = function () {
        return Cursor.Empty;
    };
    Absent.prototype.cond = function (thenTerm, elseTerm) {
        elseTerm = Item.of(elseTerm);
        return elseTerm;
    };
    Absent.prototype.or = function (that) {
        that = Item.of(that);
        return that;
    };
    Absent.prototype.and = function (that) {
        return this;
    };
    Absent.prototype.not = function () {
        return Value.Extant;
    };
    Absent.prototype.booleanValue = function () {
        return false;
    };
    Absent.prototype.toAny = function () {
        return undefined;
    };
    Absent.prototype.valueOf = function () {
        return undefined;
    };
    Absent.prototype.writeRecon = function (output) {
    };
    Absent.prototype.toRecon = function () {
        return '';
    };
    Absent.prototype.toReconBlock = function () {
        return '';
    };
    Absent.prototype.compare = function (that) {
        if (that instanceof Absent) {
            return 0;
        }
        else {
            return 1;
        }
    };
    Absent.prototype.equals = function (that) {
        return this === that;
    };
    Absent.prototype.hashCode = function () {
        return 0xF7C00CCE;
    };
    Absent.prototype.toString = function () {
        return 'absent';
    };
    return Absent;
}(Value));
Item.Absent = new Absent();
Value.Absent = Item.Absent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWJzZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQVUsSUFBSSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBQ3JDLE9BQU8sRUFBVyxLQUFLLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFHeEMsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUdoQztJQUE0QixrQ0FBSztJQUUvQjtlQUNFLGlCQUFPO0lBQ1QsQ0FBQztJQUVELDBCQUFTLEdBQVQ7UUFDRSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCwyQkFBVSxHQUFWO1FBQ0UsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsd0JBQU8sR0FBUDtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELHVCQUFNLEdBQU47UUFBTyxlQUFnQjthQUFoQixVQUFnQixFQUFoQixxQkFBZ0IsRUFBaEIsSUFBZ0I7WUFBaEIsMEJBQWdCOztRQUNyQixJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFZLENBQUM7UUFDdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9DLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJO2dCQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsMEJBQVMsR0FBVCxVQUFVLEdBQVksRUFBRSxRQUFrQjtRQUN4QyxPQUFRLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztJ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

var HashGenCacheMap = (function () {
    function HashGenCacheMap(size) {
        this.buckets = new Array(size);
        this.gen4Hits = 0;
        this.gen3Hits = 0;
        this.gen2Hits = 0;
        this.gen1Hits = 0;
        this.misses = 0;
    }
    HashGenCacheMap.prototype.get = function (key) {
        if (this.buckets.length === 0) {
            return undefined;
        }
        var index = Math.abs(key.hashCode()) % this.buckets.length;
        var bucket = this.buckets[index];
        if (!bucket) {
            return undefined;
        }
        var gen4Key = bucket.gen4Key;
        if (gen4Key !== undefined && key.equals(gen4Key)) {
            var gen4Val = bucket.gen4Val;
            if (gen4Val !== undefined) {
                this.gen4Hits += 1;
                bucket.gen4Weight++;
                return gen4Val;
            }
            else {
                bucket.gen4Key = undefined;
            }
        }
        var gen3Key = bucket.gen3Key;
        if (gen3Key !== undefined && key.equals(gen3Key)) {
            var gen3Val = bucket.gen3Val;
            if (gen3Val !== undefined) {
                this.gen3Hits += 1;
                if (bucket.gen3Weight++ > bucket.gen4Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight);
                }
                return gen3Val;
            }
            else {
                bucket.gen3Key = undefined;
            }
        }
        var gen2Key = bucket.gen2Key;
        if (gen2Key !== undefined && key.equals(gen2Key)) {
            var gen2Val = bucket.gen2Val;
            if (gen2Val !== undefined) {
                this.gen2Hits += 1;
                if (bucket.gen2Weight++ > bucket.gen3Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight);
                }
                return gen2Val;
            }
            else {
                bucket.gen2Key = undefined;
            }
        }
        var gen1Key = bucket.gen1Key;
        if (gen1Key !== undefined && key.equals(gen1Key)) {
            var gen1Val = bucket.gen1Val;
            if (gen1Val !== undefined) {
                this.gen1Hits += 1;
                if (bucket.gen1Weight++ > bucket.gen2Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight);
                }
                return gen1Val;
            }
            else {
                bucket.gen1Key = undefined;
            }
        }
        this.misses += 1;
        return undefined;
    };
    HashGenCacheMap.prototype.set = function (key, value) {
        if (this.buckets.length === 0) {
            return undefined;
        }
        var index = Math.abs(key.hashCode()) % this.buckets.length;
        var bucket = this.buckets[index] || new HashGenCacheMapBucket();
        var gen4Key = bucket.gen4Key;
        if (gen4Key !== undefined && key.equals(gen4Key)) {
            var gen4Val = bucket.gen4Val;
            if (gen4Val !== undefined) {
                this.gen4Hits += 1;
                bucket.gen4Weight++;
                return gen4Val;
            }
            else {
                bucket.gen4Key = undefined;
                gen4Key = undefined;
            }
        }
        var gen3Key = bucket.gen3Key;
        if (gen3Key !== undefined && key.equals(gen3Key)) {
            var gen3Val = bucket.gen3Val;
            if (gen3Val !== undefined) {
                this.gen3Hits += 1;
                if (bucket.gen3Weight++ > bucket.gen4Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight);
                }
                return gen3Val;
            }
            else {
                bucket.gen3Key = undefined;
                gen3Key = undefined;
            }
        }
        var gen2Key = bucket.gen2Key;
        if (gen2Key !== undefined && key.equals(gen2Key)) {
            var gen2Val = bucket.gen2Val;
            if (gen2Val !== undefined) {
                this.gen2Hits += 1;
                if (bucket.gen2Weight++ > bucket.gen3Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight);
                }
                return gen2Val;
            }
            else {
                bucket.gen2Key = undefined;
                gen2Key = undefined;
            }
        }
        var gen1Key = bucket.gen1Key;
        if (gen1Key !== undefined && key.equals(gen1Key)) {
            var gen1Val = bucket.gen1Val;
            if (gen1Val !== undefined) {
                this.gen1Hits += 1;
                if (bucket.gen1Weight++ > bucket.gen2Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight);
                }
                return gen1Val;
            }
            else {
                bucket.gen1Key = undefined;
                gen1Key = undefined;
            }
        }
        this.misses += 1;
        if (gen4Key == null) {
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, key, value, 1);
        }
        else if (gen3Key == null) {
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, key, value, 1);
        }
        else if (gen2Key == null) {
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, key, value, 1);
        }
        else if (gen1Key == null) {
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, key, value, 1);
        }
        else {
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight - 1, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight - 1, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, key, value, 1);
        }
        return undefined;
    };
    HashGenCacheMap.prototype.delete = function (key) {
        if (this.buckets.length === 0) {
            return undefined;
        }
        var index = Math.abs(key.hashCode()) % this.buckets.length;
        var bucket = this.buckets[index];
        if (!bucket) {
            return undefined;
        }
        var gen4Key = bucket.gen4Key;
        if (gen4Key !== undefined && key.equals(gen4Key)) {
            var gen4Val = bucket.gen4Val;
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, undefined, undefined, 0);
            return gen4Val;
        }
        var gen3Key = bucket.gen3Key;
        if (gen3Key !== undefined && key.equals(gen3Key)) {
            var gen3Val = bucket.gen3Val;
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, undefined, undefined, 0);
            return gen3Val;
        }
        var gen2Key = bucket.gen2Key;
        if (gen2Key !== undefined && key.equals(gen2Key)) {
            var gen2Val = bucket.gen2Val;
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, undefined, undefined, 0);
            return gen2Val;
        }
        var gen1Key = bucket.gen1Key;
        if (gen1Key !== undefined && key.equals(gen1Key)) {
            var gen1Val = bucket.gen1Val;
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, undefined, undefined, 0);
            return gen1Val;
        }
        return undefined;
    };
    HashGenCacheMap.prototype.clear = function () {
        for (var i = 0; i < this.buckets.length; i += 1) {
            this.buckets[i] = undefined;
        }
    };
    Object.defineProperty(HashGenCacheMap.prototype, "hits", {
        get: function () {
            return this.gen4Hits + this.gen3Hits + this.gen2Hits + this.gen1Hits;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HashGenCacheMap.prototype, "hitRatio", {
        get: function () {
            var hits = this.hits;
            return hits / (hits + this.misses);
        },
        enumerable: true,
        configurable: true
    });
    HashGenCacheMap.prototype.toString = function () {
        var hits = this.hits;
        var s = '@' + 'cache' + '('
            + 'gen4Hits' + ': ' + this.gen4Hits + ', '
            + 'gen3Hits' + ': ' + this.gen3Hits + ', '
            + 'gen2Hits' + ': ' + this.gen2Hits + ', '
            + 'gen1Hits' + ': ' + this.gen1Hits + ', '
            + "hits" + ': ' + hits + ', '
            + "misses" + ': ' + this.misses + ', '
            + "hitRatio" + ': ' + (hits / (hits + this.misses)) + ') '
            + '{\n';
        for (var i = 0; i < this.buckets.length; i += 1) {
            var bucket = this.buckets[i];
            s += '  ' + (bucket != null ? bucket.toString() : 'null') + '\n';
        }
        s += '}';
        return s;
    };
    return HashGenCacheMap;
}());
var HashGenCacheMapBucket = (function () {
    function HashGenCacheMapBucket(gen4Key, gen4Val, gen4Weight, gen3Key, gen3Val, gen3Weight, gen2Key, gen2Val, gen2Weight, gen1Key, gen1Val, gen1Weight) {
        if (gen4Weight === void 0) { gen4Weight = 0; }
        if (gen3Weight === void 0) { gen3Weight = 0; }
        if (gen2Weight === void 0) { gen2Weight = 0; }
        if (gen1Weight === void 0) { gen1Weight = 0; }
        this.gen4Key = gen4Key;
        this.gen4Val = gen4Val;
        this.gen4Weight = gen4Weight;
        this.gen3Key = gen3Key;
        this.gen3Val = gen3Val;
        this.gen3Weight = gen3Weight;
        this.gen2Key = gen2Key;
        this.gen2Val = gen2Val;
        this.gen2Weight = gen2Weight;
        this.gen1Key = gen1Key;
        this.gen1Val = gen1Val;
        this.gen1Weight = gen1Weight;
    }
    HashGenCacheMapBucket.prototype.toString = function () {
        return '@' + 'bucket' + '('
            + 'gen4Key' + ': ' + this.gen4Key + '; '
            + 'gen4Val' + ': ' + this.gen4Val + '; '
            + 'gen4Weight' + ': ' + this.gen4Weight + '; '
            + 'gen3Key' + ': ' + this.gen3Key + '; '
            + 'gen3Val' + ': ' + this.gen3Val + '; '
            + 'gen3Weight' + ': ' + this.gen3Weight + '; '
            + 'gen24Key' + ': ' + this.gen2Key + '; '
            + 'gen24Val' + ': ' + this.gen2Val + '; '
            + 'gen24Weight' + ': ' + this.gen2Weight + '; '
            + 'gen1Key' + ': ' + this.gen1Key + '; '
            + 'gen1Val' + ': ' + this.gen1Val + '; '
            + 'gen1Weight' + ': ' + this.gen1Weight + ')';
    };
    return HashGenCacheMapBucket;
}());

//# sourceMappingURL=data:application/json;base64,

var UriParser = (function (_super) {
    __extends(UriParser, _super);
    function UriParser(schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step) {
        var _this = _super.call(this) || this;
        _this.schemeParser = schemeParser;
        _this.authorityParser = authorityParser;
        _this.pathParser = pathParser;
        _this.queryParser = queryParser;
        _this.fragmentParser = fragmentParser;
        _this.step = step;
        return _this;
    }
    UriParser.prototype.feed = function (input) {
        return UriParser.parse(input, this.schemeParser, this.authorityParser, this.pathParser, this.queryParser, this.fragmentParser, this.step);
    };
    UriParser.parse = function (input, schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                var look = input.clone();
                while (!look.isEmpty() && (c = look.head(), Uri.isSchemeChar(c))) {
                    look.step();
                }
                if (!look.isEmpty() && c === 58) {
                    step = 2;
                }
                else {
                    step = 3;
                }
            }
            else if (input.isDone()) {
                step = 3;
            }
        }
        if (step === 2) {
            if (!schemeParser) {
                schemeParser = UriSchemeParser.parse(input);
            }
            while (schemeParser.isCont() && (!input.isEmpty() || input.isDone())) {
                schemeParser = schemeParser.feed(input);
            }
            if (schemeParser.isDone()) {
                if (!input.isEmpty() && input.head() === 58) {
                    input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('\':\'', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            else if (schemeParser.isError()) {
                return schemeParser.asError();
            }
        }
        if (step === 3) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 47) {
                    input.step();
                    step = 4;
                }
                else if (c === 63) {
                    input.step();
                    step = 7;
                }
                else if (c === 35) {
                    input.step();
                    step = 8;
                }
                else {
                    step = 6;
                }
            }
            else if (input.isDone()) {
                return Iteratee.done(Uri.of(schemeParser && schemeParser.bind()));
            }
        }
        if (step === 4) {
            if (!input.isEmpty() && input.head() === 47) {
                input.step();
                step = 5;
            }
            else if (!input.isEmpty()) {
                var pathBuilder = new UriPathBuilder();
                pathBuilder.push('/');
                pathParser = UriPathParser.parse(input, pathBuilder);
                step = 6;
            }
            else if (input.isDone()) {
                return Iteratee.done(Uri.of(schemeParser && schemeParser.bind(), undefined, UriPath.Slash));
            }
        }
        if (step === 5) {
            if (!authorityParser) {
                authorityParser = UriAuthorityParser.parse(input);
            }
            while (authorityParser.isCont() && (!input.isEmpty() || input.isDone())) {
                authorityParser = authorityParser.feed(input);
            }
            if (authorityParser.isDone()) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 63) {
                        input.step();
                        step = 7;
                    }
                    else if (c === 35) {
                        input.step();
                        step = 8;
                    }
                    else {
                        step = 6;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.done(Uri.of(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind()));
                }
            }
            else if (authorityParser.isError()) {
                return authorityParser.asError();
            }
        }
        if (step === 6) {
            if (!pathParser) {
                pathParser = UriPathParser.parse(input);
            }
            while (pathParser.isCont() && (!input.isEmpty() || input.isDone())) {
                pathParser = pathParser.feed(input);
            }
            if (pathParser.isDone()) {
                if (!input.isEmpty() && input.head() === 63) {
                    input.step();
                    step = 7;
                }
                else if (!input.isEmpty() && input.head() === 35) {
                    input.step();
                    step = 8;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(Uri.of(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser.bind()));
                }
            }
            else if (pathParser.isError()) {
                return pathParser.asError();
            }
        }
        if (step === 7) {
            if (!queryParser) {
                queryParser = UriQueryParser.parse(input);
            }
            while (queryParser.isCont() && (!input.isEmpty() || input.isDone())) {
                queryParser = queryParser.feed(input);
            }
            if (queryParser.isDone()) {
                if (!input.isEmpty() && input.head() === 35) {
                    input.step();
                    step = 8;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(Uri.of(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser && pathParser.bind(), queryParser.bind()));
                }
            }
            else if (queryParser.isError()) {
                return queryParser.asError();
            }
        }
        if (step === 8) {
            if (!fragmentParser) {
                fragmentParser = UriFragmentParser.parse(input);
            }
            while (fragmentParser.isCont() && (!input.isEmpty() || input.isDone())) {
                fragmentParser = fragmentParser.feed(input);
            }
            if (fragmentParser.isDone()) {
                return Iteratee.done(Uri.of(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser && pathParser.bind(), queryParser && queryParser.bind(), fragmentParser.bind()));
            }
            else if (fragmentParser.isError()) {
                return fragmentParser.asError();
            }
        }
        return new UriParser(schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step);
    };
    return UriParser;
}(Iteratee));
var UriSchemeParser = (function (_super) {
    __extends(UriSchemeParser, _super);
    function UriSchemeParser(output, step) {
        var _this = _super.call(this) || this;
        _this.output = output;
        _this.step = step;
        return _this;
    }
    UriSchemeParser.prototype.feed = function (input) {
        return UriSchemeParser.parse(input, this.output, this.step);
    };
    UriSchemeParser.parse = function (input, output, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty() && (c = input.head(), Iteratee.isAlpha(c))) {
                input.step();
                output = output || new StringOutput();
                output.push(Iteratee.toLowerCase(c));
                step = 2;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('scheme', input);
            }
        }
        if (step === 2) {
            while (!input.isEmpty() && (c = input.head(), Uri.isSchemeChar(c))) {
                input.step();
                output.push(Iteratee.toLowerCase(c));
            }
            if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(UriScheme.of(output.bind()));
            }
        }
        return new UriSchemeParser(output, step);
    };
    return UriSchemeParser;
}(Iteratee));
var UriAuthorityParser = (function (_super) {
    __extends(UriAuthorityParser, _super);
    function UriAuthorityParser(userParser, hostParser, portParser, step) {
        var _this = _super.call(this) || this;
        _this.userParser = userParser;
        _this.hostParser = hostParser;
        _this.portParser = portParser;
        _this.step = step;
        return _this;
    }
    UriAuthorityParser.prototype.feed = function (input) {
        return UriAuthorityParser.parse(input, this.userParser, this.hostParser, this.portParser, this.step);
    };
    UriAuthorityParser.parse = function (input, userParser, hostParser, portParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                var look = input.clone();
                while (!look.isEmpty() && (c = look.head(), c !== 64 && c !== 47)) {
                    look.step();
                }
                if (!look.isEmpty() && c === 64) {
                    step = 2;
                }
                else {
                    step = 3;
                }
            }
            else if (input.isDone()) {
                step = 3;
            }
        }
        if (step === 2) {
            if (!userParser) {
                userParser = UriUserParser.parse(input);
            }
            while (userParser.isCont() && (!input.isEmpty() || input.isDone())) {
                userParser = userParser.feed(input);
            }
            if (userParser.isDone()) {
                if (!input.isEmpty() && input.head() === 64) {
                    input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected(64, input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            else if (userParser.isError()) {
                return userParser.asError();
            }
        }
        if (step === 3) {
            if (!hostParser) {
                hostParser = UriHostParser.parse(input);
            }
            while (hostParser.isCont() && (!input.isEmpty() || input.isDone())) {
                hostParser = hostParser.feed(input);
            }
            if (hostParser.isDone()) {
                if (!input.isEmpty() && input.head() === 58) {
                    input.step();
                    step = 4;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(UriAuthority.of(userParser && userParser.bind(), hostParser.bind()));
                }
            }
            else if (hostParser.isError()) {
                return hostParser.asError();
            }
        }
        if (step === 4) {
            if (!portParser) {
                portParser = UriPortParser.parse(input);
            }
            while (portParser.isCont() && (!input.isEmpty() || input.isDone())) {
                portParser = portParser.feed(input);
            }
            if (portParser.isError()) {
                return portParser.asError();
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(UriAuthority.of(userParser && userParser.bind(), hostParser.bind(), portParser.bind()));
            }
        }
        return new UriAuthorityParser(userParser, hostParser, portParser, step);
    };
    return UriAuthorityParser;
}(Iteratee));
var UriUserParser = (function (_super) {
    __extends(UriUserParser, _super);
    function UriUserParser(usernameOutput, passwordOutput, c1, step) {
        var _this = _super.call(this) || this;
        _this.usernameOutput = usernameOutput;
        _this.passwordOutput = passwordOutput;
        _this.c1 = c1;
        _this.step = step;
        return _this;
    }
    UriUserParser.prototype.feed = function (input) {
        return UriUserParser.parse(input, this.usernameOutput, this.passwordOutput, this.c1, this.step);
    };
    UriUserParser.parse = function (input, usernameOutput, passwordOutput, c1, step) {
        if (c1 === void 0) { c1 = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        while (!input.isEmpty() || input.isDone()) {
            if (step === 1) {
                if (!usernameOutput) {
                    usernameOutput = new StringOutput();
                }
                while (!input.isEmpty() && (c = input.head(), Uri.isUserChar(c))) {
                    input.step();
                    usernameOutput.push(c);
                }
                if (!input.isEmpty() && c === 58) {
                    input.step();
                    step = 4;
                }
                else if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 2;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(UriUser.of(usernameOutput.bind()));
                }
            }
            if (step === 2) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    usernameOutput.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 1;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                passwordOutput = passwordOutput || new StringOutput();
                while (!input.isEmpty() && (c = input.head(), Uri.isUserInfoChar(c))) {
                    input.step();
                    passwordOutput.push(c);
                }
                if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 5;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(UriUser.of(usernameOutput.bind(), passwordOutput.bind()));
                }
            }
            if (step === 5) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 6;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 6) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    passwordOutput.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 4;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new UriUserParser(usernameOutput, passwordOutput, c1, step);
    };
    return UriUserParser;
}(Iteratee));
var UriHostParser = (function (_super) {
    __extends(UriHostParser, _super);
    function UriHostParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UriHostParser.prototype.feed = function (input) {
        return UriHostParser.parse(input);
    };
    UriHostParser.parse = function (input) {
        if (!input.isEmpty()) {
            var c = input.head();
            if (c === 91) {
                return UriHostLiteralParser.parse(input);
            }
            else {
                return UriHostAddressParser.parse(input);
            }
        }
        else if (input.isDone()) {
            return Iteratee.done(UriHostName.of(''));
        }
        return new UriHostParser();
    };
    return UriHostParser;
}(Iteratee));
var UriHostAddressParser = (function (_super) {
    __extends(UriHostAddressParser, _super);
    function UriHostAddressParser(output, c1, x, step) {
        var _this = _super.call(this) || this;
        _this.output = output;
        _this.c1 = c1;
        _this.x = x;
        _this.step = step;
        return _this;
    }
    UriHostAddressParser.prototype.feed = function (input) {
        return UriHostAddressParser.parse(input, this.output, this.c1, this.x, this.step);
    };
    UriHostAddressParser.parse = function (input, output, c1, x, step) {
        if (c1 === void 0) { c1 = 0; }
        if (x === void 0) { x = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        while (step <= 4 && (!input.isEmpty() || input.isDone())) {
            output = output || new StringOutput();
            while (!input.isEmpty() && (c = input.head(), Iteratee.isDigit(c))) {
                input.step();
                output.push(c);
                x = 10 * x + Iteratee.decodeDigit(c);
            }
            if (!input.isEmpty()) {
                if (c === 46 && step < 4 && x <= 255) {
                    input.step();
                    output.push(c);
                    x = 0;
                    step += 1;
                }
                else if (!Uri.isHostChar(c) && c !== 37 && step === 4 && x <= 255) {
                    return Iteratee.done(UriHostIPv4.of(output.bind()));
                }
                else {
                    x = 0;
                    step = 5;
                }
            }
            else if (input.isDone()) {
                if (step === 4 && x <= 255) {
                    return Iteratee.done(UriHostIPv4.of(output.bind()));
                }
                else {
                    return Iteratee.done(UriHostName.of(output.bind()));
                }
            }
        }
        while (!input.isEmpty() || input.isDone()) {
            output = output;
            if (step === 5) {
                while (!input.isEmpty() && (c = input.head(), Uri.isHostChar(c))) {
                    input.step();
                    output.push(Iteratee.toLowerCase(c));
                }
                if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 6;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(UriHostName.of(output.bind()));
                }
            }
            if (step === 6) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 7;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 7) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    output.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 5;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new UriHostAddressParser(output, c1, x, step);
    };
    return UriHostAddressParser;
}(Iteratee));
var UriHostLiteralParser = (function (_super) {
    __extends(UriHostLiteralParser, _super);
    function UriHostLiteralParser(output, step) {
        var _this = _super.call(this) || this;
        _this.output = output;
        _this.step = step;
        return _this;
    }
    UriHostLiteralParser.prototype.feed = function (input) {
        return UriHostLiteralParser.parse(input, this.output, this.step);
    };
    UriHostLiteralParser.parse = function (input, output, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty() && (c = input.head(), c === 91)) {
                input.step();
                step = 2;
            }
            else if (!input.isEmpty()) {
                return Iteratee.expected('\'[\'', input);
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            output = output || new StringOutput();
            while (!input.isEmpty() && (c = input.head(), Uri.isHostChar(c) || c === 58)) {
                input.step();
                output.push(Iteratee.toLowerCase(c));
            }
            if (!input.isEmpty() && c === 93) {
                input.step();
                return Iteratee.done(UriHostIPv6.of(output.bind()));
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        return new UriHostLiteralParser(output, step);
    };
    return UriHostLiteralParser;
}(Iteratee));
var UriPortParser = (function (_super) {
    __extends(UriPortParser, _super);
    function UriPortParser(port) {
        var _this = _super.call(this) || this;
        _this.port = port;
        return _this;
    }
    UriPortParser.prototype.feed = function (input) {
        return UriPortParser.parse(input, this.port);
    };
    UriPortParser.parse = function (input, port) {
        if (port === void 0) { port = 0; }
        var c = 0;
        while (!input.isEmpty() && (c = input.head(), Iteratee.isDigit(c))) {
            input.step();
            port = 10 * port + Iteratee.decodeDigit(c);
        }
        if (!input.isEmpty() || input.isDone()) {
            return Iteratee.done(UriPort.of(port));
        }
        return new UriPortParser(port);
    };
    return UriPortParser;
}(Iteratee));
var UriPathParser = (function (_super) {
    __extends(UriPathParser, _super);
    function UriPathParser(builder, output, c1, step) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        _this.output = output;
        _this.c1 = c1;
        _this.step = step;
        return _this;
    }
    UriPathParser.prototype.feed = function (input) {
        return UriPathParser.parse(input, this.builder, this.output, this.c1, this.step);
    };
    UriPathParser.parse = function (input, builder, output, c1, step) {
        if (c1 === void 0) { c1 = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        while (!input.isEmpty() || input.isDone()) {
            if (step === 1) {
                while (!input.isEmpty() && (c = input.head(), Uri.isPathChar(c))) {
                    output = output || new StringOutput();
                    input.step();
                    output.push(c);
                }
                if (!input.isEmpty() && c === 47) {
                    input.step();
                    builder = builder || new UriPathBuilder();
                    if (output) {
                        builder.push(output.bind());
                        output = undefined;
                    }
                    builder.push('/');
                }
                else if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 2;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    builder = builder || new UriPathBuilder();
                    if (output) {
                        builder.push(output.bind());
                    }
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 2) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    output = output || new StringOutput();
                    input.step();
                    output.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 1;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new UriPathParser(builder, output, c1, step);
    };
    return UriPathParser;
}(Iteratee));
var UriQueryParser = (function (_super) {
    __extends(UriQueryParser, _super);
    function UriQueryParser(keyOutput, valueOutput, builder, c1, step) {
        var _this = _super.call(this) || this;
        _this.keyOutput = keyOutput;
        _this.valueOutput = valueOutput;
        _this.builder = builder;
        _this.c1 = c1;
        _this.step = step;
        return _this;
    }
    UriQueryParser.prototype.feed = function (input) {
        return UriQueryParser.parse(input, this.keyOutput, this.valueOutput, this.builder, this.c1, this.step);
    };
    UriQueryParser.parse = function (input, keyOutput, valueOutput, builder, c1, step) {
        if (c1 === void 0) { c1 = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        while (!input.isEmpty() || input.isDone()) {
            if (step === 1) {
                keyOutput = keyOutput || new StringOutput();
                while (!input.isEmpty() && (c = input.head(), Uri.isParamChar(c))) {
                    input.step();
                    keyOutput.push(c);
                }
                if (!input.isEmpty() && c === 61) {
                    input.step();
                    step = 4;
                }
                else if (!input.isEmpty() && c === 38) {
                    input.step();
                    builder = builder || new UriQueryBuilder();
                    builder.param(null, keyOutput.bind());
                    keyOutput = undefined;
                    step = 1;
                }
                else if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 2;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    builder = builder || new UriQueryBuilder();
                    builder.param(null, keyOutput.bind());
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 2) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    keyOutput.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 1;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                valueOutput = valueOutput || new StringOutput();
                while (!input.isEmpty() && (c = input.head(), Uri.isParamChar(c) || c === 61)) {
                    input.step();
                    valueOutput.push(c);
                }
                if (!input.isEmpty() && c === 38) {
                    input.step();
                    builder = builder || new UriQueryBuilder();
                    builder.param(keyOutput.bind(), valueOutput.bind());
                    keyOutput = undefined;
                    valueOutput = undefined;
                    step = 1;
                }
                else if (!input.isEmpty() && c === 38) {
                    input.step();
                    step = 5;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    builder = builder || new UriQueryBuilder();
                    builder.param(keyOutput.bind(), valueOutput.bind());
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 5) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 6;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 6) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    valueOutput.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 4;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new UriQueryParser(keyOutput, valueOutput, builder, c1, step);
    };
    return UriQueryParser;
}(Iteratee));
var UriFragmentParser = (function (_super) {
    __extends(UriFragmentParser, _super);
    function UriFragmentParser(output, c1, step) {
        var _this = _super.call(this) || this;
        _this.output = output;
        _this.c1 = c1;
        _this.step = step;
        return _this;
    }
    UriFragmentParser.prototype.feed = function (input) {
        return UriFragmentParser.parse(input, this.output, this.c1, this.step);
    };
    UriFragmentParser.parse = function (input, output, c1, step) {
        if (output === void 0) { output = new StringOutput(); }
        if (c1 === void 0) { c1 = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        while (!input.isEmpty() || input.isDone()) {
            if (step === 1) {
                while (!input.isEmpty() && (c = input.head(), Uri.isFragmentChar(c))) {
                    input.step();
                    output.push(c);
                }
                if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 2;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(UriFragment.of(output.bind()));
                }
            }
            if (step === 2) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    output.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 1;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new UriFragmentParser(output, c1, step);
    };
    return UriFragmentParser;
}(Iteratee));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJpLXBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVyaS1wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEVBQ0wsR0FBRyxFQUNILFNBQVMsRUFDVCxZQUFZLEVBQ1osT0FBTyxFQUVQLFdBQVcsRUFDWCxXQUFXLEVBQ1gsV0FBVyxFQUNYLE9BQU8sRUFDUCxPQUFPLEVBQ1AsY0FBYyxFQUVkLGVBQWUsRUFDZixXQUFXLEdBQ1osTUFBTSxPQUFPLENBQUM7QUFFZjtJQUErQixxQ0FBYTtJQVExQyxtQkFBWSxZQUFrQyxFQUFFLGVBQXdDLEVBQzVFLFVBQThCLEVBQUUsV0FBZ0MsRUFDaEUsY0FBc0MsRUFBRSxJQUFhO1FBRmpFLFlBR0UsaUJBQU8sU0FPUjtRQU5DLEtBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLEtBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBQ3ZDLEtBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLEtBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLEtBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDOztJQUNuQixDQUFDO0lBRUQsd0JBQUksR0FBSixVQUFLLEtBQVk7UUFDZixPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUMvRCxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFTSxlQUFLLEdBQVosVUFBYSxLQUFZLEVBQUUsWUFBa0MsRUFBRSxlQUF3QyxFQUMxRixVQUE4QixFQUFFLFdBQWdDLEVBQ2hFLGNBQXNDLEVBQUUsSUFBZ0I7UUFBaEIscUJBQUEsRUFBQSxRQUFnQjtRQUNuRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNwQixJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDaEUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUNiO2dCQUNELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBUztvQkFDdEMsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDVjtxQkFBTTtvQkFDTCxJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO2FBQ0Y7aUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3pCLElBQUksR0FBRyxDQUFDLENBQUM7YUFDVjtTQUNGO1FBQ0QsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDakIsWUFBWSxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDN0M7WUFDRCxPQUFPLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFO2dCQUNwRSxZQUFZLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6QztZQUNELElBQUksWUFBWSxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQVM7b0JBQ2xELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQzNCLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQzFDO3FCQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO29CQUN6QixPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ25DO2FBQ0Y7aUJBQU0sSUFBSSxZQUFZLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ2pDLE9BQU8sWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQy9CO1NBQ0Y7UUFDRCxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNwQixDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNqQixJQUFJLENBQUMsS0FBSyxFQUFFLEVBQVM7b0JBQ25CLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBUztvQkFDMUIsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFTO29CQUMxQixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDVjtxQkFBTTtvQkFDTCxJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO2FBQ0Y7aUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3pCLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFlBQVksSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ25FO1NBQ0Y7UUFDRCxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQVM7Z0JBQ2xELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixJQUFJLEdBQUcsQ0FBQyxDQUFDO2FBQ1Y7aUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDM0IsSUFBTSxXQUFXLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztnQkFDekMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdEIsVUFBVSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO2dCQUNyRCxJQUFJLEdBQUcsQ0FBQyxDQUFDO2FBQ1Y7aUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3pCLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFlBQVksSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQzFDLFNBQVMsRUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzthQUN0QztTQUNGO1FBQ0QsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGVBQWUsRUFBRTtnQkFDcEIsZUFBZSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNuRDtZQUNELE9BQU8sZUFBZSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7Z0JBQ3ZFLGVBQWUsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQy9DO1lBQ0QsSUFBSSxlQUFlLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQ3BCLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2pCLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBUzt3QkFDbkIsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO3dCQUNiLElBQUksR0FBRyxDQUFDLENBQUM7cUJBQ1Y7eUJBQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFTO3dCQUMxQixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7d0JBQ2IsSUFBSSxHQUFHLENBQUMsQ0FBQztxQkFDVjt5QkFBTTt3QkFDTCxJQUFJLEdBQUcsQ0FBQyxDQUFDO3FCQUNWO2lCQUNGO3FCQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO29CQUN6QixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxZQUFZLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxFQUNuQyxlQUFlLElBQUksZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDekU7YUFDRjtpQkFBTSxJQUFJLGVBQWUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDcEMsT0FBTyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDbEM7U0FDRjtRQUNELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtZQUNkLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2YsVUFBVSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDekM7WUFDRCxPQUFPLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFO2dCQUNsRSxVQUFVLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNyQztZQUNELElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQVM7b0JBQ2xELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBUztvQkFDekQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQzdDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFlBQVksSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQ25DLGVBQWUsSUFBSSxlQUFlLENBQUMsSUFBSSxFQUFFLEVBQ3pDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ2pEO2FBQ0Y7aUJBQU0sSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQy9CLE9BQU8sVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQzdCO1NBQ0Y7UUFDRCxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNoQixXQUFXLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMzQztZQUNELE9BQU8sV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7Z0JBQ25FLFdBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3ZDO1lBQ0QsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBUztvQkFDbEQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQzdDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFlBQVksSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQ25DLGVBQWUsSUFBSSxlQUFlLENBQUMsSUFBSSxFQUFFLEVBQ3pDLFVBQVUsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLEVBQy9CLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ2xEO2FBQ0Y7aUJBQU0sSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ2hDLE9BQU8sV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQzlCO1NBQ0Y7UUFDRCxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUNuQixjQUFjLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2pEO1lBQ0QsT0FBTyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRTtnQkFDdEUsY0FBYyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDN0M7WUFDRCxJQUFJLGNBQWMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDekIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsWUFBWSxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFDbkMsZUFBZSxJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQUUsRUFDekMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFDL0IsV0FBVyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFDakMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQzthQUN2RDtpQkFBTSxJQUFJLGNBQWMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDbkMsT0FBTyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDakM7U0FDRjtRQUNELE9BQU8sSUFBSSxTQUFTLENBQUMsWUFBWSxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyRyxDQUFDO0lBQ0gsZ0JBQUM7QUFBRCxDQUFDLEFBNUxELENBQStCLFFBQVEsR0E0THRDOztBQUdEO0lBQXFDLDJDQUFtQjtJQUl0RCx5QkFBWSxNQUFxQixFQUFFLElBQWE7UUFBaEQsWUFDRSxpQkFBTyxTQUdSO1FBRkMsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0lBQ25CLENBQUM7SUFFRCw4QkFBSSxHQUFKLFVBQUssS0FBWTtRQUNmLE9BQU8sZUFBZSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLHFCQUFLLEdBQVosVUFBYSxLQUFZLEVBQUUsTUFBcUIsRUFBRSxJQUFnQjtRQUFoQixxQkFBQSxFQUFBLFFBQWdCO1FBQ2hFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDL0QsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLE1BQU0sR0FBRyxNQUFNLElBQUksSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLElBQUksR0FBRyxDQUFDLENBQUM7YUFDVjtpQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDN0MsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUMzQztTQUNGO1FBQ0QsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO1lBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNsRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsTUFBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdkM7WUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDdEMsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNwRDtTQUNGO1FBQ0QsT0FBTyxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQXJDRCxDQUFxQyxRQUFRLEdBcUM1Qzs7QUFHRDtJQUF3Qyw4Q0FBc0I7SUFNNUQsNEJBQVksVUFBOEIsRUFBRSxVQUE4QixFQUM5RCxVQUE4QixFQUFFLElBQWE7UUFEekQsWUFFRSxpQkFBTyxTQUtSO1FBSkMsS0FBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsS0FBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsS0FBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0lBQ25CLENBQUM7SUFFRCxpQ0FBSSxHQUFKLFVBQUssS0FBWTtRQUNmLE9BQU8sa0JBQWtCLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkcsQ0FBQztJQUVNLHdCQUFLLEdBQVosVUFBYSxLQUFZLEVBQUUsVUFBOEIsRUFBRSxVQUE4QixFQUM1RSxVQUE4QixFQUFFLElBQWdCO1FBQWhCLHFCQUFBLEVBQUEsUUFBZ0I7UUFDM0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDcEIsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxJQUFXLENBQUMsS0FBSyxFQUFFLENBQVEsRUFBRTtvQkFDL0UsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUNiO2dCQUNELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBUztvQkFDdEMsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDVjtxQkFBTTtvQkFDTCxJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO2FBQ0Y7aUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3pCLElBQUksR0FBRyxDQUFDLENBQUM7YUFDVjtTQUNGO1FBQ0QsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDZixVQUFVLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6QztZQUNELE9BQU8sVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7Z0JBQ2xFLFVBQVUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3JDO1lBQ0QsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBUztvQkFDbEQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDM0IsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBUyxLQUFLLENBQUMsQ0FBQztpQkFDNUM7cUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQ3pCLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbkM7YUFDRjtpQkFBTSxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDL0IsT0FBTyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDN0I7U0FDRjtRQUNELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtZQUNkLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2YsVUFBVSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDekM7WUFDRCxPQUFPLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFO2dCQUNsRSxVQUFVLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNyQztZQUNELElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQVM7b0JBQ2xELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO29CQUM3QyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxFQUMvQixVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUMxRDthQUNGO2lCQUFNLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUMvQixPQUFPLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUM3QjtTQUNGO1FBQ0QsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDZixVQUFVLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6QztZQUNELE9BQU8sVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7Z0JBQ2xFLFVBQVUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3JDO1lBQ0QsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ3hCLE9BQU8sVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQzdCO2lCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUM3QyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxFQUMvQixVQUFXLENBQUMsSUFBSSxFQUFFLEVBQ2xCLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDMUQ7U0FDRjtRQUNELE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBQ0gseUJBQUM7QUFBRCxDQUFDLEFBN0ZELENBQXdDLFFBQVEsR0E2Ri9DOztBQUdEO0lBQW1DLHlDQUFpQjtJQU1sRCx1QkFBWSxjQUE2QixFQUFFLGNBQTZCLEVBQzVELEVBQVcsRUFBRSxJQUFhO1FBRHRDLFlBRUUsaUJBQU8sU0FLUjtRQUpDLEtBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLEtBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLEtBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0lBQ25CLENBQUM7SUFFRCw0QkFBSSxHQUFKLFVBQUssS0FBWTtRQUNmLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xHLENBQUM7SUFFTSxtQkFBSyxHQUFaLFVBQWEsS0FBWSxFQUFFLGNBQTZCLEVBQUUsY0FBNkIsRUFDMUUsRUFBYyxFQUFFLElBQWdCO1FBQWhDLG1CQUFBLEVBQUEsTUFBYztRQUFFLHFCQUFBLEVBQUEsUUFBZ0I7UUFDM0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDekMsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO2dCQUNkLElBQUksQ0FBQyxjQUFjLEVBQUU7b0JBQ25CLGNBQWMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO2lCQUNyQztnQkFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2hFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixjQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN6QjtnQkFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQVM7b0JBQ3ZDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBUztvQkFDOUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQzdDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ3pEO2FBQ0Y7WUFDRCxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNqRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDUCxJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQzNCLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQzlDO3FCQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO29CQUN6QixPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ25DO2FBQ0Y7WUFDRCxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNqRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsY0FBZSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNwRixFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUNQLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDM0IsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDOUM7cUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQ3pCLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbkM7YUFDRjtZQUNELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtnQkFDZCxjQUFjLEdBQUcsY0FBYyxJQUFJLElBQUksWUFBWSxFQUFFLENBQUM7Z0JBQ3RELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDcEUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3hCO2dCQUNELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBUztvQkFDdkMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQzdDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGNBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNqRjthQUNGO1lBQ0QsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO2dCQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDakUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ1AsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDVjtxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFO29CQUMzQixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUM5QztxQkFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDekIsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNuQzthQUNGO1lBQ0QsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO2dCQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDakUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLGNBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDcEYsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDUCxJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQzNCLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQzlDO3FCQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO29CQUN6QixPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ25DO2FBQ0Y7U0FDRjtRQUNELE9BQU8sSUFBSSxhQUFhLENBQUMsY0FBYyxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQXZHRCxDQUFtQyxRQUFRLEdBdUcxQzs7QUFHRDtJQUFtQyx5Q0FBaUI7SUFBcEQ7O0lBa0JBLENBQUM7SUFqQkMsNEJBQUksR0FBSixVQUFLLEtBQVk7UUFDZixPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLG1CQUFLLEdBQVosVUFBYSxLQUFZO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDcEIsSUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBUztnQkFDbkIsT0FBTyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDMUM7aUJBQU07Z0JBQ0wsT0FBTyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDMUM7U0FDRjthQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3pCLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDMUM7UUFDRCxPQUFPLElBQUksYUFBYSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQWxCRCxDQUFtQyxRQUFRLEdBa0IxQzs7QUFHRDtJQUEwQyxnREFBaUI7SUFNekQsOEJBQVksTUFBcUIsRUFBRSxFQUFXLEVBQUUsQ0FBVSxFQUFFLElBQWE7UUFBekUsWUFDRSxpQkFBTyxTQUtSO1FBSkMsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsS0FBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixLQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDOztJQUNuQixDQUFDO0lBRUQsbUNBQUksR0FBSixVQUFLLEtBQVk7UUFDZixPQUFPLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFTSwwQkFBSyxHQUFaLFVBQWEsS0FBWSxFQUFFLE1BQXFCLEVBQUUsRUFBYyxFQUFFLENBQWEsRUFDbEUsSUFBZ0I7UUFEcUIsbUJBQUEsRUFBQSxNQUFjO1FBQUUsa0JBQUEsRUFBQSxLQUFhO1FBQ2xFLHFCQUFBLEVBQUEsUUFBZ0I7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7WUFDeEQsTUFBTSxHQUFHLE1BQU0sSUFBSSxJQUFJLFlBQVksRUFBRSxDQUFDO1lBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbEUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2YsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN0QztZQUNELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBVyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUU7b0JBQzNDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNmLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ04sSUFBSSxJQUFJLENBQUMsQ0FBQztpQkFDWDtxQkFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFXLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRTtvQkFDMUUsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDckQ7cUJBQU07b0JBQ0wsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDTixJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO2FBQ0Y7aUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3pCLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFO29CQUMxQixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNyRDtxQkFBTTtvQkFDTCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNyRDthQUNGO1NBQ0Y7UUFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN6QyxNQUFNLEdBQUcsTUFBTyxDQUFDO1lBQ2pCLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtnQkFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2hFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdEM7Z0JBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFTO29CQUN2QyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDVjtxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDN0MsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDckQ7YUFDRjtZQUNELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2pFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUNQLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDM0IsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDOUM7cUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQ3pCLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbkM7YUFDRjtZQUNELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2pFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzNFLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ1AsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDVjtxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFO29CQUMzQixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUM5QztxQkFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDekIsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNuQzthQUNGO1NBQ0Y7UUFDRCxPQUFPLElBQUksb0JBQW9CLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUNILDJCQUFDO0FBQUQsQ0FBQyxBQXhGRCxDQUEwQyxRQUFRLEdBd0ZqRDs7QUFHRDtJQUEwQyxnREFBaUI7SUFJekQsOEJBQVksTUFBcUIsRUFBRSxJQUFhO1FBQWhELFlBQ0UsaUJBQU8sU0FHUjtRQUZDLEtBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDOztJQUNuQixDQUFDO0lBRUQsbUNBQUksR0FBSixVQUFLLEtBQVk7UUFDZixPQUFPLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVNLDBCQUFLLEdBQVosVUFBYSxLQUFZLEVBQUUsTUFBcUIsRUFBRSxJQUFnQjtRQUFoQixxQkFBQSxFQUFBLFFBQWdCO1FBQ2hFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQVEsRUFBRTtnQkFDM0QsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLElBQUksR0FBRyxDQUFDLENBQUM7YUFDVjtpQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUMzQixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzFDO2lCQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUN6QixPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbkM7U0FDRjtRQUNELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtZQUNkLE1BQU0sR0FBRyxNQUFNLElBQUksSUFBSSxZQUFZLEVBQUUsQ0FBQztZQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQVEsRUFBRTtnQkFDbkYsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3RDO1lBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFTO2dCQUN2QyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNyRDtpQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDN0MsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ25DO1NBQ0Y7UUFDRCxPQUFPLElBQUksb0JBQW9CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDSCwyQkFBQztBQUFELENBQUMsQUF6Q0QsQ0FBMEMsUUFBUSxHQXlDakQ7O0FBR0Q7SUFBbUMseUNBQWlCO0lBR2xELHVCQUFZLElBQWE7UUFBekIsWUFDRSxpQkFBTyxTQUVSO1FBREMsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0lBQ25CLENBQUM7SUFFRCw0QkFBSSxHQUFKLFVBQUssS0FBWTtRQUNmLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTSxtQkFBSyxHQUFaLFVBQWEsS0FBWSxFQUFFLElBQWdCO1FBQWhCLHFCQUFBLEVBQUEsUUFBZ0I7UUFDekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2xFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNiLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN0QyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQUFDLEFBdkJELENBQW1DLFFBQVEsR0F1QjFDOztBQUdEO0lBQW1DLHlDQUFpQjtJQU1sRCx1QkFBWSxPQUF3QixFQUFFLE1BQXFCLEVBQUUsRUFBVyxFQUFFLElBQWE7UUFBdkYsWUFDRSxpQkFBTyxTQUtSO1FBSkMsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsS0FBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixLQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQzs7SUFDbkIsQ0FBQztJQUVELDRCQUFJLEdBQUosVUFBSyxLQUFZO1FBQ2YsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVNLG1CQUFLLEdBQVosVUFBYSxLQUFZLEVBQUUsT0FBd0IsRUFBRSxNQUFxQixFQUFFLEVBQWMsRUFDN0UsSUFBZ0I7UUFEK0MsbUJBQUEsRUFBQSxNQUFjO1FBQzdFLHFCQUFBLEVBQUEsUUFBZ0I7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDekMsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO2dCQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDaEUsTUFBTSxHQUFHLE1BQU0sSUFBSSxJQUFJLFlBQVksRUFBRSxDQUFDO29CQUN0QyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDaEI7Z0JBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFTO29CQUN2QyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLGNBQWMsRUFBRSxDQUFDO29CQUMxQyxJQUFJLE1BQU0sRUFBRTt3QkFDVixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO3dCQUM1QixNQUFNLEdBQUcsU0FBUyxDQUFDO3FCQUNwQjtvQkFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNuQjtxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQVM7b0JBQzlDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO29CQUM3QyxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksY0FBYyxFQUFFLENBQUM7b0JBQzFDLElBQUksTUFBTSxFQUFFO3dCQUNWLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7cUJBQzdCO29CQUNELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztpQkFDdEM7YUFDRjtZQUNELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2pFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUNQLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDM0IsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDOUM7cUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQ3pCLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbkM7YUFDRjtZQUNELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2pFLE1BQU0sR0FBRyxNQUFNLElBQUksSUFBSSxZQUFZLEVBQUUsQ0FBQztvQkFDdEMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDM0UsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDUCxJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQzNCLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQzlDO3FCQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO29CQUN6QixPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ25DO2FBQ0Y7U0FDRjtRQUNELE9BQU8sSUFBSSxhQUFhLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTFFRCxDQUFtQyxRQUFRLEdBMEUxQzs7QUFHRDtJQUFvQywwQ0FBa0I7SUFPcEQsd0JBQVksU0FBd0IsRUFBRSxXQUEwQixFQUNwRCxPQUF5QixFQUFFLEVBQVcsRUFBRSxJQUFhO1FBRGpFLFlBRUUsaUJBQU8sU0FNUjtRQUxDLEtBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLEtBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLEtBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLEtBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0lBQ25CLENBQUM7SUFFRCw2QkFBSSxHQUFKLFVBQUssS0FBWTtRQUNmLE9BQU8sY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekcsQ0FBQztJQUVNLG9CQUFLLEdBQVosVUFBYSxLQUFZLEVBQUUsU0FBd0IsRUFBRSxXQUEwQixFQUNsRSxPQUF5QixFQUFFLEVBQWMsRUFBRSxJQUFnQjtRQUFoQyxtQkFBQSxFQUFBLE1BQWM7UUFBRSxxQkFBQSxFQUFBLFFBQWdCO1FBQ3RFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3pDLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtnQkFDZCxTQUFTLEdBQUcsU0FBUyxJQUFJLElBQUksWUFBWSxFQUFFLENBQUM7Z0JBQzVDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDakUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ25CO2dCQUNELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBUztvQkFDdkMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFTO29CQUM5QyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLGVBQWUsRUFBRSxDQUFDO29CQUMzQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztvQkFDdEMsU0FBUyxHQUFHLFNBQVMsQ0FBQztvQkFDdEIsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDVjtxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQVM7b0JBQzlDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO29CQUM3QyxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksZUFBZSxFQUFFLENBQUM7b0JBQzNDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO29CQUN0QyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7aUJBQ3RDO2FBQ0Y7WUFDRCxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNqRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDUCxJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQzNCLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQzlDO3FCQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO29CQUN6QixPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ25DO2FBQ0Y7WUFDRCxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNqRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsU0FBVSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMvRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUNQLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDM0IsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDOUM7cUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQ3pCLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbkM7YUFDRjtZQUNELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtnQkFDZCxXQUFXLEdBQUcsV0FBVyxJQUFJLElBQUksWUFBWSxFQUFFLENBQUM7Z0JBQ2hELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBUSxFQUFFO29CQUNwRixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDckI7Z0JBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFTO29CQUN2QyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLGVBQWUsRUFBRSxDQUFDO29CQUMzQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztvQkFDckQsU0FBUyxHQUFHLFNBQVMsQ0FBQztvQkFDdEIsV0FBVyxHQUFHLFNBQVMsQ0FBQztvQkFDeEIsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDVjtxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQVM7b0JBQzlDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO29CQUM3QyxPQUFPLEdBQUcsT0FBTyxJQUFJLElBQUksZUFBZSxFQUFFLENBQUM7b0JBQzNDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBVSxDQUFDLElBQUksRUFBRSxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO29CQUNyRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7aUJBQ3RDO2FBQ0Y7WUFDRCxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNqRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDUCxJQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNWO3FCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQzNCLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQzlDO3FCQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFO29CQUN6QixPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ25DO2FBQ0Y7WUFDRCxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNqRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsV0FBWSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNqRixFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUNQLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDM0IsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDOUM7cUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQ3pCLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbkM7YUFDRjtTQUNGO1FBQ0QsT0FBTyxJQUFJLGNBQWMsQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQXhIRCxDQUFvQyxRQUFRLEdBd0gzQzs7QUFHRDtJQUF1Qyw2Q0FBcUI7SUFLMUQsMkJBQVksTUFBcUIsRUFBRSxFQUFXLEVBQUUsSUFBYTtRQUE3RCxZQUNFLGlCQUFPLFNBSVI7UUFIQyxLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixLQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDOztJQUNuQixDQUFDO0lBRUQsZ0NBQUksR0FBSixVQUFLLEtBQVk7UUFDZixPQUFPLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRU0sdUJBQUssR0FBWixVQUFhLEtBQVksRUFBRSxNQUF5QyxFQUN2RCxFQUFjLEVBQUUsSUFBZ0I7UUFEbEIsdUJBQUEsRUFBQSxhQUEyQixZQUFZLEVBQUU7UUFDdkQsbUJBQUEsRUFBQSxNQUFjO1FBQUUscUJBQUEsRUFBQSxRQUFnQjtRQUMzQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN6QyxJQUFJLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNwRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDaEI7Z0JBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFTO29CQUN2QyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDVjtxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDN0MsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDckQ7YUFDRjtZQUNELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2pFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUNQLElBQUksR0FBRyxDQUFDLENBQUM7aUJBQ1Y7cUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDM0IsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDOUM7cUJBQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7b0JBQ3pCLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbkM7YUFDRjtZQUNELElBQUksSUFBSSxLQUFLLENBQUMsRUFBRTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2pFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzNFLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ1AsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDVjtxQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFO29CQUMzQixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUM5QztxQkFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDekIsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNuQzthQUNGO1NBQ0Y7UUFDRCxPQUFPLElBQUksaUJBQWlCLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBQ0gsd0JBQUM7QUFBRCxDQUFDLEFBMURELENBQXVDLFFBQVEsR0EwRDlDIn0=

var Uri = (function () {
    function Uri(scheme, authority, path, query, fragment) {
        this._scheme = scheme;
        this._authority = authority;
        this._path = path;
        this._query = query;
        this._fragment = fragment;
    }
    Uri.prototype.isDefined = function () {
        return this._scheme.isDefined() || this._authority.isDefined() || this._path.isDefined()
            || this._query.isDefined() || this._fragment.isDefined();
    };
    Uri.prototype.isEmpty = function () {
        return !this._scheme.isDefined() && !this._authority.isDefined() && !this._path.isDefined()
            && !this._query.isDefined() && !this._fragment.isDefined();
    };
    Uri.prototype.scheme = function (scheme) {
        if (scheme === undefined) {
            return this._scheme;
        }
        else {
            scheme = UriScheme.fromAny(scheme);
            return Uri.of(scheme, this._authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.authority = function (authority) {
        if (authority === undefined) {
            return this._authority;
        }
        else {
            authority = UriAuthority.fromAny(authority);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.user = function (user) {
        if (user === undefined) {
            return this._authority._user;
        }
        else {
            var authority = this._authority.user(user);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.username = function (username, password) {
        if (username === undefined) {
            return this._authority._user._username || '';
        }
        else {
            var authority = this._authority.username(username, password);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.password = function (password) {
        if (password === undefined) {
            return this._authority._user._password;
        }
        else {
            var authority = this._authority.password(password);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.host = function (host) {
        if (host === undefined) {
            return this._authority._host;
        }
        else {
            var authority = this._authority.host(host);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.hostName = function (address) {
        if (address === undefined) {
            return this._authority._host.name();
        }
        else {
            var authority = this._authority.hostName(address);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.hostIPv4 = function (address) {
        if (address === undefined) {
            return this._authority._host.ipv4();
        }
        else {
            var authority = this._authority.hostIPv4(address);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.hostIPv6 = function (address) {
        if (address === undefined) {
            return this._authority._host.ipv6();
        }
        else {
            var authority = this._authority.hostIPv6(address);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.port = function (port) {
        if (port === undefined) {
            return this._authority._port;
        }
        else {
            var authority = this._authority.port(port);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.path = function (path) {
        if (path === undefined) {
            return this._path;
        }
        else {
            path = UriPath.fromAny(path);
            return Uri.of(this._scheme, this._authority, path, this._query, this._fragment);
        }
    };
    Uri.prototype.query = function (query) {
        if (query === undefined) {
            return this._query;
        }
        else {
            query = UriQuery.fromAny(query);
            return Uri.of(this._scheme, this._authority, this._path, query, this._fragment);
        }
    };
    Uri.prototype.param = function (key, value) {
        if (value === undefined) {
            return this._query.get(key);
        }
        else {
            var query = this._query.param(key, value);
            return Uri.of(this._scheme, this._authority, this._path, query, this._fragment);
        }
    };
    Uri.prototype.fragment = function (fragment) {
        if (fragment === undefined) {
            return this._fragment;
        }
        else {
            fragment = UriFragment.fromAny(fragment);
            return Uri.of(this._scheme, this._authority, this._path, this._query, fragment);
        }
    };
    Uri.prototype.base = function () {
        if (this._path.isDefined() || this._query.isDefined() || this._fragment.isDefined()) {
            return Uri.of(this._scheme, this._authority);
        }
        else {
            return this;
        }
    };
    Uri.prototype.resolve = function (relative) {
        relative = Uri.fromAny(relative);
        if (relative._scheme.isDefined()) {
            return Uri.of(relative._scheme, relative._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
        }
        else if (relative._authority.isDefined()) {
            return Uri.of(this._scheme, relative._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
        }
        else if (relative._path.isEmpty()) {
            return Uri.of(this._scheme, this._authority, this._path, relative._query.isDefined() ? relative._query : this._query, relative._fragment);
        }
        else if (relative._path.head() === '/') {
            return Uri.of(this._scheme, this._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
        }
        else {
            return Uri.of(this._scheme, this._authority, this.merge(relative._path).removeDotSegments(), relative._query, relative._fragment);
        }
    };
    Uri.prototype.merge = function (relative) {
        if (this._authority.isDefined() && this._path.isEmpty()) {
            return new UriPathSlash(relative);
        }
        else if (this._path.isEmpty()) {
            return relative;
        }
        else {
            return this._path.merge(relative);
        }
    };
    Uri.prototype.unresolve = function (absolute) {
        absolute = Uri.fromAny(absolute);
        if (!this._scheme.equals(absolute._scheme) || !this._authority.equals(absolute._authority)) {
            return absolute;
        }
        else {
            return Uri.of(UriScheme.Undefined, UriAuthority.Undefined, this._path.unmerge(absolute._path), absolute._query, absolute._fragment);
        }
    };
    Uri.prototype.writeUri = function (output) {
        if (this._scheme.isDefined()) {
            this._scheme.writeUri(output);
            output.push(58);
        }
        if (this._authority.isDefined()) {
            output.push(47, 47);
            this._authority.writeUri(output);
        }
        this._path.writeUri(output);
        if (this._query.isDefined()) {
            output.push(63);
            this._query.writeUri(output);
        }
        if (this._fragment.isDefined()) {
            output.push(35);
            this._fragment.writeUri(output);
        }
    };
    Uri.prototype.toUri = function () {
        var str = this._string;
        if (str === undefined) {
            var output = new StringOutput();
            this.writeUri(output);
            str = output.bind();
            this._string = str;
        }
        return str;
    };
    Uri.prototype.compare = function (that) {
        var order = this.toUri().localeCompare(that.toUri());
        return order < 0 ? -1 : order > 0 ? 1 : 0;
    };
    Uri.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Uri) {
            if (this._hashCode !== undefined && that._hashCode !== undefined && this._hashCode !== that._hashCode) {
                return false;
            }
            return this._scheme.equals(that._scheme) && this._authority.equals(that._authority)
                && this._path.equals(that._path) && this._query.equals(that._query)
                && this._fragment.equals(that._fragment);
        }
        return false;
    };
    Uri.prototype.hashCode = function () {
        var code = this._hashCode;
        if (code === undefined) {
            code = Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(0xF5785F14, this._scheme.hashCode()), this._authority.hashCode()), this._path.hashCode()), this._query.hashCode()), this._fragment.hashCode()));
            this._hashCode = code;
        }
        return code;
    };
    Uri.prototype.toString = function () {
        return this.toUri();
    };
    Uri.parse = function (str) {
        var key = Text$1.valueOf(str);
        if (str.length <= 128) {
            var uri_1 = Uri.ParseCache.get(key);
            if (uri_1 !== undefined) {
                return uri_1;
            }
        }
        var input = new StringInput(str);
        var parser = UriParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        var uri = parser.bind();
        Uri.ParseCache.set(key, uri);
        return uri;
    };
    Uri.of = function (scheme, authority, path, query, fragment) {
        if (scheme === void 0) { scheme = UriScheme.Undefined; }
        if (authority === void 0) { authority = UriAuthority.Undefined; }
        if (path === void 0) { path = UriPath.Empty; }
        if (query === void 0) { query = UriQuery.Undefined; }
        if (fragment === void 0) { fragment = UriFragment.Undefined; }
        if (scheme.isDefined() || authority.isDefined() || path.isDefined()
            || query.isDefined() || fragment.isDefined()) {
            return new Uri(scheme, authority, path, query, fragment);
        }
        else {
            return Uri.Empty;
        }
    };
    Uri.scheme = function (scheme) {
        scheme = UriScheme.fromAny(scheme);
        return Uri.of(scheme, undefined, undefined, undefined, undefined);
    };
    Uri.authority = function (authority) {
        authority = UriAuthority.fromAny(authority);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.user = function (user) {
        var authority = UriAuthority.user(user);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.username = function (username, password) {
        var authority = UriAuthority.username(username, password);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.password = function (password) {
        var authority = UriAuthority.password(password);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.host = function (host) {
        var authority = UriAuthority.host(host);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.hostName = function (address) {
        var authority = UriAuthority.hostName(address);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.hostIPv4 = function (address) {
        var authority = UriAuthority.hostIPv4(address);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.hostIPv6 = function (address) {
        var authority = UriAuthority.hostIPv6(address);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.port = function (port) {
        var authority = UriAuthority.port(port);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.path = function (path) {
        path = UriPath.fromAny(path);
        return Uri.of(undefined, undefined, path, undefined, undefined);
    };
    Uri.query = function (query) {
        query = UriQuery.fromAny(query);
        return Uri.of(undefined, undefined, undefined, query, undefined);
    };
    Uri.param = function (key, value) {
        var query = UriQuery.param(key, value);
        return Uri.of(undefined, undefined, undefined, query, undefined);
    };
    Uri.fragment = function (fragment) {
        fragment = UriFragment.fromAny(fragment);
        return Uri.of(undefined, undefined, undefined, undefined, fragment);
    };
    Uri.fromAny = function (uri) {
        if (uri === null || uri === undefined) {
            return Uri.Empty;
        }
        else if (uri instanceof Uri) {
            return uri;
        }
        else if (typeof uri === 'object') {
            var scheme = UriScheme.fromAny(uri.scheme);
            var authority = UriAuthority.fromAny(uri.authority || uri);
            var path = UriPath.fromAny(uri.path);
            var query = UriQuery.fromAny(uri.query);
            var fragment = UriFragment.fromAny(uri.fragment);
            if (scheme.isDefined() || authority.isDefined() || path.isDefined()
                || query.isDefined() || fragment.isDefined()) {
                return new Uri(scheme, authority, path, query, fragment);
            }
            else {
                return Uri.Empty;
            }
        }
        else if (typeof uri === 'string') {
            return Uri.parse(uri);
        }
        else {
            throw new TypeError('' + uri);
        }
    };
    Uri.resolve = function (base, relative) {
        return Uri.fromAny(base).resolve(relative);
    };
    Uri.unresolve = function (base, absolute) {
        return Uri.fromAny(base).unresolve(absolute);
    };
    Uri.isUnreservedChar = function (c) {
        return c >= 65 && c <= 90
            || c >= 97 && c <= 122
            || c >= 48 && c <= 57
            || c === 45 || c === 46
            || c === 95 || c === 126;
    };
    Uri.isSubDelimChar = function (c) {
        return c === 33 || c === 36
            || c === 38 || c === 40
            || c === 41 || c === 42
            || c === 43 || c === 44
            || c === 59 || c === 61
            || c === 39;
    };
    Uri.isSchemeChar = function (c) {
        return c >= 65 && c <= 90
            || c >= 97 && c <= 122
            || c >= 48 && c <= 57
            || c === 43 || c === 45
            || c === 46;
    };
    Uri.isUserInfoChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 58;
    };
    Uri.isUserChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c);
    };
    Uri.isHostChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c);
    };
    Uri.isPathChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 58 || c === 64;
    };
    Uri.isQueryChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 47 || c === 58
            || c === 63 || c === 64;
    };
    Uri.isParamChar = function (c) {
        return Uri.isUnreservedChar(c)
            || c === 33 || c === 36
            || c === 40 || c === 41
            || c === 42 || c === 43
            || c === 44 || c === 47
            || c === 58 || c === 59
            || c === 63 || c === 64
            || c === 39;
    };
    Uri.isFragmentChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 47 || c === 58
            || c === 63 || c === 64;
    };
    Uri.writeScheme = function (scheme, output) {
        for (var i = 0, n = scheme.length; i < n; i += 1) {
            var c = scheme.charCodeAt(i);
            if (i > 0 && Uri.isSchemeChar(c) || i === 0 && Iteratee.isAlpha(c)) {
                output.push(c);
            }
            else {
                throw new Error('invalid scheme: ' + scheme);
            }
        }
    };
    Uri.writeUserInfo = function (userInfo, output) {
        for (var i = 0, n = userInfo.length; i < n; i += 1) {
            var c = userInfo.charCodeAt(i);
            if (Uri.isUserInfoChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeUser = function (user, output) {
        for (var i = 0, n = user.length; i < n; i += 1) {
            var c = user.charCodeAt(i);
            if (Uri.isUserChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeHost = function (address, output) {
        for (var i = 0, n = address.length; i < n; i += 1) {
            var c = address.charCodeAt(i);
            if (Uri.isHostChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeHostLiteral = function (address, output) {
        for (var i = 0, n = address.length; i < n; i += 1) {
            var c = address.charCodeAt(i);
            if (Uri.isHostChar(c) || c === 58) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writePort = function (port, output) {
        var i = 9;
        var digits = new Array(10);
        while (port > 0) {
            digits[i] = port % 10;
            port = Math.floor(port / 10);
            i -= 1;
        }
        i += 1;
        while (i < 10) {
            output.push(48 + digits[i]);
            i += 1;
        }
    };
    Uri.writePathSegment = function (segment, output) {
        for (var i = 0, n = segment.length; i < n; i += 1) {
            var c = segment.charCodeAt(i);
            if (Uri.isPathChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeQuery = function (query, output) {
        for (var i = 0, n = query.length; i < n; i += 1) {
            var c = query.charCodeAt(i);
            if (Uri.isQueryChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeParam = function (param, output) {
        for (var i = 0, n = param.length; i < n; i += 1) {
            var c = param.charCodeAt(i);
            if (Uri.isParamChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeFragment = function (fragment, output) {
        for (var i = 0, n = fragment.length; i < n; i += 1) {
            var c = fragment.charCodeAt(i);
            if (Uri.isFragmentChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeEncoded = function (c, output) {
        if (c === 0x00) {
            Uri.writePctEncoded(0xC0, output);
            Uri.writePctEncoded(0x80, output);
        }
        else if (c >= 0x00 && c <= 0x7F) {
            Uri.writePctEncoded(c, output);
        }
        else if (c >= 0x80 && c <= 0x07FF) {
            Uri.writePctEncoded(0xC0 | (c >>> 6), output);
            Uri.writePctEncoded(0x80 | (c & 0x3F), output);
        }
        else if (c >= 0x0800 && c <= 0xFFFF
            || c >= 0xE000 && c <= 0xFFFF) {
            Uri.writePctEncoded(0xE0 | (c >>> 12), output);
            Uri.writePctEncoded(0x80 | (c >>> 6 & 0x3F), output);
            Uri.writePctEncoded(0x80 | (c & 0x3F), output);
        }
        else if (c >= 0x10000 && c <= 0x10FFFF) {
            Uri.writePctEncoded(0xF0 | (c >>> 18), output);
            Uri.writePctEncoded(0x80 | (c >>> 12 & 0x3F), output);
            Uri.writePctEncoded(0x80 | (c >>> 6 & 0x3F), output);
            Uri.writePctEncoded(0x80 | (c & 0x3F), output);
        }
        else {
            Uri.writePctEncoded(0xEF, output);
            Uri.writePctEncoded(0xBF, output);
            Uri.writePctEncoded(0xBD, output);
        }
    };
    Uri.writePctEncoded = function (c, output) {
        output.push(37, Uri.encodeHexChar(c >>> 4 & 0xF), Uri.encodeHexChar(c & 0xF));
    };
    Uri.encodeHexChar = function (x) {
        if (x < 10) {
            return 48 + x;
        }
        else {
            return 97 + (x - 10);
        }
    };
    Uri.Empty = undefined;
    Uri.ParseCache = new HashGenCacheMap(64);
    return Uri;
}());
var UriScheme = (function () {
    function UriScheme(name) {
        this._name = name;
    }
    UriScheme.prototype.isDefined = function () {
        return this._name.length !== 0;
    };
    Object.defineProperty(UriScheme.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    UriScheme.prototype.valueOf = function () {
        return this._name;
    };
    UriScheme.prototype.writeUri = function (output) {
        Uri.writeScheme(this._name, output);
    };
    UriScheme.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriScheme.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriScheme) {
            return this._name === that._name;
        }
        return false;
    };
    UriScheme.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x79D3C784, Murmur3.hash(this._name)));
    };
    UriScheme.prototype.toString = function () {
        return this._name;
    };
    UriScheme.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriSchemeParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriScheme.of = function (name) {
        if (name.length !== 0) {
            return new UriScheme(name);
        }
        else {
            return UriScheme.Undefined;
        }
    };
    UriScheme.fromAny = function (scheme) {
        if (scheme === null || scheme === undefined) {
            return UriScheme.Undefined;
        }
        else if (scheme instanceof UriScheme) {
            return scheme;
        }
        else if (typeof scheme === 'string') {
            return UriScheme.of(scheme);
        }
        else {
            throw new TypeError('' + scheme);
        }
    };
    UriScheme.Undefined = new UriScheme('');
    return UriScheme;
}());
var UriAuthority = (function () {
    function UriAuthority(user, host, port) {
        this._user = user;
        this._host = host;
        this._port = port;
    }
    UriAuthority.prototype.isDefined = function () {
        return this._user.isDefined() || this._host.isDefined() || this._port.isDefined();
    };
    UriAuthority.prototype.user = function (user) {
        if (user === undefined) {
            return this._user;
        }
        else {
            user = UriUser.fromAny(user);
            return UriAuthority.of(user, this._host, this._port);
        }
    };
    UriAuthority.prototype.username = function (username, password) {
        if (username === undefined) {
            return this._user._username || '';
        }
        else {
            var user = this._user.username(username, password);
            return UriAuthority.of(user, this._host, this._port);
        }
    };
    UriAuthority.prototype.password = function (password) {
        if (password === undefined) {
            return this._user._password;
        }
        else {
            var user = this._user.password(password);
            return UriAuthority.of(user, this._host, this._port);
        }
    };
    UriAuthority.prototype.host = function (host) {
        if (host === undefined) {
            return this._host;
        }
        else {
            host = UriHost.fromAny(host);
            return UriAuthority.of(this._user, host, this._port);
        }
    };
    UriAuthority.prototype.hostName = function (address) {
        if (address === undefined) {
            return this._host.name();
        }
        else {
            var host = UriHostName.of(address);
            return UriAuthority.of(this._user, host, this._port);
        }
    };
    UriAuthority.prototype.hostIPv4 = function (address) {
        if (address === undefined) {
            return this._host.ipv4();
        }
        else {
            var host = UriHostIPv4.of(address);
            return UriAuthority.of(this._user, host, this._port);
        }
    };
    UriAuthority.prototype.hostIPv6 = function (address) {
        if (address === undefined) {
            return this._host.ipv6();
        }
        else {
            var host = UriHostIPv6.of(address);
            return UriAuthority.of(this._user, host, this._port);
        }
    };
    UriAuthority.prototype.port = function (port) {
        if (port === undefined) {
            return this._port;
        }
        else {
            port = UriPort.fromAny(port);
            return UriAuthority.of(this._user, this._host, port);
        }
    };
    UriAuthority.prototype.writeUri = function (output) {
        if (this._user.isDefined()) {
            this._user.writeUri(output);
            output.push(64);
        }
        this._host.writeUri(output);
        if (this._port.isDefined()) {
            output.push(58);
            this._port.writeUri(output);
        }
    };
    UriAuthority.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriAuthority.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriAuthority) {
            return this._user.equals(that._user) && this._host.equals(that._host)
                && this._port.equals(that._port);
        }
        return false;
    };
    UriAuthority.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(0x6D685FC2, this._user.hashCode()), this._host.hashCode()), this._port.hashCode()));
    };
    UriAuthority.prototype.toString = function () {
        return this.toUri();
    };
    UriAuthority.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriAuthorityParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriAuthority.of = function (user, host, port) {
        if (user === void 0) { user = UriUser.Undefined; }
        if (host === void 0) { host = UriHost.Undefined; }
        if (port === void 0) { port = UriPort.Undefined; }
        if (user.isDefined() || host.isDefined() || port.isDefined()) {
            return new UriAuthority(user, host, port);
        }
        else {
            return UriAuthority.Undefined;
        }
    };
    UriAuthority.user = function (user) {
        user = UriUser.fromAny(user);
        return UriAuthority.of(user, undefined, undefined);
    };
    UriAuthority.username = function (username, password) {
        var user = UriUser.of(username, password);
        return UriAuthority.of(user, undefined, undefined);
    };
    UriAuthority.password = function (password) {
        var user = UriUser.of('', password);
        return UriAuthority.of(user, undefined, undefined);
    };
    UriAuthority.host = function (host) {
        host = UriHost.fromAny(host);
        return UriAuthority.of(undefined, host, undefined);
    };
    UriAuthority.hostName = function (address) {
        var host = UriHostName.of(address);
        return UriAuthority.of(undefined, host, undefined);
    };
    UriAuthority.hostIPv4 = function (address) {
        var host = UriHostIPv4.of(address);
        return UriAuthority.of(undefined, host, undefined);
    };
    UriAuthority.hostIPv6 = function (address) {
        var host = UriHostIPv6.of(address);
        return UriAuthority.of(undefined, host, undefined);
    };
    UriAuthority.port = function (port) {
        port = UriPort.fromAny(port);
        return UriAuthority.of(undefined, undefined, port);
    };
    UriAuthority.fromAny = function (authority) {
        if (authority === null || authority === undefined) {
            return UriAuthority.Undefined;
        }
        else if (authority instanceof UriAuthority) {
            return authority;
        }
        else if (typeof authority === 'object') {
            var user = UriUser.fromAny(authority.user || authority);
            var host = UriHost.fromAny(authority.host);
            var port = UriPort.fromAny(authority.port);
            return UriAuthority.of(user, host, port);
        }
        else if (typeof authority === 'string') {
            return UriAuthority.parse(authority);
        }
        else {
            throw new TypeError('' + authority);
        }
    };
    UriAuthority.Undefined = undefined;
    return UriAuthority;
}());
var UriUser = (function () {
    function UriUser(username, password) {
        if (password === void 0) { password = null; }
        this._username = username;
        this._password = password;
    }
    UriUser.prototype.isDefined = function () {
        return this._username !== null;
    };
    UriUser.prototype.username = function (username, password) {
        if (password === void 0) { password = this._password; }
        if (username === undefined) {
            return this._username || '';
        }
        else {
            return UriUser.of(username, this._password);
        }
    };
    UriUser.prototype.password = function (password) {
        if (password === undefined) {
            return this._password;
        }
        else {
            return UriUser.of(this._username, password);
        }
    };
    UriUser.prototype.writeUri = function (output) {
        if (this._username !== null) {
            Uri.writeUser(this._username, output);
            if (this._password !== null) {
                output.push(58);
                Uri.writeUser(this._password, output);
            }
        }
    };
    UriUser.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriUser.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriUser) {
            return this._username === that._username && this._password === that._password;
        }
        return false;
    };
    UriUser.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x07CAAB751, Murmur3.hash(this._username)), Murmur3.hash(this._password)));
    };
    UriUser.prototype.toString = function () {
        return this.toUri();
    };
    UriUser.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriUserParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriUser.of = function (username, password) {
        if (password === void 0) { password = null; }
        if (username !== null || password !== null) {
            return new UriUser(username || '', password);
        }
        else {
            return UriUser.Undefined;
        }
    };
    UriUser.fromAny = function (user) {
        if (user === null || user === undefined) {
            return UriUser.Undefined;
        }
        else if (user instanceof UriUser) {
            return user;
        }
        else if (typeof user === 'object') {
            var username = typeof user.username === 'string' ? user.username : null;
            var password = typeof user.password === 'string' ? user.password : null;
            return UriUser.of(username, password);
        }
        else if (typeof user === 'string') {
            return UriUser.parse(user);
        }
        else {
            throw new TypeError('' + user);
        }
    };
    UriUser.Undefined = new UriUser(null, null);
    return UriUser;
}());
var UriHost = (function () {
    function UriHost() {
    }
    UriHost.prototype.name = function () {
        return null;
    };
    UriHost.prototype.ipv4 = function () {
        return null;
    };
    UriHost.prototype.ipv6 = function () {
        return null;
    };
    UriHost.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriHost.prototype.toString = function () {
        return this.toUri();
    };
    UriHost.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriHostParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriHost.fromAny = function (host) {
        if (host === null || host === undefined) {
            return UriHost.Undefined;
        }
        else if (host instanceof UriHost) {
            return host;
        }
        else if (typeof host === 'string') {
            return UriHost.parse(host);
        }
        else {
            throw new TypeError('' + host);
        }
    };
    UriHost.Undefined = undefined;
    return UriHost;
}());
var UriHostName = (function (_super) {
    __extends(UriHostName, _super);
    function UriHostName(address) {
        var _this = _super.call(this) || this;
        _this._address = address;
        return _this;
    }
    UriHostName.prototype.isDefined = function () {
        return true;
    };
    Object.defineProperty(UriHostName.prototype, "address", {
        get: function () {
            return this._address;
        },
        enumerable: true,
        configurable: true
    });
    UriHostName.prototype.name = function () {
        return this._address;
    };
    UriHostName.prototype.writeUri = function (output) {
        Uri.writeHost(this._address, output);
    };
    UriHostName.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriHostName) {
            return this._address === that._address;
        }
        return false;
    };
    UriHostName.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0xEAB43698, Murmur3.hash(this._address)));
    };
    UriHostName.of = function (address) {
        return new UriHostName(address);
    };
    return UriHostName;
}(UriHost));
var UriHostIPv4 = (function (_super) {
    __extends(UriHostIPv4, _super);
    function UriHostIPv4(address) {
        var _this = _super.call(this) || this;
        _this._address = address;
        return _this;
    }
    UriHostIPv4.prototype.isDefined = function () {
        return true;
    };
    Object.defineProperty(UriHostIPv4.prototype, "address", {
        get: function () {
            return this._address;
        },
        enumerable: true,
        configurable: true
    });
    UriHostIPv4.prototype.ipv4 = function () {
        return this._address;
    };
    UriHostIPv4.prototype.writeUri = function (output) {
        Uri.writeHost(this._address, output);
    };
    UriHostIPv4.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriHostIPv4) {
            return this._address === that._address;
        }
        return false;
    };
    UriHostIPv4.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0xA3A94D7A, Murmur3.hash(this._address)));
    };
    UriHostIPv4.of = function (address) {
        return new UriHostIPv4(address);
    };
    return UriHostIPv4;
}(UriHost));
var UriHostIPv6 = (function (_super) {
    __extends(UriHostIPv6, _super);
    function UriHostIPv6(address) {
        var _this = _super.call(this) || this;
        _this._address = address;
        return _this;
    }
    UriHostIPv6.prototype.isDefined = function () {
        return true;
    };
    Object.defineProperty(UriHostIPv6.prototype, "address", {
        get: function () {
            return this._address;
        },
        enumerable: true,
        configurable: true
    });
    UriHostIPv6.prototype.ipv6 = function () {
        return this._address;
    };
    UriHostIPv6.prototype.writeUri = function (output) {
        output.push(91);
        Uri.writeHostLiteral(this._address, output);
        output.push(93);
    };
    UriHostIPv6.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriHostIPv6) {
            return this._address === that._address;
        }
        return false;
    };
    UriHostIPv6.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x436A9EB1, Murmur3.hash(this._address)));
    };
    UriHostIPv6.of = function (address) {
        return new UriHostIPv6(address);
    };
    return UriHostIPv6;
}(UriHost));
var UriHostUndefined = (function (_super) {
    __extends(UriHostUndefined, _super);
    function UriHostUndefined() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UriHostUndefined.prototype.isDefined = function () {
        return false;
    };
    Object.defineProperty(UriHostUndefined.prototype, "address", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    UriHostUndefined.prototype.writeUri = function (output) {
    };
    UriHostUndefined.prototype.equals = function (that) {
        return that instanceof UriHostUndefined;
    };
    UriHostUndefined.prototype.hashCode = function () {
        return 0x8F7430F8;
    };
    return UriHostUndefined;
}(UriHost));
UriHost.Undefined = new UriHostUndefined();
var UriPort = (function () {
    function UriPort(num) {
        this._number = num;
    }
    UriPort.prototype.isDefined = function () {
        return this._number !== 0;
    };
    Object.defineProperty(UriPort.prototype, "number", {
        get: function () {
            return this._number;
        },
        enumerable: true,
        configurable: true
    });
    UriPort.prototype.valueOf = function () {
        return this._number;
    };
    UriPort.prototype.writeUri = function (output) {
        Uri.writePort(this._number, output);
    };
    UriPort.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriPort.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriPort) {
            return this._number === that._number;
        }
        return false;
    };
    UriPort.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x0CC080DD, this._number));
    };
    UriPort.prototype.toString = function () {
        return this.toUri();
    };
    UriPort.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriPortParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriPort.of = function (port) {
        if (port !== 0) {
            return new UriPort(port);
        }
        else {
            return UriPort.Undefined;
        }
    };
    UriPort.fromAny = function (port) {
        if (port === null || port === undefined) {
            return UriPort.Undefined;
        }
        else if (port instanceof UriPort) {
            return port;
        }
        else if (typeof port === 'number') {
            return UriPort.of(port);
        }
        else if (typeof port === 'string') {
            return UriPort.parse(port);
        }
        else {
            throw new TypeError('' + port);
        }
    };
    UriPort.Undefined = new UriPort(0);
    return UriPort;
}());
var UriPath = (function () {
    function UriPath() {
    }
    Object.defineProperty(UriPath.prototype, "length", {
        get: function () {
            var size = 0;
            var path = this;
            while (!path.isEmpty()) {
                size += 1;
                path = path.tail();
            }
            return size;
        },
        enumerable: true,
        configurable: true
    });
    UriPath.prototype.removeDotSegments = function () {
        var path = this;
        var builder = new UriPathBuilder();
        while (!path.isEmpty()) {
            var head = path.head();
            if (head === '.' || head === '..') {
                path = path.tail();
                if (!path.isEmpty()) {
                    path = path.tail();
                }
            }
            else if (head === '/') {
                var rest = path.tail();
                if (!rest.isEmpty()) {
                    var next = rest.head();
                    if (next === '.') {
                        path = rest.tail();
                        if (path.isEmpty()) {
                            path = UriPath.Slash;
                        }
                    }
                    else if (next === '..') {
                        path = rest.tail();
                        if (path.isEmpty()) {
                            path = UriPath.Slash;
                        }
                        if (!builder.isEmpty() && builder.pop() !== '/') {
                            if (!builder.isEmpty()) {
                                builder.pop();
                            }
                        }
                    }
                    else {
                        builder.push(head, next);
                        path = rest.tail();
                    }
                }
                else {
                    builder.push(path.head());
                    path = path.tail();
                }
            }
            else {
                builder.push(path.head());
                path = path.tail();
            }
        }
        return builder.bind();
    };
    UriPath.prototype.merge = function (that) {
        var builder = new UriPathBuilder();
        var head = this.head();
        var tail = this.tail();
        while (!tail.isEmpty()) {
            builder.push(head);
            head = tail.head();
            tail = tail.tail();
        }
        if (head === '/') {
            builder.push(head);
        }
        builder.push(that);
        return builder.bind();
    };
    UriPath.prototype.unmerge = function (relative, root) {
        if (root === void 0) { root = relative; }
        var base = this;
        do {
            if (base.isEmpty()) {
                if (!relative.isEmpty() && !relative.tail().isEmpty()) {
                    return relative.tail();
                }
                else {
                    return relative;
                }
            }
            else if (base.isRelative()) {
                return relative;
            }
            else if (relative.isRelative()) {
                return new UriPathSlash(relative);
            }
            else {
                var a = base.tail();
                var b = relative.tail();
                if (!a.isEmpty() && b.isEmpty()) {
                    return UriPath.Slash;
                }
                else if (a.isEmpty() || b.isEmpty() || a.head() !== b.head()) {
                    return b;
                }
                else {
                    a = a.tail();
                    b = b.tail();
                    if (!a.isEmpty() && b.isEmpty()) {
                        return root;
                    }
                    else {
                        base = a;
                        relative = b;
                    }
                }
            }
        } while (true);
    };
    UriPath.prototype.toArray = function () {
        var components = [];
        var path = this;
        while (!path.isEmpty()) {
            components.push(path.head());
            path = path.tail();
        }
        return components;
    };
    UriPath.prototype.writeUri = function (output) {
        var path = this;
        while (!path.isEmpty()) {
            if (path instanceof UriPathSlash) {
                output.push(47);
            }
            else {
                Uri.writePathSegment(path.head(), output);
            }
            path = path.tail();
        }
    };
    UriPath.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriPath.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriPath) {
            var xs = this;
            var ys = that;
            while (!xs.isEmpty() && !ys.isEmpty()) {
                if (xs.head() !== ys.head()) {
                    return false;
                }
                xs = xs.tail();
                ys = ys.tail();
            }
            return xs.isEmpty() === ys.isEmpty();
        }
        return false;
    };
    UriPath.prototype.hashCode = function () {
        var code = 0xD7B0CC51;
        var path = this;
        while (!path.isEmpty()) {
            code = Murmur3.mix(code, Murmur3.hash(path.head()));
            path = path.tail();
        }
        return Murmur3.mash(code);
    };
    UriPath.prototype.toString = function () {
        return this.toUri();
    };
    UriPath.builder = function () {
        return new UriPathBuilder();
    };
    UriPath.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriPathParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriPath.of = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        var builder = new UriPathBuilder();
        builder.push.apply(builder, arguments);
        return builder.bind();
    };
    UriPath.fromAny = function (path) {
        if (path === null || path === undefined) {
            return UriPath.Empty;
        }
        else if (path instanceof UriPath) {
            return path;
        }
        else if (Array.isArray(path)) {
            return UriPath.of.apply(undefined, path);
        }
        else if (typeof path === 'string') {
            return UriPath.parse(path);
        }
        else {
            throw new TypeError('' + path);
        }
    };
    UriPath.Empty = undefined;
    UriPath.Slash = undefined;
    return UriPath;
}());
var UriPathSegment = (function (_super) {
    __extends(UriPathSegment, _super);
    function UriPathSegment(head, tail) {
        var _this = _super.call(this) || this;
        _this._head = head;
        _this._tail = tail;
        return _this;
    }
    UriPathSegment.prototype.isDefined = function () {
        return true;
    };
    UriPathSegment.prototype.isAbsolute = function () {
        return false;
    };
    UriPathSegment.prototype.isRelative = function () {
        return true;
    };
    UriPathSegment.prototype.isEmpty = function () {
        return false;
    };
    UriPathSegment.prototype.head = function () {
        return this._head;
    };
    UriPathSegment.prototype.tail = function () {
        return this._tail;
    };
    UriPathSegment.prototype.setTail = function (tail) {
        if (tail instanceof UriPathSegment) {
            tail = new UriPathSlash(tail);
        }
        this._tail = tail;
    };
    return UriPathSegment;
}(UriPath));
var UriPathSlash = (function (_super) {
    __extends(UriPathSlash, _super);
    function UriPathSlash(tail) {
        var _this = _super.call(this) || this;
        _this._tail = tail;
        return _this;
    }
    UriPathSlash.prototype.isDefined = function () {
        return true;
    };
    UriPathSlash.prototype.isAbsolute = function () {
        return true;
    };
    UriPathSlash.prototype.isRelative = function () {
        return false;
    };
    UriPathSlash.prototype.isEmpty = function () {
        return false;
    };
    UriPathSlash.prototype.head = function () {
        return '/';
    };
    UriPathSlash.prototype.tail = function () {
        return this._tail;
    };
    UriPathSlash.prototype.setTail = function (tail) {
        this._tail = tail;
    };
    return UriPathSlash;
}(UriPath));
var UriPathEmpty = (function (_super) {
    __extends(UriPathEmpty, _super);
    function UriPathEmpty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UriPathEmpty.prototype.isDefined = function () {
        return false;
    };
    UriPathEmpty.prototype.isAbsolute = function () {
        return false;
    };
    UriPathEmpty.prototype.isRelative = function () {
        return true;
    };
    UriPathEmpty.prototype.isEmpty = function () {
        return true;
    };
    UriPathEmpty.prototype.head = function () {
        return '';
    };
    UriPathEmpty.prototype.tail = function () {
        throw new Error('empty path');
    };
    UriPathEmpty.prototype.setTail = function (tail) {
        throw new Error('empty path');
    };
    return UriPathEmpty;
}(UriPath));
UriPath.Empty = new UriPathEmpty();
UriPath.Slash = new UriPathSlash(UriPath.Empty);
var UriPathBuilder = (function () {
    function UriPathBuilder() {
        this._first = UriPath.Empty;
        this._last = null;
        this._size = 0;
        this._aliased = 0;
    }
    UriPathBuilder.prototype.isEmpty = function () {
        return this._size === 0;
    };
    UriPathBuilder.prototype.push = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        for (var i = 0; i < components.length; i += 1) {
            var component = components[i];
            if (component instanceof UriPath) {
                if (!component.isEmpty()) {
                    if (this._size === 0) {
                        this._first = component;
                    }
                    else {
                        this.dealias(this._size - 1).setTail(component);
                    }
                    this._size += 1;
                    while (!component.tail().isEmpty()) {
                        component = component.tail();
                        this._size += 1;
                    }
                    this._last = component;
                }
            }
            else if (Array.isArray(component)) {
                this.push.apply(this, component);
            }
            else if (typeof component === 'string') {
                var xn = void 0;
                if (component === '/') {
                    xn = new UriPathSlash(UriPath.Empty);
                }
                else {
                    xn = new UriPathSegment(component, UriPath.Empty);
                }
                if (this._size === 0) {
                    this._first = xn;
                }
                else {
                    this.dealias(this._size - 1).setTail(xn);
                }
                this._last = xn;
                this._size += 1;
                this._aliased += 1;
            }
            else {
                throw new TypeError('' + component);
            }
        }
    };
    UriPathBuilder.prototype.pop = function () {
        if (this._size === 0) {
            throw new Error();
        }
        else if (this._size === 1) {
            var x0 = this._first;
            var x = x0.head();
            this._first = x0.tail();
            if (x0.tail().isEmpty()) {
                this._last = null;
            }
            this._size -= 1;
            if (this._aliased > 0) {
                this._aliased -= 1;
            }
            return x;
        }
        else {
            var xi = this.dealias(this._size - 2);
            var x = xi.tail().head();
            xi.setTail(UriPath.Empty);
            this._last = xi;
            this._size -= 1;
            this._aliased -= 1;
            return x;
        }
    };
    UriPathBuilder.prototype.bind = function () {
        this._aliased = 0;
        return this._first;
    };
    UriPathBuilder.prototype.dealias = function (n) {
        var i = 0;
        var xi = null;
        var xs = this._first;
        if (this._aliased <= n) {
            while (i < this._aliased) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
            while (i <= n) {
                var xn = void 0;
                if (xs instanceof UriPathSlash) {
                    xn = new UriPathSlash(xs.tail());
                }
                else {
                    xn = new UriPathSegment(xs.head(), xs.tail());
                }
                if (i === 0) {
                    this._first = xn;
                }
                else {
                    xi.setTail(xn);
                }
                xi = xn;
                xs = xs.tail();
                i += 1;
            }
            if (i === this._size) {
                this._last = xi;
            }
            this._aliased = i;
        }
        else if (n === 0) {
            xi = this._first;
        }
        else if (n === this._size - 1) {
            xi = this._last;
        }
        else {
            while (i <= n) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
        }
        return xi;
    };
    return UriPathBuilder;
}());
var UriQuery = (function () {
    function UriQuery() {
    }
    Object.defineProperty(UriQuery.prototype, "length", {
        get: function () {
            var size = 0;
            var query = this;
            while (!query.isEmpty()) {
                size += 1;
                query = query.tail();
            }
            return size;
        },
        enumerable: true,
        configurable: true
    });
    UriQuery.prototype.get = function (key) {
        var query = this;
        while (!query.isEmpty()) {
            if (key === query.key) {
                return query.value;
            }
            query = query.tail();
        }
        return undefined;
    };
    UriQuery.prototype.param = function (key, value) {
        if (value === undefined) {
            return this.get(key);
        }
        else {
            var builder = new UriQueryBuilder();
            var query = this;
            var updated = false;
            while (!query.isEmpty()) {
                if (!updated && key !== null && key === query.key) {
                    builder.param(key, value);
                    updated = true;
                }
                else {
                    builder.param(query.key, query.value);
                }
                query = query.tail();
            }
            if (!updated) {
                builder.param(key, value);
            }
            return builder.bind();
        }
    };
    UriQuery.prototype.toObject = function () {
        var params = {};
        var query = this;
        var i = 0;
        while (!query.isEmpty()) {
            if (query.key !== null) {
                params[query.key] = query.value;
            }
            else {
                params['$' + i] = query.value;
            }
            query = query.tail();
            i += 1;
        }
        return params;
    };
    UriQuery.prototype.writeUri = function (output) {
        var query = this;
        var first = true;
        while (!query.isEmpty()) {
            if (!first) {
                output.push(38);
            }
            else {
                first = false;
            }
            if (query.key !== null) {
                Uri.writeParam(query.key, output);
                output.push(61);
            }
            Uri.writeParam(query.value, output);
            query = query.tail();
        }
    };
    UriQuery.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriQuery.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriQuery) {
            var xs = this;
            var ys = that;
            while (!xs.isEmpty() && !ys.isEmpty()) {
                if (xs.key !== ys.key || xs.value !== ys.value) {
                    return false;
                }
                xs = xs.tail();
                ys = ys.tail();
            }
            return xs.isEmpty() === ys.isEmpty();
        }
        return false;
    };
    UriQuery.prototype.hashCode = function () {
        var code = 0x36FCED64;
        var query = this;
        while (!query.isEmpty()) {
            code = Murmur3.mix(Murmur3.mix(code, Murmur3.hash(query.key)), Murmur3.hash(query.value));
            query = query.tail();
        }
        return Murmur3.mash(code);
    };
    UriQuery.prototype.toString = function () {
        return this.toUri();
    };
    UriQuery.builder = function () {
        return new UriQueryBuilder();
    };
    UriQuery.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriQueryParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriQuery.fromAny = function (query) {
        if (query === null || query === undefined) {
            return UriQuery.Undefined;
        }
        else if (query instanceof UriQuery) {
            return query;
        }
        else if (typeof query === 'object') {
            return UriQuery.fromObject(query);
        }
        else if (typeof query === 'string') {
            return UriQuery.parse(query);
        }
        else {
            throw new TypeError('' + query);
        }
    };
    UriQuery.param = function (key, value) {
        return new UriQueryParam(key, value, UriQuery.Undefined);
    };
    UriQuery.fromObject = function (params) {
        var query = UriQuery.Undefined;
        var last = null;
        var i = 0;
        for (var k in params) {
            var key = k;
            var value = params[k];
            if (k.charCodeAt(0) === 36 && k === '$' + i) {
                key = null;
            }
            var param = new UriQueryParam(key, value, UriQuery.Undefined);
            if (last === null) {
                query = param;
            }
            else {
                last.setTail(param);
            }
            last = param;
            i += 1;
        }
        return query;
    };
    UriQuery.Undefined = undefined;
    return UriQuery;
}());
var UriQueryParam = (function (_super) {
    __extends(UriQueryParam, _super);
    function UriQueryParam(key, value, tail) {
        var _this = _super.call(this) || this;
        _this._key = key;
        _this._value = value;
        _this._tail = tail;
        return _this;
    }
    UriQueryParam.prototype.isDefined = function () {
        return true;
    };
    UriQueryParam.prototype.isEmpty = function () {
        return false;
    };
    Object.defineProperty(UriQueryParam.prototype, "key", {
        get: function () {
            return this._key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UriQueryParam.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    UriQueryParam.prototype.tail = function () {
        return this._tail;
    };
    UriQueryParam.prototype.setTail = function (tail) {
        this._tail = tail;
    };
    return UriQueryParam;
}(UriQuery));
var UriQueryUndefined = (function (_super) {
    __extends(UriQueryUndefined, _super);
    function UriQueryUndefined() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UriQueryUndefined.prototype.isDefined = function () {
        return false;
    };
    UriQueryUndefined.prototype.isEmpty = function () {
        return true;
    };
    Object.defineProperty(UriQueryUndefined.prototype, "key", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UriQueryUndefined.prototype, "value", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    UriQueryUndefined.prototype.tail = function () {
        throw new Error('undefined query');
    };
    UriQueryUndefined.prototype.setTail = function (tail) {
        throw new Error('undefined query');
    };
    return UriQueryUndefined;
}(UriQuery));
UriQuery.Undefined = new UriQueryUndefined();
var UriQueryBuilder = (function () {
    function UriQueryBuilder() {
        this._first = UriQuery.Undefined;
        this._last = null;
        this._size = 0;
        this._aliased = 0;
    }
    UriQueryBuilder.prototype.isEmpty = function () {
        return this._size === 0;
    };
    UriQueryBuilder.prototype.param = function (key, value) {
        var xn = new UriQueryParam(key, value, UriQuery.Undefined);
        if (this._size === 0) {
            this._first = xn;
        }
        else {
            this.dealias(this._size - 1).setTail(xn);
        }
        this._last = xn;
        this._size += 1;
        this._aliased += 1;
    };
    UriQueryBuilder.prototype.bind = function () {
        this._aliased = 0;
        return this._first;
    };
    UriQueryBuilder.prototype.dealias = function (n) {
        var i = 0;
        var xi = null;
        var xs = this._first;
        if (this._aliased <= n) {
            while (i < this._aliased) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
            while (i <= n) {
                var xn = new UriQueryParam(xs.key, xs.value, xs.tail());
                if (i === 0) {
                    this._first = xn;
                }
                else {
                    xi.setTail(xn);
                }
                xi = xn;
                xs = xs.tail();
                i += 1;
            }
            if (i === this._size) {
                this._last = xi;
            }
            this._aliased = i;
        }
        else if (n === 0) {
            xi = this._first;
        }
        else if (n === this._size - 1) {
            xi = this._last;
        }
        else {
            while (i <= n) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
        }
        return xi;
    };
    return UriQueryBuilder;
}());
var UriFragment = (function () {
    function UriFragment(part) {
        this._part = part;
    }
    UriFragment.prototype.isDefined = function () {
        return this._part !== null;
    };
    Object.defineProperty(UriFragment.prototype, "part", {
        get: function () {
            return this._part || '';
        },
        enumerable: true,
        configurable: true
    });
    UriFragment.prototype.writeUri = function (output) {
        if (this._part !== null) {
            Uri.writeFragment(this._part, output);
        }
    };
    UriFragment.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriFragment.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriFragment) {
            return this._part === that._part;
        }
        return false;
    };
    UriFragment.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x1797110E, Murmur3.hash(this._part)));
    };
    UriFragment.prototype.toString = function () {
        return this.toUri();
    };
    UriFragment.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriFragmentParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriFragment.of = function (part) {
        if (part !== null) {
            return new UriFragment(part);
        }
        else {
            return UriFragment.Undefined;
        }
    };
    UriFragment.fromAny = function (fragment) {
        if (fragment === null || fragment === undefined) {
            return UriFragment.Undefined;
        }
        else if (fragment instanceof UriFragment) {
            return fragment;
        }
        else if (typeof fragment === 'string') {
            return UriFragment.of(fragment);
        }
        else {
            throw new TypeError('' + fragment);
        }
    };
    UriFragment.Undefined = new UriFragment(null);
    return UriFragment;
}());
UriAuthority.Undefined = new UriAuthority(UriUser.Undefined, UriHost.Undefined, UriPort.Undefined);
Uri.Empty = new Uri(UriScheme.Undefined, UriAuthority.Undefined, UriPath.Empty, UriQuery.Undefined, UriFragment.Undefined);
//# sourceMappingURL=data:application/json;base64,

var Form = (function () {
    function Form() {
    }
    Object.defineProperty(Form.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Form.Any = undefined;
    Form.Value = undefined;
    Form.String = undefined;
    Form.Number = undefined;
    Form.Boolean = undefined;
    Form.Uri = undefined;
    return Form;
}());
var AnyForm = (function (_super) {
    __extends(AnyForm, _super);
    function AnyForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AnyForm.prototype, "unit", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    AnyForm.prototype.mold = function (value) {
        return Value.fromAny(value);
    };
    AnyForm.prototype.cast = function (value) {
        return value.toAny();
    };
    return AnyForm;
}(Form));
Form.Any = new AnyForm();
var ValueForm = (function (_super) {
    __extends(ValueForm, _super);
    function ValueForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ValueForm.prototype, "unit", {
        get: function () {
            return Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    ValueForm.prototype.mold = function (value) {
        return Value.fromAny(value);
    };
    ValueForm.prototype.cast = function (value) {
        return value;
    };
    return ValueForm;
}(Form));
Form.Value = new ValueForm();
var StringForm = (function (_super) {
    __extends(StringForm, _super);
    function StringForm(unit) {
        if (unit === void 0) { unit = ''; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    StringForm.prototype.mold = function (value) {
        return Text$1.valueOf(value);
    };
    StringForm.prototype.cast = function (value) {
        return value.target.stringValue();
    };
    return StringForm;
}(Form));
Form.String = new StringForm();
var NumberForm = (function (_super) {
    __extends(NumberForm, _super);
    function NumberForm(unit) {
        if (unit === void 0) { unit = 0; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    NumberForm.prototype.mold = function (value) {
        return Num.valueOf(value);
    };
    NumberForm.prototype.cast = function (value) {
        return value.target.numberValue();
    };
    return NumberForm;
}(Form));
Form.Number = new NumberForm();
var BooleanForm = (function (_super) {
    __extends(BooleanForm, _super);
    function BooleanForm(unit) {
        if (unit === void 0) { unit = false; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    BooleanForm.prototype.mold = function (value) {
        return Bool.valueOf(value);
    };
    BooleanForm.prototype.cast = function (value) {
        return value.target.booleanValue();
    };
    return BooleanForm;
}(Form));
Form.Boolean = new BooleanForm();
var UriForm = (function (_super) {
    __extends(UriForm, _super);
    function UriForm(unit) {
        if (unit === void 0) { unit = Uri.Empty; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    UriForm.prototype.mold = function (uri) {
        return Text$1.valueOf(uri.toUri());
    };
    UriForm.prototype.cast = function (value) {
        try {
            var str = value.target.stringValue();
            if (str !== undefined) {
                return Uri.parse(str);
            }
        }
        catch (e) {
        }
        return undefined;
    };
    return UriForm;
}(Form));
Form.Uri = new UriForm();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBVyxLQUFLLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDeEMsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLE9BQU8sQ0FBQztBQUUxQjtJQUFBO0lBc0JBLENBQUM7SUFyQkMsc0JBQUkscUJBQUc7YUFBUDtZQUNFLE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBUWUsUUFBRyxHQUFtQixTQUFnQixDQUFDO0lBRXZDLFVBQUssR0FBMEIsU0FBZ0IsQ0FBQztJQUVoRCxXQUFNLEdBQWlCLFNBQWdCLENBQUM7SUFFeEMsV0FBTSxHQUFpQixTQUFnQixDQUFDO0lBRXhDLFlBQU8sR0FBa0IsU0FBZ0IsQ0FBQztJQUUxQyxRQUFHLEdBQWMsU0FBZ0IsQ0FBQztJQUNwRCxXQUFDO0NBQUEsQUF0QkQsSUFzQkM7U0F0QnFCLElBQUk7QUF5QjFCO0lBQTZCLG1DQUFjO0lBQTNDOztJQVlBLENBQUM7SUFYQyxzQkFBSSx5QkFBSTthQUFSO1lBQ0UsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxHQUFKLFVBQUssS0FBZTtRQUNsQixPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELHNCQUFJLEdBQUosVUFBSyxLQUFZO1FBQ2YsT0FBTyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBWkQsQ0FBNkIsSUFBSSxHQVloQzs7QUFDQSxJQUFZLENBQUMsR0FBRyxH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

var FormCursor = (function (_super) {
    __extends(FormCursor, _super);
    function FormCursor(cursor, form) {
        var _this = _super.call(this) || this;
        _this.cursor = cursor;
        _this.form = form;
        return _this;
    }
    FormCursor.prototype.isEmpty = function () {
        return this.cursor.isEmpty();
    };
    FormCursor.prototype.head = function () {
        var value = this.cursor.head();
        return value.coerce(this.form);
    };
    FormCursor.prototype.step = function () {
        this.cursor.step();
    };
    FormCursor.prototype.skip = function (count) {
        this.cursor.skip(count);
    };
    FormCursor.prototype.hasNext = function () {
        return this.cursor.hasNext();
    };
    FormCursor.prototype.nextIndex = function () {
        return this.cursor.nextIndex();
    };
    FormCursor.prototype.next = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value.coerce(this.form), done: done };
    };
    FormCursor.prototype.hasPrevious = function () {
        return this.cursor.hasPrevious();
    };
    FormCursor.prototype.previousIndex = function () {
        return this.cursor.previousIndex();
    };
    FormCursor.prototype.previous = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value.coerce(this.form), done: done };
    };
    FormCursor.prototype.delete = function () {
        this.cursor.delete();
    };
    return FormCursor;
}(Cursor));
var FormPairCursor = (function (_super) {
    __extends(FormPairCursor, _super);
    function FormPairCursor(cursor, keyForm, valueForm) {
        var _this = _super.call(this) || this;
        _this.cursor = cursor;
        _this.keyForm = keyForm;
        _this.valueForm = valueForm;
        return _this;
    }
    FormPairCursor.prototype.isEmpty = function () {
        return this.cursor.isEmpty();
    };
    FormPairCursor.prototype.head = function () {
        var pair = this.cursor.head();
        return [pair[0].coerce(this.keyForm), pair[1].coerce(this.valueForm)];
    };
    FormPairCursor.prototype.step = function () {
        this.cursor.step();
    };
    FormPairCursor.prototype.skip = function (count) {
        this.cursor.skip(count);
    };
    FormPairCursor.prototype.hasNext = function () {
        return this.cursor.hasNext();
    };
    FormPairCursor.prototype.nextIndex = function () {
        return this.cursor.nextIndex();
    };
    FormPairCursor.prototype.next = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && [value[0].coerce(this.keyForm), value[1].coerce(this.valueForm)], done: done };
    };
    FormPairCursor.prototype.hasPrevious = function () {
        return this.cursor.hasPrevious();
    };
    FormPairCursor.prototype.previousIndex = function () {
        return this.cursor.previousIndex();
    };
    FormPairCursor.prototype.previous = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && [value[0].coerce(this.keyForm), value[1].coerce(this.valueForm)], done: done };
    };
    FormPairCursor.prototype.delete = function () {
        this.cursor.delete();
    };
    return FormPairCursor;
}(Cursor));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jdXJzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmb3JtLWN1cnNvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUtoQztJQUFtQyxzQ0FBUztJQUkxQyxvQkFBWSxNQUFxQixFQUFFLElBQWtCO1FBQXJELFlBQ0UsaUJBQU8sU0FHUjtRQUZDLEtBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDOztJQUNuQixDQUFDO0lBRUQsNEJBQU8sR0FBUDtRQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQseUJBQUksR0FBSjtRQUNFLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDakMsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQseUJBQUksR0FBSjtRQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELHlCQUFJLEdBQUosVUFBSyxLQUFhO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCw0QkFBTyxHQUFQO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCw4QkFBUyxHQUFUO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCx5QkFBSSxHQUFKO1FBQ1EsSUFBQSx1QkFBa0MsRUFBakMsZ0JBQUssRUFBRSxjQUEwQixDQUFDO1FBQ3pDLE9BQU8sRUFBQyxLQUFLLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksTUFBQSxFQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELGdDQUFXLEdBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELGtDQUFhLEdBQWI7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELDZCQUFRLEdBQVI7UUFDUSxJQUFBLHVCQUFrQyxFQUFqQyxnQkFBSyxFQUFFLGNBQTBCLENBQUM7UUFDekMsT0FBTyxFQUFDLEtBQUssRUFBRSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxNQUFBLEVBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsMkJBQU0sR0FBTjtRQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQXhERCxDQUFtQyxNQUFNLEdBd0R4Qzs7QUFHRDtJQUEwQywwQ0FBYztJQUt0RCx3QkFBWSxNQUE4QixFQUFFLE9BQXFCLEVBQUUsU0FBdUI7UUFBMUYsWUFDRSxpQkFBTyxTQUlSO1FBSEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsS0FBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsS0FBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7O0lBQzdCLENBQUM7SUFFRCxnQ0FBTyxHQUFQO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCw2QkFBSSxHQUFKO1FBQ0UsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsNkJBQUksR0FBSjtRQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELDZCQUFJLEdBQUosVUFBSyxLQUFhO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxnQ0FBTyxHQUFQO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxrQ0FBUyxHQUFUO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCw2QkFBSSxHQUFKO1FBQ1EsSUFBQSx1QkFBa0MsRUFBakMsZ0JBQUssRUFBRSxjQUEwQixDQUFDO1FBQ3pDLE9BQU8sRUFBQyxLQUFLLEVBQUUsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLE1BQUEsRUFBQyxDQUFDO0lBQ2xHLENBQUM7SUFFRCxvQ0FBVyxHQUFYO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFRCxzQ0FBYSxHQUFiO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxpQ0FBUSxHQUFSO1FBQ1EsSUFBQSx1QkFBa0MsRUFBakMsZ0JBQUssRUFBRSxjQUEwQixDQUFDO1FBQ3pDLE9BQU8sRUFBQyxLQUFLLEVBQUUsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLE1BQUEsRUFBQyxDQUFDO0lBQ2xHLENBQUM7SUFFRCwrQkFBTSxHQUFOO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBMURELENBQTBDLE1BQU0sR0EwRC9DIn0=

var ValueBuilder = (function () {
    function ValueBuilder() {
        this._record = null;
        this._value = null;
    }
    ValueBuilder.prototype.push = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        for (var i = 0, n = items.length; i < n; i += 1) {
            var item = items[i];
            if (item instanceof Field) {
                this.pushField(item);
            }
            else if (item instanceof Value) {
                this.pushValue(item);
            }
        }
    };
    ValueBuilder.prototype.pushField = function (field) {
        if (this._record === null) {
            this._record = Record.empty();
            if (this._value !== null) {
                this._record.push(this._value);
                this._value = null;
            }
        }
        this._record.push(field);
    };
    ValueBuilder.prototype.pushValue = function (value) {
        if (this._record !== null) {
            this._record.push(value);
        }
        else if (this._value !== null) {
            this._record = Record.empty();
            this._record.push(this._value, value);
            this._value = null;
        }
        else {
            this._value = value;
        }
    };
    ValueBuilder.prototype.bind = function () {
        if (this._record !== null) {
            return this._record;
        }
        else if (this._value !== null) {
            return this._value;
        }
        else {
            return Value.Absent;
        }
    };
    return ValueBuilder;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUtYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZhbHVlLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUM5QixPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFHaEM7SUFNRTtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFRCwyQkFBSSxHQUFKO1FBQUssZUFBZ0I7YUFBaEIsVUFBZ0IsRUFBaEIscUJBQWdCLEVBQWhCLElBQWdCO1lBQWhCLDBCQUFnQjs7UUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9DLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFJLElBQUksWUFBWSxLQUFLLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDdEI7aUJBQU0sSUFBSSxJQUFJLFlBQVksS0FBSyxFQUFFO2dCQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3RCO1NBQ0Y7SUFDSCxDQUFDO0lBR0QsZ0NBQVMsR0FBVCxVQUFVLEtBQVk7UUFDcEIsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtZQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUM5QixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO2dCQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2FBQ3BCO1NBQ0Y7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBR0QsZ0NBQVMsR0FBVCxVQUFVLEtBQVk7UUFDcEIsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtZQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxQjthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUNwQjthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7U0FDckI7SUFDSCxDQUFDO0lBRUQsMkJBQUksR0FBSjtRQUNFLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7WUFDekIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3JCO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtZQUMvQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDcEI7YUFBTTtZQUNMLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQztTQUNyQjtJQUNILENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUF4REQsSUF3REMifQ==

var BlockParser = (function (_super) {
    __extends(BlockParser, _super);
    function BlockParser(recon, builder, keyParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        _this.keyParser = keyParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    BlockParser.prototype.feed = function (input) {
        return BlockParser.parse(input, this.recon, this.builder, this.keyParser, this.valueParser, this.step);
    };
    BlockParser.parse = function (input, recon, builder, keyParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        block: do {
            if (step === 1) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 33 || c === 34 || c === 36 || c === 37
                        || c === 39 || c === 40 || c === 43 || c === 45
                        || c >= 48 && c <= 57 || c === 64
                        || c === 91 || c === 123 || c === 126
                        || Recon.isIdentStartChar(c)) {
                        builder = builder || recon.valueBuilder();
                        step = 2;
                    }
                    else if (c === 35) {
                        input.step();
                        step = 7;
                    }
                    else {
                        if (builder) {
                            return Iteratee.done(builder.bind());
                        }
                        else {
                            return Iteratee.done(recon.absent());
                        }
                    }
                }
                else if (input.isDone()) {
                    if (builder) {
                        return Iteratee.done(builder.bind());
                    }
                    else {
                        return Iteratee.done(recon.absent());
                    }
                }
            }
            if (step === 2) {
                if (!keyParser) {
                    keyParser = recon.parseBlockExpr(input);
                }
                while (keyParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    keyParser = keyParser.feed(input);
                }
                if (keyParser.isDone()) {
                    step = 3;
                }
                else if (keyParser.isError()) {
                    return keyParser;
                }
            }
            if (step === 3) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 58) {
                        input.step();
                        step = 4;
                    }
                    else {
                        builder.push(recon.item(keyParser.bind()));
                        keyParser = undefined;
                        step = 6;
                    }
                }
                else if (input.isDone()) {
                    builder.push(recon.item(keyParser.bind()));
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 4) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    step = 5;
                }
                else if (input.isDone()) {
                    builder.push(recon.slot(keyParser.bind()));
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 5) {
                if (!valueParser) {
                    valueParser = recon.parseBlockExpr(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder.push(recon.slot(keyParser.bind(), valueParser.bind()));
                    keyParser = undefined;
                    valueParser = undefined;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser;
                }
            }
            if (step === 6) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 44 || c === 59 || Iteratee.isNewline(c)) {
                        input.step();
                        step = 1;
                        continue;
                    }
                    else if (c === 35) {
                        input.step();
                        step = 7;
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 7) {
                while (!input.isEmpty()) {
                    c = input.head();
                    if (!Iteratee.isNewline(c)) {
                        input.step();
                    }
                    else {
                        step = 1;
                        continue block;
                    }
                }
                if (input.isDone()) {
                    step = 1;
                    continue;
                }
            }
            break;
        } while (true);
        return new BlockParser(recon, builder, keyParser, valueParser, step);
    };
    return BlockParser;
}(Iteratee));
var AttrParser = (function (_super) {
    __extends(AttrParser, _super);
    function AttrParser(recon, keyParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.keyParser = keyParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    AttrParser.prototype.feed = function (input) {
        return AttrParser.parse(input, this.recon, this.keyParser, this.valueParser, this.step);
    };
    AttrParser.parse = function (input, recon, keyParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 64) {
                    input.step();
                    step = 2;
                }
                else {
                    return Iteratee.expected('@', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!keyParser) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 34 || c === 39) {
                        keyParser = recon.parseString(input);
                    }
                    else if (Recon.isIdentStartChar(c)) {
                        keyParser = recon.parseIdent(input);
                    }
                    else {
                        return Iteratee.expected('attribute name', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            else {
                keyParser = keyParser.feed(input);
            }
            if (keyParser) {
                if (keyParser.isDone()) {
                    step = 3;
                }
                else if (keyParser.isError()) {
                    return keyParser.asError();
                }
            }
        }
        if (step === 3) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 4;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(recon.attr(keyParser.bind()));
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 41) {
                    input.step();
                    return Iteratee.done(recon.attr(keyParser.bind()));
                }
                else {
                    if (!valueParser) {
                        valueParser = recon.parseBlock(input);
                    }
                    step = 5;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            valueParser = valueParser;
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 6;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 6) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 41) {
                    input.step();
                    return Iteratee.done(recon.attr(keyParser.bind(), valueParser.bind()));
                }
                else {
                    return Iteratee.expected(')', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        return new AttrParser(recon, keyParser, valueParser, step);
    };
    return AttrParser;
}(Iteratee));
var BlockValueParser = (function (_super) {
    __extends(BlockValueParser, _super);
    function BlockValueParser(recon, builder, fieldParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.fieldParser = fieldParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    BlockValueParser.prototype.feed = function (input) {
        return BlockValueParser.parse(input, this.recon, this.builder, this.fieldParser, this.valueParser, this.step);
    };
    BlockValueParser.parse = function (input, recon, builder, fieldParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 64) {
                        fieldParser = recon.parseAttr(input);
                        step = 2;
                    }
                    else if (c === 123) {
                        builder = builder || recon.recordBuilder();
                        valueParser = recon.parseRecord(input, builder);
                        step = 5;
                    }
                    else if (c === 91) {
                        builder = builder || recon.recordBuilder();
                        valueParser = recon.parseMarkup(input, builder);
                        step = 5;
                    }
                    else if (Recon.isIdentStartChar(c)) {
                        valueParser = recon.parseIdent(input);
                        step = 4;
                    }
                    else if (c === 34 || c === 39) {
                        valueParser = recon.parseString(input);
                        step = 4;
                    }
                    else if (c === 45 || c >= 48 && c <= 57) {
                        valueParser = recon.parseNumber(input);
                        step = 4;
                    }
                    else if (c === 37) {
                        valueParser = recon.parseData(input);
                        step = 4;
                    }
                    else if (c === 36) {
                        valueParser = recon.parseSelector(input);
                        step = 4;
                    }
                    else if (!builder) {
                        return Iteratee.done(recon.extant());
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    if (!builder) {
                        return Iteratee.done(recon.extant());
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
            }
            if (step === 2) {
                fieldParser = fieldParser;
                while (fieldParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    fieldParser = fieldParser.feed(input);
                }
                if (fieldParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(fieldParser.bind());
                    fieldParser = undefined;
                    step = 3;
                }
                else if (fieldParser.isError()) {
                    return fieldParser.asError();
                }
            }
            if (step === 3) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    step = 1;
                    continue;
                }
                else if (input.isDone()) {
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 4) {
                valueParser = valueParser;
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(recon.item(valueParser.bind()));
                    valueParser = undefined;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 5) {
                valueParser = valueParser;
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    valueParser = undefined;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 6) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (input.head() === 64) {
                        step = 1;
                        continue;
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.done(builder.bind());
                }
            }
            break;
        } while (true);
        return new BlockValueParser(recon, builder, fieldParser, valueParser, step);
    };
    return BlockValueParser;
}(Iteratee));
var InlineValueParser = (function (_super) {
    __extends(InlineValueParser, _super);
    function InlineValueParser(recon, builder, fieldParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.fieldParser = fieldParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    InlineValueParser.prototype.feed = function (input) {
        return InlineValueParser.parse(input, this.recon, this.builder, this.fieldParser, this.valueParser, this.step);
    };
    InlineValueParser.parse = function (input, recon, builder, fieldParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 64) {
                    fieldParser = recon.parseAttr(input);
                    step = 2;
                }
                else if (c === 123) {
                    if (builder) {
                        valueParser = recon.parseRecord(input, builder);
                        step = 5;
                    }
                    else {
                        valueParser = recon.parseRecord(input);
                        step = 4;
                    }
                }
                else if (c === 91) {
                    if (builder) {
                        valueParser = recon.parseMarkup(input, builder);
                        step = 5;
                    }
                    else {
                        valueParser = recon.parseMarkup(input);
                        step = 4;
                    }
                }
                else if (!builder) {
                    return Iteratee.done(recon.extant());
                }
                else {
                    return Iteratee.done(builder.bind());
                }
            }
            else if (input.isDone()) {
                if (!builder) {
                    return Iteratee.done(recon.extant());
                }
                else {
                    return Iteratee.done(builder.bind());
                }
            }
        }
        if (step === 2) {
            fieldParser = fieldParser;
            while (fieldParser.isCont() && (!input.isEmpty() || input.isDone())) {
                fieldParser = fieldParser.feed(input);
            }
            if (fieldParser.isDone()) {
                builder = builder || recon.valueBuilder();
                builder.push(fieldParser.bind());
                fieldParser = undefined;
                step = 3;
            }
            else if (fieldParser.isError()) {
                return fieldParser.asError();
            }
        }
        if (step === 3) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 123) {
                    valueParser = recon.parseRecord(input, builder);
                    step = 5;
                }
                else if (c === 91) {
                    valueParser = recon.parseMarkup(input, builder);
                    step = 5;
                }
                else {
                    return Iteratee.done(builder.bind());
                }
            }
            else if (input.isDone()) {
                return Iteratee.done(builder.bind());
            }
        }
        if (step === 4) {
            valueParser = valueParser;
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                builder = builder || recon.valueBuilder();
                builder.push(recon.item(valueParser.bind()));
                return Iteratee.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 5) {
            valueParser = valueParser;
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                return Iteratee.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        return new InlineValueParser(recon, builder, fieldParser, valueParser, step);
    };
    return InlineValueParser;
}(Iteratee));
var RecordParser = (function (_super) {
    __extends(RecordParser, _super);
    function RecordParser(recon, builder, keyParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.keyParser = keyParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    RecordParser.prototype.feed = function (input) {
        return RecordParser.parse(input, this.recon, this.builder, this.keyParser, this.valueParser, this.step);
    };
    RecordParser.parse = function (input, recon, builder, keyParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 123) {
                    input.step();
                    step = 2;
                }
                else {
                    return Iteratee.expected('{', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        record: do {
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    builder = builder || recon.recordBuilder();
                    if (c === 125) {
                        input.step();
                        return Iteratee.done(builder.bind());
                    }
                    else if (c === 35) {
                        input.step();
                        step = 8;
                    }
                    else {
                        step = 3;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!keyParser) {
                    keyParser = recon.parseBlockExpr(input);
                }
                while (keyParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    keyParser = keyParser.feed(input);
                }
                if (keyParser.isDone()) {
                    step = 4;
                }
                else if (keyParser.isError()) {
                    return keyParser.asError();
                }
            }
            if (step === 4) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 58) {
                        input.step();
                        step = 5;
                    }
                    else {
                        builder.push(recon.item(keyParser.bind()));
                        keyParser = undefined;
                        step = 7;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 5) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    step = 6;
                }
                else if (input.isDone()) {
                    builder.push(recon.slot(keyParser.bind()));
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 6) {
                if (!valueParser) {
                    valueParser = recon.parseBlockExpr(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder.push(recon.slot(keyParser.bind(), valueParser.bind()));
                    keyParser = undefined;
                    valueParser = undefined;
                    step = 7;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 7) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 44 || c === 59 || Iteratee.isNewline(c)) {
                        input.step();
                        step = 2;
                        continue;
                    }
                    else if (c === 35) {
                        input.step();
                        step = 8;
                    }
                    else if (c === 125) {
                        input.step();
                        return Iteratee.done(builder.bind());
                    }
                    else {
                        return Iteratee.expected('"}", ";", ",", or newline', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 8) {
                while (!input.isEmpty()) {
                    c = input.head();
                    if (!Iteratee.isNewline(c)) {
                        input.step();
                    }
                    else {
                        step = 2;
                        continue record;
                    }
                }
                if (input.isDone()) {
                    step = 2;
                    continue;
                }
            }
            break;
        } while (true);
        return new RecordParser(recon, builder, keyParser, valueParser, step);
    };
    return RecordParser;
}(Iteratee));
var MarkupParser = (function (_super) {
    __extends(MarkupParser, _super);
    function MarkupParser(recon, builder, textOutput, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.textOutput = textOutput;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    MarkupParser.prototype.feed = function (input) {
        return MarkupParser.parse(input, this.recon, this.builder, this.textOutput, this.valueParser, this.step);
    };
    MarkupParser.parse = function (input, recon, builder, textOutput, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 91) {
                    input.step();
                    step = 2;
                }
                else {
                    return Iteratee.expected('[', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        do {
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(),
                    c !== 64
                        && c !== 91
                        && c !== 92
                        && c !== 93
                        && c !== 123
                        && c !== 125)) {
                    input.step();
                    textOutput = textOutput || recon.textOutput();
                    textOutput.push(c);
                }
                if (!input.isEmpty()) {
                    if (c === 93) {
                        input.step();
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                        }
                        return Iteratee.done(builder.bind());
                    }
                    else if (c === 64) {
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                            textOutput = undefined;
                        }
                        valueParser = recon.parseInlineValue(input);
                        step = 3;
                    }
                    else if (c === 123) {
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                            textOutput = undefined;
                        }
                        valueParser = recon.parseRecord(input, builder);
                        step = 4;
                    }
                    else if (c === 91) {
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                            textOutput = undefined;
                        }
                        valueParser = recon.parseMarkup(input, builder);
                        step = 4;
                    }
                    else if (c === 92) {
                        input.step();
                        step = 5;
                    }
                    else {
                        return Iteratee.unexpected(input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                valueParser = valueParser;
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder.push(recon.item(valueParser.bind()));
                    valueParser = undefined;
                    step = 2;
                    continue;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 4) {
                valueParser = valueParser;
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    valueParser = undefined;
                    step = 2;
                    continue;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 5) {
                if (!input.isEmpty()) {
                    c = input.head();
                    textOutput = textOutput || recon.textOutput();
                    if (c === 34
                        || c === 36
                        || c === 39
                        || c === 47
                        || c === 64
                        || c === 91
                        || c === 92
                        || c === 93
                        || c === 123
                        || c === 125) {
                        input.step();
                        textOutput.push(c);
                        step = 2;
                    }
                    else if (c === 98) {
                        input.step();
                        textOutput.push(8);
                        step = 2;
                    }
                    else if (c === 102) {
                        input.step();
                        textOutput.push(12);
                        step = 2;
                    }
                    else if (c === 110) {
                        input.step();
                        textOutput.push(10);
                        step = 2;
                    }
                    else if (c === 114) {
                        input.step();
                        textOutput.push(13);
                        step = 2;
                    }
                    else if (c === 116) {
                        input.step();
                        textOutput.push(9);
                        step = 2;
                    }
                    else {
                        return Iteratee.expected('escape character', input);
                    }
                    continue;
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        } while (true);
        return new MarkupParser(recon, builder, textOutput, valueParser, step);
    };
    return MarkupParser;
}(Iteratee));
var DataParser = (function (_super) {
    __extends(DataParser, _super);
    function DataParser(recon, dataOutput, p, q, r, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.dataOutput = dataOutput;
        _this.p = p;
        _this.q = q;
        _this.r = r;
        _this.step = step;
        return _this;
    }
    DataParser.prototype.feed = function (input) {
        return DataParser.parse(input, this.recon, this.dataOutput, this.p, this.q, this.r, this.step);
    };
    DataParser.parse = function (input, recon, dataOutput, p, q, r, step) {
        if (p === void 0) { p = 0; }
        if (q === void 0) { q = 0; }
        if (r === void 0) { r = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 37) {
                    input.step();
                    dataOutput = dataOutput || recon.dataOutput();
                    step = 2;
                }
                else {
                    return Iteratee.expected('%', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        do {
            if (step === 2) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (Iteratee.isBase64Char(c)) {
                        input.step();
                        p = c;
                        step = 3;
                    }
                    else {
                        return Iteratee.done(dataOutput.bind());
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.done(dataOutput.bind());
                }
            }
            if (step === 3) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (Iteratee.isBase64Char(c)) {
                        input.step();
                        q = c;
                        step = 4;
                    }
                    else {
                        return Iteratee.expected('base64 digit', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (Iteratee.isBase64Char(c) || c === 61) {
                        input.step();
                        r = c;
                        if (c !== 61) {
                            step = 5;
                        }
                        else {
                            step = 6;
                        }
                    }
                    else {
                        return Iteratee.expected('base64 digit', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 5) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (Iteratee.isBase64Char(c) || c === 61) {
                        input.step();
                        DataParser.decodeBase64Quantum(p, q, r, c, dataOutput);
                        r = 0;
                        q = 0;
                        p = 0;
                        if (c !== 61) {
                            step = 2;
                            continue;
                        }
                        else {
                            return Iteratee.done(dataOutput.bind());
                        }
                    }
                    else {
                        return Iteratee.expected('base64 digit', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            else if (step === 6) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 61) {
                        input.step();
                        DataParser.decodeBase64Quantum(p, q, r, c, dataOutput);
                        r = 0;
                        q = 0;
                        p = 0;
                        return Iteratee.done(dataOutput.bind());
                    }
                    else {
                        return Iteratee.expected('=', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        } while (true);
        return new DataParser(recon, dataOutput, p, q, r, step);
    };
    DataParser.parseBase64 = function (input, recon) {
        return DataParser.parse(input, recon, recon.dataOutput(), undefined, undefined, undefined, 2);
    };
    DataParser.decodeBase64Quantum = function (p, q, r, s, output) {
        var x = Iteratee.decodeBase64Digit(p);
        var y = Iteratee.decodeBase64Digit(q);
        if (r !== 61) {
            var z = Iteratee.decodeBase64Digit(r);
            if (s !== 61) {
                var w = Iteratee.decodeBase64Digit(s);
                output.push((x << 2) | (y >>> 4), (y << 4) | (z >>> 2), (z << 6) | w);
            }
            else {
                output.push((x << 2) | (y >>> 4), (y << 4) | (z >>> 2));
            }
        }
        else {
            if (s !== 61) {
                throw 'incomplete base64 quantum';
            }
            output.push((x << 2) | (y >>> 4));
        }
    };
    return DataParser;
}(Iteratee));
var IdentParser = (function (_super) {
    __extends(IdentParser, _super);
    function IdentParser(lang, output, step) {
        var _this = _super.call(this) || this;
        _this.lang = lang;
        _this.output = output;
        _this.step = step;
        return _this;
    }
    IdentParser.prototype.feed = function (input) {
        return IdentParser.parse(input, this.lang, this.output, this.step);
    };
    IdentParser.parse = function (input, lang, output, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (Recon.isIdentStartChar(c)) {
                    input.step();
                    output = output || lang.textOutput();
                    output.push(c);
                    step = 2;
                }
                else {
                    return Iteratee.expected('identifier', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            while (!input.isEmpty() && (c = input.head(), Recon.isIdentChar(c))) {
                input.step();
                output.push(c);
            }
            if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(lang.ident(output.bind()));
            }
        }
        return new IdentParser(lang, output, step);
    };
    return IdentParser;
}(Iteratee));
var StringParser = (function (_super) {
    __extends(StringParser, _super);
    function StringParser(lang, output, quote, code, step) {
        var _this = _super.call(this) || this;
        _this.lang = lang;
        _this.output = output;
        _this.quote = quote;
        _this.code = code;
        _this.step = step;
        return _this;
    }
    StringParser.prototype.feed = function (input) {
        return StringParser.parse(input, this.lang, this.output, this.quote, this.code, this.step);
    };
    StringParser.parse = function (input, lang, output, quote, code, step) {
        if (quote === void 0) { quote = 0; }
        if (code === void 0) { code = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 34 || c === 39 && (quote === c || quote === 0)) {
                    input.step();
                    output = output || lang.textOutput();
                    quote = c;
                    step = 2;
                }
                else {
                    return Iteratee.expected('string', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        string: do {
            output = output;
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), c !== quote && c !== 92)) {
                    input.step();
                    output.push(c);
                }
                if (!input.isEmpty()) {
                    if (c === quote) {
                        input.step();
                        return Iteratee.done(output.bind());
                    }
                    else if (c === 92) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return Iteratee.unexpected(input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 34
                        || c === 36
                        || c === 39
                        || c === 47
                        || c === 64
                        || c === 91
                        || c === 92
                        || c === 93
                        || c === 123
                        || c === 125) {
                        input.step();
                        output.push(c);
                        step = 2;
                        continue;
                    }
                    else if (c === 98) {
                        input.step();
                        output.push(8);
                        step = 2;
                        continue;
                    }
                    else if (c === 102) {
                        input.step();
                        output.push(12);
                        step = 2;
                        continue;
                    }
                    else if (c === 110) {
                        input.step();
                        output.push(10);
                        step = 2;
                        continue;
                    }
                    else if (c === 114) {
                        input.step();
                        output.push(13);
                        step = 2;
                        continue;
                    }
                    else if (c === 116) {
                        input.step();
                        output.push(9);
                        step = 2;
                        continue;
                    }
                    else if (c === 117) {
                        input.step();
                        step = 4;
                    }
                    else {
                        return Iteratee.expected('escape character', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step >= 4) {
                do {
                    if (!input.isEmpty()) {
                        c = input.head();
                        if (Iteratee.isHexChar(c)) {
                            input.step();
                            code = 16 * code + Iteratee.decodeHexChar(c);
                            if (step <= 6) {
                                step += 1;
                                continue;
                            }
                            else {
                                output.push(code);
                                code = 0;
                                step = 2;
                                continue string;
                            }
                        }
                        else {
                            return Iteratee.expected('hex digit', input);
                        }
                    }
                    else if (input.isDone()) {
                        return Iteratee.unexpected(input);
                    }
                    break;
                } while (true);
            }
            break;
        } while (true);
        return new StringParser(lang, output, quote, code, step);
    };
    return StringParser;
}(Iteratee));
var NumberParser = (function (_super) {
    __extends(NumberParser, _super);
    function NumberParser(lang, sign, value, mode, step) {
        var _this = _super.call(this) || this;
        _this.lang = lang;
        _this.sign = sign;
        _this.value = value;
        _this.mode = mode;
        _this.step = step;
        return _this;
    }
    NumberParser.prototype.feed = function (input) {
        return NumberParser.parse(input, this.lang, this.sign, this.value, this.mode, this.step);
    };
    NumberParser.parse = function (input, lang, sign, value, mode, step) {
        if (sign === void 0) { sign = 1; }
        if (value === void 0) { value = 0; }
        if (mode === void 0) { mode = 2; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 45) {
                    input.step();
                    sign = -1;
                }
                step = 2;
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 48) {
                    input.step();
                    step = 4;
                }
                else if (c >= 49 && c <= 57) {
                    input.step();
                    value = sign * (c - 48);
                    step = 3;
                }
                else {
                    return Iteratee.expected('digit', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 3) {
            while (!input.isEmpty() && (c = input.head(), c >= 48 && c <= 57)) {
                input.step();
                value = 10 * value + sign * (c - 48);
            }
            if (!input.isEmpty()) {
                step = 4;
            }
            else if (input.isDone()) {
                return Iteratee.done(lang.number(value));
            }
        }
        if (step === 4) {
            if (!input.isEmpty()) {
                c = input.head();
                if (mode > 0 && (c === 46 || c === 69 || c === 101)) {
                    var output = new StringOutput();
                    if (sign < 0 && value === 0) {
                        output.push(45, 48);
                    }
                    else {
                        output.push(value.toString());
                    }
                    return DecimalParser.parse(input, lang, output, mode);
                }
                else if (c === 120 && sign > 0 && value === 0) {
                    input.step();
                    return HexadecimalParser.parse(input, lang);
                }
                else {
                    return Iteratee.done(lang.number(value));
                }
            }
            else if (input.isDone()) {
                return Iteratee.done(lang.number(value));
            }
        }
        return new NumberParser(lang, sign, value, mode, step);
    };
    NumberParser.parseInteger = function (input, lang) {
        return this.parse(input, lang, undefined, undefined, 0);
    };
    NumberParser.parseDecimal = function (input, lang) {
        return this.parse(input, lang, undefined, undefined, 1);
    };
    return NumberParser;
}(Iteratee));
var DecimalParser = (function (_super) {
    __extends(DecimalParser, _super);
    function DecimalParser(lang, output, mode, step) {
        var _this = _super.call(this) || this;
        _this.lang = lang;
        _this.output = output;
        _this.mode = mode;
        _this.step = step;
        return _this;
    }
    DecimalParser.prototype.feed = function (input) {
        return DecimalParser.parse(input, this.lang, this.output, this.mode, this.step);
    };
    DecimalParser.parse = function (input, lang, output, mode, step) {
        if (mode === void 0) { mode = 2; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 46) {
                    input.step();
                    output.push(c);
                    step = 2;
                }
                else if (mode > 1 && (c === 69 || c === 101)) {
                    input.step();
                    output.push(c);
                    step = 5;
                }
                else {
                    return Iteratee.expected('fraction or exponent', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c >= 48 && c <= 57) {
                    input.step();
                    output.push(c);
                    step = 3;
                }
                else {
                    return Iteratee.expected('digit', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 3) {
            while (!input.isEmpty() && (c = input.head(), c >= 48 && c <= 57)) {
                input.step();
                output.push(c);
            }
            if (!input.isEmpty()) {
                if (mode > 1) {
                    step = 4;
                }
                else {
                    return Iteratee.done(lang.number(output.bind()));
                }
            }
            else if (input.isDone()) {
                return Iteratee.done(lang.number(output.bind()));
            }
        }
        if (step === 4) {
            c = input.head();
            if (c === 69 || c === 101) {
                input.step();
                output.push(c);
                step = 5;
            }
            else {
                return Iteratee.done(lang.number(output.bind()));
            }
        }
        if (step === 5) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 43 || c === 45) {
                    input.step();
                    output.push(c);
                }
                step = 6;
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 6) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c >= 48 && c <= 57) {
                    input.step();
                    output.push(c);
                    step = 7;
                }
                else {
                    return Iteratee.expected('digit', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 7) {
            while (!input.isEmpty() && (c = input.head(), c >= 48 && c <= 57)) {
                input.step();
                output.push(c);
            }
            if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(lang.number(output.bind()));
            }
        }
        return new DecimalParser(lang, output, mode, step);
    };
    return DecimalParser;
}(Iteratee));
var HexadecimalParser = (function (_super) {
    __extends(HexadecimalParser, _super);
    function HexadecimalParser(lang, value, size) {
        var _this = _super.call(this) || this;
        _this.lang = lang;
        _this.value = value;
        _this.size = size;
        return _this;
    }
    HexadecimalParser.prototype.feed = function (input) {
        return HexadecimalParser.parse(input, this.lang, this.value, this.size);
    };
    HexadecimalParser.parse = function (input, lang, value, size) {
        if (value === void 0) { value = 0; }
        if (size === void 0) { size = 0; }
        var c = 0;
        while (!input.isEmpty()) {
            c = input.head();
            if (Iteratee.isHexChar(c)) {
                input.step();
                value = 16 * value + Iteratee.decodeHexChar(c);
                size += 1;
            }
            else {
                break;
            }
        }
        if (!input.isEmpty() || input.isDone()) {
            if (size > 0) {
                return Iteratee.done(lang.number(value));
            }
            else {
                return Iteratee.expected('hex number', input);
            }
        }
        return new HexadecimalParser(lang, value, size);
    };
    return HexadecimalParser;
}(Iteratee));
//# sourceMappingURL=data:application/json;base64,

var SelectorParser = (function (_super) {
    __extends(SelectorParser, _super);
    function SelectorParser(recon, builder, selector, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.selector = selector;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    SelectorParser.prototype.feed = function (input) {
        return SelectorParser.parse(input, this.recon, this.builder, this.selector, this.valueParser, this.step);
    };
    SelectorParser.parse = function (input, recon, builder, selector, valueParser, step) {
        if (selector === void 0) { selector = recon.selector(); }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty() && c === 36) {
                input.step();
                step = 2;
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 91) {
                    input.step();
                    step = 7;
                }
                else if (c === 64) {
                    input.step();
                    step = 6;
                }
                else if (c === 42) {
                    input.step();
                    step = 5;
                }
                else if (c === 35) {
                    input.step();
                    step = 4;
                }
                else {
                    step = 3;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        do {
            if (step === 3) {
                if (!valueParser) {
                    valueParser = recon.parseLiteral(input, recon.valueBuilder());
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    selector = recon.get(selector, valueParser.bind());
                    valueParser = undefined;
                    step = 9;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 4) {
                if (!valueParser) {
                    valueParser = recon.parseInteger(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    selector = recon.value(recon.getItem(selector, valueParser.bind()));
                    valueParser = undefined;
                    step = 9;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 5) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 58) {
                        input.step();
                        selector = recon.keys(selector);
                    }
                    else if (c === 42) {
                        input.step();
                        selector = recon.descendants(selector);
                    }
                    else {
                        selector = recon.children(selector);
                    }
                    step = 9;
                }
                else if (input.isDone()) {
                    selector = recon.children(selector);
                    step = 9;
                }
            }
            if (step === 6) {
                if (!valueParser) {
                    valueParser = recon.parseIdent(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    selector = recon.getAttr(selector, valueParser.bind());
                    valueParser = undefined;
                    step = 9;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 7) {
                if (!valueParser) {
                    valueParser = recon.parseBlockExpr(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    step = 8;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 8) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 93) {
                        input.step();
                        selector = recon.filter(selector, valueParser.bind());
                        valueParser = undefined;
                        step = 9;
                    }
                    else {
                        return Iteratee.expected(']', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 9) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 91) {
                        input.step();
                        step = 7;
                        continue;
                    }
                    else if (c === 42) {
                        input.step();
                        step = 5;
                        continue;
                    }
                    else if (c === 35) {
                        input.step();
                        step = 4;
                        continue;
                    }
                    else if (c === 46) {
                        input.step();
                        step = 10;
                    }
                    else if (builder) {
                        builder.push(recon.item(selector));
                        return Iteratee.done(builder.bind());
                    }
                    else {
                        return Iteratee.done(selector);
                    }
                }
                else if (input.isDone()) {
                    if (builder) {
                        builder.push(recon.item(selector));
                        return Iteratee.done(builder.bind());
                    }
                    else {
                        return Iteratee.done(selector);
                    }
                }
            }
            if (step === 10) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 64) {
                        input.step();
                        step = 6;
                    }
                    else if (c === 42) {
                        input.step();
                        step = 5;
                        continue;
                    }
                    else {
                        step = 3;
                        continue;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        } while (true);
        return new SelectorParser(recon, builder, selector, valueParser, step);
    };
    return SelectorParser;
}(Iteratee));
var LiteralParser = (function (_super) {
    __extends(LiteralParser, _super);
    function LiteralParser(recon, builder, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    LiteralParser.prototype.feed = function (input) {
        return LiteralParser.parse(input, this.recon, this.builder, this.valueParser, this.step);
    };
    LiteralParser.parse = function (input, recon, builder, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 40) {
                    input.step();
                    step = 5;
                }
                else if (c === 123) {
                    builder = builder || recon.recordBuilder();
                    valueParser = recon.parseRecord(input, builder);
                    step = 4;
                }
                else if (c === 91) {
                    builder = builder || recon.recordBuilder();
                    valueParser = recon.parseMarkup(input, builder);
                    step = 4;
                }
                else if (Recon.isIdentStartChar(c)) {
                    valueParser = recon.parseIdent(input);
                    step = 2;
                }
                else if (c === 34 || c === 39) {
                    valueParser = recon.parseString(input);
                    step = 2;
                }
                else if (c === 45 || c >= 48 && c <= 57) {
                    valueParser = recon.parseNumber(input);
                    step = 2;
                }
                else if (c === 37) {
                    valueParser = recon.parseData(input);
                    step = 2;
                }
                else if (c === 36) {
                    valueParser = recon.parseSelector(input);
                    step = 2;
                }
                else if (!builder) {
                    return Iteratee.done(recon.extant());
                }
                else {
                    return Iteratee.done(builder.bind());
                }
            }
            else if (input.isDone()) {
                if (!builder) {
                    return Iteratee.done(recon.extant());
                }
                else {
                    return Iteratee.done(builder.bind());
                }
            }
        }
        if (step === 2) {
            valueParser = valueParser;
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                builder = builder || recon.valueBuilder();
                builder.push(recon.item(valueParser.bind()));
                return Iteratee.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 4) {
            valueParser = valueParser;
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                return Iteratee.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 5) {
            if (!valueParser) {
                valueParser = recon.parseBlockExpr(input);
            }
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 6;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 6) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 41) {
                    input.step();
                    builder = builder || recon.valueBuilder();
                    builder.push(recon.item(valueParser.bind()));
                    return Iteratee.done(builder.bind());
                }
                else {
                    return Iteratee.expected(')', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        return new LiteralParser(recon, builder, valueParser, step);
    };
    return LiteralParser;
}(Iteratee));

//# sourceMappingURL=data:application/json;base64,

var CondExprParser = (function (_super) {
    __extends(CondExprParser, _super);
    function CondExprParser(recon, builder, predParser, thenParser, elseParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.predParser = predParser;
        _this.thenParser = thenParser;
        _this.elseParser = elseParser;
        _this.step = step;
        return _this;
    }
    CondExprParser.prototype.feed = function (input) {
        return CondExprParser.parse(input, this.recon, this.builder, this.predParser, this.thenParser, this.elseParser, this.step);
    };
    CondExprParser.parse = function (input, recon, builder, predParser, thenParser, elseParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!predParser) {
                predParser = recon.parseLorExpr(input, builder);
            }
            while (predParser.isCont() && (!input.isEmpty() || input.isDone())) {
                predParser = predParser.feed(input);
            }
            if (predParser.isDone()) {
                step = 2;
            }
            else if (predParser.isError()) {
                return predParser.asError();
            }
        }
        if (step === 2) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 63) {
                    input.step();
                    step = 3;
                }
                else {
                    return predParser;
                }
            }
            else if (input.isDone()) {
                return predParser;
            }
        }
        if (step === 3) {
            if (!thenParser) {
                thenParser = recon.parseCondExpr(input, builder);
            }
            while (thenParser.isCont() && (!input.isEmpty() || input.isDone())) {
                thenParser = thenParser.feed(input);
            }
            if (thenParser.isDone()) {
                step = 4;
            }
            else if (thenParser.isError()) {
                return thenParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 58) {
                    input.step();
                    step = 5;
                }
                else {
                    return Iteratee.expected(':', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            if (!elseParser) {
                elseParser = recon.parseCondExpr(input, builder);
            }
            while (elseParser.isCont() && (!input.isEmpty() || input.isDone())) {
                elseParser = elseParser.feed(input);
            }
            if (elseParser.isDone()) {
                var predExpr = predParser.bind();
                var thenExpr = thenParser.bind();
                var elseExpr = elseParser.bind();
                return Iteratee.done(recon.cond(predExpr, thenExpr, elseExpr));
            }
            else if (elseParser.isError()) {
                return elseParser.asError();
            }
        }
        return new CondExprParser(recon, builder, predParser, thenParser, elseParser, step);
    };
    return CondExprParser;
}(Iteratee));
var LorExprParser = (function (_super) {
    __extends(LorExprParser, _super);
    function LorExprParser(recon, builder, lhsParser, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    LorExprParser.prototype.feed = function (input) {
        return LorExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.rhsParser, this.step);
    };
    LorExprParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseLandExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 124) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!rhsParser) {
                    rhsParser = recon.parseLandExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    lhsParser = Iteratee.done(recon.or(lhs, rhs));
                    rhsParser = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new LorExprParser(recon, builder, lhsParser, rhsParser, step);
    };
    return LorExprParser;
}(Iteratee));
var LandExprParser = (function (_super) {
    __extends(LandExprParser, _super);
    function LandExprParser(recon, builder, lhsParser, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    LandExprParser.prototype.feed = function (input) {
        return LandExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.rhsParser, this.step);
    };
    LandExprParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseBorExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 38) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!rhsParser) {
                    rhsParser = recon.parseBorExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    lhsParser = Iteratee.done(recon.and(lhs, rhs));
                    rhsParser = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new LandExprParser(recon, builder, lhsParser, rhsParser, step);
    };
    return LandExprParser;
}(Iteratee));
var BorExprParser = (function (_super) {
    __extends(BorExprParser, _super);
    function BorExprParser(recon, builder, lhsParser, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    BorExprParser.prototype.feed = function (input) {
        return BorExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.rhsParser, this.step);
    };
    BorExprParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseBxorExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 124) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 124) {
                        return lhsParser;
                    }
                    else {
                        step = 4;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                if (!rhsParser) {
                    rhsParser = recon.parseBxorExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    lhsParser = Iteratee.done(recon.bor(lhs, rhs));
                    rhsParser = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new BorExprParser(recon, builder, lhsParser, rhsParser, step);
    };
    return BorExprParser;
}(Iteratee));
var BxorExprParser = (function (_super) {
    __extends(BxorExprParser, _super);
    function BxorExprParser(recon, builder, lhsParser, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    BxorExprParser.prototype.feed = function (input) {
        return BxorExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.rhsParser, this.step);
    };
    BxorExprParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseBandExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 94) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!rhsParser) {
                    rhsParser = recon.parseBandExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    lhsParser = Iteratee.done(recon.bxor(lhs, rhs));
                    rhsParser = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new BxorExprParser(recon, builder, lhsParser, rhsParser, step);
    };
    return BxorExprParser;
}(Iteratee));
var BandExprParser = (function (_super) {
    __extends(BandExprParser, _super);
    function BandExprParser(recon, builder, lhsParser, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    BandExprParser.prototype.feed = function (input) {
        return BandExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.rhsParser, this.step);
    };
    BandExprParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseCompExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 38) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 38) {
                        return lhsParser;
                    }
                    else {
                        step = 4;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                if (!rhsParser) {
                    rhsParser = recon.parseCompExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    lhsParser = Iteratee.done(recon.band(lhs, rhs));
                    rhsParser = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new BandExprParser(recon, builder, lhsParser, rhsParser, step);
    };
    return BandExprParser;
}(Iteratee));
var CompExprParser = (function (_super) {
    __extends(CompExprParser, _super);
    function CompExprParser(recon, builder, lhsParser, operator, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.operator = operator;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    CompExprParser.prototype.feed = function (input) {
        return CompExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.operator, this.rhsParser, this.step);
    };
    CompExprParser.parse = function (input, recon, builder, lhsParser, operator, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!lhsParser) {
                lhsParser = recon.parseAttrExpr(input, builder);
            }
            while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                lhsParser = lhsParser.feed(input);
            }
            if (lhsParser.isDone()) {
                step = 2;
            }
            else if (lhsParser.isError()) {
                return lhsParser.asError();
            }
        }
        if (step === 2) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 33) {
                    input.step();
                    step = 3;
                }
                else if (c === 60) {
                    input.step();
                    step = 4;
                }
                else if (c === 62) {
                    input.step();
                    step = 5;
                }
                else if (c === 61) {
                    input.step();
                    step = 6;
                }
                else {
                    return lhsParser;
                }
            }
            else if (input.isDone()) {
                return lhsParser;
            }
        }
        if (step === 3) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 61) {
                    input.step();
                    operator = '!=';
                    step = 7;
                }
                else {
                    operator = '!';
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 4) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 61) {
                    input.step();
                    operator = '<=';
                    step = 7;
                }
                else {
                    operator = '<';
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 61) {
                    input.step();
                    operator = '>=';
                    step = 7;
                }
                else {
                    operator = '>';
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 6) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 61) {
                    input.step();
                    operator = '==';
                    step = 7;
                }
                else {
                    operator = '=';
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 7) {
            if (!rhsParser) {
                rhsParser = recon.parseAttrExpr(input, builder);
            }
            while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                rhsParser = rhsParser.feed(input);
            }
            if (rhsParser.isDone()) {
                var lhs = lhsParser.bind();
                var rhs = rhsParser.bind();
                if (operator === '<') {
                    return Iteratee.done(recon.lt(lhs, rhs));
                }
                else if (operator === '<=') {
                    return Iteratee.done(recon.le(lhs, rhs));
                }
                else if (operator === '==') {
                    return Iteratee.done(recon.eq(lhs, rhs));
                }
                else if (operator === '!=') {
                    return Iteratee.done(recon.ne(lhs, rhs));
                }
                else if (operator === '>=') {
                    return Iteratee.done(recon.ge(lhs, rhs));
                }
                else if (operator === '>') {
                    return Iteratee.done(recon.gt(lhs, rhs));
                }
                else {
                    return Iteratee.error(operator);
                }
            }
            else if (rhsParser.isError()) {
                return rhsParser.asError();
            }
        }
        return new CompExprParser(recon, builder, lhsParser, operator, rhsParser, step);
    };
    return CompExprParser;
}(Iteratee));
var AttrExprParser = (function (_super) {
    __extends(AttrExprParser, _super);
    function AttrExprParser(recon, builder, fieldParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.fieldParser = fieldParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    AttrExprParser.prototype.feed = function (input) {
        return AttrExprParser.parse(input, this.recon, this.builder, this.fieldParser, this.valueParser, this.step);
    };
    AttrExprParser.parse = function (input, recon, builder, fieldParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 64) {
                        step = 2;
                    }
                    else if (c === 123 || c === 91) {
                        builder = builder || recon.recordBuilder();
                        step = 5;
                    }
                    else if (c === 33 || c === 34 || c === 36 || c === 37
                        || c === 39 || c === 40 || c === 43 || c === 45
                        || c >= 48 && c <= 57 || c === 126
                        || Recon.isIdentStartChar(c)) {
                        step = 4;
                    }
                    else if (!builder) {
                        return Iteratee.done(recon.extant());
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    if (!builder) {
                        return Iteratee.done(recon.extant());
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
            }
            if (step === 2) {
                if (!fieldParser) {
                    fieldParser = recon.parseAttr(input);
                }
                while (fieldParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    fieldParser = fieldParser.feed(input);
                }
                if (fieldParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(fieldParser.bind());
                    fieldParser = undefined;
                    step = 3;
                }
                else if (fieldParser.isError()) {
                    return fieldParser.asError();
                }
            }
            if (step === 3) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    step = 1;
                    continue;
                }
                else if (input.isDone()) {
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 4) {
                if (!valueParser) {
                    valueParser = recon.parseAddRingExpr(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(recon.item(valueParser.bind()));
                    valueParser = undefined;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 5) {
                if (!valueParser) {
                    valueParser = recon.parseAddRingExpr(input, builder);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    valueParser = undefined;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 6) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 64) {
                        step = 1;
                        continue;
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.done(builder.bind());
                }
            }
            break;
        } while (true);
        return new AttrExprParser(recon, builder, fieldParser, valueParser, step);
    };
    return AttrExprParser;
}(Iteratee));
var AddRingExprParser = (function (_super) {
    __extends(AddRingExprParser, _super);
    function AddRingExprParser(recon, builder, lhsParser, operator, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.operator = operator;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    AddRingExprParser.prototype.feed = function (input) {
        return AddRingExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.operator, this.rhsParser, this.step);
    };
    AddRingExprParser.parse = function (input, recon, builder, lhsParser, operator, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseMulRingExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 43) {
                        input.step();
                        operator = '+';
                        step = 3;
                    }
                    else if (c === 45) {
                        input.step();
                        operator = '-';
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!rhsParser) {
                    rhsParser = recon.parseMulRingExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    if (operator === '+') {
                        lhsParser = Iteratee.done(recon.add(lhs, rhs));
                    }
                    else if (operator === '-') {
                        lhsParser = Iteratee.done(recon.sub(lhs, rhs));
                    }
                    else {
                        return Iteratee.error(operator);
                    }
                    rhsParser = undefined;
                    operator = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new AddRingExprParser(recon, builder, lhsParser, operator, rhsParser, step);
    };
    return AddRingExprParser;
}(Iteratee));
var MulRingExprParser = (function (_super) {
    __extends(MulRingExprParser, _super);
    function MulRingExprParser(recon, builder, lhsParser, operator, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.operator = operator;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    MulRingExprParser.prototype.feed = function (input) {
        return MulRingExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.operator, this.rhsParser, this.step);
    };
    MulRingExprParser.parse = function (input, recon, builder, lhsParser, operator, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parsePrefixExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 42) {
                        input.step();
                        operator = '*';
                        step = 3;
                    }
                    else if (c === 47) {
                        input.step();
                        operator = '/';
                        step = 3;
                    }
                    else if (c === 37) {
                        input.step();
                        operator = '%';
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!rhsParser) {
                    rhsParser = recon.parsePrefixExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    if (operator === '*') {
                        lhsParser = Iteratee.done(recon.mul(lhs, rhs));
                    }
                    else if (operator === '/') {
                        lhsParser = Iteratee.done(recon.div(lhs, rhs));
                    }
                    else if (operator === '%') {
                        lhsParser = Iteratee.done(recon.mod(lhs, rhs));
                    }
                    else {
                        return Iteratee.error(operator);
                    }
                    rhsParser = undefined;
                    operator = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new MulRingExprParser(recon, builder, lhsParser, operator, rhsParser, step);
    };
    return MulRingExprParser;
}(Iteratee));
var PrefixExprParser = (function (_super) {
    __extends(PrefixExprParser, _super);
    function PrefixExprParser(recon, builder, operator, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.operator = operator;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    PrefixExprParser.prototype.feed = function (input) {
        return PrefixExprParser.parse(input, this.recon, this.builder, this.operator, this.rhsParser, this.step);
    };
    PrefixExprParser.parse = function (input, recon, builder, operator, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 33) {
                    input.step();
                    operator = '!';
                }
                else if (c === 126) {
                    input.step();
                    operator = '~';
                }
                else if (c === 45) {
                    input.step();
                    operator = '-';
                }
                else if (c === 43) {
                    input.step();
                    operator = '+';
                }
                else {
                    return recon.parsePrimaryExpr(input, builder);
                }
                step = 2;
            }
            else if (input.isDone()) {
                return recon.parsePrimaryExpr(input, builder);
            }
        }
        if (step === 2) {
            if (!rhsParser) {
                rhsParser = recon.parsePrefixExpr(input, builder);
            }
            while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                rhsParser = rhsParser.feed(input);
            }
            if (rhsParser.isDone()) {
                var rhs = rhsParser.bind();
                if (!recon.isDistinct(rhs)) {
                    return Iteratee.expected('value', input);
                }
                else if (operator === '!') {
                    return Iteratee.done(recon.not(rhs));
                }
                else if (operator === '~') {
                    return Iteratee.done(recon.bnot(rhs));
                }
                else if (operator === '-') {
                    return Iteratee.done(recon.neg(rhs));
                }
                else if (operator === '+') {
                    return Iteratee.done(recon.pos(rhs));
                }
                else {
                    return Iteratee.error(operator);
                }
            }
            else if (rhsParser.isError()) {
                return rhsParser.asError();
            }
        }
        return new PrefixExprParser(recon, builder, operator, rhsParser, step);
    };
    return PrefixExprParser;
}(Iteratee));
var PrimaryExprParser = (function (_super) {
    __extends(PrimaryExprParser, _super);
    function PrimaryExprParser(recon, builder, exprParser, argsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.exprParser = exprParser;
        _this.argsParser = argsParser;
        _this.step = step;
        return _this;
    }
    PrimaryExprParser.prototype.feed = function (input) {
        return PrimaryExprParser.parse(input, this.recon, this.builder, this.exprParser, this.argsParser, this.step);
    };
    PrimaryExprParser.parse = function (input, recon, builder, exprParser, argsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 40) {
                    input.step();
                    step = 3;
                }
                else {
                    step = 2;
                }
            }
            else if (input.isDone()) {
                step = 2;
            }
        }
        if (step === 2) {
            if (!exprParser) {
                exprParser = recon.parseLiteral(input, builder);
            }
            while (exprParser.isCont() && (!input.isEmpty() || input.isDone())) {
                exprParser = exprParser.feed(input);
            }
            if (exprParser.isDone()) {
                step = 5;
            }
            else if (exprParser.isError()) {
                return exprParser.asError();
            }
        }
        if (step === 3) {
            if (!exprParser) {
                exprParser = recon.parseBlockExpr(input);
            }
            while (exprParser.isCont() && (!input.isEmpty() || input.isDone())) {
                exprParser = exprParser.feed(input);
            }
            if (exprParser.isDone()) {
                step = 4;
            }
            else if (exprParser.isError()) {
                return exprParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 41) {
                    input.step();
                    step = 5;
                }
                else {
                    return Iteratee.expected(')', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        do {
            if (step === 5) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 40) {
                        input.step();
                        step = 6;
                    }
                    else {
                        return exprParser;
                    }
                }
                else if (input.isDone()) {
                    return exprParser;
                }
            }
            if (step === 6) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 41) {
                        input.step();
                        var expr = exprParser.bind();
                        exprParser = Iteratee.done(recon.invoke(expr, recon.extant()));
                        step = 5;
                        continue;
                    }
                    else {
                        step = 7;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 7) {
                if (!argsParser) {
                    argsParser = recon.parseBlock(input);
                }
                while (argsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    argsParser = argsParser.feed(input);
                }
                if (argsParser.isDone()) {
                    step = 8;
                }
                else if (argsParser.isError()) {
                    return argsParser.asError();
                }
            }
            if (step === 8) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 41) {
                        input.step();
                        var expr = exprParser.bind();
                        var args = argsParser.bind();
                        exprParser = Iteratee.done(recon.invoke(expr, args));
                        argsParser = undefined;
                        step = 5;
                        continue;
                    }
                    else {
                        return Iteratee.expected(')', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        } while (true);
        return new PrimaryExprParser(recon, builder, exprParser, argsParser, step);
    };
    return PrimaryExprParser;
}(Iteratee));

//# sourceMappingURL=data:application/json;base64,

var Recon = (function () {
    function Recon() {
    }
    Recon.prototype.parseRecon = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        while (!input.isEmpty() && Iteratee.isWhitespace(input.head())) {
            input.step();
        }
        var parser = this.parseBlock(input);
        if (parser.isDone()) {
            while (!input.isEmpty() && Iteratee.isWhitespace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                parser = Iteratee.unexpected(input);
            }
        }
        return parser.bind();
    };
    Recon.prototype.parseAttr = function (input) {
        return AttrParser.parse(input, this);
    };
    Recon.prototype.parseBlock = function (input) {
        return BlockParser.parse(input, this);
    };
    Recon.prototype.parseBlockValue = function (input) {
        return BlockValueParser.parse(input, this);
    };
    Recon.prototype.parseInlineValue = function (input) {
        return InlineValueParser.parse(input, this);
    };
    Recon.prototype.parseRecord = function (input, builder) {
        return RecordParser.parse(input, this, builder);
    };
    Recon.prototype.parseMarkup = function (input, builder) {
        return MarkupParser.parse(input, this, builder);
    };
    Recon.prototype.parseData = function (input) {
        return DataParser.parse(input, this);
    };
    Recon.prototype.parseBase64 = function (input) {
        return DataParser.parseBase64(input, this);
    };
    Recon.prototype.parseIdent = function (input) {
        return IdentParser.parse(input, this);
    };
    Recon.prototype.parseString = function (input) {
        return StringParser.parse(input, this);
    };
    Recon.prototype.parseNumber = function (input) {
        return NumberParser.parse(input, this);
    };
    Recon.prototype.parseInteger = function (input) {
        return NumberParser.parseInteger(input, this);
    };
    Recon.prototype.parseDecimal = function (input) {
        return NumberParser.parseDecimal(input, this);
    };
    Recon.prototype.parseBlockExpr = function (input, builder) {
        return this.parseCondExpr(input, builder);
    };
    Recon.prototype.parseCondExpr = function (input, builder) {
        return CondExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseLorExpr = function (input, builder) {
        return LorExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseLandExpr = function (input, builder) {
        return LandExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseBorExpr = function (input, builder) {
        return BorExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseBxorExpr = function (input, builder) {
        return BxorExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseBandExpr = function (input, builder) {
        return BandExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseCompExpr = function (input, builder) {
        return CompExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseAttrExpr = function (input, builder) {
        return AttrExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseAddRingExpr = function (input, builder) {
        return AddRingExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseMulRingExpr = function (input, builder) {
        return MulRingExprParser.parse(input, this, builder);
    };
    Recon.prototype.parsePrefixExpr = function (input, builder) {
        return PrefixExprParser.parse(input, this, builder);
    };
    Recon.prototype.parsePrimaryExpr = function (input, builder) {
        return PrimaryExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseLiteral = function (input, builder) {
        return LiteralParser.parse(input, this, builder);
    };
    Recon.prototype.parseSelector = function (input, builder) {
        return SelectorParser.parse(input, this, builder);
    };
    Recon.prototype.blockParser = function () {
        return new BlockParser(this);
    };
    Recon.isIdentStartChar = function (c) {
        return c >= 65 && c <= 90
            || c === 95
            || c >= 97 && c <= 122
            || c >= 0xC0 && c <= 0xD6
            || c >= 0xD8 && c <= 0xF6
            || c >= 0xF8 && c <= 0x2FF
            || c >= 0x370 && c <= 0x37D
            || c >= 0x37F && c <= 0x1FFF
            || c >= 0x200C && c <= 0x200D
            || c >= 0x2070 && c <= 0x218F
            || c >= 0x2C00 && c <= 0x2FEF
            || c >= 0x3001 && c <= 0xD7FF
            || c >= 0xF900 && c <= 0xFDCF
            || c >= 0xFDF0 && c <= 0xFFFD
            || c >= 0x10000 && c <= 0xEFFFF;
    };
    Recon.isIdentChar = function (c) {
        return c === 45
            || c >= 48 && c <= 57
            || c >= 65 && c <= 90
            || c === 95
            || c >= 97 && c <= 122
            || c === 0xB7
            || c >= 0xC0 && c <= 0xD6
            || c >= 0xD8 && c <= 0xF6
            || c >= 0xF8 && c <= 0x37D
            || c >= 0x37F && c <= 0x1FFF
            || c >= 0x200C && c <= 0x200D
            || c >= 0x203F && c <= 0x2040
            || c >= 0x2070 && c <= 0x218F
            || c >= 0x2C00 && c <= 0x2FEF
            || c >= 0x3001 && c <= 0xD7FF
            || c >= 0xF900 && c <= 0xFDCF
            || c >= 0xFDF0 && c <= 0xFFFD
            || c >= 0x10000 && c <= 0xEFFFF;
    };
    Recon.Factory = undefined;
    return Recon;
}());
Item.Recon = Recon;
var ReconFactory = (function (_super) {
    __extends(ReconFactory, _super);
    function ReconFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReconFactory.prototype.isDistinct = function (value) {
        return value.isDistinct();
    };
    ReconFactory.prototype.item = function (value) {
        return value;
    };
    ReconFactory.prototype.value = function (item) {
        return item.toValue();
    };
    ReconFactory.prototype.attr = function (key, value) {
        return new Attr$1(key, value);
    };
    ReconFactory.prototype.slot = function (key, value) {
        return new Slot(key, value);
    };
    ReconFactory.prototype.valueBuilder = function () {
        return new ValueBuilder();
    };
    ReconFactory.prototype.recordBuilder = function () {
        return Record.empty();
    };
    ReconFactory.prototype.dataOutput = function () {
        return Data.empty();
    };
    ReconFactory.prototype.textOutput = function () {
        return Text$1.empty();
    };
    ReconFactory.prototype.ident = function (value) {
        if (value instanceof Text$1) {
            if (value.value === 'true') {
                return Bool.True;
            }
            else if (value.value === 'false') {
                return Bool.False;
            }
        }
        return value;
    };
    ReconFactory.prototype.number = function (value) {
        if (typeof value === 'number') {
            return Num.valueOf(value);
        }
        else if (typeof value === 'string') {
            return Num.valueOf(+value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    ReconFactory.prototype.boolean = function (value) {
        return Bool.valueOf(value);
    };
    ReconFactory.prototype.selector = function () {
        return Selector.Identity;
    };
    ReconFactory.prototype.extant = function () {
        return Value.Extant;
    };
    ReconFactory.prototype.absent = function () {
        return Value.Absent;
    };
    ReconFactory.prototype.cond = function (pred, thenTerm, elseTerm) {
        return pred.cond(thenTerm, elseTerm);
    };
    ReconFactory.prototype.or = function (lhs, rhs) {
        return lhs.or(rhs);
    };
    ReconFactory.prototype.and = function (lhs, rhs) {
        return lhs.and(rhs);
    };
    ReconFactory.prototype.bor = function (lhs, rhs) {
        return lhs.bor(rhs);
    };
    ReconFactory.prototype.bxor = function (lhs, rhs) {
        return lhs.bxor(rhs);
    };
    ReconFactory.prototype.band = function (lhs, rhs) {
        return lhs.band(rhs);
    };
    ReconFactory.prototype.lt = function (lhs, rhs) {
        return lhs.lt(rhs);
    };
    ReconFactory.prototype.le = function (lhs, rhs) {
        return lhs.le(rhs);
    };
    ReconFactory.prototype.eq = function (lhs, rhs) {
        return lhs.eq(rhs);
    };
    ReconFactory.prototype.ne = function (lhs, rhs) {
        return lhs.ne(rhs);
    };
    ReconFactory.prototype.ge = function (lhs, rhs) {
        return lhs.ge(rhs);
    };
    ReconFactory.prototype.gt = function (lhs, rhs) {
        return lhs.gt(rhs);
    };
    ReconFactory.prototype.add = function (lhs, rhs) {
        return lhs.plus(rhs);
    };
    ReconFactory.prototype.sub = function (lhs, rhs) {
        return lhs.minus(rhs);
    };
    ReconFactory.prototype.mul = function (lhs, rhs) {
        return lhs.times(rhs);
    };
    ReconFactory.prototype.div = function (lhs, rhs) {
        return lhs.divide(rhs);
    };
    ReconFactory.prototype.mod = function (lhs, rhs) {
        return lhs.modulo(rhs);
    };
    ReconFactory.prototype.not = function (rhs) {
        return rhs.not();
    };
    ReconFactory.prototype.bnot = function (rhs) {
        return rhs.bnot();
    };
    ReconFactory.prototype.neg = function (rhs) {
        return rhs.neg();
    };
    ReconFactory.prototype.pos = function (rhs) {
        return rhs.pos();
    };
    ReconFactory.prototype.invoke = function (func, args) {
        return Selector.literal(func).invoke(args);
    };
    ReconFactory.prototype.get = function (selector, key) {
        return selector.get(key);
    };
    ReconFactory.prototype.getAttr = function (selector, key) {
        return selector.getAttr(Text$1.of(key));
    };
    ReconFactory.prototype.getItem = function (selector, index) {
        return selector.getItem(Num.of(index));
    };
    ReconFactory.prototype.children = function (selector) {
        return Selector.literal(selector).children();
    };
    ReconFactory.prototype.descendants = function (selector) {
        return Selector.literal(selector).descendants();
    };
    ReconFactory.prototype.keys = function (selector) {
        return Selector.literal(selector).keys();
    };
    ReconFactory.prototype.filter = function (selector, predicate) {
        return selector.filter(predicate);
    };
    return ReconFactory;
}(Recon));
Recon.Factory = new ReconFactory();
//# sourceMappingURL=data:application/json;base64,

var RecordScope = (function (_super) {
    __extends(RecordScope, _super);
    function RecordScope(record) {
        if (record === void 0) { record = Record.empty(); }
        var _this = _super.call(this) || this;
        _this._record = record;
        return _this;
    }
    Object.defineProperty(RecordScope.prototype, "record", {
        get: function () {
            return this._record;
        },
        set: function (record) {
            this._record = record;
            record.forEach(function (newItem, index) {
                this.didChange(newItem, Item.Absent, index);
            }, this);
        },
        enumerable: true,
        configurable: true
    });
    RecordScope.prototype.isEmpty = function () {
        var parent;
        return this._record.isEmpty() && (parent = this.parentScope, parent ? parent.isEmpty() : true);
    };
    RecordScope.prototype.isArray = function () {
        var parent;
        return this._record.isArray() && (parent = this.parentScope, parent ? parent.isArray() : true);
    };
    RecordScope.prototype.isObject = function () {
        var parent;
        return this._record.isObject() && (parent = this.parentScope, parent ? parent.isObject() : true);
    };
    Object.defineProperty(RecordScope.prototype, "length", {
        get: function () {
            var parent;
            return this._record.length + (parent = this.parentScope, parent ? parent.length : 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordScope.prototype, "size", {
        get: function () {
            var parent;
            return this._record.size + (parent = this.parentScope, parent ? parent.size : 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordScope.prototype, "fieldCount", {
        get: function () {
            var parent;
            return this._record.fieldCount + (parent = this.parentScope, parent ? parent.fieldCount : 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordScope.prototype, "valueCount", {
        get: function () {
            var parent;
            return this._record.valueCount + (parent = this.parentScope, parent ? parent.valueCount : 0);
        },
        enumerable: true,
        configurable: true
    });
    RecordScope.prototype.has = function (key) {
        key = Value.of(key);
        var parent;
        return this._record.has(key) || (parent = this.parentScope, parent ? parent.has(key) : false);
    };
    RecordScope.prototype.get = function (key) {
        key = Value.of(key);
        var value = this._record.get(key);
        var parent;
        if (!value.isDefined() && (parent = this.parentScope, parent)) {
            value = parent.get(key);
        }
        return value;
    };
    RecordScope.prototype.getAttr = function (key) {
        key = Text$1.of(key);
        var value = this._record.getAttr(key);
        var parent;
        if (!value.isDefined() && (parent = this.parentScope, parent)) {
            value = parent.getAttr(key);
        }
        return value;
    };
    RecordScope.prototype.getField = function (key) {
        key = Value.of(key);
        var field = this._record.getField(key);
        var parent;
        if (field === undefined && (parent = this.parentScope, parent)) {
            field = parent.getField(key);
        }
        return field;
    };
    RecordScope.prototype.getItem = function (index) {
        if (index instanceof Num) {
            index = index.value;
        }
        if (index < 0) {
            index = this.length + index;
        }
        index = Math.max(0, index);
        var n = this._record.length;
        var parent;
        if (index < n) {
            return this._record.getItem(index);
        }
        else if ((parent = this.parentScope, parent) && index < n + parent.length) {
            return parent.getItem(index - n);
        }
        return Item.Absent;
    };
    RecordScope.prototype.set = function (key, newValue) {
        var oldField = this._record.getField(key);
        var parent;
        if (oldField !== undefined) {
            this._record.set(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, oldField);
        }
        else if ((parent = this.parentScope, parent) && parent.get(key).isDefined()) {
            parent.set(key, newValue);
        }
        else {
            this._record.set(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, Item.Absent);
        }
        return this;
    };
    RecordScope.prototype.setAttr = function (key, newValue) {
        var oldField = this._record.getField(key);
        var parent;
        if (oldField !== undefined && oldField instanceof Attr$1) {
            this._record.set(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, oldField);
        }
        else if ((parent = this.parentScope, parent) && parent.getAttr(key).isDefined()) {
            parent.set(key, newValue);
        }
        else {
            this._record.set(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, Item.Absent);
        }
        return this;
    };
    RecordScope.prototype.setItem = function (index, item) {
        if (index instanceof Num) {
            index = index.value;
        }
        if (index < 0) {
            index = this.length + index;
        }
        index = Math.max(0, index);
        var n = this._record.length;
        var parent;
        if (index < n) {
            var oldItem = this._record.getItem(index);
            this._record.setItem(index, item);
            var newItem = this._record.getItem(index);
            this.didChange(newItem, oldItem, index);
        }
        else if ((parent = this.parentScope, parent) && index < n + parent.length) {
            parent.setItem(index - n, item);
        }
        return this;
    };
    RecordScope.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var i = this._record.length;
        var n = this._record.push.apply(this._record, arguments);
        while (i < n) {
            var newItem = this._record.get(i);
            this.didChange(newItem, Item.Absent, i);
            i += 1;
        }
        return n;
    };
    RecordScope.prototype.splice = function (start, deleteCount) {
        if (deleteCount === void 0) { deleteCount = 0; }
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        if (start < 0) {
            start = this.length + start;
        }
        start = Math.max(0, start);
        var n = this._record.length;
        deleteCount = Math.max(0, deleteCount);
        var deleted;
        var parent;
        if (start < n) {
            deleted = this._record.splice.apply(this._record, arguments);
            for (var i = 0; i < deleted.length; i += 1) {
                this.didChange(Item.Absent, deleted[i], start + i);
            }
            for (var i = start; i < start + newItems.length; i += 1) {
                this.didChange(this._record.get(i), Item.Absent, i);
            }
            if (start + deleteCount > n && (parent = this.parentScope, parent)) {
                var rest = parent.splice(n, start + deleteCount - n);
                deleted.push.apply(deleted, rest);
            }
        }
        else if (parent = this.parentScope, parent) {
            deleted = parent.splice.apply(parent, [start - n, deleteCount].concat(newItems));
        }
        return deleted;
    };
    RecordScope.prototype.delete = function (key) {
        var oldItem = this._record.delete(key);
        var parent;
        if (oldItem.isDefined()) {
            this.didChange(Item.Absent, oldItem);
        }
        else if (parent = this.parentScope, parent) {
            oldItem = parent.delete(key);
        }
        return oldItem;
    };
    RecordScope.prototype.clear = function () {
        var record = this._record.branch();
        this._record.clear();
        record.forEach(function (oldItem, index) {
            this.didChange(Item.Absent, oldItem, index);
        }, this);
        var parent = this.parentScope;
        if (parent) {
            parent.clear();
        }
    };
    RecordScope.prototype.withField = function (key, newValue) {
        var oldField = this._record.getField(key);
        var parent;
        if (oldField !== undefined) {
            this._record = this._record.withField(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, oldField);
        }
        else if ((parent = this.parentScope, parent) && parent.has(key)) {
            parent.set(key, newValue);
        }
        else {
            this._record = this._record.withField(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, Item.Absent);
        }
        return this;
    };
    RecordScope.prototype.withAttr = function (key, newValue) {
        var oldField = this._record.getField(key);
        var parent;
        if (oldField !== undefined) {
            this._record = this._record.withAttr(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, oldField);
        }
        else if ((parent = this.parentScope, parent) && parent.has(key)) {
            parent.set(key, newValue);
        }
        else {
            this._record = this._record.withAttr(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, Item.Absent);
        }
        return this;
    };
    RecordScope.prototype.withSlot = function (key, newValue) {
        var oldField = this._record.getField(key);
        var parent;
        if (oldField !== undefined) {
            this._record = this._record.withSlot(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, oldField);
        }
        else if ((parent = this.parentScope, parent) && parent.has(key)) {
            parent.set(key, newValue);
        }
        else {
            this._record = this._record.withSlot(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, Item.Absent);
        }
        return this;
    };
    RecordScope.prototype.forEach = function (callback, thisArg) {
        var result = this._record.forEach(callback, thisArg);
        if (result === undefined) {
            var parent_1 = this.parentScope;
            if (parent_1) {
                result = parent_1.forEach(callback, thisArg);
            }
        }
        return result;
    };
    RecordScope.prototype.indexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        if (index < 0) {
            index = this.length + index;
        }
        index = Math.max(0, index);
        var n = this._record.length;
        var i = -1;
        if (index < n) {
            this._record.indexOf(item, index);
            index = 0;
        }
        else {
            index -= n;
        }
        var parent;
        if (i < 0 && (parent = this.parentScope, parent)) {
            i = parent.indexOf(item, index);
            if (i >= 0) {
                i += n;
            }
        }
        return i;
    };
    RecordScope.prototype.lastIndexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        if (index < 0) {
            index = this.length + index;
        }
        index = Math.max(0, index);
        var n = this._record.length;
        var i = -1;
        var parent;
        if (index >= n && (parent = this.parentScope, parent)) {
            i = parent.lastIndexOf(item, index - n);
            if (i >= 0) {
                i += n;
            }
        }
        if (i < 0) {
            i = this._record.lastIndexOf(item, index);
        }
        return i;
    };
    RecordScope.prototype.isAliased = function () {
        return this._record.isAliased();
    };
    RecordScope.prototype.isMutable = function () {
        return this._record.isMutable();
    };
    RecordScope.prototype.alias = function () {
        this._record.alias();
        var parent = this.parentScope;
        if (parent) {
            parent.alias();
        }
    };
    RecordScope.prototype.branch = function () {
        this._record = this._record.branch();
        return this;
    };
    RecordScope.prototype.commit = function () {
        this._record.commit();
        var parent = this.parentScope;
        if (parent) {
            parent.commit();
        }
        return this;
    };
    RecordScope.prototype.didChange = function (newItem, oldItem, index, downlinkScope) {
    };
    RecordScope.prototype.stack = function () {
        return EvalStack.of(Item.GlobalScope, this);
    };
    return RecordScope;
}(Record));

//# sourceMappingURL=data:application/json;base64,

var BTree = (function () {
    function BTree(root) {
        if (root === void 0) { root = BTreePage.Empty; }
        this.root = root;
    }
    Object.defineProperty(BTree.prototype, "size", {
        get: function () {
            return this.root.size;
        },
        enumerable: true,
        configurable: true
    });
    BTree.prototype.isEmpty = function () {
        return this.root.isEmpty();
    };
    BTree.prototype.has = function (key) {
        return this.root.has(key, this);
    };
    BTree.prototype.get = function (key) {
        return this.root.get(key, this);
    };
    BTree.prototype.getEntry = function (index) {
        return this.root.getEntry(index);
    };
    BTree.prototype.firstKey = function () {
        var entry = this.root.firstEntry();
        if (entry) {
            return entry[0];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.firstValue = function () {
        var entry = this.root.firstEntry();
        if (entry) {
            return entry[1];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.firstEntry = function () {
        return this.root.firstEntry();
    };
    BTree.prototype.lastKey = function () {
        var entry = this.root.lastEntry();
        if (entry) {
            return entry[0];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.lastValue = function () {
        var entry = this.root.lastEntry();
        if (entry) {
            return entry[1];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.lastEntry = function () {
        return this.root.lastEntry();
    };
    BTree.prototype.nextKey = function (key) {
        var entry = this.root.nextEntry(key, this);
        if (entry) {
            return entry[0];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.nextValue = function (key) {
        var entry = this.root.nextEntry(key, this);
        if (entry) {
            return entry[1];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.nextEntry = function (key) {
        return this.root.nextEntry(key, this);
    };
    BTree.prototype.previousKey = function (key) {
        var entry = this.root.previousEntry(key, this);
        if (entry) {
            return entry[0];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.previousValue = function (key) {
        var entry = this.root.previousEntry(key, this);
        if (entry) {
            return entry[1];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.previousEntry = function (key) {
        return this.root.previousEntry(key, this);
    };
    BTree.prototype.set = function (key, newValue) {
        var oldRoot = this.root;
        var newRoot = this.root.updated(key, newValue, this);
        if (oldRoot !== newRoot) {
            if (newRoot.size > oldRoot.size) {
                newRoot = newRoot.balanced(this);
            }
            this.root = newRoot;
        }
        return this;
    };
    BTree.prototype.delete = function (key) {
        var oldRoot = this.root;
        var newRoot = this.root.removed(key, this);
        if (oldRoot !== newRoot) {
            this.root = newRoot;
            return true;
        }
        else {
            return false;
        }
    };
    BTree.prototype.drop = function (lower) {
        if (lower > 0 && this.root.size > 0) {
            if (lower < this.root.size) {
                this.root = this.root.drop(lower, this);
            }
            else {
                this.root = BTreePage.Empty;
            }
        }
        return this;
    };
    BTree.prototype.take = function (upper) {
        if (upper < this.root.size && this.root.size > 0) {
            if (upper > 0) {
                this.root = this.root.take(upper, this);
            }
            else {
                this.root = BTreePage.Empty;
            }
        }
        return this;
    };
    BTree.prototype.clear = function () {
        this.root = BTreePage.Empty;
    };
    BTree.prototype.updated = function (key, newValue) {
        var oldRoot = this.root;
        var newRoot = oldRoot.updated(key, newValue, this);
        if (oldRoot !== newRoot) {
            if (newRoot.size > oldRoot.size) {
                newRoot = newRoot.balanced(this);
            }
            return this.copy(newRoot);
        }
        else {
            return this;
        }
    };
    BTree.prototype.removed = function (key) {
        var oldRoot = this.root;
        var newRoot = oldRoot.removed(key, this);
        if (oldRoot !== newRoot) {
            return this.copy(newRoot);
        }
        else {
            return this;
        }
    };
    BTree.prototype.cleared = function () {
        if (!this.root.isEmpty()) {
            return this.copy(BTreePage.Empty);
        }
        else {
            return this;
        }
    };
    BTree.prototype.forEach = function (callback, thisArg) {
        return this.root.forEach(callback, thisArg, this);
    };
    BTree.prototype.keys = function () {
        return this.root.keys();
    };
    BTree.prototype.values = function () {
        return this.root.values();
    };
    BTree.prototype.entries = function () {
        return this.root.entries();
    };
    BTree.prototype.reverseKeys = function () {
        return this.root.reverseKeys();
    };
    BTree.prototype.reverseValues = function () {
        return this.root.reverseValues();
    };
    BTree.prototype.reverseEntries = function () {
        return this.root.reverseEntries();
    };
    BTree.prototype.clone = function () {
        return this.copy(this.root);
    };
    BTree.prototype.copy = function (root) {
        var tree = new BTree(root);
        if (tree.compare !== this.compare) {
            tree.compare = this.compare;
        }
        if (tree.pageSplitSize !== this.pageSplitSize) {
            tree.pageSplitSize = this.pageSplitSize;
        }
        return tree;
    };
    BTree.prototype.toValue = function () {
        return this.root.toValue();
    };
    BTree.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    BTree.prototype.compare = function (x, y) {
        return compare(x, y);
    };
    BTree.prototype.pageShouldSplit = function (page) {
        return page.arity > this.pageSplitSize;
    };
    BTree.prototype.pageShouldMerge = function (page) {
        return page.arity < this.pageSplitSize >>> 1;
    };
    return BTree;
}());
BTree.prototype.pageSplitSize = 32;
var BTreePage = (function () {
    function BTreePage() {
    }
    BTreePage.prototype.keys = function () {
        return new KeyCursor(this.entries());
    };
    BTreePage.prototype.values = function () {
        return new ValueCursor(this.entries());
    };
    BTreePage.prototype.reverseKeys = function () {
        return new KeyCursor(this.reverseEntries());
    };
    BTreePage.prototype.reverseValues = function () {
        return new ValueCursor(this.reverseEntries());
    };
    BTreePage.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    BTreePage.Empty = undefined;
    return BTreePage;
}());
var BTreeLeaf = (function (_super) {
    __extends(BTreeLeaf, _super);
    function BTreeLeaf(slots) {
        var _this = _super.call(this) || this;
        _this.slots = slots;
        return _this;
    }
    Object.defineProperty(BTreeLeaf.prototype, "arity", {
        get: function () {
            return this.slots.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BTreeLeaf.prototype, "size", {
        get: function () {
            return this.slots.length;
        },
        enumerable: true,
        configurable: true
    });
    BTreeLeaf.prototype.isEmpty = function () {
        return this.slots.length === 0;
    };
    BTreeLeaf.prototype.minKey = function () {
        return this.slots[0][0];
    };
    BTreeLeaf.prototype.maxKey = function () {
        return this.slots[this.slots.length - 1][0];
    };
    BTreeLeaf.prototype.has = function (key, tree) {
        return this.lookup(key, tree) >= 0;
    };
    BTreeLeaf.prototype.get = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            return this.slots[index][1];
        }
        else {
            return undefined;
        }
    };
    BTreeLeaf.prototype.getEntry = function (index) {
        return this.slots[index];
    };
    BTreeLeaf.prototype.firstEntry = function () {
        if (this.slots.length) {
            return this.slots[0];
        }
        else {
            return undefined;
        }
    };
    BTreeLeaf.prototype.lastEntry = function () {
        if (this.slots.length) {
            return this.slots[this.slots.length - 1];
        }
        else {
            return undefined;
        }
    };
    BTreeLeaf.prototype.nextEntry = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        return this.slots[index];
    };
    BTreeLeaf.prototype.previousEntry = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index -= 1;
        }
        else {
            index = -(index + 2);
        }
        return this.slots[index];
    };
    BTreeLeaf.prototype.updated = function (key, newValue, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            return this.updatedSlot(index, key, newValue);
        }
        else {
            index = -(index + 1);
            return this.insertedSlot(index, key, newValue);
        }
    };
    BTreeLeaf.prototype.updatedSlot = function (index, key, newValue) {
        var oldSlots = this.slots;
        if (newValue !== oldSlots[index][1]) {
            var newSlots = oldSlots.slice(0);
            newSlots[index] = [key, newValue];
            return new BTreeLeaf(newSlots);
        }
        else {
            return this;
        }
    };
    BTreeLeaf.prototype.insertedSlot = function (index, key, newValue) {
        var oldSlots = this.slots;
        var newSlots = new Array(oldSlots.length + 1);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        newSlots[index] = [key, newValue];
        for (var i = index; i < oldSlots.length; i += 1) {
            newSlots[i + 1] = oldSlots[i];
        }
        return new BTreeLeaf(newSlots);
    };
    BTreeLeaf.prototype.removed = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            if (this.slots.length > 1) {
                return this.removedSlot(index);
            }
            else {
                return BTreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    BTreeLeaf.prototype.removedSlot = function (index) {
        var oldSlots = this.slots;
        var newSlots = new Array(oldSlots.length - 1);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        for (var i = index; i < newSlots.length; i += 1) {
            newSlots[i] = oldSlots[i + 1];
        }
        return new BTreeLeaf(newSlots);
    };
    BTreeLeaf.prototype.drop = function (lower, tree) {
        var oldSlots = this.slots;
        if (lower > 0 && oldSlots.length > 0) {
            if (lower < oldSlots.length) {
                var size = oldSlots.length - lower;
                var newSlots = new Array(size);
                for (var i = 0; i < size; i += 1) {
                    newSlots[i] = oldSlots[i + lower];
                }
                return new BTreeLeaf(newSlots);
            }
            else {
                return BTreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    BTreeLeaf.prototype.take = function (upper, tree) {
        var oldSlots = this.slots;
        if (upper < oldSlots.length && oldSlots.length > 0) {
            if (upper > 0) {
                var newSlots = new Array(upper);
                for (var i = 0; i < upper; i += 1) {
                    newSlots[i] = oldSlots[i];
                }
                return new BTreeLeaf(newSlots);
            }
            else {
                return BTreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    BTreeLeaf.prototype.balanced = function (tree) {
        var size = this.slots.length;
        if (size > 1 && tree.pageShouldSplit(this)) {
            return this.split(size >>> 1);
        }
        else {
            return this;
        }
    };
    BTreeLeaf.prototype.split = function (index) {
        var newPages = new Array(2);
        var newLeftPage = this.splitLeft(index);
        var newRightPage = this.splitRight(index);
        newPages[0] = newLeftPage;
        newPages[1] = newRightPage;
        var newKnots = new Array(1);
        newKnots[0] = newRightPage.minKey();
        return new BTreeNode(newPages, newKnots, this.slots.length);
    };
    BTreeLeaf.prototype.splitLeft = function (index) {
        var oldSlots = this.slots;
        var newSlots = new Array(index);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        return new BTreeLeaf(newSlots);
    };
    BTreeLeaf.prototype.splitRight = function (index) {
        var oldSlots = this.slots;
        var newSize = oldSlots.length - index;
        var newSlots = new Array(newSize);
        for (var i = 0; i < newSize; i += 1) {
            newSlots[i] = oldSlots[i + index];
        }
        return new BTreeLeaf(newSlots);
    };
    BTreeLeaf.prototype.forEach = function (callback, thisArg, tree) {
        for (var i = 0; i < this.slots.length; i += 1) {
            var slot = this.slots[i];
            var result = callback.call(thisArg, slot[0], slot[1], tree);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    BTreeLeaf.prototype.entries = function () {
        return new LeafCursor(this.slots);
    };
    BTreeLeaf.prototype.reverseEntries = function () {
        return new LeafCursor(this.slots, this.slots.length);
    };
    BTreeLeaf.prototype.toValue = function () {
        var record = Record.empty(1 + this.slots.length);
        record.attr('bleaf', Record.empty(1).slot('size', this.slots.length));
        for (var i = 0; i < this.slots.length; i += 1) {
            var slot = this.slots[i];
            record.slot(Value.fromAny(slot[0]), Value.fromAny(slot[1]));
        }
        return record;
    };
    BTreeLeaf.prototype.lookup = function (key, tree) {
        var lo = 0;
        var hi = this.slots.length - 1;
        while (lo <= hi) {
            var mid = (lo + hi) >>> 1;
            var order = tree.compare(key, this.slots[mid][0]);
            if (order > 0) {
                lo = mid + 1;
            }
            else if (order < 0) {
                hi = mid - 1;
            }
            else {
                return mid;
            }
        }
        return -(lo + 1);
    };
    return BTreeLeaf;
}(BTreePage));
BTreePage.Empty = new BTreeLeaf([]);
var BTreeNode = (function (_super) {
    __extends(BTreeNode, _super);
    function BTreeNode(pages, knots, size) {
        var _this = _super.call(this) || this;
        _this.pages = pages;
        _this.knots = knots;
        _this.size = size;
        return _this;
    }
    Object.defineProperty(BTreeNode.prototype, "arity", {
        get: function () {
            return this.pages.length;
        },
        enumerable: true,
        configurable: true
    });
    BTreeNode.prototype.isEmpty = function () {
        return this.size === 0;
    };
    BTreeNode.prototype.minKey = function () {
        return this.pages[0].minKey();
    };
    BTreeNode.prototype.maxKey = function () {
        return this.pages[this.pages.length - 1].maxKey();
    };
    BTreeNode.prototype.has = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index > 0) {
            index += 1;
        }
        else if (index < 0) {
            index = -(index + 1);
        }
        else {
            return true;
        }
        return this.pages[index].has(key, tree);
    };
    BTreeNode.prototype.get = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        return this.pages[index].get(key, tree);
    };
    BTreeNode.prototype.getEntry = function (index) {
        for (var i = 0; i < this.pages.length; i += 1) {
            var page = this.pages[i];
            if (index < page.size) {
                return page.getEntry(index);
            }
            else {
                index -= page.size;
            }
        }
        return undefined;
    };
    BTreeNode.prototype.firstEntry = function () {
        if (this.pages.length) {
            return this.pages[0].firstEntry();
        }
        else {
            return undefined;
        }
    };
    BTreeNode.prototype.lastEntry = function () {
        if (this.pages.length) {
            return this.pages[this.pages.length - 1].lastEntry();
        }
        else {
            return undefined;
        }
    };
    BTreeNode.prototype.nextEntry = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        var entry = this.pages[index].nextEntry(key, tree);
        if (entry === undefined && index + 1 < this.pages.length) {
            entry = this.pages[index + 1].nextEntry(key, tree);
        }
        return entry;
    };
    BTreeNode.prototype.previousEntry = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        var entry = this.pages[index].previousEntry(key, tree);
        if (entry === undefined && index > 0) {
            entry = this.pages[index - 1].previousEntry(key, tree);
        }
        return entry;
    };
    BTreeNode.prototype.updated = function (key, newValue, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        var oldPage = this.pages[index];
        var newPage = oldPage.updated(key, newValue, tree);
        if (oldPage !== newPage) {
            if (oldPage.size !== newPage.size && tree.pageShouldSplit(newPage)) {
                return this.updatedPageSplit(index, newPage, oldPage);
            }
            else {
                return this.updatedPage(index, newPage, oldPage);
            }
        }
        else {
            return this;
        }
    };
    BTreeNode.prototype.updatedPage = function (index, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = oldPages.slice(0);
        newPages[index] = newPage;
        var oldKnots = this.knots;
        var newKnots;
        if (oldKnots.length > 0) {
            newKnots = oldKnots.slice(0);
            if (index > 0) {
                newKnots[index - 1] = newPage.minKey();
            }
        }
        else {
            newKnots = [];
        }
        var newSize = this.size - oldPage.size + newPage.size;
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.updatedPageSplit = function (index, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = new Array(oldPages.length + 1);
        for (var i = 0; i < index; i += 1) {
            newPages[i] = oldPages[i];
        }
        var newLeftPage = newPage.splitLeft(newPage.arity >>> 1);
        var newRightPage = newPage.splitRight(newPage.arity >>> 1);
        newPages[index] = newLeftPage;
        newPages[index + 1] = newRightPage;
        for (var i = index + 1; i < oldPages.length; i += 1) {
            newPages[i + 1] = oldPages[i];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(oldPages.length);
        if (index > 0) {
            for (var i = 0; i < index - 1; i += 1) {
                newKnots[i] = oldKnots[i];
            }
            newKnots[index - 1] = newLeftPage.minKey();
            newKnots[index] = newRightPage.minKey();
            for (var i = index; i < oldKnots.length; i += 1) {
                newKnots[i + 1] = oldKnots[i];
            }
        }
        else {
            newKnots[0] = newRightPage.minKey();
            for (var i = 0; i < oldKnots.length; i += 1) {
                newKnots[i + 1] = oldKnots[i];
            }
        }
        var newSize = this.size - oldPage.size + newPage.size;
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.updatedPageMerge = function (index, newPage, oldPage) {
        var oldPages = this.pages;
        var midPages = newPage.pages;
        var newPages = new Array(oldPages.length + midPages.length - 1);
        for (var i = 0; i < index; i += 1) {
            newPages[i] = oldPages[i];
        }
        for (var i = 0; i < midPages.length; i += 1) {
            newPages[i + index] = midPages[i];
        }
        for (var i = index + 1; i < oldPages.length; i += 1) {
            newPages[i + midPages.length - 1] = oldPages[i];
        }
        var oldKnots = this.knots;
        var midKnots = newPage.knots;
        var newKnots = new Array(newPages.length - 1);
        if (index > 0) {
            for (var i = 0; i < index - 1; i += 1) {
                newKnots[i] = oldKnots[i];
            }
            newKnots[index - 1] = midPages[0].minKey();
            for (var i = 0; i < midKnots.length; i += 1) {
                newKnots[i + index] = midKnots[i];
            }
            for (var i = index; i < oldKnots.length; i += 1) {
                newKnots[i + midKnots.length] = oldKnots[i];
            }
        }
        else {
            for (var i = 0; i < midKnots.length; i += 1) {
                newKnots[i] = midKnots[i];
            }
            newKnots[midKnots.length] = oldPages[1].minKey();
            for (var i = 1; i < oldKnots.length; i += 1) {
                newKnots[i + midKnots.length] = oldKnots[i];
            }
        }
        var newSize = this.size - oldPage.size + newPage.size;
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.removed = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        var oldPage = this.pages[index];
        var newPage = oldPage.removed(key, tree);
        if (oldPage !== newPage) {
            return this.replacedPage(index, newPage, oldPage, tree);
        }
        else {
            return this;
        }
    };
    BTreeNode.prototype.replacedPage = function (index, newPage, oldPage, tree) {
        if (!newPage.isEmpty()) {
            if (newPage instanceof BTreeNode && tree.pageShouldMerge(newPage)) {
                return this.updatedPageMerge(index, newPage, oldPage);
            }
            else {
                return this.updatedPage(index, newPage, oldPage);
            }
        }
        else if (this.pages.length > 2) {
            return this.removedPage(index, newPage, oldPage);
        }
        else if (this.pages.length > 1) {
            if (index === 0) {
                return this.pages[1];
            }
            else {
                return this.pages[0];
            }
        }
        else {
            return BTreePage.Empty;
        }
    };
    BTreeNode.prototype.removedPage = function (index, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = new Array(oldPages.length - 1);
        for (var i = 0; i < index; i += 1) {
            newPages[i] = oldPages[i];
        }
        for (var i = index + 1; i < oldPages.length; i += 1) {
            newPages[i - 1] = oldPages[i];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(oldKnots.length - 1);
        if (index > 0) {
            for (var i = 0; i < index - 1; i += 1) {
                newKnots[i] = oldKnots[i];
            }
            for (var i = index; i < oldKnots.length; i += 1) {
                newKnots[i - 1] = oldKnots[i];
            }
        }
        else {
            for (var i = 1; i < oldKnots.length; i += 1) {
                newKnots[i - 1] = oldKnots[i];
            }
        }
        var newSize = this.size - oldPage.size;
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.drop = function (lower, tree) {
        if (lower > 0) {
            var newSize = this.size;
            if (lower < newSize) {
                var oldPages = this.pages;
                var index = 0;
                while (index < oldPages.length) {
                    var size = oldPages[index].size;
                    if (size <= lower) {
                        newSize -= size;
                        lower -= size;
                        index += 1;
                    }
                    else {
                        break;
                    }
                }
                var newArity = oldPages.length - index;
                if (newArity > 1) {
                    var newNode = void 0;
                    if (index > 0) {
                        var newPages = new Array(newArity);
                        for (var i = 0; i < newArity; i += 1) {
                            newPages[i] = oldPages[i + index];
                        }
                        var newKnots = new Array(newArity - 1);
                        for (var i = 0; i < newKnots.length; i += 1) {
                            newKnots[i] = this.knots[i + index];
                        }
                        newNode = new BTreeNode(newPages, newKnots, newSize);
                    }
                    else {
                        newNode = this;
                    }
                    if (lower > 0) {
                        var oldPage = oldPages[index];
                        var newPage = oldPage.drop(lower, tree);
                        return newNode.replacedPage(0, newPage, oldPage, tree);
                    }
                    else {
                        return newNode;
                    }
                }
                else {
                    return oldPages[index].drop(lower, tree);
                }
            }
            else {
                return BTreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    BTreeNode.prototype.take = function (upper, tree) {
        if (upper < this.size) {
            if (upper > 0) {
                var oldPages = this.pages;
                var newSize = 0;
                var index = 0;
                while (index < oldPages.length && upper > 0) {
                    var size = oldPages[index].size;
                    newSize += size;
                    index += 1;
                    if (size <= upper) {
                        upper -= size;
                    }
                    else {
                        break;
                    }
                }
                var newArity = upper === 0 ? index : index + 1;
                if (newArity > 1) {
                    var newNode = void 0;
                    if (index < oldPages.length) {
                        var newPages = new Array(newArity);
                        for (var i = 0; i < newArity; i += 1) {
                            newPages[i] = oldPages[i];
                        }
                        var newKnots = new Array(newArity - 1);
                        for (var i = 0; i < newKnots.length; i += 1) {
                            newKnots[i] = this.knots[i];
                        }
                        newNode = new BTreeNode(newPages, newKnots, newSize);
                    }
                    else {
                        newNode = this;
                    }
                    if (upper > 0) {
                        var oldPage = oldPages[index - 1];
                        var newPage = oldPage.take(upper, tree);
                        return newNode.replacedPage(index - 1, newPage, oldPage, tree);
                    }
                    else {
                        return newNode;
                    }
                }
                else if (upper > 0) {
                    return oldPages[0].take(upper, tree);
                }
                else {
                    return oldPages[0];
                }
            }
            else {
                return BTreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    BTreeNode.prototype.balanced = function (tree) {
        if (this.pages.length > 1 && tree.pageShouldSplit(this)) {
            return this.split(this.knots.length >>> 1);
        }
        else {
            return this;
        }
    };
    BTreeNode.prototype.split = function (index) {
        var newPages = new Array(2);
        var newLeftPage = this.splitLeft(index);
        var newRightPage = this.splitRight(index);
        newPages[0] = newLeftPage;
        newPages[1] = newRightPage;
        var newKnots = new Array(1);
        newKnots[0] = newRightPage.minKey();
        return new BTreeNode(newPages, newKnots, this.size);
    };
    BTreeNode.prototype.splitLeft = function (index) {
        var oldPages = this.pages;
        var newPages = new Array(index + 1);
        for (var i = 0; i < index + 1; i += 1) {
            newPages[i] = oldPages[i];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(index);
        for (var i = 0; i < index; i += 1) {
            newKnots[i] = oldKnots[i];
        }
        var newSize = 0;
        for (var i = 0; i <= index; i += 1) {
            newSize += newPages[i].size;
        }
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.splitRight = function (index) {
        var oldPages = this.pages;
        var newArity = oldPages.length - (index + 1);
        var newPages = new Array(newArity);
        for (var i = 0; i < newArity; i += 1) {
            newPages[i] = oldPages[i + (index + 1)];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(newArity - 1);
        for (var i = 0; i < newKnots.length; i += 1) {
            newKnots[i] = oldKnots[i + (index + 1)];
        }
        var newSize = 0;
        for (var i = 0; i < newArity; i += 1) {
            newSize += newPages[i].size;
        }
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.forEach = function (callback, thisArg, tree) {
        for (var i = 0; i < this.pages.length; i += 1) {
            var result = this.pages[i].forEach(callback, thisArg, tree);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    BTreeNode.prototype.entries = function () {
        return new BTreeNodeCursor(this.pages);
    };
    BTreeNode.prototype.reverseEntries = function () {
        return new BTreeNodeCursor(this.pages, this.size, this.pages.length);
    };
    BTreeNode.prototype.toValue = function () {
        var record = Record.empty(1 + this.pages.length + this.knots.length);
        record.attr('bnode', Record.empty(1).slot('size', this.size));
        for (var i = 0; i < this.pages.length; i += 1) {
            if (i > 0) {
                var key = Value.fromAny(this.knots[i - 1]);
                record.push(Record.empty(1).attr('knot', Record.empty(1).slot('key', key)));
            }
            record.push(this.pages[i].toValue());
        }
        return record;
    };
    BTreeNode.prototype.lookup = function (key, tree) {
        var lo = 0;
        var hi = this.knots.length - 1;
        while (lo <= hi) {
            var mid = (lo + hi) >>> 1;
            var order = tree.compare(key, this.knots[mid]);
            if (order > 0) {
                lo = mid + 1;
            }
            else if (order < 0) {
                hi = mid - 1;
            }
            else {
                return mid;
            }
        }
        return -(lo + 1);
    };
    return BTreeNode;
}(BTreePage));
var BTreeNodeCursor = (function (_super) {
    __extends(BTreeNodeCursor, _super);
    function BTreeNodeCursor(pages, index, pageIndex, subCursor) {
        return _super.call(this, pages, index, pageIndex, subCursor) || this;
    }
    BTreeNodeCursor.prototype.pageSize = function (page) {
        return page.size;
    };
    BTreeNodeCursor.prototype.pageCursor = function (page) {
        return page.entries();
    };
    BTreeNodeCursor.prototype.reversePageCursor = function (page) {
        return page.reverseEntries();
    };
    return BTreeNodeCursor;
}(NodeCursor));
//# sourceMappingURL=data:application/json;base64,

var STree = (function () {
    function STree(root) {
        if (root === void 0) { root = STreePage.Empty; }
        this.root = root;
    }
    Object.defineProperty(STree.prototype, "length", {
        get: function () {
            return this.root.size;
        },
        enumerable: true,
        configurable: true
    });
    STree.prototype.isEmpty = function () {
        return this.root.isEmpty();
    };
    STree.prototype.get = function (index, id) {
        if (id !== undefined) {
            index = this.lookup(id, index);
            if (index < 0) {
                return undefined;
            }
        }
        return this.root.get(index);
    };
    STree.prototype.getEntry = function (index, id) {
        if (id !== undefined) {
            index = this.lookup(id, index);
            if (index < 0) {
                return undefined;
            }
        }
        return this.root.getEntry(index);
    };
    STree.prototype.set = function (index, newValue, id) {
        if (id !== undefined) {
            index = this.lookup(id, index);
            if (index < 0) {
                throw new RangeError('' + id);
            }
        }
        if (index < 0 || index >= this.root.size) {
            throw new RangeError('' + index);
        }
        this.root = this.root.updated(index, newValue, this);
        return this;
    };
    STree.prototype.insert = function (index, newValue, id) {
        if (index < 0 || index > this.root.size) {
            throw new RangeError('' + index);
        }
        this.root = this.root.inserted(index, newValue, id, this).balanced(this);
        return this;
    };
    STree.prototype.remove = function (index, id) {
        if (id !== undefined) {
            index = this.lookup(id, index);
            if (index < 0) {
                throw new RangeError('' + id);
            }
        }
        if (index < 0 || index > this.root.size) {
            throw new RangeError('' + index);
        }
        this.root = this.root.removed(index, this);
        return this;
    };
    STree.prototype.push = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        for (var i = 0; i < newValues.length; i += 1) {
            this.root = this.root.inserted(this.root.size, newValues[i], undefined, this).balanced(this);
        }
        return this.root.size;
    };
    STree.prototype.pop = function () {
        var index = this.root.size - 1;
        if (index >= 0) {
            var oldValue = this.root.get(index);
            this.root = this.root.removed(index, this);
            return oldValue;
        }
        else {
            return undefined;
        }
    };
    STree.prototype.unshift = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        for (var i = newValues.length - 1; i >= 0; i -= 1) {
            this.root = this.root.inserted(0, newValues[i], undefined, this).balanced(this);
        }
        return this.root.size;
    };
    STree.prototype.shift = function () {
        if (this.root.size > 0) {
            var oldValue = this.root.get(0);
            this.root = this.root.removed(0, this);
            return oldValue;
        }
        else {
            return undefined;
        }
    };
    STree.prototype.move = function (fromIndex, toIndex, id) {
        if (id !== undefined) {
            fromIndex = this.lookup(id, fromIndex);
            if (fromIndex < 0) {
                throw new RangeError('' + id);
            }
        }
        if (fromIndex < 0 || fromIndex >= this.root.size) {
            throw new RangeError('' + fromIndex);
        }
        if (toIndex < 0 || toIndex >= this.root.size) {
            throw new RangeError('' + toIndex);
        }
        if (fromIndex !== toIndex) {
            var entry = this.root.getEntry(fromIndex);
            this.root = this.root.removed(fromIndex, this)
                .inserted(toIndex, entry[1], entry[0], this)
                .balanced(this);
        }
        return this;
    };
    STree.prototype.splice = function (start, deleteCount) {
        var newValues = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newValues[_i - 2] = arguments[_i];
        }
        if (start < 0) {
            start = this.root.size + start;
        }
        start = Math.min(Math.max(0, start), this.root.size);
        if (deleteCount === undefined) {
            deleteCount = this.root.size - start;
        }
        var deleted = [];
        for (var i = start, n = start + deleteCount; i < n; i += 1) {
            deleted.push(this.root.get(start));
            this.root = this.root.removed(start, this);
        }
        for (var i = 0; i < newValues.length; i += 1) {
            this.root = this.root.inserted(start + i, newValues[i], undefined, this).balanced(this);
        }
        return deleted;
    };
    STree.prototype.drop = function (lower) {
        if (lower > 0 && this.root.size > 0) {
            if (lower < this.root.size) {
                this.root = this.root.drop(lower, this);
            }
            else {
                this.root = STreePage.Empty;
            }
        }
        return this;
    };
    STree.prototype.take = function (upper) {
        if (upper < this.root.size && this.root.size > 0) {
            if (upper > 0) {
                this.root = this.root.take(upper, this);
            }
            else {
                this.root = STreePage.Empty;
            }
        }
        return this;
    };
    STree.prototype.clear = function () {
        this.root = STreePage.Empty;
    };
    STree.prototype.forEach = function (callback, thisArg) {
        return this.root.forEach(callback, thisArg, 0, this);
    };
    STree.prototype.keys = function () {
        return this.root.keys();
    };
    STree.prototype.values = function () {
        return this.root.values();
    };
    STree.prototype.entries = function () {
        return this.root.entries();
    };
    STree.prototype.reverseKeys = function () {
        return this.root.reverseKeys();
    };
    STree.prototype.reverseValues = function () {
        return this.root.reverseValues();
    };
    STree.prototype.reverseEntries = function () {
        return this.root.reverseEntries();
    };
    STree.prototype.clone = function () {
        return this.copy(this.root);
    };
    STree.prototype.copy = function (root) {
        var tree = new STree(root);
        if (tree.identify !== this.identify) {
            tree.identify = this.identify;
        }
        if (tree.compare !== this.compare) {
            tree.compare = this.compare;
        }
        if (tree.pageSplitSize !== this.pageSplitSize) {
            tree.pageSplitSize = this.pageSplitSize;
        }
        return tree;
    };
    STree.prototype.toValue = function () {
        return this.root.toValue();
    };
    STree.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    STree.prototype.identify = function (value) {
        var id = new Uint8Array(6);
        Random.fillBytes(id);
        return id;
    };
    STree.prototype.compare = function (x, y) {
        return compare(x, y);
    };
    STree.prototype.pageShouldSplit = function (page) {
        return page.arity > this.pageSplitSize;
    };
    STree.prototype.pageShouldMerge = function (page) {
        return page.arity < this.pageSplitSize >>> 1;
    };
    STree.prototype.lookup = function (id, start) {
        if (start === void 0) { start = 0; }
        start = Math.min(Math.max(0, start), this.root.size - 1);
        var index = start;
        do {
            var entry = this.root.getEntry(index);
            if (entry && this.compare(entry[0], id) === 0) {
                return index;
            }
            index = (index + 1) % this.root.size;
        } while (isFinite(index) && index !== start);
        return -1;
    };
    return STree;
}());
STree.prototype.pageSplitSize = 32;
var STreePage = (function () {
    function STreePage() {
    }
    STreePage.prototype.keys = function () {
        return new KeyCursor(this.entries());
    };
    STreePage.prototype.values = function () {
        return new ValueCursor(this.entries());
    };
    STreePage.prototype.reverseKeys = function () {
        return new KeyCursor(this.reverseEntries());
    };
    STreePage.prototype.reverseValues = function () {
        return new ValueCursor(this.reverseEntries());
    };
    STreePage.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    STreePage.Empty = undefined;
    return STreePage;
}());
var STreeLeaf = (function (_super) {
    __extends(STreeLeaf, _super);
    function STreeLeaf(slots) {
        var _this = _super.call(this) || this;
        _this.slots = slots;
        return _this;
    }
    Object.defineProperty(STreeLeaf.prototype, "arity", {
        get: function () {
            return this.slots.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(STreeLeaf.prototype, "size", {
        get: function () {
            return this.slots.length;
        },
        enumerable: true,
        configurable: true
    });
    STreeLeaf.prototype.isEmpty = function () {
        return this.slots.length === 0;
    };
    STreeLeaf.prototype.get = function (index) {
        var slot = this.slots[index];
        if (slot) {
            return slot[1];
        }
        else {
            return undefined;
        }
    };
    STreeLeaf.prototype.getEntry = function (index) {
        return this.slots[index];
    };
    STreeLeaf.prototype.updated = function (index, newValue, tree) {
        if (index < 0 || index >= this.slots.length) {
            throw new RangeError('' + index);
        }
        return this.updatedItem(index, newValue);
    };
    STreeLeaf.prototype.updatedItem = function (index, newValue) {
        var oldItems = this.slots;
        var oldSlot = oldItems[index];
        if (newValue !== oldSlot[1]) {
            var newValues = oldItems.slice(0);
            newValues[index] = [oldSlot[0], newValue];
            return new STreeLeaf(newValues);
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.inserted = function (index, newValue, id, tree) {
        if (index < 0 || index > this.slots.length) {
            throw new RangeError('' + index);
        }
        return this.insertedItem(index, newValue, id, tree);
    };
    STreeLeaf.prototype.insertedItem = function (index, newValue, id, tree) {
        if (id === undefined) {
            id = tree.identify(newValue);
        }
        var oldSlots = this.slots;
        var newSlots = new Array(oldSlots.length + 1);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        newSlots[index] = [id, newValue];
        for (var i = index; i < oldSlots.length; i += 1) {
            newSlots[i + 1] = oldSlots[i];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.removed = function (index, tree) {
        if (index < 0 || index >= this.slots.length) {
            throw new RangeError('' + index);
        }
        if (this.slots.length > 1) {
            return this.removedSlot(index);
        }
        else {
            return STreePage.Empty;
        }
    };
    STreeLeaf.prototype.removedSlot = function (index) {
        var oldSlots = this.slots;
        var newSlots = new Array(oldSlots.length - 1);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        for (var i = index; i < newSlots.length; i += 1) {
            newSlots[i] = oldSlots[i + 1];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.drop = function (lower, tree) {
        var oldSlots = this.slots;
        if (lower > 0 && oldSlots.length > 0) {
            if (lower < oldSlots.length) {
                var size = oldSlots.length - lower;
                var newSlots = new Array(size);
                for (var i = 0; i < size; i += 1) {
                    newSlots[i] = oldSlots[i + lower];
                }
                return new STreeLeaf(newSlots);
            }
            else {
                return STreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.take = function (upper, tree) {
        var oldSlots = this.slots;
        if (upper < oldSlots.length && oldSlots.length > 0) {
            if (upper > 0) {
                var newSlots = new Array(upper);
                for (var i = 0; i < upper; i += 1) {
                    newSlots[i] = oldSlots[i];
                }
                return new STreeLeaf(newSlots);
            }
            else {
                return STreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.balanced = function (tree) {
        var size = this.slots.length;
        if (size > 1 && tree.pageShouldSplit(this)) {
            return this.split(size >>> 1);
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.split = function (index) {
        var newPages = new Array(2);
        var newLeftPage = this.splitLeft(index);
        var newRightPage = this.splitRight(index);
        newPages[0] = newLeftPage;
        newPages[1] = newRightPage;
        var newKnots = new Array(1);
        newKnots[0] = index;
        return new STreeNode(newPages, newKnots, this.slots.length);
    };
    STreeLeaf.prototype.splitLeft = function (index) {
        var oldSlots = this.slots;
        var newSlots = new Array(index);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.splitRight = function (index) {
        var oldSlots = this.slots;
        var newSize = oldSlots.length - index;
        var newSlots = new Array(newSize);
        for (var i = 0; i < newSize; i += 1) {
            newSlots[i] = oldSlots[i + index];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.forEach = function (callback, thisArg, offset, tree) {
        for (var i = 0; i < this.slots.length; i += 1) {
            var slot = this.slots[i];
            var result = callback.call(thisArg, slot[1], offset + i, tree, slot[0]);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    STreeLeaf.prototype.entries = function () {
        return new LeafCursor(this.slots);
    };
    STreeLeaf.prototype.reverseEntries = function () {
        return new LeafCursor(this.slots, this.slots.length);
    };
    STreeLeaf.prototype.toValue = function () {
        var record = Record.empty(1 + this.slots.length);
        record.attr('sleaf', Record.empty(1).slot('size', this.slots.length));
        for (var i = 0; i < this.slots.length; i += 1) {
            var slot = this.slots[i];
            record.slot(Value.of(slot[0]), Value.of(slot[1]));
        }
        return record;
    };
    return STreeLeaf;
}(STreePage));
STreePage.Empty = new STreeLeaf([]);
var STreeNode = (function (_super) {
    __extends(STreeNode, _super);
    function STreeNode(pages, knots, size) {
        var _this = _super.call(this) || this;
        _this.pages = pages;
        if (knots === undefined || size === undefined) {
            knots = new Array(pages.length - 1);
            size = 0;
            for (var i = 0; i < knots.length; i += 1) {
                size += pages[i].size;
                knots[i] = size;
            }
            size += pages[knots.length].size;
        }
        _this.knots = knots;
        _this.size = size;
        return _this;
    }
    Object.defineProperty(STreeNode.prototype, "arity", {
        get: function () {
            return this.pages.length;
        },
        enumerable: true,
        configurable: true
    });
    STreeNode.prototype.isEmpty = function () {
        return this.size === 0;
    };
    STreeNode.prototype.get = function (index) {
        var pageIndex = this.lookup(index);
        if (pageIndex >= 0) {
            pageIndex += 1;
        }
        else {
            pageIndex = -(pageIndex + 1);
        }
        var subIndex = pageIndex === 0 ? index : index - this.knots[pageIndex - 1];
        return this.pages[pageIndex].get(subIndex);
    };
    STreeNode.prototype.getEntry = function (index) {
        var pageIndex = this.lookup(index);
        if (pageIndex >= 0) {
            pageIndex += 1;
        }
        else {
            pageIndex = -(pageIndex + 1);
        }
        var subIndex = pageIndex === 0 ? index : index - this.knots[pageIndex - 1];
        return this.pages[pageIndex].getEntry(subIndex);
    };
    STreeNode.prototype.updated = function (index, newValue, tree) {
        var pageIndex = this.lookup(index);
        if (pageIndex >= 0) {
            pageIndex += 1;
        }
        else {
            pageIndex = -(pageIndex + 1);
        }
        var subIndex = pageIndex === 0 ? index : index - this.knots[pageIndex - 1];
        var oldPage = this.pages[pageIndex];
        var newPage = oldPage.updated(subIndex, newValue, tree);
        if (oldPage !== newPage) {
            if (oldPage.size !== newPage.size && tree.pageShouldSplit(newPage)) {
                return this.updatedPageSplit(pageIndex, newPage, oldPage);
            }
            else {
                return this.updatedPage(pageIndex, newPage, oldPage);
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.updatedPage = function (pageIndex, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = oldPages.slice(0);
        newPages[pageIndex] = newPage;
        var oldKnots = this.knots;
        var newKnots;
        var newSize;
        if (oldPages.length - 1 > 0) {
            newKnots = oldKnots.slice(0);
            if (pageIndex > 0) {
                newSize = oldKnots[pageIndex - 1];
            }
            else {
                newSize = 0;
            }
            for (var i = pageIndex; i < newKnots.length; i += 1) {
                newSize += newPages[i].size;
                newKnots[i] = newSize;
            }
            newSize += newPages[newKnots.length].size;
        }
        else {
            newKnots = [];
            newSize = 0;
        }
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.updatedPageSplit = function (pageIndex, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = new Array(oldPages.length + 1);
        for (var i = 0; i < pageIndex; i += 1) {
            newPages[i] = oldPages[i];
        }
        var newLeftPage = newPage.splitLeft(newPage.arity >>> 1);
        var newRightPage = newPage.splitRight(newPage.arity >>> 1);
        newPages[pageIndex] = newLeftPage;
        newPages[pageIndex + 1] = newRightPage;
        for (var i = pageIndex + 1; i < oldPages.length; i += 1) {
            newPages[i + 1] = oldPages[i];
        }
        return new STreeNode(newPages);
    };
    STreeNode.prototype.updatedPageMerge = function (pageIndex, newPage, oldPage) {
        var oldPages = this.pages;
        var midPages = newPage.pages;
        var newPages = new Array(oldPages.length + midPages.length - 1);
        for (var i = 0; i < pageIndex; i += 1) {
            newPages[i] = oldPages[i];
        }
        for (var i = 0; i < midPages.length; i += 1) {
            newPages[i + pageIndex] = midPages[i];
        }
        for (var i = pageIndex + 1; i < oldPages.length; i += 1) {
            newPages[i + midPages.length - 1] = oldPages[i];
        }
        return new STreeNode(newPages);
    };
    STreeNode.prototype.inserted = function (index, newValue, id, tree) {
        var pageIndex = this.lookup(index);
        if (pageIndex >= 0) {
            pageIndex += 1;
        }
        else {
            pageIndex = -(pageIndex + 1);
        }
        var subIndex = pageIndex === 0 ? index : index - this.knots[pageIndex - 1];
        var oldPage = this.pages[pageIndex];
        var newPage = oldPage.inserted(subIndex, newValue, id, tree);
        if (oldPage !== newPage) {
            if (tree.pageShouldSplit(newPage)) {
                return this.updatedPageSplit(pageIndex, newPage, oldPage);
            }
            else {
                return this.updatedPage(pageIndex, newPage, oldPage);
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.removed = function (index, tree) {
        var pageIndex = this.lookup(index);
        if (pageIndex >= 0) {
            pageIndex += 1;
        }
        else {
            pageIndex = -(pageIndex + 1);
        }
        var subIndex = pageIndex === 0 ? index : index - this.knots[pageIndex - 1];
        var oldPage = this.pages[pageIndex];
        var newPage = oldPage.removed(subIndex, tree);
        if (oldPage !== newPage) {
            return this.replacedPage(pageIndex, newPage, oldPage, tree);
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.replacedPage = function (pageIndex, newPage, oldPage, tree) {
        if (!newPage.isEmpty()) {
            if (newPage instanceof STreeNode && tree.pageShouldMerge(newPage)) {
                return this.updatedPageMerge(pageIndex, newPage, oldPage);
            }
            else {
                return this.updatedPage(pageIndex, newPage, oldPage);
            }
        }
        else if (this.pages.length > 2) {
            return this.removedPage(pageIndex, newPage, oldPage);
        }
        else if (this.pages.length > 1) {
            if (pageIndex === 0) {
                return this.pages[1];
            }
            else {
                return this.pages[0];
            }
        }
        else {
            return STreePage.Empty;
        }
    };
    STreeNode.prototype.removedPage = function (pageIndex, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = new Array(oldPages.length - 1);
        for (var i = 0; i < pageIndex; i += 1) {
            newPages[i] = oldPages[i];
        }
        for (var i = pageIndex + 1; i < oldPages.length; i += 1) {
            newPages[i - 1] = oldPages[i];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(oldKnots.length - 1);
        var newSize;
        if (pageIndex > 0) {
            for (var i = 0; i < pageIndex; i += 1) {
                newKnots[i] = oldKnots[i];
            }
            newSize = oldKnots[pageIndex - 1];
        }
        else {
            newSize = 0;
        }
        for (var i = pageIndex; i < newKnots.length; i += 1) {
            newSize += newPages[i].size;
            newKnots[i] = newSize;
        }
        newSize += newPages[newKnots.length].size;
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.drop = function (lower, tree) {
        if (lower > 0) {
            if (lower < this.size) {
                var pageIndex = this.lookup(lower);
                if (pageIndex >= 0) {
                    pageIndex += 1;
                }
                else {
                    pageIndex = -(pageIndex + 1);
                }
                lower = pageIndex === 0 ? lower : lower - this.knots[pageIndex - 1];
                var oldPages = this.pages;
                var newArity = oldPages.length - pageIndex;
                if (newArity > 1) {
                    var newNode = void 0;
                    if (pageIndex > 0) {
                        var newPages = new Array(newArity);
                        for (var i = 0; i < newArity; i += 1) {
                            newPages[i] = oldPages[i + pageIndex];
                        }
                        newNode = new STreeNode(newPages);
                    }
                    else {
                        newNode = this;
                    }
                    if (lower > 0) {
                        var oldPage = oldPages[pageIndex];
                        var newPage = oldPage.drop(lower, tree);
                        return newNode.replacedPage(0, newPage, oldPage, tree);
                    }
                    else {
                        return newNode;
                    }
                }
                else {
                    return oldPages[pageIndex].drop(lower, tree);
                }
            }
            else {
                return STreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.take = function (upper, tree) {
        if (upper < this.size) {
            if (upper > 0) {
                var pageIndex = this.lookup(upper);
                if (pageIndex >= 0) {
                    pageIndex += 1;
                }
                else {
                    pageIndex = -(pageIndex + 1);
                }
                upper = pageIndex === 0 ? upper : upper - this.knots[pageIndex - 1];
                var oldPages = this.pages;
                var newArity = upper === 0 ? pageIndex : pageIndex + 1;
                if (newArity > 1) {
                    var newNode = void 0;
                    if (pageIndex < oldPages.length) {
                        var newPages = new Array(newArity);
                        for (var i = 0; i < newArity; i += 1) {
                            newPages[i] = oldPages[i];
                        }
                        var newKnots = new Array(newArity - 1);
                        for (var i = 0; i < newKnots.length; i += 1) {
                            newKnots[i] = this.knots[i];
                        }
                        var newSize = newKnots[newArity - 2] + newPages[newArity - 1].size;
                        newNode = new STreeNode(newPages, newKnots, newSize);
                    }
                    else {
                        newNode = this;
                    }
                    if (upper > 0) {
                        var oldPage = oldPages[pageIndex];
                        var newPage = oldPage.take(upper, tree);
                        return newNode.replacedPage(pageIndex, newPage, oldPage, tree);
                    }
                    else {
                        return newNode;
                    }
                }
                else if (upper > 0) {
                    return oldPages[0].take(upper, tree);
                }
                else {
                    return oldPages[0];
                }
            }
            else {
                return STreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.balanced = function (tree) {
        if (this.pages.length > 1 && tree.pageShouldSplit(this)) {
            return this.split(this.knots.length >>> 1);
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.split = function (pageIndex) {
        var newPages = new Array(2);
        var newLeftPage = this.splitLeft(pageIndex);
        var newRightPage = this.splitRight(pageIndex);
        newPages[0] = newLeftPage;
        newPages[1] = newRightPage;
        var newKnots = new Array(1);
        newKnots[0] = newLeftPage.size;
        return new STreeNode(newPages, newKnots, this.size);
    };
    STreeNode.prototype.splitLeft = function (pageIndex) {
        var oldPages = this.pages;
        var newPages = new Array(pageIndex + 1);
        for (var i = 0; i < pageIndex + 1; i += 1) {
            newPages[i] = oldPages[i];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(pageIndex);
        for (var i = 0; i < pageIndex; i += 1) {
            newKnots[i] = oldKnots[i];
        }
        var newSize = 0;
        for (var i = 0; i <= pageIndex; i += 1) {
            newSize += newPages[i].size;
        }
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.splitRight = function (pageIndex) {
        var oldPages = this.pages;
        var newArity = oldPages.length - (pageIndex + 1);
        var newPages = new Array(newArity);
        for (var i = 0; i < newArity; i += 1) {
            newPages[i] = oldPages[i + (pageIndex + 1)];
        }
        var newKnots = new Array(newArity - 1);
        var newSize;
        if (newArity > 0) {
            newSize = newPages[0].size;
            for (var i = 1; i < newArity; i += 1) {
                newKnots[i - 1] = newSize;
                newSize += newPages[i].size;
            }
        }
        else {
            newSize = 0;
        }
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.forEach = function (callback, thisArg, offset, tree) {
        for (var i = 0; i < this.pages.length; i += 1) {
            var page = this.pages[i];
            var result = page.forEach(callback, thisArg, offset, tree);
            if (result !== undefined) {
                return result;
            }
            offset += page.size;
        }
        return undefined;
    };
    STreeNode.prototype.entries = function () {
        return new STreeNodeCursor(this.pages);
    };
    STreeNode.prototype.reverseEntries = function () {
        return new STreeNodeCursor(this.pages, this.size, this.pages.length);
    };
    STreeNode.prototype.toValue = function () {
        var record = Record.empty(1 + this.pages.length + this.knots.length);
        record.attr('snode', Record.empty(1).slot('size', this.size));
        for (var i = 0; i < this.pages.length; i += 1) {
            if (i > 0) {
                record.push(Record.empty(1).attr('knot', Record.empty(1).slot('index', this.knots[i - 1])));
            }
            record.push(this.pages[i].toValue());
        }
        return record;
    };
    STreeNode.prototype.lookup = function (index) {
        var lo = 0;
        var hi = this.knots.length - 1;
        while (lo <= hi) {
            var mid = (lo + hi) >>> 1;
            if (index > this.knots[mid]) {
                lo = mid + 1;
            }
            else if (index < this.knots[mid]) {
                hi = mid - 1;
            }
            else {
                return mid;
            }
        }
        return -(lo + 1);
    };
    return STreeNode;
}(STreePage));
var STreeNodeCursor = (function (_super) {
    __extends(STreeNodeCursor, _super);
    function STreeNodeCursor(pages, index, pageIndex, subCursor) {
        return _super.call(this, pages, index, pageIndex, subCursor) || this;
    }
    STreeNodeCursor.prototype.pageSize = function (page) {
        return page.size;
    };
    STreeNodeCursor.prototype.pageCursor = function (page) {
        return page.entries();
    };
    STreeNodeCursor.prototype.reversePageCursor = function (page) {
        return page.reverseEntries();
    };
    return STreeNodeCursor;
}(NodeCursor));
//# sourceMappingURL=data:application/json;base64,

var UriCache = (function () {
    function UriCache(base, size) {
        if (size === void 0) { size = 32; }
        this.base = base;
        this.resolveCache = new HashGenCacheMap(size);
        this.unresolveCache = new HashGenCacheMap(size);
    }
    UriCache.prototype.resolve = function (relative) {
        relative = Uri.fromAny(relative);
        var absolute = this.resolveCache.get(relative);
        if (absolute === undefined) {
            absolute = this.base.resolve(relative);
            this.resolveCache.set(relative, absolute);
        }
        return absolute;
    };
    UriCache.prototype.unresolve = function (absolute) {
        absolute = Uri.fromAny(absolute);
        var relative = this.unresolveCache.get(absolute);
        if (relative === undefined) {
            relative = this.base.unresolve(absolute);
            this.unresolveCache.set(absolute, relative);
        }
        return relative;
    };
    return UriCache;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJpLWNhY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXJpLWNhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRCxPQUFPLEVBQVMsR0FBRyxFQUFDLE1BQU0sT0FBTyxDQUFDO0FBRWxDO0lBUUUsa0JBQVksSUFBUyxFQUFFLElBQWlCO1FBQWpCLHFCQUFBLEVBQUEsU0FBaUI7UUFDdEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCwwQkFBTyxHQUFQLFVBQVEsUUFBZ0I7UUFDdEIsUUFBUSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQzFCLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsNEJBQVMsR0FBVCxVQUFVLFFBQWdCO1FBQ3hCLFFBQVEsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pELElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMxQixRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUNILGVBQUM7QUFBRCxDQUFDLEFBakNELElBaUNDIn0=

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2xDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDaEMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUM5QixPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBR2xDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFaEMsT0FBTyxFQUFDLEtBQUssRUFBRSxXQUFXLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDM0MsT0FBTyxFQUFTLFlBQVksRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUM5QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRXBDLE9BQU8sRUFBZSxTQUFTLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFckQsT0FBTyxFQUFVLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUNyQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQVcsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQ3hDLE9BQU8sRUFBWSxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDM0MsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFVLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUNyQyxPQUFPLEVBQVUsSUFBSSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBQ3JDLE9BQU8sRUFBUyxHQUFHLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFDbEMsT0FBTyxFQUFVLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUNyQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsY0FBYyxZQUFZLENBQUM7QUFDM0IsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUM1QixjQUFjLFFBQVEsQ0FBQztBQUN2QixPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFaEMsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQUMsVUFBVSxFQUFFLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRzlCLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUN6QyxPQUFPLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUV6QyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFckQsT0FBTyxFQWFMLEdBQUcsRUFDSCxTQUFTLEVBQ1QsWUFBWSxFQUNaLE9BQU8sRUFDUCxPQUFPLEVBQ1AsT0FBTyxFQUNQLE9BQU8sRUFDUCxjQUFjLEVBQ2QsUUFBUSxFQUNSLGVBQWUsRUFDZixXQUFXLEdBQ1osTUFBTSxPQUFPLENBQUM7QUFDZixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxhQUFhLENBQUMifQ==

var Envelope = (function () {
    function Envelope() {
    }
    Object.defineProperty(Envelope.prototype, "tag", {
        get: function () {
            return this.constructor.tag;
        },
        enumerable: true,
        configurable: true
    });
    Envelope.prototype.prio = function (prio) {
        if (prio === undefined) {
            return 0;
        }
        else {
            return this;
        }
    };
    Envelope.prototype.rate = function (rate) {
        if (rate === undefined) {
            return 0;
        }
        else {
            return this;
        }
    };
    Envelope.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    Object.defineProperty(Envelope, "tag", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Envelope.fromValue = function (value) {
        switch (value.tag) {
            case 'event': return EventMessage.fromValue(value);
            case 'command': return CommandMessage.fromValue(value);
            case 'link': return LinkRequest.fromValue(value);
            case 'linked': return LinkedResponse.fromValue(value);
            case 'sync': return SyncRequest.fromValue(value);
            case 'synced': return SyncedResponse.fromValue(value);
            case 'unlink': return UnlinkRequest.fromValue(value);
            case 'unlinked': return UnlinkedResponse.fromValue(value);
            case 'auth': return AuthRequest.fromValue(value);
            case 'authed': return AuthedResponse.fromValue(value);
            case 'deauth': return DeauthRequest.fromValue(value);
            case 'deauthed': return DeauthedResponse.fromValue(value);
            default: return undefined;
        }
    };
    Envelope.parseRecon = function (input) {
        return Envelope.fromValue(Value.parseRecon(input));
    };
    return Envelope;
}());
var HostEnvelope = (function (_super) {
    __extends(HostEnvelope, _super);
    function HostEnvelope(body) {
        var _this = _super.call(this) || this;
        _this._body = body;
        return _this;
    }
    HostEnvelope.prototype.node = function (node) {
        if (node === undefined) {
            return Uri.Empty;
        }
        else {
            return this;
        }
    };
    HostEnvelope.prototype.lane = function (lane) {
        if (lane === undefined) {
            return Uri.Empty;
        }
        else {
            return this;
        }
    };
    HostEnvelope.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(body);
        }
    };
    HostEnvelope.prototype.toValue = function () {
        return Attr$1.of(this.tag).concat(this._body);
    };
    HostEnvelope.fromValue = function (value, E) {
        var header = value.header(E.tag);
        if (header.isDefined()) {
            var body = value.body();
            return new E(body);
        }
        return undefined;
    };
    return HostEnvelope;
}(Envelope));
var LaneEnvelope = (function (_super) {
    __extends(LaneEnvelope, _super);
    function LaneEnvelope(node, lane, body) {
        var _this = _super.call(this) || this;
        _this._node = node;
        _this._lane = lane;
        _this._body = body;
        return _this;
    }
    LaneEnvelope.prototype.node = function (node) {
        if (node === undefined) {
            return this._node;
        }
        else {
            node = Uri.fromAny(node);
            return this.copy(node, this._lane, this._body);
        }
    };
    LaneEnvelope.prototype.lane = function (lane) {
        if (lane === undefined) {
            return this._lane;
        }
        else {
            lane = Uri.fromAny(lane);
            return this.copy(this._node, lane, this._body);
        }
    };
    LaneEnvelope.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._node, this._lane, body);
        }
    };
    LaneEnvelope.prototype.toValue = function () {
        var header = Record.empty(2)
            .slot('node', this._node.toUri())
            .slot('lane', this._lane.toUri());
        return Attr$1.of(this.tag, header).concat(this._body);
    };
    LaneEnvelope.fromValue = function (value, E) {
        var node;
        var lane;
        var header = value.header(E.tag);
        header.forEach(function (item, index) {
            if (item.key instanceof Text$1) {
                var key = item.key.value;
                if (key === 'node') {
                    node = item.cast(Form.Uri, node);
                }
                else if (key === 'lane') {
                    lane = item.cast(Form.Uri, lane);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    node = item.cast(Form.Uri, node);
                }
                else if (index === 1) {
                    lane = item.cast(Form.Uri, lane);
                }
            }
        }, this);
        if (node && lane) {
            var body = value.body();
            return new E(node, lane, body);
        }
        return undefined;
    };
    return LaneEnvelope;
}(Envelope));
var LinkEnvelope = (function (_super) {
    __extends(LinkEnvelope, _super);
    function LinkEnvelope(node, lane, prio, rate, body) {
        var _this = _super.call(this) || this;
        _this._node = node;
        _this._lane = lane;
        _this._prio = prio;
        _this._rate = rate;
        _this._body = body;
        return _this;
    }
    LinkEnvelope.prototype.node = function (node) {
        if (node === undefined) {
            return this._node;
        }
        else {
            node = Uri.fromAny(node);
            return this.copy(node, this._lane, this._prio, this._rate, this._body);
        }
    };
    LinkEnvelope.prototype.lane = function (lane) {
        if (lane === undefined) {
            return this._lane;
        }
        else {
            lane = Uri.fromAny(lane);
            return this.copy(this._node, lane, this._prio, this._rate, this._body);
        }
    };
    LinkEnvelope.prototype.prio = function (prio) {
        if (prio === undefined) {
            return this._prio;
        }
        else {
            return this.copy(this._node, this._lane, prio, this._rate, this._body);
        }
    };
    LinkEnvelope.prototype.rate = function (rate) {
        if (rate === undefined) {
            return this._rate;
        }
        else {
            return this.copy(this._node, this._lane, this._prio, rate, this._body);
        }
    };
    LinkEnvelope.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._node, this._lane, this._prio, this._rate, body);
        }
    };
    LinkEnvelope.prototype.toValue = function () {
        var header = Record.empty(4)
            .slot('node', this._node.toUri())
            .slot('lane', this._lane.toUri());
        if (this._prio) {
            header.slot('prio', this._prio);
        }
        if (this._rate) {
            header.slot('rate', this._rate);
        }
        return Attr$1.of(this.tag, header).concat(this._body);
    };
    LinkEnvelope.fromValue = function (value, E) {
        var node;
        var lane;
        var prio = 0;
        var rate = 0;
        var header = value.header(E.tag);
        header.forEach(function (item, index) {
            if (item.key instanceof Text$1) {
                var key = item.key.value;
                if (key === 'node') {
                    node = item.cast(Form.Uri, node);
                }
                else if (key === 'lane') {
                    lane = item.cast(Form.Uri, lane);
                }
                else if (key === 'prio') {
                    prio = item.numberValue(prio);
                }
                else if (key === 'rate') {
                    rate = item.numberValue(rate);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    node = item.cast(Form.Uri, node);
                }
                else if (index === 1) {
                    lane = item.cast(Form.Uri, lane);
                }
            }
        }, this);
        if (node && lane) {
            var body = value.body();
            return new E(node, lane, prio, rate, body);
        }
        return undefined;
    };
    return LinkEnvelope;
}(Envelope));
var EventMessage = (function (_super) {
    __extends(EventMessage, _super);
    function EventMessage(node, lane, body) {
        return _super.call(this, node, lane, body) || this;
    }
    EventMessage.prototype.copy = function (node, lane, body) {
        return new EventMessage(node, lane, body);
    };
    EventMessage.fromValue = function (value) {
        return LaneEnvelope.fromValue(value, EventMessage);
    };
    Object.defineProperty(EventMessage, "tag", {
        get: function () {
            return 'event';
        },
        enumerable: true,
        configurable: true
    });
    EventMessage.of = function (node, lane, body) {
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new EventMessage(node, lane, body);
    };
    return EventMessage;
}(LaneEnvelope));
var CommandMessage = (function (_super) {
    __extends(CommandMessage, _super);
    function CommandMessage(node, lane, body) {
        return _super.call(this, node, lane, body) || this;
    }
    CommandMessage.prototype.copy = function (node, lane, body) {
        return new CommandMessage(node, lane, body);
    };
    CommandMessage.fromValue = function (value) {
        return LaneEnvelope.fromValue(value, CommandMessage);
    };
    Object.defineProperty(CommandMessage, "tag", {
        get: function () {
            return 'command';
        },
        enumerable: true,
        configurable: true
    });
    CommandMessage.of = function (node, lane, body) {
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new CommandMessage(node, lane, body);
    };
    return CommandMessage;
}(LaneEnvelope));
var LinkRequest = (function (_super) {
    __extends(LinkRequest, _super);
    function LinkRequest(node, lane, prio, rate, body) {
        return _super.call(this, node, lane, prio, rate, body) || this;
    }
    LinkRequest.prototype.copy = function (node, lane, prio, rate, body) {
        return new LinkRequest(node, lane, prio, rate, body);
    };
    LinkRequest.fromValue = function (value) {
        return LinkEnvelope.fromValue(value, LinkRequest);
    };
    Object.defineProperty(LinkRequest, "tag", {
        get: function () {
            return 'link';
        },
        enumerable: true,
        configurable: true
    });
    LinkRequest.of = function (node, lane, prio, rate, body) {
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new LinkRequest(node, lane, prio, rate, body);
    };
    return LinkRequest;
}(LinkEnvelope));
var LinkedResponse = (function (_super) {
    __extends(LinkedResponse, _super);
    function LinkedResponse(node, lane, prio, rate, body) {
        return _super.call(this, node, lane, prio, rate, body) || this;
    }
    LinkedResponse.prototype.copy = function (node, lane, prio, rate, body) {
        return new LinkedResponse(node, lane, prio, rate, body);
    };
    LinkedResponse.fromValue = function (value) {
        return LinkEnvelope.fromValue(value, LinkedResponse);
    };
    Object.defineProperty(LinkedResponse, "tag", {
        get: function () {
            return 'linked';
        },
        enumerable: true,
        configurable: true
    });
    LinkedResponse.of = function (node, lane, prio, rate, body) {
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new LinkedResponse(node, lane, prio, rate, body);
    };
    return LinkedResponse;
}(LinkEnvelope));
var SyncRequest = (function (_super) {
    __extends(SyncRequest, _super);
    function SyncRequest(node, lane, prio, rate, body) {
        return _super.call(this, node, lane, prio, rate, body) || this;
    }
    SyncRequest.prototype.copy = function (node, lane, prio, rate, body) {
        return new SyncRequest(node, lane, prio, rate, body);
    };
    SyncRequest.fromValue = function (value) {
        return LinkEnvelope.fromValue(value, SyncRequest);
    };
    Object.defineProperty(SyncRequest, "tag", {
        get: function () {
            return 'sync';
        },
        enumerable: true,
        configurable: true
    });
    SyncRequest.of = function (node, lane, prio, rate, body) {
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new SyncRequest(node, lane, prio, rate, body);
    };
    return SyncRequest;
}(LinkEnvelope));
var SyncedResponse = (function (_super) {
    __extends(SyncedResponse, _super);
    function SyncedResponse(node, lane, body) {
        return _super.call(this, node, lane, body) || this;
    }
    SyncedResponse.prototype.copy = function (node, lane, body) {
        return new SyncedResponse(node, lane, body);
    };
    SyncedResponse.fromValue = function (value) {
        return LaneEnvelope.fromValue(value, SyncedResponse);
    };
    Object.defineProperty(SyncedResponse, "tag", {
        get: function () {
            return 'synced';
        },
        enumerable: true,
        configurable: true
    });
    SyncedResponse.of = function (node, lane, body) {
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new SyncedResponse(node, lane, body);
    };
    return SyncedResponse;
}(LaneEnvelope));
var UnlinkRequest = (function (_super) {
    __extends(UnlinkRequest, _super);
    function UnlinkRequest(node, lane, body) {
        return _super.call(this, node, lane, body) || this;
    }
    UnlinkRequest.prototype.copy = function (node, lane, body) {
        return new UnlinkRequest(node, lane, body);
    };
    UnlinkRequest.fromValue = function (value) {
        return LaneEnvelope.fromValue(value, UnlinkRequest);
    };
    Object.defineProperty(UnlinkRequest, "tag", {
        get: function () {
            return 'unlink';
        },
        enumerable: true,
        configurable: true
    });
    UnlinkRequest.of = function (node, lane, body) {
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new UnlinkRequest(node, lane, body);
    };
    return UnlinkRequest;
}(LaneEnvelope));
var UnlinkedResponse = (function (_super) {
    __extends(UnlinkedResponse, _super);
    function UnlinkedResponse(node, lane, body) {
        return _super.call(this, node, lane, body) || this;
    }
    UnlinkedResponse.prototype.copy = function (node, lane, body) {
        return new UnlinkedResponse(node, lane, body);
    };
    UnlinkedResponse.fromValue = function (value) {
        return LaneEnvelope.fromValue(value, UnlinkedResponse);
    };
    Object.defineProperty(UnlinkedResponse, "tag", {
        get: function () {
            return 'unlinked';
        },
        enumerable: true,
        configurable: true
    });
    UnlinkedResponse.of = function (node, lane, body) {
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new UnlinkedResponse(node, lane, body);
    };
    return UnlinkedResponse;
}(LaneEnvelope));
var AuthRequest = (function (_super) {
    __extends(AuthRequest, _super);
    function AuthRequest(body) {
        return _super.call(this, body) || this;
    }
    AuthRequest.prototype.copy = function (body) {
        return new AuthRequest(body);
    };
    AuthRequest.fromValue = function (value) {
        return HostEnvelope.fromValue(value, AuthRequest);
    };
    Object.defineProperty(AuthRequest, "tag", {
        get: function () {
            return 'auth';
        },
        enumerable: true,
        configurable: true
    });
    AuthRequest.of = function (body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new AuthRequest(body);
    };
    return AuthRequest;
}(HostEnvelope));
var AuthedResponse = (function (_super) {
    __extends(AuthedResponse, _super);
    function AuthedResponse(body) {
        return _super.call(this, body) || this;
    }
    AuthedResponse.prototype.copy = function (body) {
        return new AuthedResponse(body);
    };
    AuthedResponse.fromValue = function (value) {
        return HostEnvelope.fromValue(value, AuthedResponse);
    };
    Object.defineProperty(AuthedResponse, "tag", {
        get: function () {
            return 'authed';
        },
        enumerable: true,
        configurable: true
    });
    AuthedResponse.of = function (body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new AuthedResponse(body);
    };
    return AuthedResponse;
}(HostEnvelope));
var DeauthRequest = (function (_super) {
    __extends(DeauthRequest, _super);
    function DeauthRequest(body) {
        return _super.call(this, body) || this;
    }
    DeauthRequest.prototype.copy = function (body) {
        return new DeauthRequest(body);
    };
    DeauthRequest.fromValue = function (value) {
        return HostEnvelope.fromValue(value, DeauthRequest);
    };
    Object.defineProperty(DeauthRequest, "tag", {
        get: function () {
            return 'deauth';
        },
        enumerable: true,
        configurable: true
    });
    DeauthRequest.of = function (body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new DeauthRequest(body);
    };
    return DeauthRequest;
}(HostEnvelope));
var DeauthedResponse = (function (_super) {
    __extends(DeauthedResponse, _super);
    function DeauthedResponse(body) {
        return _super.call(this, body) || this;
    }
    DeauthedResponse.prototype.copy = function (body) {
        return new DeauthedResponse(body);
    };
    DeauthedResponse.fromValue = function (value) {
        return HostEnvelope.fromValue(value, DeauthedResponse);
    };
    Object.defineProperty(DeauthedResponse, "tag", {
        get: function () {
            return 'deauthed';
        },
        enumerable: true,
        configurable: true
    });
    DeauthedResponse.of = function (body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new DeauthedResponse(body);
    };
    return DeauthedResponse;
}(HostEnvelope));

//# sourceMappingURL=data:application/json;base64,

var MAX_RECONNECT_TIMEOUT = 30000;
var IDLE_TIMEOUT = 1000;
var SEND_BUFFER_SIZE = 1024;
var RemoteHost = (function () {
    function RemoteHost(context, hostUri, options) {
        if (options === void 0) { options = {}; }
        this._context = context;
        this._hostUri = hostUri;
        this._options = options;
        this._downlinks = new BTree();
        this._downlinkCount = 0;
        this._authenticated = false;
        this._session = Value.Absent;
        this._uriCache = new UriCache(hostUri);
        this._sendBuffer = [];
        this._reconnectTimer = 0;
        this._reconnectTimeout = 0;
        this._idleTimer = 0;
        this.open = this.open.bind(this);
        this.checkIdle = this.checkIdle.bind(this);
    }
    Object.defineProperty(RemoteHost.prototype, "hostUri", {
        get: function () {
            return this._hostUri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteHost.prototype, "credentials", {
        get: function () {
            return this._options.credentials || Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteHost.prototype, "maxReconnectTimeout", {
        get: function () {
            return this._options.maxReconnectTimeout || MAX_RECONNECT_TIMEOUT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteHost.prototype, "idleTimeout", {
        get: function () {
            return this._options.idleTimeout || IDLE_TIMEOUT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteHost.prototype, "sendBufferSize", {
        get: function () {
            return this._options.sendBufferSize || SEND_BUFFER_SIZE;
        },
        enumerable: true,
        configurable: true
    });
    RemoteHost.prototype.isAuthenticated = function () {
        return this._authenticated;
    };
    Object.defineProperty(RemoteHost.prototype, "session", {
        get: function () {
            return this._session;
        },
        enumerable: true,
        configurable: true
    });
    RemoteHost.prototype.isIdle = function () {
        return !this._sendBuffer.length && !this._downlinkCount;
    };
    RemoteHost.prototype.resolve = function (relative) {
        return this._uriCache.resolve(relative);
    };
    RemoteHost.prototype.unresolve = function (absolute) {
        return this._uriCache.unresolve(absolute);
    };
    RemoteHost.prototype.authenticate = function (credentials) {
        credentials = Value.fromAny(credentials);
        if (!credentials.equals(this._options.credentials)) {
            this._options.credentials = credentials;
            if (this.isConnected()) {
                var request = AuthRequest.of(credentials);
                this.push(request);
            }
            else {
                this.open();
            }
        }
    };
    RemoteHost.prototype.openDownlink = function (downlink) {
        this.clearIdle();
        var nodeUri = this.resolve(downlink.nodeUri());
        var laneUri = downlink.laneUri();
        if (!this._downlinkCount) {
            this.open();
        }
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (!nodeDownlinks) {
            nodeDownlinks = new BTree();
            this._downlinks.set(nodeUri, nodeDownlinks);
        }
        if (nodeDownlinks.get(laneUri)) {
            throw new Error('duplicate downlink');
        }
        nodeDownlinks.set(laneUri, downlink);
        this._downlinkCount += 1;
        downlink.openUp(this);
        if (this.isConnected()) {
            downlink.hostDidConnect(this);
        }
    };
    RemoteHost.prototype.unlinkDownlink = function (downlink) {
        var nodeUri = this.resolve(downlink.nodeUri());
        var laneUri = downlink.laneUri();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks && nodeDownlinks.get(laneUri) && this.isConnected()) {
            var request = UnlinkRequest.of(this.unresolve(nodeUri), laneUri);
            downlink.onUnlinkRequest(request, this);
            this.push(request);
        }
    };
    RemoteHost.prototype.closeDownlink = function (downlink) {
        var nodeUri = this.resolve(downlink.nodeUri());
        var laneUri = downlink.laneUri();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            if (nodeDownlinks.get(laneUri)) {
                this._downlinkCount -= 1;
                nodeDownlinks.delete(laneUri);
                if (nodeDownlinks.isEmpty()) {
                    this._downlinks.delete(nodeUri);
                }
                if (!this._downlinkCount) {
                    this.watchIdle();
                }
                downlink.closeUp(this);
            }
        }
    };
    RemoteHost.prototype.command = function (nodeUri, laneUri, body) {
        nodeUri = Uri.fromAny(nodeUri);
        nodeUri = this.resolve(nodeUri);
        laneUri = Uri.fromAny(laneUri);
        body = Value.fromAny(body);
        var message = CommandMessage.of(this.unresolve(nodeUri), laneUri, body);
        this.push(message);
    };
    RemoteHost.prototype.onEnvelope = function (envelope) {
        if (envelope instanceof EventMessage) {
            this.onEventMessage(envelope);
        }
        else if (envelope instanceof CommandMessage) {
            this.onCommandMessage(envelope);
        }
        else if (envelope instanceof LinkRequest) {
            this.onLinkRequest(envelope);
        }
        else if (envelope instanceof LinkedResponse) {
            this.onLinkedResponse(envelope);
        }
        else if (envelope instanceof SyncRequest) {
            this.onSyncRequest(envelope);
        }
        else if (envelope instanceof SyncedResponse) {
            this.onSyncedResponse(envelope);
        }
        else if (envelope instanceof UnlinkRequest) {
            this.onUnlinkRequest(envelope);
        }
        else if (envelope instanceof UnlinkedResponse) {
            this.onUnlinkedResponse(envelope);
        }
        else if (envelope instanceof AuthRequest) {
            this.onAuthRequest(envelope);
        }
        else if (envelope instanceof AuthedResponse) {
            this.onAuthedResponse(envelope);
        }
        else if (envelope instanceof DeauthRequest) {
            this.onDeauthRequest(envelope);
        }
        else if (envelope instanceof DeauthedResponse) {
            this.onDeauthedResponse(envelope);
        }
        else {
            this.onUnknownEnvelope(envelope);
        }
    };
    RemoteHost.prototype.onEventMessage = function (message) {
        var nodeUri = this.resolve(message.node());
        var laneUri = message.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedMessage = message.node(nodeUri);
                downlink.onEventMessage(resolvedMessage, this);
            }
        }
    };
    RemoteHost.prototype.onCommandMessage = function (message) {
    };
    RemoteHost.prototype.onLinkRequest = function (request) {
    };
    RemoteHost.prototype.onLinkedResponse = function (response) {
        var nodeUri = this.resolve(response.node());
        var laneUri = response.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedResponse = response.node(nodeUri);
                downlink.onLinkedResponse(resolvedResponse, this);
            }
        }
    };
    RemoteHost.prototype.onSyncRequest = function (request) {
    };
    RemoteHost.prototype.onSyncedResponse = function (response) {
        var nodeUri = this.resolve(response.node());
        var laneUri = response.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedResponse = response.node(nodeUri);
                downlink.onSyncedResponse(resolvedResponse, this);
            }
        }
    };
    RemoteHost.prototype.onUnlinkRequest = function (request) {
    };
    RemoteHost.prototype.onUnlinkedResponse = function (response) {
        var nodeUri = this.resolve(response.node());
        var laneUri = response.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedResponse = response.node(nodeUri);
                downlink.onUnlinkedResponse(resolvedResponse, this);
            }
        }
    };
    RemoteHost.prototype.onAuthRequest = function (request) {
    };
    RemoteHost.prototype.onAuthedResponse = function (response) {
        this._authenticated = true;
        this._session = response.body();
        this._context.hostDidAuthenticate(response.body(), this);
    };
    RemoteHost.prototype.onDeauthRequest = function (request) {
    };
    RemoteHost.prototype.onDeauthedResponse = function (response) {
        this._authenticated = false;
        this._session = Value.Absent;
        this._context.hostDidDeauthenticate(response.body(), this);
    };
    RemoteHost.prototype.onUnknownEnvelope = function (envelope) {
    };
    RemoteHost.prototype.onConnect = function () {
        this._reconnectTimeout = 0;
        this._context.hostDidConnect(this);
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.hostDidConnect(this);
            }, this);
        }, this);
    };
    RemoteHost.prototype.onDisconnect = function () {
        this._authenticated = false;
        this._session = Value.Absent;
        this._context.hostDidDisconnect(this);
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.hostDidDisconnect(this);
            }, this);
        }, this);
    };
    RemoteHost.prototype.onError = function (error) {
        this._context.hostDidFail(error, this);
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.hostDidFail(error, this);
            }, this);
        }, this);
    };
    RemoteHost.prototype.reconnect = function () {
        if (!this._reconnectTimer) {
            if (!this._reconnectTimeout) {
                this._reconnectTimeout = Math.floor(500 + 1000 * Math.random());
            }
            else {
                this._reconnectTimeout = Math.min(Math.floor(1.8 * this._reconnectTimeout), this.maxReconnectTimeout);
            }
            this._reconnectTimer = setTimeout(this.open, this._reconnectTimeout);
        }
    };
    RemoteHost.prototype.clearReconnect = function () {
        if (this._reconnectTimer) {
            clearTimeout(this._reconnectTimer);
            this._reconnectTimer = 0;
        }
    };
    RemoteHost.prototype.watchIdle = function () {
        if (!this._idleTimer && this.isConnected() && this.isIdle()) {
            this._idleTimer = setTimeout(this.checkIdle, this.idleTimeout);
        }
    };
    RemoteHost.prototype.clearIdle = function () {
        if (this._idleTimer) {
            clearTimeout(this._idleTimer);
            this._idleTimer = 0;
        }
    };
    RemoteHost.prototype.checkIdle = function () {
        if (this.isConnected() && this.isIdle()) {
            this.close();
        }
    };
    RemoteHost.prototype.close = function () {
        this._context.closeHost(this);
    };
    RemoteHost.prototype.closeUp = function () {
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.closeUp(this);
            }, this);
        }, this);
    };
    return RemoteHost;
}());

//# sourceMappingURL=data:application/json;base64,

var LINKING = 1;
var LINKED = 2;
var SYNCING = 4;
var SYNCED = 8;
var UNLINKING = 16;
var DownlinkFlags;
(function (DownlinkFlags) {
    DownlinkFlags[DownlinkFlags["KeepLinked"] = 1] = "KeepLinked";
    DownlinkFlags[DownlinkFlags["KeepSynced"] = 2] = "KeepSynced";
    DownlinkFlags[DownlinkFlags["KeepLinkedSynced"] = 3] = "KeepLinkedSynced";
})(DownlinkFlags || (DownlinkFlags = {}));
var DownlinkModel = (function () {
    function DownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body) {
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.Absent; }
        this._context = context;
        this._hostUri = hostUri;
        this._nodeUri = nodeUri;
        this._laneUri = laneUri;
        this._prio = prio;
        this._rate = rate;
        this._body = body;
        this._views = [];
        this._host = null;
        this._status = 0;
    }
    DownlinkModel.prototype.hostUri = function () {
        return this._hostUri;
    };
    DownlinkModel.prototype.nodeUri = function () {
        return this._nodeUri;
    };
    DownlinkModel.prototype.laneUri = function () {
        return this._laneUri;
    };
    DownlinkModel.prototype.prio = function () {
        return this._prio;
    };
    DownlinkModel.prototype.rate = function () {
        return this._rate;
    };
    DownlinkModel.prototype.body = function () {
        return this._body;
    };
    DownlinkModel.prototype.keepLinked = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            if (this._views[i].keepLinked()) {
                return true;
            }
        }
        return false;
    };
    DownlinkModel.prototype.keepSynced = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            if (this._views[i].keepSynced()) {
                return true;
            }
        }
        return false;
    };
    DownlinkModel.prototype.isConnected = function () {
        return !!(this._host && this._host.isConnected());
    };
    DownlinkModel.prototype.isAuthenticated = function () {
        return !!(this._host && this._host.isAuthenticated());
    };
    DownlinkModel.prototype.isLinked = function () {
        return (this._status & LINKED) !== 0;
    };
    DownlinkModel.prototype.isSynced = function () {
        return (this._status & SYNCED) !== 0;
    };
    Object.defineProperty(DownlinkModel.prototype, "session", {
        get: function () {
            return this._host ? this._host.session : Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    DownlinkModel.prototype.addDownlink = function (view) {
        this._views.push(view);
    };
    DownlinkModel.prototype.removeDownlink = function (view) {
        for (var i = 0; i < this._views.length; i += 1) {
            if (this._views[i] === view) {
                this._views.splice(i, 1);
                view.closeUp();
            }
        }
        if (this._views.length === 0) {
            this.unlink();
        }
    };
    DownlinkModel.prototype.onEventMessage = function (message, host) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onEventMessage(message);
        }
    };
    DownlinkModel.prototype.onCommandMessage = function (body) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onCommandMessage(body);
        }
    };
    DownlinkModel.prototype.onLinkRequest = function (request) {
        this._status |= LINKING;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onLinkRequest(request);
        }
    };
    DownlinkModel.prototype.onLinkedResponse = function (response, host) {
        this._status = this._status & ~LINKING | LINKED;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onLinkedResponse(response);
        }
    };
    DownlinkModel.prototype.onSyncRequest = function (request) {
        this._status |= SYNCING;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onSyncRequest(request);
        }
    };
    DownlinkModel.prototype.onSyncedResponse = function (response, host) {
        this._status = this._status & ~SYNCING | SYNCED;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onSyncedResponse(response);
        }
    };
    DownlinkModel.prototype.onUnlinkRequest = function (request, host) {
        this._status = this._status & ~(LINKING | SYNCING) | UNLINKING;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onUnlinkRequest(request);
        }
    };
    DownlinkModel.prototype.onUnlinkedResponse = function (response, host) {
        this._status &= ~UNLINKING;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onUnlinkedResponse(response);
        }
        if (this._status === 0) {
            this.close();
        }
    };
    DownlinkModel.prototype.hostDidConnect = function (host) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].hostDidConnect();
        }
        var nodeUri = this._host.unresolve(this._nodeUri);
        var request;
        if (this.keepSynced()) {
            request = SyncRequest.of(nodeUri, this._laneUri, this._prio, this._rate, this._body);
            this.onSyncRequest(request);
        }
        else {
            request = LinkRequest.of(nodeUri, this._laneUri, this._prio, this._rate, this._body);
            this.onLinkRequest(request);
        }
        this._host.push(request);
    };
    DownlinkModel.prototype.hostDidDisconnect = function (host) {
        this._status = 0;
        var keepLinked = false;
        for (var i = 0; i < this._views.length; i += 1) {
            var view = this._views[i];
            view.hostDidDisconnect();
            keepLinked = keepLinked || view.keepLinked();
        }
        if (!keepLinked) {
            this.close();
        }
    };
    DownlinkModel.prototype.hostDidFail = function (error, host) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].hostDidFail(error);
        }
    };
    DownlinkModel.prototype.command = function (body) {
        body = Value.fromAny(body);
        this.onCommandMessage(body);
        this._host.command(this._nodeUri, this._laneUri, body);
    };
    DownlinkModel.prototype.unlink = function () {
        this._status = UNLINKING;
        this._context.unlinkDownlink(this);
    };
    DownlinkModel.prototype.close = function () {
        this._context.closeDownlink(this);
    };
    DownlinkModel.prototype.openUp = function (host) {
        this._host = host;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].openUp(host);
        }
    };
    DownlinkModel.prototype.closeUp = function () {
        var views = this._views;
        this._views = [];
        for (var i = 0; i < views.length; i += 1) {
            views[i].closeUp();
        }
    };
    return DownlinkModel;
}());
var Downlink = (function () {
    function Downlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) {
        if (hostUri === void 0) { hostUri = Uri.Empty; }
        if (nodeUri === void 0) { nodeUri = Uri.Empty; }
        if (laneUri === void 0) { laneUri = Uri.Empty; }
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.Absent; }
        if (flags === void 0) { flags = 0; }
        if (delegate === void 0) { delegate = {}; }
        if (init) {
            hostUri = init.hostUri !== undefined ? Uri.fromAny(init.hostUri) : hostUri;
            nodeUri = init.nodeUri !== undefined ? Uri.fromAny(init.nodeUri) : nodeUri;
            laneUri = init.laneUri !== undefined ? Uri.fromAny(init.laneUri) : laneUri;
            prio = init.prio !== undefined ? init.prio : prio;
            rate = init.rate !== undefined ? init.rate : rate;
            body = init.body !== undefined ? Value.fromAny(init.body) : body;
            delegate.onEvent = init.onEvent || delegate.onEvent;
            delegate.onCommand = init.onCommand || delegate.onCommand;
            delegate.willLink = init.willLink || delegate.willLink;
            delegate.didLink = init.didLink || delegate.didLink;
            delegate.willSync = init.willSync || delegate.willSync;
            delegate.didSync = init.didSync || delegate.didSync;
            delegate.willUnlink = init.willUnlink || delegate.willUnlink;
            delegate.didUnlink = init.didUnlink || delegate.didUnlink;
            delegate.didConnect = init.didConnect || delegate.didConnect;
            delegate.didDisconnect = init.didDisconnect || delegate.didDisconnect;
            delegate.didClose = init.didClose || delegate.didClose;
            delegate.didFail = init.didFail || delegate.didFail;
        }
        this._context = context;
        this._owner = owner;
        this._hostUri = hostUri;
        this._nodeUri = nodeUri;
        this._laneUri = laneUri;
        this._prio = prio;
        this._rate = rate;
        this._body = body;
        this._flags = flags;
        this._model = undefined;
        this.delegate = delegate;
    }
    Downlink.prototype.hostUri = function (hostUri) {
        if (hostUri === undefined) {
            return this._hostUri;
        }
        else {
            hostUri = Uri.fromAny(hostUri);
            return this.copy(this._context, this._owner, hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.nodeUri = function (nodeUri) {
        if (nodeUri === undefined) {
            return this._nodeUri;
        }
        else {
            nodeUri = Uri.fromAny(nodeUri);
            return this.copy(this._context, this._owner, this._hostUri, nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.laneUri = function (laneUri) {
        if (laneUri === undefined) {
            return this._laneUri;
        }
        else {
            laneUri = Uri.fromAny(laneUri);
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, laneUri, this._prio, this._rate, this._body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.prio = function (prio) {
        if (prio === undefined) {
            return this._prio;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, prio, this._rate, this._body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.rate = function (rate) {
        if (rate === undefined) {
            return this._rate;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, rate, this._body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.keepLinked = function (keepLinked) {
        if (keepLinked === undefined) {
            return (this._flags & 1) !== 0;
        }
        else {
            var flags = keepLinked ? this._flags | 1 : this._flags & ~1;
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, flags, this.delegate);
        }
    };
    Downlink.prototype.keepSynced = function (keepSynced) {
        if (keepSynced === undefined) {
            return (this._flags & 2) !== 0;
        }
        else {
            var flags = keepSynced ? this._flags | 2 : this._flags & ~2;
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, flags, this.delegate);
        }
    };
    Downlink.prototype.onEvent = function (onEvent) {
        if (onEvent === undefined) {
            return this.delegate.onEvent || null;
        }
        else {
            this.delegate.onEvent = onEvent || undefined;
            return this;
        }
    };
    Downlink.prototype.onCommand = function (onCommand) {
        if (onCommand === undefined) {
            return this.delegate.onCommand || null;
        }
        else {
            this.delegate.onCommand = onCommand || undefined;
            return this;
        }
    };
    Downlink.prototype.willLink = function (willLink) {
        if (willLink === undefined) {
            return this.delegate.willLink || null;
        }
        else {
            this.delegate.willLink = willLink || undefined;
            return this;
        }
    };
    Downlink.prototype.didLink = function (didLink) {
        if (didLink === undefined) {
            return this.delegate.didLink || null;
        }
        else {
            this.delegate.didLink = didLink || undefined;
            return this;
        }
    };
    Downlink.prototype.willSync = function (willSync) {
        if (willSync === undefined) {
            return this.delegate.willSync || null;
        }
        else {
            this.delegate.willSync = willSync || undefined;
            return this;
        }
    };
    Downlink.prototype.didSync = function (didSync) {
        if (didSync === undefined) {
            return this.delegate.didSync || null;
        }
        else {
            this.delegate.didSync = didSync || undefined;
            return this;
        }
    };
    Downlink.prototype.willUnlink = function (willUnlink) {
        if (willUnlink === undefined) {
            return this.delegate.willUnlink || null;
        }
        else {
            this.delegate.willUnlink = willUnlink || undefined;
            return this;
        }
    };
    Downlink.prototype.didUnlink = function (didUnlink) {
        if (didUnlink === undefined) {
            return this.delegate.didUnlink || null;
        }
        else {
            this.delegate.didUnlink = didUnlink || undefined;
            return this;
        }
    };
    Downlink.prototype.didConnect = function (didConnect) {
        if (didConnect === undefined) {
            return this.delegate.didConnect || null;
        }
        else {
            this.delegate.didConnect = didConnect || undefined;
            return this;
        }
    };
    Downlink.prototype.didDisconnect = function (didDisconnect) {
        if (didDisconnect === undefined) {
            return this.delegate.didDisconnect || null;
        }
        else {
            this.delegate.didDisconnect = didDisconnect || undefined;
            return this;
        }
    };
    Downlink.prototype.didClose = function (didClose) {
        if (didClose === undefined) {
            return this.delegate.didClose || null;
        }
        else {
            this.delegate.didClose = didClose || undefined;
            return this;
        }
    };
    Downlink.prototype.didFail = function (didFail) {
        if (didFail === undefined) {
            return this.delegate.didFail || null;
        }
        else {
            this.delegate.didFail = didFail || undefined;
            return this;
        }
    };
    Downlink.prototype.isConnected = function () {
        return this._model ? this._model.isConnected() : false;
    };
    Downlink.prototype.isAuthenticated = function () {
        return this._model ? this._model.isAuthenticated() : false;
    };
    Downlink.prototype.isLinked = function () {
        return this._model ? this._model.isLinked() : false;
    };
    Downlink.prototype.isSynced = function () {
        return this._model ? this._model.isSynced() : false;
    };
    Downlink.prototype.session = function () {
        return this._model ? this._model.session : Value.Absent;
    };
    Downlink.prototype.onEventMessage = function (message) {
        if (this.delegate.onEvent) {
            this.delegate.onEvent(message.body(), this);
        }
    };
    Downlink.prototype.onCommandMessage = function (body) {
        if (this.delegate.onCommand) {
            this.delegate.onCommand(body, this);
        }
    };
    Downlink.prototype.onLinkRequest = function (request) {
        if (this.delegate.willLink) {
            this.delegate.willLink(this);
        }
    };
    Downlink.prototype.onLinkedResponse = function (response) {
        if (this.delegate.didLink) {
            this.delegate.didLink(this);
        }
    };
    Downlink.prototype.onSyncRequest = function (request) {
        if (this.delegate.willSync) {
            this.delegate.willSync(this);
        }
    };
    Downlink.prototype.onSyncedResponse = function (response) {
        if (this.delegate.didSync) {
            this.delegate.didSync(this);
        }
    };
    Downlink.prototype.onUnlinkRequest = function (request) {
        if (this.delegate.willUnlink) {
            this.delegate.willUnlink(this);
        }
    };
    Downlink.prototype.onUnlinkedResponse = function (response) {
        if (this.delegate.didUnlink) {
            this.delegate.didUnlink(this);
        }
    };
    Downlink.prototype.hostDidConnect = function () {
        if (this.delegate.didConnect) {
            this.delegate.didConnect(this);
        }
    };
    Downlink.prototype.hostDidDisconnect = function () {
        if (this.delegate.didDisconnect) {
            this.delegate.didDisconnect(this);
        }
    };
    Downlink.prototype.hostDidFail = function (error) {
        if (this.delegate.didFail) {
            this.delegate.didFail(error, this);
        }
    };
    Downlink.prototype.command = function (body) {
        this._model.command(body);
    };
    Downlink.prototype.close = function () {
        if (this._owner) {
            this._owner.removeDownlink(this);
        }
        if (this._model) {
            this._model.removeDownlink(this);
        }
    };
    Downlink.prototype.openUp = function (host) {
    };
    Downlink.prototype.closeUp = function () {
        if (this.delegate.didClose) {
            this.delegate.didClose(this);
        }
    };
    Downlink.InitForm = undefined;
    return Downlink;
}());
var DownlinkInitForm = (function (_super) {
    __extends(DownlinkInitForm, _super);
    function DownlinkInitForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DownlinkInitForm.prototype, "tag", {
        get: function () {
            return 'link';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DownlinkInitForm.prototype, "unit", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    DownlinkInitForm.prototype.mold = function (init) {
        if (init) {
            var header = Record.empty();
            if (init.hostUri !== undefined) {
                header.slot('host', Uri.fromAny(init.hostUri).toUri());
            }
            if (init.nodeUri !== undefined) {
                header.slot('node', Uri.fromAny(init.nodeUri).toUri());
            }
            if (init.laneUri !== undefined) {
                header.slot('lane', Uri.fromAny(init.laneUri).toUri());
            }
            if (init.prio !== undefined) {
                header.slot('prio', init.prio);
            }
            if (init.rate !== undefined) {
                header.slot('rate', init.rate);
            }
            if (init.body !== undefined) {
                header.slot('body', init.body);
            }
            if (init.type !== undefined) {
                header.slot('type', init.type);
            }
            return Record.of(Attr$1.of('link', header));
        }
        return Value.Absent;
    };
    DownlinkInitForm.prototype.cast = function (value) {
        var header = value.get('link');
        if (header.isDefined()) {
            var init = {};
            var host = header.get('host');
            if (host.isDefined()) {
                init.hostUri = host.cast(Form.Uri);
            }
            var node = header.get('node');
            if (node.isDefined()) {
                init.nodeUri = node.cast(Form.Uri);
            }
            var lane = header.get('lane');
            if (lane.isDefined()) {
                init.laneUri = lane.cast(Form.Uri);
            }
            var prio = header.get('prio');
            if (prio.isDefined()) {
                init.prio = prio.numberValue();
            }
            var rate = header.get('rate');
            if (rate.isDefined()) {
                init.rate = rate.numberValue();
            }
            var body = header.get('body');
            if (body.isDefined()) {
                init.body = body;
            }
            var type = header.get('type');
            if (type.isDefined()) {
                init.type = type.stringValue();
            }
            return init;
        }
        return undefined;
    };
    return DownlinkInitForm;
}(Form));
Downlink.InitForm = new DownlinkInitForm();
//# sourceMappingURL=data:application/json;base64,

var EventDownlinkModel = (function (_super) {
    __extends(EventDownlinkModel, _super);
    function EventDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body) {
        return _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
    }
    EventDownlinkModel.prototype.type = function () {
        return 'event';
    };
    return EventDownlinkModel;
}(DownlinkModel));
var EventDownlink = (function (_super) {
    __extends(EventDownlink, _super);
    function EventDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) {
        if (flags === void 0) { flags = 1; }
        if (delegate === void 0) { delegate = {}; }
        return _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) || this;
    }
    EventDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) {
        return new EventDownlink(context, owner, undefined, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate);
    };
    EventDownlink.prototype.type = function () {
        return 'event';
    };
    EventDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error('no lane');
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error('no node');
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.base();
            nodeUri = Uri.unresolve(hostUri, nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof EventDownlinkModel)) {
                throw new Error('downlink type mismatch');
            }
            model.addDownlink(this);
        }
        else {
            model = new EventDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body);
            model.addDownlink(this);
            this._context.openDownlink(model);
        }
        this._model = model;
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    return EventDownlink;
}(Downlink));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtZG93bmxpbmsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJldmVudC1kb3dubGluay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFRLEdBQUcsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBTUwsYUFBYSxFQUViLFFBQVEsR0FDVCxNQUFNLFlBQVksQ0FBQztBQVNwQjtJQUF3Qyw4Q0FBYTtJQUluRCw0QkFBWSxPQUF3QixFQUFFLE9BQVksRUFBRSxPQUFZLEVBQUUsT0FBWSxFQUNsRSxJQUFhLEVBQUUsSUFBYSxFQUFFLElBQVk7ZUFDcEQsa0JBQU0sT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0lBQzdELENBQUM7SUFFRCxpQ0FBSSxHQUFKO1FBQ0UsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQVpELENBQXdDLGFBQWEsR0FZcEQ7O0FBRUQ7SUFBbUMseUNBQVE7SUFLekMsdUJBQVksT0FBd0IsRUFBRSxLQUFxQixFQUFFLElBQXdCLEVBQ3pFLE9BQWEsRUFBRSxPQUFhLEVBQUUsT0FBYSxFQUFFLElBQWEsRUFDMUQsSUFBYSxFQUFFLElBQVksRUFBRSxLQUF3QyxFQUNyRSxRQUFvQztRQURQLHNCQUFBLEVBQUEsU0FBd0M7UUFDckUseUJBQUEsRUFBQSxhQUFvQztlQUM5QyxrQkFBTSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDO0lBQzNGLENBQUM7SUFFUyw0QkFBSSxHQUFkLFVBQWUsT0FBd0IsRUFBRSxLQUFnQyxFQUMxRCxPQUFZLEVBQUUsT0FBWSxFQUFFLE9BQVksRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUNwRSxJQUFXLEVBQUUsS0FBYSxFQUFFLFFBQTBCO1FBQ25FLE9BQU8sSUFBSSxhQUFhLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQ3BELElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQVMsQ0FBQztJQUN0RSxDQUFDO0lBRUQsNEJBQUksR0FBSjtRQUNFLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCw0QkFBSSxHQUFKO1FBQ0UsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QixJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzVCO1FBQ0QsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM1QixJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzVCO1FBQ0QsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM1QixJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNyQixPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3pCLE9BQU8sR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUMzQztRQUNELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakUsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksa0JBQWtCLENBQUMsRUFBRTtnQkFDMUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO2FBQzNDO1lBQ0QsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN6QjthQUFNO1lBQ0wsS0FBSyxHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFDeEMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuRSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUEyQixDQUFDO1FBQzFDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQUFDLEFBdkRELENBQW1DLFFBQVEsR0F1RDFDIn0=

var ListDownlinkModel = (function (_super) {
    __extends(ListDownlinkModel, _super);
    function ListDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body, state) {
        if (state === void 0) { state = new STree(); }
        var _this = _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
        _this._state = state;
        return _this;
    }
    ListDownlinkModel.prototype.type = function () {
        return 'list';
    };
    ListDownlinkModel.prototype.isEmpty = function () {
        return this._state.isEmpty();
    };
    Object.defineProperty(ListDownlinkModel.prototype, "length", {
        get: function () {
            return this._state.length;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlinkModel.prototype.get = function (index, id) {
        return this._state.get(index, id) || Value.Absent;
    };
    ListDownlinkModel.prototype.getEntry = function (index, id) {
        return this._state.getEntry(index, id);
    };
    ListDownlinkModel.prototype.set = function (index, newValue, id) {
        if (id !== undefined) {
            index = this._state.lookup(id, index);
            if (index < 0) {
                throw new RangeError('' + id);
            }
        }
        if (index < 0 || index >= this._state.length) {
            throw new RangeError('' + index);
        }
        newValue = this.listWillUpdate(index, newValue);
        var oldEntry = this._state.getEntry(index);
        this._state.set(index, newValue);
        this.listDidUpdate(index, newValue, oldEntry[1]);
        var header = Record.empty(2).slot('id', oldEntry[0]).slot('index', index);
        this.command(Attr$1.of('update', header).concat(newValue));
        return this;
    };
    ListDownlinkModel.prototype.insert = function (index, newValue, id) {
        if (index < 0 || index > this._state.length) {
            throw new RangeError('' + index);
        }
        newValue = this.listWillInsert(index, newValue);
        this._state.insert(index, newValue, id);
        var newEntry = this._state.getEntry(index);
        this.listDidInsert(index, newValue);
        var header = Record.empty(2).slot('id', newEntry[0]).slot('index', index);
        this.command(Attr$1.of('insert', header).concat(newValue));
        return this;
    };
    ListDownlinkModel.prototype.remove = function (index, id) {
        if (id !== undefined) {
            index = this._state.lookup(id, index);
            if (index < 0) {
                throw new RangeError('' + id);
            }
        }
        if (index < 0 || index > this._state.length) {
            throw new RangeError('' + index);
        }
        this.listWillRemove(index);
        var oldEntry = this._state.getEntry(index);
        this._state.remove(index);
        this.listDidRemove(index, oldEntry[1]);
        var header = Record.empty(2).slot('id', oldEntry[0]).slot('index', index);
        this.command(Record.empty(1).attr('remove', header));
        return this;
    };
    ListDownlinkModel.prototype.push = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        for (var i = 0; i < newValues.length; i += 1) {
            var index = this._state.length + i;
            var newValue = this.listWillInsert(index, newValues[i]);
            this._state.insert(index, newValue);
            var newEntry = this._state.getEntry(index);
            this.listDidInsert(index, newValue);
            var header = Record.empty(2).slot('id', newEntry[0]).slot('index', index);
            this.command(Attr$1.of('insert', header).concat(newValue));
        }
        return this._state.length;
    };
    ListDownlinkModel.prototype.pop = function () {
        var index = this._state.length - 1;
        if (index >= 0) {
            this.listWillRemove(index);
            var oldEntry = this._state.getEntry(index);
            this._state.remove(index);
            this.listDidRemove(index, oldEntry[1]);
            var header = Record.empty(2).slot('id', oldEntry[0]).slot('index', index);
            this.command(Record.empty(1).attr('remove', header));
            return oldEntry[1];
        }
        else {
            return Value.Absent;
        }
    };
    ListDownlinkModel.prototype.unshift = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        for (var i = newValues.length - 1; i >= 0; i -= 1) {
            var newValue = this.listWillInsert(0, newValues[i]);
            this._state.insert(0, newValue);
            var newEntry = this._state.getEntry(0);
            this.listDidInsert(0, newValue);
            var header = Record.empty(2).slot('id', newEntry[0]).slot('index', 0);
            this.command(Attr$1.of('insert', header).concat(newValue));
        }
        return this._state.length;
    };
    ListDownlinkModel.prototype.shift = function () {
        if (this._state.length > 0) {
            this.listWillRemove(0);
            var oldEntry = this._state.getEntry(0);
            this._state.remove(0);
            this.listDidRemove(0, oldEntry[1]);
            var header = Record.empty(2).slot('id', oldEntry[0]).slot('index', 0);
            this.command(Record.empty(1).attr('remove', header));
            return oldEntry[1];
        }
        else {
            return Value.Absent;
        }
    };
    ListDownlinkModel.prototype.move = function (fromIndex, toIndex, id) {
        if (id !== undefined) {
            fromIndex = this._state.lookup(id, fromIndex);
            if (fromIndex < 0) {
                throw new RangeError('' + id);
            }
        }
        if (fromIndex < 0 || fromIndex >= this._state.length) {
            throw new RangeError('' + fromIndex);
        }
        if (toIndex < 0 || toIndex >= this._state.length) {
            throw new RangeError('' + toIndex);
        }
        if (fromIndex !== toIndex) {
            var entry = this._state.getEntry(fromIndex);
            this.listWillMove(fromIndex, toIndex, entry[1]);
            this._state.remove(fromIndex).insert(toIndex, entry[1], entry[0]);
            this.listDidMove(fromIndex, toIndex, entry[1]);
            var header = Record.empty(2).slot('id', entry[0]).slot('from', fromIndex).slot('to', toIndex);
            this.command(Record.empty(1).attr('move', header));
        }
        return this;
    };
    ListDownlinkModel.prototype.splice = function (start, deleteCount) {
        var newValues = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newValues[_i - 2] = arguments[_i];
        }
        if (start < 0) {
            start = this._state.length + start;
        }
        start = Math.min(Math.max(0, start), this._state.length);
        if (deleteCount === undefined) {
            deleteCount = this._state.length - start;
        }
        var deleted = [];
        for (var i = start, n = start + deleteCount; i < n; i += 1) {
            this.listWillRemove(start);
            var oldEntry = this._state.getEntry(start);
            deleted.push(oldEntry[1]);
            this._state.remove(start);
            this.listDidRemove(start, oldEntry[1]);
            var header = Record.empty(2).slot('id', oldEntry[0]).slot('index', start);
            this.command(Record.empty(1).attr('remove', header));
        }
        for (var i = 0; i < newValues.length; i += 1) {
            var index = start + i;
            var newValue = this.listWillInsert(index, newValues[i]);
            this._state.insert(index, newValue);
            var newEntry = this._state.getEntry(index);
            this.listDidInsert(index, newValue);
            var header = Record.empty(2).slot('id', newEntry[0]).slot('index', index);
            this.command(Attr$1.of('insert', header).concat(newValue));
        }
        return deleted;
    };
    ListDownlinkModel.prototype.clear = function () {
        this.listWillClear();
        this._state.clear();
        this.listDidClear();
        this.command(Record.empty(1).attr('clear'));
    };
    ListDownlinkModel.prototype.forEach = function (callback, thisArg) {
        return this._state.forEach(function (value, index, tree, id) {
            return callback.call(thisArg, value, index, this, id);
        }, this);
    };
    ListDownlinkModel.prototype.values = function () {
        return this._state.values();
    };
    ListDownlinkModel.prototype.keys = function () {
        return this._state.keys();
    };
    ListDownlinkModel.prototype.entries = function () {
        return this._state.entries();
    };
    ListDownlinkModel.prototype.snapshot = function () {
        return this._state.clone();
    };
    ListDownlinkModel.prototype.setState = function (state) {
        this._state = state;
    };
    ListDownlinkModel.prototype.onEventMessage = function (message, host) {
        _super.prototype.onEventMessage.call(this, message, host);
        var event = message.body();
        var tag = event.tag;
        if (tag === 'update') {
            var header = event.head().toValue();
            var index = this._state.lookup(header.get('id'), header.get('index').numberValue());
            if (index >= 0) {
                this.onUpdateEvent(index, event.body(), header.get('id'));
            }
            else {
                this.onInsertEvent(header.get('index').numberValue(0), event.body(), header.get('id'));
            }
        }
        else if (tag === 'insert') {
            var header = event.head().toValue();
            var index = this._state.lookup(header.get('id'), header.get('index').numberValue());
            if (index < 0) {
                this.onInsertEvent(header.get('index').numberValue(0), event.body(), header.get('id'));
            }
            else {
                this.onUpdateEvent(index, event.body(), header.get('id'));
            }
        }
        else if (tag === 'move') {
            var header = event.head().toValue();
            var index = this._state.lookup(header.get('id'), header.get('from').numberValue());
            if (index >= 0) {
                this.onMoveEvent(index, header.get('to').numberValue(0), header.get('id'));
            }
        }
        else if (tag === 'remove') {
            var header = event.head().toValue();
            var index = this._state.lookup(header.get('id'), header.get('index').numberValue());
            if (index >= 0) {
                this.onRemoveEvent(index, header.get('id'));
            }
        }
        else if (tag === 'drop') {
            var header = event.head();
            this.onDropEvent(header.numberValue(0));
        }
        else if (tag === 'take') {
            var header = event.head();
            this.onTakeEvent(header.numberValue(0));
        }
        else if (tag === 'clear') {
            this.onClearEvent();
        }
    };
    ListDownlinkModel.prototype.onUpdateEvent = function (index, newValue, id) {
        newValue = this.listWillUpdate(index, newValue);
        var oldValue = this._state.get(index) || Value.Absent;
        this._state.set(index, newValue);
        this.listDidUpdate(index, newValue, oldValue);
    };
    ListDownlinkModel.prototype.onInsertEvent = function (index, newValue, id) {
        newValue = this.listWillInsert(index, newValue);
        this._state.insert(index, newValue, id);
        this.listDidInsert(index, newValue);
    };
    ListDownlinkModel.prototype.onMoveEvent = function (fromIndex, toIndex, id) {
        toIndex = Math.min(Math.max(0, toIndex), this._state.length);
        if (fromIndex !== toIndex) {
            var value = this._state.get(fromIndex) || Value.Absent;
            this.listWillMove(fromIndex, toIndex, value);
            this._state.remove(fromIndex).insert(toIndex, value, id);
            this.listDidMove(fromIndex, toIndex, value);
        }
    };
    ListDownlinkModel.prototype.onRemoveEvent = function (index, id) {
        this.listWillRemove(index);
        var oldValue = this._state.get(index) || Value.Absent;
        this._state.remove(index);
        this.listDidRemove(index, oldValue);
    };
    ListDownlinkModel.prototype.onDropEvent = function (lower) {
        this.listWillDrop(lower);
        this._state.drop(lower);
        this.listDidDrop(lower);
    };
    ListDownlinkModel.prototype.onTakeEvent = function (upper) {
        this.listWillTake(upper);
        this._state.take(upper);
        this.listDidTake(upper);
    };
    ListDownlinkModel.prototype.onClearEvent = function () {
        this.listWillClear();
        this._state.clear();
        this.listDidClear();
    };
    ListDownlinkModel.prototype.listWillInsert = function (index, newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            newValue = this._views[i].listWillInsert(index, newValue);
        }
        return newValue;
    };
    ListDownlinkModel.prototype.listDidInsert = function (index, newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidInsert(index, newValue);
        }
    };
    ListDownlinkModel.prototype.listWillUpdate = function (index, newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            newValue = this._views[i].listWillUpdate(index, newValue);
        }
        return newValue;
    };
    ListDownlinkModel.prototype.listDidUpdate = function (index, newValue, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidUpdate(index, newValue, oldValue);
        }
    };
    ListDownlinkModel.prototype.listWillMove = function (fromIndex, toIndex, value) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillMove(fromIndex, toIndex, value);
        }
    };
    ListDownlinkModel.prototype.listDidMove = function (fromIndex, toIndex, value) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidMove(fromIndex, toIndex, value);
        }
    };
    ListDownlinkModel.prototype.listWillRemove = function (index) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillRemove(index);
        }
    };
    ListDownlinkModel.prototype.listDidRemove = function (index, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidRemove(index, oldValue);
        }
    };
    ListDownlinkModel.prototype.listWillDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillDrop(lower);
        }
    };
    ListDownlinkModel.prototype.listDidDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidDrop(lower);
        }
    };
    ListDownlinkModel.prototype.listWillTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillTake(upper);
        }
    };
    ListDownlinkModel.prototype.listDidTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidTake(upper);
        }
    };
    ListDownlinkModel.prototype.listWillClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillClear();
        }
    };
    ListDownlinkModel.prototype.listDidClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidClear();
        }
    };
    return ListDownlinkModel;
}(DownlinkModel));
var ListDownlink = (function (_super) {
    __extends(ListDownlink, _super);
    function ListDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0) {
        if (flags === void 0) { flags = 3; }
        if (delegate === void 0) { delegate = {}; }
        var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) || this;
        if (init) {
            delegate.willInsert = init.willInsert || delegate.willInsert;
            delegate.didInsert = init.didInsert || delegate.didInsert;
            delegate.willUpdate = init.willUpdate || delegate.willUpdate;
            delegate.didUpdate = init.didUpdate || delegate.didUpdate;
            delegate.willMove = init.willMove || delegate.willMove;
            delegate.didMove = init.didMove || delegate.didMove;
            delegate.willRemove = init.willRemove || delegate.willRemove;
            delegate.didRemove = init.didRemove || delegate.didRemove;
            delegate.willDrop = init.willDrop || delegate.willDrop;
            delegate.didDrop = init.didDrop || delegate.didDrop;
            delegate.willTake = init.willTake || delegate.willTake;
            delegate.didTake = init.didTake || delegate.didTake;
            delegate.willClear = init.willClear || delegate.willClear;
            delegate.didClear = init.didClear || delegate.didClear;
            valueForm = init.valueForm ? init.valueForm : valueForm;
        }
        _this._valueForm = valueForm || Form.Value;
        _this._state0 = state0;
        return _this;
    }
    ListDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0) {
        if (arguments.length === 10) {
            valueForm = this._valueForm;
            state0 = this._state0;
        }
        return new ListDownlink(context, owner, undefined, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0);
    };
    ListDownlink.prototype.type = function () {
        return 'list';
    };
    ListDownlink.prototype.valueForm = function (valueForm) {
        if (valueForm === undefined) {
            return this._valueForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, valueForm, this._state0);
        }
    };
    ListDownlink.prototype.isEmpty = function () {
        return this._model.isEmpty();
    };
    Object.defineProperty(ListDownlink.prototype, "length", {
        get: function () {
            return this._model.length;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlink.prototype.get = function (index, id) {
        var value = this._model.get(index, id);
        return value.coerce(this._valueForm);
    };
    ListDownlink.prototype.getEntry = function (index, id) {
        var entry = this._model.getEntry(index, id);
        if (entry) {
            return [entry[0].coerce(this._valueForm), entry[1]];
        }
        return undefined;
    };
    ListDownlink.prototype.set = function (index, newObject, id) {
        var newValue = this._valueForm.mold(newObject);
        this._model.set(index, newValue, id);
        return this;
    };
    ListDownlink.prototype.insert = function (index, newObject, id) {
        var newValue = this._valueForm.mold(newObject);
        this._model.insert(index, newValue, id);
        return this;
    };
    ListDownlink.prototype.remove = function (index, id) {
        this._model.remove(index, id);
        return this;
    };
    ListDownlink.prototype.push = function () {
        var newObjects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newObjects[_i] = arguments[_i];
        }
        var newValues = new Array(newObjects.length);
        for (var i = 0; i < newObjects.length; i += 1) {
            newValues[i] = this._valueForm.mold(newObjects[i]);
        }
        return this._model.push.apply(this._model, newValues);
    };
    ListDownlink.prototype.pop = function () {
        var value = this._model.pop();
        return value.coerce(this._valueForm);
    };
    ListDownlink.prototype.unshift = function () {
        var newObjects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newObjects[_i] = arguments[_i];
        }
        var newValues = new Array(newObjects.length);
        for (var i = 0; i < newObjects.length; i += 1) {
            newValues[i] = this._valueForm.mold(newObjects[i]);
        }
        return this._model.unshift.apply(this._model, newValues);
    };
    ListDownlink.prototype.shift = function () {
        var value = this._model.shift();
        return value.coerce(this._valueForm);
    };
    ListDownlink.prototype.move = function (fromIndex, toIndex, id) {
        this._model.move(fromIndex, toIndex, id);
        return this;
    };
    ListDownlink.prototype.splice = function (start, deleteCount) {
        var newObjects = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newObjects[_i - 2] = arguments[_i];
        }
        var _a;
        var newValues = new Array(newObjects.length);
        for (var i = 0; i < newObjects.length; i += 1) {
            newValues[i] = this._valueForm.mold(newObjects[i]);
        }
        var oldValues = (_a = this._model).splice.apply(_a, [start, deleteCount].concat(newValues));
        var oldObjects = new Array(oldValues.length);
        for (var i = 0; i < oldValues.length; i += 1) {
            oldObjects[i] = oldValues[i].coerce(this._valueForm);
        }
        return oldObjects;
    };
    ListDownlink.prototype.clear = function () {
        this._model.clear();
    };
    ListDownlink.prototype.forEach = function (callback, thisArg) {
        if (this._valueForm === Form.Value) {
            return this._model._state.forEach(callback, thisArg);
        }
        else {
            return this._model._state.forEach(function (value, index, tree, id) {
                var object = value.coerce(this._valueForm);
                return callback.call(thisArg, object, index, this, id);
            }, this);
        }
    };
    ListDownlink.prototype.values = function () {
        var cursor = this._model.values();
        if (this._valueForm === Form.Value) {
            return cursor;
        }
        else {
            return new FormCursor(cursor, this._valueForm);
        }
    };
    ListDownlink.prototype.keys = function () {
        return this._model.keys();
    };
    ListDownlink.prototype.entries = function () {
        var cursor = this._model.entries();
        if (this._valueForm === Form.Value) {
            return cursor;
        }
        else {
            return new FormPairCursor(cursor, Form.Value, this._valueForm);
        }
    };
    ListDownlink.prototype.snapshot = function () {
        return this._model.snapshot();
    };
    ListDownlink.prototype.setState = function (state) {
        this._model.setState(state);
    };
    ListDownlink.prototype.willInsert = function (willInsert) {
        if (willInsert === undefined) {
            return this.delegate.willInsert || null;
        }
        else {
            this.delegate.willInsert = willInsert || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didInsert = function (didInsert) {
        if (didInsert === undefined) {
            return this.delegate.didInsert || null;
        }
        else {
            this.delegate.didInsert = didInsert || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willUpdate = function (willUpdate) {
        if (willUpdate === undefined) {
            return this.delegate.willUpdate || null;
        }
        else {
            this.delegate.willUpdate = willUpdate || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didUpdate = function (didUpdate) {
        if (didUpdate === undefined) {
            return this.delegate.didUpdate || null;
        }
        else {
            this.delegate.didUpdate = didUpdate || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willMove = function (willMove) {
        if (willMove === undefined) {
            return this.delegate.willMove || null;
        }
        else {
            this.delegate.willMove = willMove || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didMove = function (didMove) {
        if (didMove === undefined) {
            return this.delegate.didMove || null;
        }
        else {
            this.delegate.didMove = didMove || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willRemove = function (willRemove) {
        if (willRemove === undefined) {
            return this.delegate.willRemove || null;
        }
        else {
            this.delegate.willRemove = willRemove || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didRemove = function (didRemove) {
        if (didRemove === undefined) {
            return this.delegate.didRemove || null;
        }
        else {
            this.delegate.didRemove = didRemove || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willDrop = function (willDrop) {
        if (willDrop === undefined) {
            return this.delegate.willDrop || null;
        }
        else {
            this.delegate.willDrop = willDrop || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didDrop = function (didDrop) {
        if (didDrop === undefined) {
            return this.delegate.didDrop || null;
        }
        else {
            this.delegate.didDrop = didDrop || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willTake = function (willTake) {
        if (willTake === undefined) {
            return this.delegate.willTake || null;
        }
        else {
            this.delegate.willTake = willTake || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didTake = function (didTake) {
        if (didTake === undefined) {
            return this.delegate.didTake || null;
        }
        else {
            this.delegate.didTake = didTake || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willClear = function (willClear) {
        if (willClear === undefined) {
            return this.delegate.willClear || null;
        }
        else {
            this.delegate.willClear = willClear || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didClear = function (didClear) {
        if (didClear === undefined) {
            return this.delegate.didClear || null;
        }
        else {
            this.delegate.didClear = didClear || undefined;
            return this;
        }
    };
    ListDownlink.prototype.listWillInsert = function (index, newValue) {
        if (this.delegate.willInsert) {
            var newObject = newValue.coerce(this._valueForm);
            newObject = this.delegate.willInsert(index, newObject, this);
            if (newObject !== undefined) {
                newValue = this._valueForm.mold(newObject);
            }
        }
        return newValue;
    };
    ListDownlink.prototype.listDidInsert = function (index, newValue) {
        if (this.delegate.didInsert) {
            var newObject = newValue.coerce(this._valueForm);
            this.delegate.didInsert(index, newObject, this);
        }
    };
    ListDownlink.prototype.listWillUpdate = function (index, newValue) {
        if (this.delegate.willUpdate) {
            var newObject = newValue.coerce(this._valueForm);
            newObject = this.delegate.willUpdate(index, newObject, this);
            if (newObject !== undefined) {
                newValue = this._valueForm.mold(newObject);
            }
        }
        return newValue;
    };
    ListDownlink.prototype.listDidUpdate = function (index, newValue, oldValue) {
        if (this.delegate.didUpdate) {
            var newObject = newValue.coerce(this._valueForm);
            var oldObject = oldValue.coerce(this._valueForm);
            this.delegate.didUpdate(index, newObject, oldObject, this);
        }
    };
    ListDownlink.prototype.listWillMove = function (fromIndex, toIndex, value) {
        if (this.delegate.willMove) {
            var object = value.coerce(this._valueForm);
            this.delegate.willMove(fromIndex, toIndex, object, this);
        }
    };
    ListDownlink.prototype.listDidMove = function (fromIndex, toIndex, value) {
        if (this.delegate.didMove) {
            var object = value.coerce(this._valueForm);
            this.delegate.didMove(fromIndex, toIndex, object, this);
        }
    };
    ListDownlink.prototype.listWillRemove = function (index) {
        if (this.delegate.willRemove) {
            this.delegate.willRemove(index, this);
        }
    };
    ListDownlink.prototype.listDidRemove = function (index, oldValue) {
        if (this.delegate.didRemove) {
            var oldObject = oldValue.coerce(this._valueForm);
            this.delegate.didRemove(index, oldObject, this);
        }
    };
    ListDownlink.prototype.listWillDrop = function (lower) {
        if (this.delegate.willDrop) {
            this.delegate.willDrop(lower, this);
        }
    };
    ListDownlink.prototype.listDidDrop = function (lower) {
        if (this.delegate.didDrop) {
            this.delegate.didDrop(lower, this);
        }
    };
    ListDownlink.prototype.listWillTake = function (upper) {
        if (this.delegate.willTake) {
            this.delegate.willTake(upper, this);
        }
    };
    ListDownlink.prototype.listDidTake = function (upper) {
        if (this.delegate.didTake) {
            this.delegate.didTake(upper, this);
        }
    };
    ListDownlink.prototype.listWillClear = function () {
        if (this.delegate.willClear) {
            this.delegate.willClear(this);
        }
    };
    ListDownlink.prototype.listDidClear = function () {
        if (this.delegate.didClear) {
            this.delegate.didClear(this);
        }
    };
    ListDownlink.prototype.initialState = function (state0) {
        if (state0 === undefined) {
            return this._state0 || null;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, this._valueForm, state0 || undefined);
        }
    };
    ListDownlink.prototype.didAliasModel = function () {
        this.onLinkedResponse();
        this._model._state.forEach(function (value, index) {
            this.listDidInsert(index, value);
        }, this);
        this.onSyncedResponse();
    };
    ListDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error('no lane');
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error('no node');
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.base();
            nodeUri = Uri.unresolve(hostUri, nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof ListDownlinkModel)) {
                throw new Error('downlink type mismatch');
            }
            model.addDownlink(this);
            this._model = model;
            this.didAliasModel();
        }
        else {
            model = new ListDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
            model.addDownlink(this);
            this._context.openDownlink(model);
            this._model = model;
        }
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    return ListDownlink;
}(Downlink));
var ListDownlinkRecord = (function (_super) {
    __extends(ListDownlinkRecord, _super);
    function ListDownlinkRecord(downlink) {
        var _this = _super.call(this) || this;
        _this._downlink = downlink;
        return _this;
    }
    Object.defineProperty(ListDownlinkRecord.prototype, "downlink", {
        get: function () {
            return this._downlink;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlinkRecord.prototype.isEmpty = function () {
        return this._downlink.isEmpty();
    };
    ListDownlinkRecord.prototype.isArray = function () {
        return true;
    };
    ListDownlinkRecord.prototype.isObject = function () {
        return this._downlink.isEmpty();
    };
    Object.defineProperty(ListDownlinkRecord.prototype, "length", {
        get: function () {
            return this._downlink.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListDownlinkRecord.prototype, "size", {
        get: function () {
            return this._downlink.length;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlinkRecord.prototype.has = function (key) {
        return false;
    };
    ListDownlinkRecord.prototype.get = function (key) {
        return Value.Absent;
    };
    ListDownlinkRecord.prototype.getAttr = function (key) {
        return Value.Absent;
    };
    ListDownlinkRecord.prototype.getItem = function (index) {
        if (index instanceof Num) {
            index = index.value;
        }
        var n = this._downlink.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            return this._downlink.get(index);
        }
        return Item.Absent;
    };
    ListDownlinkRecord.prototype.set = function (key, newValue) {
        throw new Error('unsupported');
    };
    ListDownlinkRecord.prototype.setAttr = function (key, newValue) {
        throw new Error('unsupported');
    };
    ListDownlinkRecord.prototype.setItem = function (index, newItem) {
        if (index instanceof Num) {
            index = index.value;
        }
        var n = this._downlink.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            this._downlink.set(index, Value.fromAny(newItem));
        }
        return this;
    };
    ListDownlinkRecord.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        return this._downlink.push.apply(this._downlink, arguments);
    };
    ListDownlinkRecord.prototype.splice = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        return this._downlink.splice.apply(this._downlink, arguments);
    };
    ListDownlinkRecord.prototype.delete = function (key) {
        return Item.Absent;
    };
    ListDownlinkRecord.prototype.clear = function () {
        this._downlink.clear();
    };
    ListDownlinkRecord.prototype.forEach = function (callback, thisArg) {
        return this._downlink.forEach(function (value, index) {
            return callback.call(thisArg, value, index);
        });
    };
    return ListDownlinkRecord;
}(Record));

//# sourceMappingURL=data:application/json;base64,

var MapDownlinkModel = (function (_super) {
    __extends(MapDownlinkModel, _super);
    function MapDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body, state) {
        if (state === void 0) { state = new BTree(); }
        var _this = _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
        _this._state = state;
        return _this;
    }
    MapDownlinkModel.prototype.type = function () {
        return 'map';
    };
    Object.defineProperty(MapDownlinkModel.prototype, "size", {
        get: function () {
            return this._state.size;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlinkModel.prototype.isEmpty = function () {
        return this._state.isEmpty();
    };
    MapDownlinkModel.prototype.has = function (key) {
        return this._state.has(key);
    };
    MapDownlinkModel.prototype.get = function (key) {
        return this._state.get(key) || Value.Absent;
    };
    MapDownlinkModel.prototype.getEntry = function (index) {
        return this._state.getEntry(index);
    };
    MapDownlinkModel.prototype.set = function (key, newValue) {
        newValue = this.mapWillUpdate(key, newValue);
        var oldValue = this._state.get(key) || Value.Absent;
        this._state.set(key, newValue);
        this.mapDidUpdate(key, newValue, oldValue);
        var header = Record.empty(1).slot('key', key);
        this.command(Attr$1.of('update', header).concat(newValue));
        return this;
    };
    MapDownlinkModel.prototype.delete = function (key) {
        if (this._state.has(key)) {
            this.mapWillRemove(key);
            var oldValue = this._state.get(key) || Value.Absent;
            this._state.delete(key);
            this.mapDidRemove(key, oldValue);
            var header = Record.empty(1).slot('key', key);
            this.command(Record.empty(1).attr('remove', header));
            return true;
        }
        else {
            return false;
        }
    };
    MapDownlinkModel.prototype.drop = function (lower) {
        this.mapWillDrop(lower);
        this._state.drop(lower);
        this.mapDidDrop(lower);
        this.command(Record.empty(1).attr('drop', lower));
        return this;
    };
    MapDownlinkModel.prototype.take = function (upper) {
        this.mapWillTake(upper);
        this._state.take(upper);
        this.mapDidTake(upper);
        this.command(Record.empty(1).attr('take', upper));
        return this;
    };
    MapDownlinkModel.prototype.clear = function () {
        this.mapWillClear();
        this._state.clear();
        this.mapDidClear();
        this.command(Record.empty(1).attr('clear'));
    };
    MapDownlinkModel.prototype.forEach = function (callback, thisArg) {
        return this._state.forEach(function (key, value) {
            return callback.call(thisArg, key, value, this);
        }, this);
    };
    MapDownlinkModel.prototype.keys = function () {
        return this._state.keys();
    };
    MapDownlinkModel.prototype.values = function () {
        return this._state.values();
    };
    MapDownlinkModel.prototype.entries = function () {
        return this._state.entries();
    };
    MapDownlinkModel.prototype.snapshot = function () {
        return this._state.clone();
    };
    MapDownlinkModel.prototype.setState = function (state) {
        this._state = state;
    };
    MapDownlinkModel.prototype.onEventMessage = function (message, host) {
        _super.prototype.onEventMessage.call(this, message, host);
        var event = message.body();
        var tag = event.tag;
        if (tag === 'update') {
            var header = event.head().toValue();
            this.onUpdateEvent(header.get('key'), event.body());
        }
        else if (tag === 'remove') {
            var header = event.head().toValue();
            this.onRemoveEvent(header.get('key'));
        }
        else if (tag === 'drop') {
            var header = event.head().toValue();
            this.onDropEvent(header.numberValue(0));
        }
        else if (tag === 'take') {
            var header = event.head().toValue();
            this.onTakeEvent(header.numberValue(0));
        }
        else if (tag === 'clear') {
            this.onClearEvent();
        }
    };
    MapDownlinkModel.prototype.onUpdateEvent = function (key, newValue) {
        newValue = this.mapWillUpdate(key, newValue);
        var oldValue = this._state.get(key) || Value.Absent;
        this._state.set(key, newValue);
        this.mapDidUpdate(key, newValue, oldValue);
    };
    MapDownlinkModel.prototype.onRemoveEvent = function (key) {
        this.mapWillRemove(key);
        var oldValue = this._state.get(key) || Value.Absent;
        this._state.delete(key);
        this.mapDidRemove(key, oldValue);
    };
    MapDownlinkModel.prototype.onDropEvent = function (lower) {
        this.mapWillDrop(lower);
        this._state.drop(lower);
        this.mapDidDrop(lower);
    };
    MapDownlinkModel.prototype.onTakeEvent = function (upper) {
        this.mapWillTake(upper);
        this._state.take(upper);
        this.mapDidTake(upper);
    };
    MapDownlinkModel.prototype.onClearEvent = function () {
        this.mapWillClear();
        this._state.clear();
        this.mapDidClear();
    };
    MapDownlinkModel.prototype.mapWillUpdate = function (key, newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            newValue = this._views[i].mapWillUpdate(key, newValue);
        }
        return newValue;
    };
    MapDownlinkModel.prototype.mapDidUpdate = function (key, newValue, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidUpdate(key, newValue, oldValue);
        }
    };
    MapDownlinkModel.prototype.mapWillRemove = function (key) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillRemove(key);
        }
    };
    MapDownlinkModel.prototype.mapDidRemove = function (key, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidRemove(key, oldValue);
        }
    };
    MapDownlinkModel.prototype.mapWillDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillDrop(lower);
        }
    };
    MapDownlinkModel.prototype.mapDidDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidDrop(lower);
        }
    };
    MapDownlinkModel.prototype.mapWillTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillTake(upper);
        }
    };
    MapDownlinkModel.prototype.mapDidTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidTake(upper);
        }
    };
    MapDownlinkModel.prototype.mapWillClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillClear();
        }
    };
    MapDownlinkModel.prototype.mapDidClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidClear();
        }
    };
    return MapDownlinkModel;
}(DownlinkModel));
var MapDownlink = (function (_super) {
    __extends(MapDownlink, _super);
    function MapDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, keyForm, valueForm, state0) {
        if (flags === void 0) { flags = 3; }
        if (delegate === void 0) { delegate = {}; }
        var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) || this;
        if (init) {
            delegate.willUpdate = init.willUpdate || delegate.willUpdate;
            delegate.didUpdate = init.didUpdate || delegate.didUpdate;
            delegate.willRemove = init.willRemove || delegate.willRemove;
            delegate.didRemove = init.didRemove || delegate.didRemove;
            delegate.willDrop = init.willDrop || delegate.willDrop;
            delegate.didDrop = init.didDrop || delegate.didDrop;
            delegate.willTake = init.willTake || delegate.willTake;
            delegate.didTake = init.didTake || delegate.didTake;
            delegate.willClear = init.willClear || delegate.willClear;
            delegate.didClear = init.didClear || delegate.didClear;
            keyForm = init.keyForm ? init.keyForm : keyForm;
            valueForm = init.valueForm ? init.valueForm : valueForm;
        }
        _this._keyForm = keyForm || Form.Value;
        _this._valueForm = valueForm || Form.Value;
        _this._state0 = state0;
        return _this;
    }
    MapDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, keyForm, valueForm, state0) {
        if (arguments.length === 10) {
            state0 = this._state0;
            keyForm = this._keyForm;
            valueForm = this._valueForm;
        }
        return new MapDownlink(context, owner, undefined, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, keyForm, valueForm, state0);
    };
    MapDownlink.prototype.type = function () {
        return 'map';
    };
    MapDownlink.prototype.keyForm = function (keyForm) {
        if (keyForm === undefined) {
            return this._keyForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, keyForm, this._valueForm, this._state0);
        }
    };
    MapDownlink.prototype.valueForm = function (valueForm) {
        if (valueForm === undefined) {
            return this._valueForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, this._keyForm, valueForm, this._state0);
        }
    };
    Object.defineProperty(MapDownlink.prototype, "size", {
        get: function () {
            return this._model.size;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlink.prototype.isEmpty = function () {
        return this._model.isEmpty();
    };
    MapDownlink.prototype.has = function (key) {
        var keyObject = this._keyForm.mold(key);
        return this._model.has(keyObject);
    };
    MapDownlink.prototype.get = function (key) {
        var keyObject = this._keyForm.mold(key);
        var value = this._model.get(keyObject);
        return value.coerce(this._valueForm);
    };
    MapDownlink.prototype.getEntry = function (index) {
        var entry = this._model.getEntry(index);
        if (entry) {
            return [entry[0].coerce(this._keyForm), entry[1].coerce(this._valueForm)];
        }
        return undefined;
    };
    MapDownlink.prototype.set = function (key, newValue) {
        var keyObject = this._keyForm.mold(key);
        var newObject = this._valueForm.mold(newValue);
        this._model.set(keyObject, newObject);
        return this;
    };
    MapDownlink.prototype.delete = function (key) {
        var keyObject = this._keyForm.mold(key);
        return this._model.delete(keyObject);
    };
    MapDownlink.prototype.drop = function (lower) {
        this._model.drop(lower);
        return this;
    };
    MapDownlink.prototype.take = function (upper) {
        this._model.take(upper);
        return this;
    };
    MapDownlink.prototype.clear = function () {
        this._model.clear();
    };
    MapDownlink.prototype.forEach = function (callback, thisArg) {
        if (this._keyForm === Form.Value && this._valueForm === Form.Value) {
            return this._model._state.forEach(callback, thisArg);
        }
        else {
            return this._model._state.forEach(function (key, value) {
                var keyObject = key.coerce(this._keyForm);
                var object = value.coerce(this._valueForm);
                return callback.call(thisArg, keyObject, object, this);
            }, this);
        }
    };
    MapDownlink.prototype.keys = function () {
        var cursor = this._model.keys();
        if (this._keyForm === Form.Value) {
            return cursor;
        }
        else {
            return new FormCursor(cursor, this._keyForm);
        }
    };
    MapDownlink.prototype.values = function () {
        var cursor = this._model.values();
        if (this._valueForm === Form.Value) {
            return cursor;
        }
        else {
            return new FormCursor(cursor, this._valueForm);
        }
    };
    MapDownlink.prototype.entries = function () {
        var cursor = this._model.entries();
        if (this._keyForm === Form.Value && this._valueForm === Form.Value) {
            return cursor;
        }
        else {
            return new FormPairCursor(cursor, this._keyForm, this._valueForm);
        }
    };
    MapDownlink.prototype.snapshot = function () {
        return this._model.snapshot();
    };
    MapDownlink.prototype.setState = function (state) {
        this._model.setState(state);
    };
    MapDownlink.prototype.willUpdate = function (willUpdate) {
        if (willUpdate === undefined) {
            return this.delegate.willUpdate || null;
        }
        else {
            this.delegate.willUpdate = willUpdate || undefined;
            return this;
        }
    };
    MapDownlink.prototype.didUpdate = function (didUpdate) {
        if (didUpdate === undefined) {
            return this.delegate.didUpdate || null;
        }
        else {
            this.delegate.didUpdate = didUpdate || undefined;
            return this;
        }
    };
    MapDownlink.prototype.willRemove = function (willRemove) {
        if (willRemove === undefined) {
            return this.delegate.willRemove || null;
        }
        else {
            this.delegate.willRemove = willRemove || undefined;
            return this;
        }
    };
    MapDownlink.prototype.didRemove = function (didRemove) {
        if (didRemove === undefined) {
            return this.delegate.didRemove || null;
        }
        else {
            this.delegate.didRemove = didRemove || undefined;
            return this;
        }
    };
    MapDownlink.prototype.willDrop = function (willDrop) {
        if (willDrop === undefined) {
            return this.delegate.willDrop || null;
        }
        else {
            this.delegate.willDrop = willDrop || undefined;
            return this;
        }
    };
    MapDownlink.prototype.didDrop = function (didDrop) {
        if (didDrop === undefined) {
            return this.delegate.didDrop || null;
        }
        else {
            this.delegate.didDrop = didDrop || undefined;
            return this;
        }
    };
    MapDownlink.prototype.willTake = function (willTake) {
        if (willTake === undefined) {
            return this.delegate.willTake || null;
        }
        else {
            this.delegate.willTake = willTake || undefined;
            return this;
        }
    };
    MapDownlink.prototype.didTake = function (didTake) {
        if (didTake === undefined) {
            return this.delegate.didTake || null;
        }
        else {
            this.delegate.didTake = didTake || undefined;
            return this;
        }
    };
    MapDownlink.prototype.willClear = function (willClear) {
        if (willClear === undefined) {
            return this.delegate.willClear || null;
        }
        else {
            this.delegate.willClear = willClear || undefined;
            return this;
        }
    };
    MapDownlink.prototype.didClear = function (didClear) {
        if (didClear === undefined) {
            return this.delegate.didClear || null;
        }
        else {
            this.delegate.didClear = didClear || undefined;
            return this;
        }
    };
    MapDownlink.prototype.mapWillUpdate = function (key, newValue) {
        if (this.delegate.willUpdate) {
            var keyObject = key.coerce(this._keyForm);
            var newObject = newValue.coerce(this._valueForm);
            newObject = this.delegate.willUpdate(keyObject, newObject, this);
            if (newObject !== undefined) {
                newValue = this._valueForm.mold(newObject);
            }
        }
        return newValue;
    };
    MapDownlink.prototype.mapDidUpdate = function (key, newValue, oldValue) {
        if (this.delegate.didUpdate) {
            var keyObject = key.coerce(this._keyForm);
            var newObject = newValue.coerce(this._valueForm);
            var oldObject = oldValue.coerce(this._valueForm);
            this.delegate.didUpdate(keyObject, newObject, oldObject, this);
        }
    };
    MapDownlink.prototype.mapWillRemove = function (key) {
        if (this.delegate.willRemove) {
            var keyObject = key.coerce(this._keyForm);
            this.delegate.willRemove(keyObject, this);
        }
    };
    MapDownlink.prototype.mapDidRemove = function (key, oldValue) {
        if (this.delegate.didRemove) {
            var keyObject = key.coerce(this._keyForm);
            var oldObject = oldValue.coerce(this._valueForm);
            this.delegate.didRemove(keyObject, oldObject, this);
        }
    };
    MapDownlink.prototype.mapWillDrop = function (lower) {
        if (this.delegate.willDrop) {
            this.delegate.willDrop(lower, this);
        }
    };
    MapDownlink.prototype.mapDidDrop = function (lower) {
        if (this.delegate.didDrop) {
            this.delegate.didDrop(lower, this);
        }
    };
    MapDownlink.prototype.mapWillTake = function (upper) {
        if (this.delegate.willTake) {
            this.delegate.willTake(upper, this);
        }
    };
    MapDownlink.prototype.mapDidTake = function (upper) {
        if (this.delegate.didTake) {
            this.delegate.didTake(upper, this);
        }
    };
    MapDownlink.prototype.mapWillClear = function () {
        if (this.delegate.willClear) {
            this.delegate.willClear(this);
        }
    };
    MapDownlink.prototype.mapDidClear = function () {
        if (this.delegate.didClear) {
            this.delegate.didClear(this);
        }
    };
    MapDownlink.prototype.initialState = function (state0) {
        if (state0 === undefined) {
            return this._state0 || null;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, this._keyForm, this._valueForm, state0 || undefined);
        }
    };
    MapDownlink.prototype.didAliasModel = function () {
        this.onLinkedResponse();
        this._model._state.forEach(function (value, key) {
            this.mapDidUpdate(key, value, undefined);
        }, this);
        this.onSyncedResponse();
    };
    MapDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error('no lane');
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error('no node');
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.base();
            nodeUri = Uri.unresolve(hostUri, nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof MapDownlinkModel)) {
                throw new Error('downlink type mismatch');
            }
            model.addDownlink(this);
            this._model = model;
            this.didAliasModel();
        }
        else {
            model = new MapDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
            model.addDownlink(this);
            this._context.openDownlink(model);
            this._model = model;
        }
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    return MapDownlink;
}(Downlink));
var MapDownlinkRecord = (function (_super) {
    __extends(MapDownlinkRecord, _super);
    function MapDownlinkRecord(downlink) {
        var _this = _super.call(this) || this;
        _this._downlink = downlink;
        return _this;
    }
    Object.defineProperty(MapDownlinkRecord.prototype, "downlink", {
        get: function () {
            return this._downlink;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlinkRecord.prototype.isEmpty = function () {
        return this._downlink.isEmpty();
    };
    MapDownlinkRecord.prototype.isArray = function () {
        return this._downlink.isEmpty();
    };
    MapDownlinkRecord.prototype.isObject = function () {
        return true;
    };
    Object.defineProperty(MapDownlinkRecord.prototype, "length", {
        get: function () {
            return this._downlink.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapDownlinkRecord.prototype, "size", {
        get: function () {
            return this._downlink.size;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlinkRecord.prototype.has = function (key) {
        return this._downlink.has(key);
    };
    MapDownlinkRecord.prototype.get = function (key) {
        return this._downlink.get(key);
    };
    MapDownlinkRecord.prototype.getAttr = function (key) {
        return Value.Absent;
    };
    MapDownlinkRecord.prototype.getItem = function (index) {
        if (index instanceof Num) {
            index = index.value;
        }
        var n = this._downlink.size;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            var entry = this._downlink.getEntry(index);
            return Slot.of(entry[0], entry[1]);
        }
        return Item.Absent;
    };
    MapDownlinkRecord.prototype.set = function (key, newValue) {
        this._downlink.set(key, newValue);
        return this;
    };
    MapDownlinkRecord.prototype.setAttr = function (key, newValue) {
        throw new Error('unsupported');
    };
    MapDownlinkRecord.prototype.setItem = function (index, newItem) {
        throw new Error('unsupported');
    };
    MapDownlinkRecord.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        throw new Error('unsupported');
    };
    MapDownlinkRecord.prototype.splice = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        throw new Error('unsupported');
    };
    MapDownlinkRecord.prototype.delete = function (key) {
        key = Value.fromAny(key);
        var oldValue = this._downlink.get(key);
        if (this._downlink.delete(key)) {
            return Slot.of(key, oldValue);
        }
        return Item.Absent;
    };
    MapDownlinkRecord.prototype.clear = function () {
        this._downlink.clear();
    };
    MapDownlinkRecord.prototype.forEach = function (callback, thisArg) {
        var index = 0;
        return this._downlink.forEach(function (key, value) {
            var result = callback.call(thisArg, Slot.of(key, value), index);
            index += 1;
            return result;
        });
    };
    return MapDownlinkRecord;
}(Record));

//# sourceMappingURL=data:application/json;base64,

var ValueDownlinkModel = (function (_super) {
    __extends(ValueDownlinkModel, _super);
    function ValueDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body, state) {
        if (state === void 0) { state = Value.Absent; }
        var _this = _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
        _this._state = state;
        return _this;
    }
    ValueDownlinkModel.prototype.type = function () {
        return 'value';
    };
    ValueDownlinkModel.prototype.get = function () {
        return this._state;
    };
    ValueDownlinkModel.prototype.set = function (newValue) {
        newValue = this.valueWillSet(newValue);
        var oldValue = this._state;
        this.setState(newValue);
        this.valueDidSet(newValue, oldValue);
        this.command(newValue);
    };
    ValueDownlinkModel.prototype.setState = function (state) {
        this._state = state;
    };
    ValueDownlinkModel.prototype.onEventMessage = function (message, host) {
        _super.prototype.onEventMessage.call(this, message, host);
        this.onSetEvent(message.body());
    };
    ValueDownlinkModel.prototype.onSetEvent = function (newValue) {
        newValue = this.valueWillSet(newValue);
        var oldValue = this._state;
        this.setState(newValue);
        this.valueDidSet(newValue, oldValue);
    };
    ValueDownlinkModel.prototype.valueWillSet = function (newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            newValue = this._views[i].valueWillSet(newValue);
        }
        return newValue;
    };
    ValueDownlinkModel.prototype.valueDidSet = function (newValue, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].valueDidSet(newValue, oldValue);
        }
    };
    return ValueDownlinkModel;
}(DownlinkModel));
var ValueDownlink = (function (_super) {
    __extends(ValueDownlink, _super);
    function ValueDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0) {
        if (flags === void 0) { flags = 3; }
        if (delegate === void 0) { delegate = {}; }
        if (state0 === void 0) { state0 = Value.Absent; }
        var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) || this;
        if (init) {
            delegate.willSet = init.willSet || delegate.willSet;
            delegate.didSet = init.didSet || delegate.didSet;
            valueForm = init.valueForm ? init.valueForm : valueForm;
        }
        _this._valueForm = valueForm || Form.Value;
        _this._state0 = state0;
        return _this;
    }
    ValueDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0) {
        if (arguments.length === 10) {
            state0 = this._state0;
            valueForm = this._valueForm;
        }
        return new ValueDownlink(context, owner, undefined, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0);
    };
    ValueDownlink.prototype.type = function () {
        return 'value';
    };
    ValueDownlink.prototype.valueForm = function (valueForm) {
        if (valueForm === undefined) {
            return this._valueForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, valueForm, this._state0);
        }
    };
    ValueDownlink.prototype.get = function () {
        return this._model.get();
    };
    ValueDownlink.prototype.set = function (newObject) {
        var newValue = this._valueForm.mold(newObject);
        this._model.set(newValue);
    };
    ValueDownlink.prototype.setState = function (state) {
        this._model.setState(state);
    };
    ValueDownlink.prototype.willSet = function (willSet) {
        if (willSet === undefined) {
            return this.delegate.willSet || null;
        }
        else {
            this.delegate.willSet = willSet || undefined;
            return this;
        }
    };
    ValueDownlink.prototype.didSet = function (didSet) {
        if (didSet === undefined) {
            return this.delegate.didSet || null;
        }
        else {
            this.delegate.didSet = didSet || undefined;
            return this;
        }
    };
    ValueDownlink.prototype.valueWillSet = function (newValue) {
        if (this.delegate.willSet) {
            var newObject = newValue.coerce(this._valueForm);
            newObject = this.delegate.willSet(newObject, this);
            if (newObject !== undefined) {
                newValue = this._valueForm.mold(newObject);
            }
        }
        return newValue;
    };
    ValueDownlink.prototype.valueDidSet = function (newValue, oldValue) {
        if (this.delegate.didSet) {
            var newObject = newValue.coerce(this._valueForm);
            var oldObject = oldValue.coerce(this._valueForm);
            this.delegate.didSet(newObject, oldObject, this);
        }
    };
    ValueDownlink.prototype.initialState = function (state0) {
        if (state0 === undefined) {
            return this._state0;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, this._valueForm, state0);
        }
    };
    ValueDownlink.prototype.didAliasModel = function () {
        this.onLinkedResponse();
        this.valueDidSet(this.get(), Value.Absent);
        this.onSyncedResponse();
    };
    ValueDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error('no lane');
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error('no node');
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.base();
            nodeUri = Uri.unresolve(hostUri, nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof ValueDownlinkModel)) {
                throw new Error('downlink type mismatch');
            }
            model.addDownlink(this);
            this._model = model;
            this.didAliasModel();
        }
        else {
            model = new ValueDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
            model.addDownlink(this);
            this._context.openDownlink(model);
            this._model = model;
        }
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    return ValueDownlink;
}(Downlink));
var ValueDownlinkRecord = (function (_super) {
    __extends(ValueDownlinkRecord, _super);
    function ValueDownlinkRecord(downlink) {
        var _this = _super.call(this) || this;
        _this._downlink = downlink;
        return _this;
    }
    Object.defineProperty(ValueDownlinkRecord.prototype, "downlink", {
        get: function () {
            return this._downlink;
        },
        enumerable: true,
        configurable: true
    });
    ValueDownlinkRecord.prototype.isEmpty = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.isEmpty();
        }
        else if (value.isDefined()) {
            return false;
        }
        else {
            return true;
        }
    };
    ValueDownlinkRecord.prototype.isArray = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.isArray();
        }
        else if (value.isDefined()) {
            return value instanceof Value;
        }
        else {
            return true;
        }
    };
    ValueDownlinkRecord.prototype.isObject = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.isObject();
        }
        else if (value.isDefined()) {
            return value instanceof Field;
        }
        else {
            return true;
        }
    };
    Object.defineProperty(ValueDownlinkRecord.prototype, "length", {
        get: function () {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.length;
            }
            else if (value.isDefined()) {
                return 1;
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueDownlinkRecord.prototype, "size", {
        get: function () {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.size;
            }
            else if (value.isDefined()) {
                return 1;
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    ValueDownlinkRecord.prototype.has = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.has(key);
        }
        else {
            return false;
        }
    };
    ValueDownlinkRecord.prototype.get = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.get(key);
        }
        else {
            return Value.Absent;
        }
    };
    ValueDownlinkRecord.prototype.getAttr = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.getAttr(key);
        }
        else {
            return Value.Absent;
        }
    };
    ValueDownlinkRecord.prototype.getItem = function (index) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.getItem(index);
        }
        else {
            return value;
        }
    };
    ValueDownlinkRecord.prototype.set = function (key, newValue) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.set(key, newValue);
        }
        else {
            throw new Error('unsupported');
        }
        return this;
    };
    ValueDownlinkRecord.prototype.setAttr = function (key, newValue) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.setAttr(key, newValue);
        }
        else {
            throw new Error('unsupported');
        }
        return this;
    };
    ValueDownlinkRecord.prototype.setItem = function (index, newItem) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.setItem(index, newItem);
        }
        else {
            this._downlink.set(Value.fromAny(newItem));
        }
        return this;
    };
    ValueDownlinkRecord.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.push.apply(value, arguments);
        }
        else {
            throw new Error('unsupported');
        }
    };
    ValueDownlinkRecord.prototype.splice = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.splice.apply(value, arguments);
        }
        else {
            throw new Error('unsupported');
        }
    };
    ValueDownlinkRecord.prototype.delete = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.delete(key);
        }
        else {
            return Value.Absent;
        }
    };
    ValueDownlinkRecord.prototype.clear = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.clear();
        }
        else {
            throw new Error('unsupported');
        }
    };
    ValueDownlinkRecord.prototype.forEach = function (callback, thisArg) {
        var value = this._downlink.get();
        return value.forEach(callback, thisArg);
    };
    return ValueDownlinkRecord;
}(Record));

//# sourceMappingURL=data:application/json;base64,

var BaseRef = (function () {
    function BaseRef(context) {
        this._context = context;
        this._remote = undefined;
        this._downlinks = [];
        this.delegate = {};
    }
    BaseRef.prototype.isConnected = function () {
        return this._remote ? this._remote.isConnected() : false;
    };
    BaseRef.prototype.isAuthenticated = function () {
        return this._remote ? this._remote.isAuthenticated() : false;
    };
    Object.defineProperty(BaseRef.prototype, "session", {
        get: function () {
            return this._remote ? this._remote.session : Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    BaseRef.prototype.authenticate = function (credentials) {
        this._context.authenticate(this.hostUri(), credentials);
    };
    BaseRef.prototype.addDownlink = function (downlink) {
        if (this._downlinks.length === 0) {
            this.open();
        }
        this._downlinks.push(downlink);
    };
    BaseRef.prototype.removeDownlink = function (downlink) {
        var i = this._downlinks.indexOf(downlink);
        if (i >= 0) {
            this._downlinks.splice(i, 1);
            if (this._downlinks.length === 0) {
                this.close();
            }
        }
    };
    BaseRef.prototype.open = function () {
        this._context.openRef(this);
    };
    BaseRef.prototype.close = function () {
        this._context.closeRef(this);
    };
    BaseRef.prototype.closeUp = function () {
        var downlinks = this._downlinks;
        this._downlinks = [];
        for (var i = 0, n = downlinks.length; i < n; i += 1) {
            downlinks[i].close();
        }
    };
    BaseRef.prototype.didConnect = function (didConnect) {
        if (didConnect === undefined) {
            return this.delegate.didConnect || null;
        }
        else {
            this.delegate.didConnect = didConnect || undefined;
            return this;
        }
    };
    BaseRef.prototype.didAuthenticate = function (didAuthenticate) {
        if (didAuthenticate === undefined) {
            return this.delegate.didAuthenticate || null;
        }
        else {
            this.delegate.didAuthenticate = didAuthenticate || undefined;
            return this;
        }
    };
    BaseRef.prototype.didDeauthenticate = function (didDeauthenticate) {
        if (didDeauthenticate === undefined) {
            return this.delegate.didDeauthenticate || null;
        }
        else {
            this.delegate.didDeauthenticate = didDeauthenticate || undefined;
            return this;
        }
    };
    BaseRef.prototype.didDisconnect = function (didDisconnect) {
        if (didDisconnect === undefined) {
            return this.delegate.didDisconnect || null;
        }
        else {
            this.delegate.didDisconnect = didDisconnect || undefined;
            return this;
        }
    };
    BaseRef.prototype.didFail = function (didFail) {
        if (didFail === undefined) {
            return this.delegate.didFail || null;
        }
        else {
            this.delegate.didFail = didFail || undefined;
            return this;
        }
    };
    BaseRef.prototype.hostDidConnect = function (host) {
        this._remote = host;
        if (this.delegate.didConnect) {
            this.delegate.didConnect(host, this);
        }
    };
    BaseRef.prototype.hostDidAuthenticate = function (body, host) {
        if (this.delegate.didAuthenticate) {
            this.delegate.didAuthenticate(body, host, this);
        }
    };
    BaseRef.prototype.hostDidDeauthenticate = function (body, host) {
        if (this.delegate.didDeauthenticate) {
            this.delegate.didDeauthenticate(body, host, this);
        }
    };
    BaseRef.prototype.hostDidDisconnect = function (host) {
        this._remote = undefined;
        if (this.delegate.didDisconnect) {
            this.delegate.didDisconnect(host, this);
        }
    };
    BaseRef.prototype.hostDidFail = function (error, host) {
        if (this.delegate.didFail) {
            this.delegate.didFail(error, host, this);
        }
    };
    return BaseRef;
}());
var HostRef = (function (_super) {
    __extends(HostRef, _super);
    function HostRef(context, hostUri) {
        var _this = _super.call(this, context) || this;
        _this._hostUri = hostUri;
        return _this;
    }
    HostRef.prototype.hostUri = function () {
        return this._hostUri;
    };
    HostRef.prototype.nodeRef = function (nodeUri) {
        nodeUri = Uri.fromAny(nodeUri);
        return new NodeRef(this._context, this._hostUri, nodeUri);
    };
    HostRef.prototype.laneRef = function (nodeUri, laneUri) {
        nodeUri = Uri.fromAny(nodeUri);
        laneUri = Uri.fromAny(laneUri);
        return new LaneRef(this._context, this._hostUri, nodeUri, laneUri);
    };
    HostRef.prototype.downlink = function (init) {
        return new EventDownlink(this._context, this, init, this._hostUri);
    };
    HostRef.prototype.downlinkList = function (init) {
        return new ListDownlink(this._context, this, init, this._hostUri);
    };
    HostRef.prototype.downlinkMap = function (init) {
        return new MapDownlink(this._context, this, init, this._hostUri);
    };
    HostRef.prototype.downlinkValue = function (init) {
        return new ValueDownlink(this._context, this, init, this._hostUri);
    };
    HostRef.prototype.command = function (nodeUri, laneUri, body) {
        this._context.command(this._hostUri, nodeUri, laneUri, body);
    };
    return HostRef;
}(BaseRef));
var NodeRef = (function (_super) {
    __extends(NodeRef, _super);
    function NodeRef(context, hostUri, nodeUri) {
        var _this = _super.call(this, context) || this;
        _this._hostUri = hostUri;
        _this._nodeUri = nodeUri;
        return _this;
    }
    NodeRef.prototype.hostUri = function () {
        return this._hostUri;
    };
    NodeRef.prototype.nodeUri = function () {
        return this._nodeUri;
    };
    NodeRef.prototype.laneRef = function (laneUri) {
        laneUri = Uri.fromAny(laneUri);
        return new LaneRef(this._context, this._hostUri, this._nodeUri, laneUri);
    };
    NodeRef.prototype.downlink = function (init) {
        return new EventDownlink(this._context, this, init, this._hostUri, this._nodeUri);
    };
    NodeRef.prototype.downlinkList = function (init) {
        return new ListDownlink(this._context, this, init, this._hostUri, this._nodeUri);
    };
    NodeRef.prototype.downlinkMap = function (init) {
        return new MapDownlink(this._context, this, init, this._hostUri, this._nodeUri);
    };
    NodeRef.prototype.downlinkValue = function (init) {
        return new ValueDownlink(this._context, this, init, this._hostUri, this._nodeUri);
    };
    NodeRef.prototype.command = function (laneUri, body) {
        this._context.command(this._hostUri, this._nodeUri, laneUri, body);
    };
    return NodeRef;
}(BaseRef));
var LaneRef = (function (_super) {
    __extends(LaneRef, _super);
    function LaneRef(context, hostUri, nodeUri, laneUri) {
        var _this = _super.call(this, context) || this;
        _this._hostUri = hostUri;
        _this._nodeUri = nodeUri;
        _this._laneUri = laneUri;
        return _this;
    }
    LaneRef.prototype.hostUri = function () {
        return this._hostUri;
    };
    LaneRef.prototype.nodeUri = function () {
        return this._nodeUri;
    };
    LaneRef.prototype.laneUri = function () {
        return this._laneUri;
    };
    LaneRef.prototype.downlink = function (init) {
        return new EventDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
    };
    LaneRef.prototype.downlinkList = function (init) {
        return new ListDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
    };
    LaneRef.prototype.downlinkMap = function (init) {
        return new MapDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
    };
    LaneRef.prototype.downlinkValue = function (init) {
        return new ValueDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
    };
    LaneRef.prototype.command = function (body) {
        this._context.command(this._hostUri, this._nodeUri, this._laneUri, body);
    };
    return LaneRef;
}(BaseRef));

//# sourceMappingURL=data:application/json;base64,

var DownlinkScope = (function (_super) {
    __extends(DownlinkScope, _super);
    function DownlinkScope(record) {
        var _this = _super.call(this, record) || this;
        _this._downlinks = [];
        return _this;
    }
    DownlinkScope.prototype.addDownlink = function (downlink) {
        this._downlinks.push(downlink);
    };
    DownlinkScope.prototype.removeDownlink = function (downlink) {
        var i = this._downlinks.indexOf(downlink);
        if (i >= 0) {
            this._downlinks.splice(i, 1);
        }
    };
    DownlinkScope.prototype.initDownlink = function (init, stack) {
        return init;
    };
    DownlinkScope.prototype.downlink = function (init, stack) {
        if (stack === void 0) { stack = this.stack(); }
        return new EventDownlink(this.downlinkContext, this, this.initDownlink(init, stack));
    };
    DownlinkScope.prototype.downlinkList = function (init, stack) {
        if (stack === void 0) { stack = this.stack(); }
        return new ListDownlink(this.downlinkContext, this, this.initDownlink(init, stack));
    };
    DownlinkScope.prototype.downlinkMap = function (init, stack) {
        if (stack === void 0) { stack = this.stack(); }
        return new MapDownlink(this.downlinkContext, this, this.initDownlink(init, stack));
    };
    DownlinkScope.prototype.downlinkValue = function (init, stack) {
        if (stack === void 0) { stack = this.stack(); }
        return new ValueDownlink(this.downlinkContext, this, this.initDownlink(init, stack));
    };
    DownlinkScope.prototype.importDownlink = function (value, stack) {
        var linkDef;
        var init;
        if (isDownlinkImport(value)) {
            var downlinkImport = value;
            var downlink = downlinkImport.downlink;
            linkDef = value.declaration;
            init = this.initDownlink(Downlink.InitForm.cast(linkDef.evaluate(stack).toValue()), stack);
            if (init) {
                if (downlink.hostUri().equals(init.hostUri)
                    && downlink.nodeUri().equals(init.nodeUri)
                    && downlink.laneUri().equals(init.laneUri)) {
                    return downlinkImport;
                }
                else {
                    downlink.close();
                }
            }
            else {
                downlink.close();
                return downlinkImport.declaration;
            }
        }
        else {
            linkDef = value;
            init = Downlink.InitForm.cast(linkDef.evaluate(stack).toValue());
        }
        if (init) {
            try {
                if (init.type === 'list') {
                    return new ListDownlinkImport(this, this.downlinkList(init).open(), linkDef);
                }
                else if (init.type === 'map') {
                    return new MapDownlinkImport(this, this.downlinkMap(init).open(), linkDef);
                }
                else if (init.type === 'value') {
                    return new ValueDownlinkImport(this, this.downlinkValue(init).open(), linkDef);
                }
            }
            catch (e) {
            }
        }
        return value;
    };
    DownlinkScope.prototype.materializeValue = function (value, stack) {
        if (value.tag === 'link' || isDownlinkImport(value)) {
            var downlinkImport = this.importDownlink(value, stack);
            if (isDownlinkImport(downlinkImport)) {
                return downlinkImport;
            }
        }
        return value;
    };
    DownlinkScope.prototype.materializeItem = function (item, stack) {
        if (item instanceof Field) {
            var oldValue = item.value;
            var newValue = this.materializeValue(oldValue, stack);
            if (oldValue !== newValue) {
                return item.withValue(newValue);
            }
        }
        else if (item instanceof Value) {
            var oldValue = item;
            var newValue = this.materializeValue(oldValue, stack);
            if (oldValue !== newValue) {
                return newValue;
            }
        }
        return item;
    };
    DownlinkScope.prototype.materializeScope = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var record = this._record;
        var n = record.length;
        var i = 0;
        while (i < n) {
            var oldItem = record.getItem(i);
            var newItem = this.materializeItem(oldItem, stack);
            if (newItem.isDefined()) {
                if (oldItem !== newItem) {
                    record.setItem(i, newItem);
                }
                i += 1;
            }
            else {
                record.splice(i, 1);
            }
        }
    };
    DownlinkScope.prototype.close = function () {
        var downlinks = this._downlinks;
        this._downlinks = [];
        for (var i = 0, n = downlinks.length; i < n; i += 1) {
            downlinks[i].close();
        }
    };
    return DownlinkScope;
}(RecordScope));
function isDownlinkImport(value) {
    return !!(value instanceof Record && value.declaration);
}
var ListDownlinkImport = (function (_super) {
    __extends(ListDownlinkImport, _super);
    function ListDownlinkImport(scope, downlink, declaration) {
        var _this = _super.call(this, downlink) || this;
        _this._scope = scope;
        _this._declaration = declaration.commit();
        _this.downlink.delegate = _this;
        return _this;
    }
    Object.defineProperty(ListDownlinkImport.prototype, "declaration", {
        get: function () {
            return this._declaration;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlinkImport.prototype.didInsert = function (index, newValue) {
        this._scope.didChange(newValue, Value.Absent, index);
    };
    ListDownlinkImport.prototype.didUpdate = function (index, newValue, oldValue) {
        this._scope.didChange(newValue, oldValue, index);
    };
    ListDownlinkImport.prototype.didMove = function (fromIndex, toIndex, value) {
        this._scope.didChange(value, value, toIndex);
    };
    ListDownlinkImport.prototype.didRemove = function (index, oldValue) {
        this._scope.didChange(Value.Absent, oldValue, index);
    };
    ListDownlinkImport.prototype.didDrop = function (lower) {
        this._scope.didChange();
    };
    ListDownlinkImport.prototype.didTake = function (upper) {
        this._scope.didChange();
    };
    ListDownlinkImport.prototype.didClear = function () {
        this._scope.didChange();
    };
    return ListDownlinkImport;
}(ListDownlinkRecord));
var MapDownlinkImport = (function (_super) {
    __extends(MapDownlinkImport, _super);
    function MapDownlinkImport(scope, downlink, declaration) {
        var _this = _super.call(this, downlink) || this;
        _this._scope = scope;
        _this._declaration = declaration.commit();
        _this.downlink.delegate = _this;
        return _this;
    }
    Object.defineProperty(MapDownlinkImport.prototype, "declaration", {
        get: function () {
            return this._declaration;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlinkImport.prototype.didUpdate = function (key, newValue, oldValue, downlinkScope) {
        this._scope.didChange(Slot.of(key, newValue), Slot.of(key, oldValue), undefined, downlinkScope);
    };
    MapDownlinkImport.prototype.didRemove = function (key, oldValue, downlinkScope) {
        this._scope.didChange(Item.Absent, Slot.of(key, oldValue), downlinkScope);
    };
    MapDownlinkImport.prototype.didDrop = function (lower, downlinkScope) {
        this._scope.didChange(downlinkScope);
    };
    MapDownlinkImport.prototype.didTake = function (upper, downlinkScope) {
        this._scope.didChange(downlinkScope);
    };
    MapDownlinkImport.prototype.didClear = function (downlinkScope) {
        this._scope.didChange(downlinkScope);
    };
    return MapDownlinkImport;
}(MapDownlinkRecord));
var ValueDownlinkImport = (function (_super) {
    __extends(ValueDownlinkImport, _super);
    function ValueDownlinkImport(scope, downlink, declaration) {
        var _this = _super.call(this, downlink) || this;
        _this._scope = scope;
        _this._declaration = declaration.commit();
        _this.downlink.delegate = _this;
        return _this;
    }
    Object.defineProperty(ValueDownlinkImport.prototype, "declaration", {
        get: function () {
            return this._declaration;
        },
        enumerable: true,
        configurable: true
    });
    ValueDownlinkImport.prototype.didSet = function (newValue, oldValue, downlinkScope) {
        this._scope.didChange(newValue, oldValue, undefined, downlinkScope);
    };
    return ValueDownlinkImport;
}(ValueDownlinkRecord));
//# sourceMappingURL=data:application/json;base64,

var WebSocketHost = (function (_super) {
    __extends(WebSocketHost, _super);
    function WebSocketHost(context, hostUri, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, context, hostUri, options) || this;
        _this.onWebSocketOpen = _this.onWebSocketOpen.bind(_this);
        _this.onWebSocketMessage = _this.onWebSocketMessage.bind(_this);
        _this.onWebSocketClose = _this.onWebSocketClose.bind(_this);
        _this.onWebSocketError = _this.onWebSocketError.bind(_this);
        return _this;
    }
    Object.defineProperty(WebSocketHost.prototype, "WebSocket", {
        get: function () {
            return this._options.WebSocket
                || typeof WebSocket !== 'undefined' && WebSocket
                || typeof require === 'function' && require('ws')
                || undefined;
        },
        enumerable: true,
        configurable: true
    });
    WebSocketHost.prototype.isConnected = function () {
        return this._socket ? this._socket.readyState === this._socket.OPEN : false;
    };
    WebSocketHost.prototype.open = function () {
        this.clearReconnect();
        if (!this._socket) {
            var WebSocket_1 = this.WebSocket;
            if (!WebSocket_1) {
                throw new Error('undefined WebSocket');
            }
            var hostUri = this._hostUri;
            if (hostUri.scheme().name === 'swim') {
                hostUri = hostUri.scheme('ws');
            }
            else if (hostUri.scheme().name === 'swims') {
                hostUri = hostUri.scheme('wss');
            }
            if (this._options.protocols) {
                this._socket = new WebSocket_1(hostUri.toUri(), this._options.protocols);
            }
            else {
                this._socket = new WebSocket_1(hostUri.toUri());
            }
            this._socket.onopen = this.onWebSocketOpen;
            this._socket.onmessage = this.onWebSocketMessage;
            this._socket.onclose = this.onWebSocketClose;
            this._socket.onerror = this.onWebSocketError;
        }
    };
    WebSocketHost.prototype.close = function () {
        this.clearReconnect();
        this.clearIdle();
        if (this._socket) {
            this._socket.close();
            if (!this._context.isOnline()) {
                this.onWebSocketClose();
            }
        }
        else {
            _super.prototype.close.call(this);
        }
    };
    WebSocketHost.prototype.push = function (envelope) {
        if (this.isConnected()) {
            this.clearIdle();
            var text = envelope.toRecon();
            this._socket.send(text);
            this.watchIdle();
        }
        else if (envelope instanceof CommandMessage) {
            if (this._sendBuffer.length < this.sendBufferSize) {
                this._sendBuffer.push(envelope);
            }
            else {
                throw new Error('send buffer overflow');
            }
            this.open();
        }
    };
    WebSocketHost.prototype.onWebSocketOpen = function () {
        if (this.isConnected()) {
            var credentials = this.credentials;
            if (credentials.isDefined()) {
                var request = new AuthRequest(credentials);
                this.push(request);
            }
            this.onConnect();
            var envelope = void 0;
            while ((envelope = this._sendBuffer.shift()) && this.isConnected()) {
                this.push(envelope);
            }
            this.watchIdle();
        }
        else {
            this.close();
        }
    };
    WebSocketHost.prototype.onWebSocketMessage = function (message) {
        var data = message.data;
        if (typeof data === 'string') {
            var envelope = Envelope.parseRecon(data);
            if (envelope) {
                this.onEnvelope(envelope);
            }
            else {
                this.onUnknownEnvelope(data);
            }
        }
    };
    WebSocketHost.prototype.onWebSocketClose = function () {
        if (this._socket) {
            this._socket.onopen = undefined;
            this._socket.onmessage = undefined;
            this._socket.onclose = undefined;
            this._socket.onerror = undefined;
            this._socket = undefined;
        }
        this.onDisconnect();
        this.clearIdle();
        if (!this.isIdle()) {
            if (this._context.isOnline()) {
                this.reconnect();
            }
        }
        else {
            this.close();
        }
    };
    WebSocketHost.prototype.onWebSocketError = function () {
        this.onError();
        if (this._socket) {
            this._socket.close();
        }
    };
    return WebSocketHost;
}(RemoteHost));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic29ja2V0LWhvc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJzb2NrZXQtaG9zdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUEyQixVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFDLFFBQVEsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBV2pFO0lBQW1DLHlDQUFVO0lBTTNDLHVCQUFZLE9BQW9CLEVBQUUsT0FBWSxFQUFFLE9BQWtDO1FBQWxDLHdCQUFBLEVBQUEsWUFBa0M7UUFBbEYsWUFDRSxrQkFBTSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxTQUtqQztRQUpDLEtBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLENBQUM7UUFDdkQsS0FBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLENBQUM7UUFDN0QsS0FBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLENBQUM7UUFDekQsS0FBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLENBQUM7O0lBQzNELENBQUM7SUFFRCxzQkFBSSxvQ0FBUzthQUFiO1lBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVM7bUJBQ3ZCLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTO21CQUM3QyxPQUFPLE9BQU8sS0FBSyxVQUFVLElBQUksT0FBTyxDQUFDLElBQUksQ0FBeUI7bUJBQ3RFLFNBQVMsQ0FBQztRQUNuQixDQUFDOzs7T0FBQTtJQUVELG1DQUFXLEdBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FB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

var Client = (function () {
    function Client(options) {
        if (options === void 0) { options = {}; }
        this._options = options;
        this._hosts = new BTree();
        this._downlinks = new BTree();
        this._downlinkCount = 0;
        this._refs = [];
        this._online = true;
        this.delegate = {};
        this.onOnline = this.onOnline.bind(this);
        this.onOffline = this.onOffline.bind(this);
        this.watchOnline(!!options.keepOnline);
    }
    Client.prototype.isOnline = function (online) {
        if (online === undefined) {
            return this._online;
        }
        else {
            if (this._online !== online) {
                this._online = online;
                this._hosts.forEach(function (hostUri, host) {
                    if (online) {
                        host.open();
                    }
                    else {
                        host.close();
                    }
                }, this);
            }
            return this;
        }
    };
    Client.prototype.keepOnline = function (keepOnline) {
        if (keepOnline === undefined) {
            return !!this._options.keepOnline;
        }
        else {
            if (this._options.keepOnline !== keepOnline) {
                this._options.keepOnline = keepOnline;
                this.watchOnline(keepOnline);
            }
            return this;
        }
    };
    Client.prototype.watchOnline = function (keepOnline) {
        if (typeof window === 'object') {
            if (keepOnline) {
                window.addEventListener('online', this.onOnline);
                window.addEventListener('offline', this.onOffline);
            }
            else {
                window.removeEventListener('online', this.onOnline);
                window.removeEventListener('offline', this.onOffline);
            }
        }
    };
    Client.prototype.onOnline = function (event) {
        this.isOnline(true);
    };
    Client.prototype.onOffline = function (event) {
        this.isOnline(false);
    };
    Client.prototype.getHost = function (hostUri) {
        hostUri = Uri.fromAny(hostUri);
        return this._hosts.get(hostUri);
    };
    Client.prototype.openHost = function (hostUri) {
        hostUri = Uri.fromAny(hostUri);
        var host = this._hosts.get(hostUri);
        if (!host) {
            host = new WebSocketHost(this, hostUri, this._options);
            this._hosts.set(hostUri, host);
        }
        return host;
    };
    Client.prototype.closeHost = function (host) {
        if (this._hosts.get(host._hostUri)) {
            this._hosts.delete(host._hostUri);
            host.closeUp();
        }
    };
    Client.prototype.getDownlink = function (hostUri, nodeUri, laneUri) {
        var hostDownlinks = this._downlinks.get(hostUri);
        if (hostDownlinks) {
            var nodeDownlinks = hostDownlinks.get(nodeUri);
            if (nodeDownlinks) {
                return nodeDownlinks.get(laneUri);
            }
        }
        return undefined;
    };
    Client.prototype.openDownlink = function (downlink) {
        var hostUri = downlink.hostUri();
        var nodeUri = downlink.nodeUri();
        var laneUri = downlink.laneUri();
        var hostDownlinks = this._downlinks.get(hostUri);
        if (!hostDownlinks) {
            hostDownlinks = new BTree();
            this._downlinks.set(hostUri, hostDownlinks);
        }
        var nodeDownlinks = hostDownlinks.get(nodeUri);
        if (!nodeDownlinks) {
            nodeDownlinks = new BTree();
            hostDownlinks.set(nodeUri, nodeDownlinks);
        }
        if (nodeDownlinks.has(laneUri)) {
            throw new Error('duplicate downlink');
        }
        nodeDownlinks.set(laneUri, downlink);
        this._downlinkCount += 1;
        var host = this.openHost(hostUri);
        host.openDownlink(downlink);
    };
    Client.prototype.unlinkDownlink = function (downlink) {
        var hostUri = downlink.hostUri();
        var host = this.getHost(hostUri);
        if (host) {
            host.unlinkDownlink(downlink);
        }
    };
    Client.prototype.closeDownlink = function (downlink) {
        var hostUri = downlink.hostUri();
        var nodeUri = downlink.nodeUri();
        var laneUri = downlink.laneUri();
        var hostDownlinks = this._downlinks.get(hostUri);
        if (hostDownlinks) {
            var nodeDownlinks = hostDownlinks.get(nodeUri);
            if (nodeDownlinks) {
                if (nodeDownlinks.get(laneUri)) {
                    this._downlinkCount -= 1;
                    nodeDownlinks.delete(laneUri);
                    if (nodeDownlinks.isEmpty()) {
                        hostDownlinks.delete(nodeUri);
                        if (hostDownlinks.isEmpty()) {
                            this._downlinks.delete(hostUri);
                        }
                    }
                    var host = this.getHost(hostUri);
                    if (host) {
                        host.closeDownlink(downlink);
                    }
                }
            }
        }
    };
    Client.prototype.downlink = function (init) {
        return new EventDownlink(this, undefined, init);
    };
    Client.prototype.downlinkList = function (init) {
        return new ListDownlink(this, undefined, init);
    };
    Client.prototype.downlinkMap = function (init) {
        return new MapDownlink(this, undefined, init);
    };
    Client.prototype.downlinkValue = function (init) {
        return new ValueDownlink(this, undefined, init);
    };
    Client.prototype.openRef = function (ref) {
        this._refs.push(ref);
    };
    Client.prototype.closeRef = function (ref) {
        var index = this._refs.indexOf(ref);
        if (index >= 0) {
            this._refs.splice(index, 1);
            ref.closeUp();
        }
    };
    Client.prototype.hostRef = function (hostUri) {
        hostUri = Uri.fromAny(hostUri);
        return new HostRef(this, hostUri);
    };
    Client.prototype.nodeRef = function (hostUri, nodeUri) {
        hostUri = Uri.fromAny(hostUri);
        if (nodeUri === undefined) {
            nodeUri = hostUri;
            hostUri = nodeUri.base();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        else {
            nodeUri = Uri.fromAny(nodeUri);
        }
        return new NodeRef(this, hostUri, nodeUri);
    };
    Client.prototype.laneRef = function (hostUri, nodeUri, laneUri) {
        hostUri = Uri.fromAny(hostUri);
        nodeUri = Uri.fromAny(nodeUri);
        if (laneUri === undefined) {
            laneUri = nodeUri;
            nodeUri = hostUri;
            hostUri = nodeUri.base();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        else {
            laneUri = Uri.fromAny(laneUri);
        }
        return new LaneRef(this, hostUri, nodeUri, laneUri);
    };
    Client.prototype.authenticate = function (hostUri, credentials) {
        hostUri = Uri.fromAny(hostUri);
        credentials = Value.fromAny(credentials);
        var host = this.openHost(hostUri);
        host.authenticate(credentials);
    };
    Client.prototype.command = function (hostUri, nodeUri, laneUri, body) {
        hostUri = Uri.fromAny(hostUri);
        nodeUri = Uri.fromAny(nodeUri);
        if (arguments.length === 3) {
            body = laneUri;
            laneUri = nodeUri;
            nodeUri = hostUri;
            hostUri = nodeUri.base();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        else {
            laneUri = Uri.fromAny(laneUri);
        }
        body = Value.fromAny(body);
        var host = this.openHost(hostUri);
        host.command(nodeUri, laneUri, body);
    };
    Client.prototype.close = function () {
        var refs = this._refs;
        this._refs = [];
        for (var i = 0; i < refs.length; i += 1) {
            refs[i].closeUp();
        }
        var downlinks = this._downlinks.clone();
        this._downlinks.clear();
        this._downlinkCount = 0;
        downlinks.forEach(function (hostUri, hostDownlinks) {
            hostDownlinks.forEach(function (nodeUri, nodeDownlinks) {
                nodeDownlinks.forEach(function (laneUri, downlink) {
                    downlink.closeUp();
                    var host = this.getHost(hostUri);
                    if (host) {
                        host.closeDownlink(downlink);
                    }
                }, this);
            }, this);
        }, this);
        var hosts = this._hosts.clone();
        this._hosts.clear();
        hosts.forEach(function (hostUri, host) {
            host.closeUp();
        }, this);
    };
    Client.prototype.didConnect = function (didConnect) {
        if (didConnect === undefined) {
            return this.delegate.didConnect || null;
        }
        else {
            this.delegate.didConnect = didConnect || undefined;
            return this;
        }
    };
    Client.prototype.didAuthenticate = function (didAuthenticate) {
        if (didAuthenticate === undefined) {
            return this.delegate.didAuthenticate || null;
        }
        else {
            this.delegate.didAuthenticate = didAuthenticate || undefined;
            return this;
        }
    };
    Client.prototype.didDeauthenticate = function (didDeauthenticate) {
        if (didDeauthenticate === undefined) {
            return this.delegate.didDeauthenticate || null;
        }
        else {
            this.delegate.didDeauthenticate = didDeauthenticate || undefined;
            return this;
        }
    };
    Client.prototype.didDisconnect = function (didDisconnect) {
        if (didDisconnect === undefined) {
            return this.delegate.didDisconnect || null;
        }
        else {
            this.delegate.didDisconnect = didDisconnect || undefined;
            return this;
        }
    };
    Client.prototype.didFail = function (didFail) {
        if (didFail === undefined) {
            return this.delegate.didFail || null;
        }
        else {
            this.delegate.didFail = didFail || undefined;
            return this;
        }
    };
    Client.prototype.hostDidConnect = function (host) {
        if (this.delegate.didConnect) {
            this.delegate.didConnect(host, this);
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host._hostUri)) {
                ref.hostDidConnect(host);
            }
        }
    };
    Client.prototype.hostDidAuthenticate = function (body, host) {
        if (this.delegate.didAuthenticate) {
            this.delegate.didAuthenticate(body, host, this);
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host._hostUri)) {
                ref.hostDidAuthenticate(body, host);
            }
        }
    };
    Client.prototype.hostDidDeauthenticate = function (body, host) {
        if (this.delegate.didDeauthenticate) {
            this.delegate.didDeauthenticate(body, host, this);
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host._hostUri)) {
                ref.hostDidDeauthenticate(body, host);
            }
        }
    };
    Client.prototype.hostDidDisconnect = function (host) {
        if (this.delegate.didDisconnect) {
            this.delegate.didDisconnect(host, this);
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host._hostUri)) {
                ref.hostDidDisconnect(host);
            }
        }
    };
    Client.prototype.hostDidFail = function (error, host) {
        if (this.delegate.didFail) {
            this.delegate.didFail(error, host, this);
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host._hostUri)) {
                ref.hostDidFail(error, host);
            }
        }
    };
    return Client;
}());

//# sourceMappingURL=data:application/json;base64,

var client = new Client();
var isOnline = client.isOnline.bind(client);
var keepOnline = client.keepOnline.bind(client);
var downlink = client.downlink.bind(client);
var downlinkList = client.downlinkList.bind(client);
var downlinkMap = client.downlinkMap.bind(client);
var downlinkValue = client.downlinkValue.bind(client);
var hostRef = client.hostRef.bind(client);
var nodeRef = client.nodeRef.bind(client);
var laneRef = client.laneRef.bind(client);
var authenticate = client.authenticate.bind(client);
var command = client.command.bind(client);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsUUFBUSxFQUNSLFlBQVksRUFDWixjQUFjLEVBQ2QsV0FBVyxFQUNYLGNBQWMsRUFDZCxXQUFXLEVBQ1gsY0FBYyxFQUNkLGFBQWEsRUFDYixnQkFBZ0IsRUFDaEIsV0FBVyxFQUNYLGNBQWMsRUFDZCxhQUFhLEVBQ2IsZ0JBQWdCLEdBQ2pCLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFFTCxVQUFVLEdBQ1gsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUtMLFFBQVEsR0FFVCxNQUFNLFlBQVksQ0FBQztBQUVwQixPQUFPLEVBR0wsYUFBYSxHQUNkLE1BQU0sa0JBQWtCLENBQUM7QUFFMUIsT0FBTyxFQUdMLFlBQVksRUFDWixrQkFBa0IsR0FDbkIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBR0wsV0FBVyxFQUNYLGlCQUFpQixHQUNsQixNQUFNLGdCQUFnQixDQUFDO0FBRXhCLE9BQU8sRUFHTCxhQUFhLEVBQ2IsbUJBQW1CLEdBQ3BCLE1BQU0sa0JBQWtCLENBQUM7QUFFMUIsT0FBTyxFQUdMLE9BQU8sRUFDUCxPQUFPLEVBQ1AsT0FBTyxHQUNSLE1BQU0sT0FBTyxDQUFDO0FBRWYsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRS9DLE9BQU8sRUFFTCxNQUFNLEdBQ1AsTUFBTSxVQUFVLENBQUM7QUFFbEIsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUNoQyxNQUFNLENBQUMsSUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztBQUNuQyxNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckQsTUFBTSxDQUFDLElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3pELE1BQU0sQ0FBQyxJQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNyRCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0QsTUFBTSxDQUFDLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNELE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvRCxNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkQsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25ELE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuRCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0QsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDIn0=

var Controller = (function () {
    function Controller(id, componentInfo, componentReference, parentView, stack, eventManager) {
        this._isRunning = false;
        this._hasLink = false;
        this._downlinks = {};
        this._downlinksMap = {};
        if (id) {
            this._id = id;
        }
        this._mainComponent = componentReference;
        this._componentInfo = componentInfo;
        this._componentData = this._componentInfo.body();
        this._stack = stack;
        this._parentView = parentView;
        this._eventManager = eventManager;
        this._childComponents = [];
        if (this._componentData instanceof RecordMap) {
            this.stack().push(this._componentData);
        }
    }
    Controller.prototype.create = function () {
        this.model().setData(this._componentInfo);
        if (this.view() !== null && this.view() !== undefined) {
            this.view().setModel(this.model().modelScope);
            this.view().create();
            this.animator = new ComponentAnimator(this.view());
        }
    };
    Controller.prototype.remove = function () {
        var _this = this;
        this.stop();
        Object.keys(this._downlinks).forEach(function (downlinkKey) {
            _this._downlinks[downlinkKey].close();
        });
        this.view().remove();
    };
    Controller.prototype.start = function () {
        var _this = this;
        this._isRunning = true;
        this._componentData.forEach(function (valueItem) {
            var valueData = valueItem.value;
            if (valueData && valueData.tag === 'link') {
                _this._hasLink = true;
                var downlinkImport = _this.model().importDownlink(valueData, _this._stack);
                var newDownlink = downlinkImport.downlink;
                var downlinkKey = "" + newDownlink.hostUri() + newDownlink.nodeUri() + "/" + newDownlink.laneUri();
                _this.downlinks()[downlinkKey] = newDownlink;
                _this.downlinksMap()[valueItem.key.toString()] = _this.downlinks()[downlinkKey];
                _this.eventManager().addEventListener(AppEventTypes.didChange, downlinkKey, _this.onLinkData.bind(_this));
            }
        });
        if (this.view() !== null && this.view() !== undefined) {
            this.view().start();
        }
    };
    Controller.prototype.stop = function () {
        var _this = this;
        this._isRunning = false;
        Object.keys(this._downlinks).forEach(function (downlinkKey) {
            _this.eventManager().removeEventListener(AppEventTypes.didChange, downlinkKey, _this.onLinkData.bind(_this));
        });
        if (this.view() !== null && this.view() !== undefined) {
            this.view().stop();
        }
    };
    Controller.prototype.childComponents = function () {
        return this._childComponents;
    };
    Controller.prototype.resize = function () {
        this.view().resize();
        this._childComponents.forEach(function (child) {
            child.resize();
        });
    };
    Controller.prototype.render = function (frameNumber) {
        if (!this._isRunning) {
            return;
        }
        if (this.animator) {
        }
        if (this.view() !== null && this.view() !== undefined) {
            this._view.render(frameNumber);
        }
    };
    Controller.prototype.onLinkData = function (linkData, eventUID) {
        if (!this._isRunning || !this._hasLink) {
            return;
        }
    };
    Controller.prototype.setViewAttributes = function (newState, skip) {
        if (skip === void 0) { skip = []; }
        var trans = newState.get('transition').cast(Transition.Form);
        if (!trans) {
            trans = this.stack().get('transition').cast(Transition.Form);
        }
        for (var _i = 0, _a = this.model().params; _i < _a.length; _i++) {
            var param = _a[_i];
            var name_1 = param.getName();
            var type = param.getType();
            var newStateValue = this.getStateValue(name_1, type, newState);
            if (newStateValue && skip.indexOf(name_1) === -1) {
                if (type instanceof Array) {
                    for (var _b = 0, type_1 = type; _b < type_1.length; _b++) {
                        var subParam = type_1[_b];
                        var subName = subParam.getName();
                        var subType = subParam.getType();
                        var subStateValue = this.getStateValue(subName, subType, newStateValue.get(name_1));
                        if (subStateValue) {
                            var fullKey = "" + name_1.replace('Style', '') + subName.charAt(0).toLocaleUpperCase() + subName.substr(1);
                            if (subType instanceof Array) {
                                this.processViewAttributes(subStateValue.get(subName), fullKey, subType, trans);
                            }
                            else {
                                this.processViewAttributes(subStateValue, fullKey, subType, trans);
                            }
                        }
                    }
                }
                else {
                    this.processViewAttributes(newStateValue, name_1, type, trans);
                }
            }
        }
    };
    Controller.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
    };
    Controller.prototype.processLinkDataValues = function (componentData, newState, skip) {
        for (var i = 0; i < componentData.length; i++) {
            var currItem = componentData.getItem(i);
            if (currItem instanceof RecordMap) {
                this.processLinkDataValues(currItem, newState, skip);
            }
            else {
                if (skip.indexOf(currItem.key.toString()) === -1) {
                    var newStack = EvalStack.of(Model.GlobalScope, newState);
                    var expr = this._componentData.get(currItem.key);
                    var postEval = expr.evaluate(newStack);
                    newState.push(new Slot(Value.parseRecon(currItem.key.toString()), postEval.toValue()));
                }
            }
        }
    };
    Controller.prototype.handleTextField = function (keyName, selector, newState) {
        var newRecord = Record.empty();
        selector.forEach(function (value) {
            var newValue;
            if (value instanceof InvokeExpr) {
                var newArgs_1 = Record.empty();
                value.args.forEach(function (args) {
                    newArgs_1.withItem(args.evaluate(newState));
                });
                newValue = new InvokeExpr(value.func, newArgs_1);
            }
            else {
                newValue = value.evaluate(newState);
            }
            newRecord.withItem(newValue);
        });
        var key = Value.parseRecon(keyName);
        var slot = new Slot(key, newRecord);
        newState.push(slot);
    };
    Controller.prototype.getStateValue = function (name, type, newState) {
        var newStateValue;
        if (type === Value) {
            newStateValue = newState.get(name).numberValue();
        }
        else if (type === Text$1 || typeof type === 'function') {
            newStateValue = newState.get(name);
        }
        else if (type === Model || type instanceof Array || type === Transform) {
            newStateValue = newState;
        }
        else {
            var selection = newState.get(name);
            if (selection && selection.cast && type) {
                newStateValue = newState.get(name).cast(type);
            }
            else {
                console.error(newState, name, type);
            }
        }
        return newStateValue;
    };
    Controller.prototype.getLinkUID = function (linkInfo) {
        var currUid = '';
        var linkEval = linkInfo.evaluate(this.stack());
        var linkHost = linkEval.get('link').get('host').toString();
        var linkNode = linkEval.get('link').get('node').toString();
        var linkLane = linkEval.get('link').get('lane').toString();
        currUid = "" + linkHost + linkNode + "/" + linkLane;
        return currUid;
    };
    Controller.prototype.id = function (newModel) {
        if (newModel) {
            this._id = newModel;
        }
        return this._id;
    };
    Controller.prototype.model = function (newModel) {
        if (newModel) {
            this._model = newModel;
        }
        return this._model;
    };
    Controller.prototype.downlinks = function (newLinks) {
        if (newLinks) {
            this._downlinks = newLinks;
        }
        return this._downlinks;
    };
    Controller.prototype.downlinksMap = function () {
        return this._downlinksMap;
    };
    Controller.prototype.view = function (newView) {
        if (newView) {
            this._view = newView;
        }
        return this._view;
    };
    Controller.prototype.stack = function (newStack) {
        if (newStack) {
            this._stack = newStack;
        }
        return this._stack;
    };
    Controller.prototype.eventManager = function (eventManager) {
        if (eventManager) {
            this._eventManager = eventManager;
        }
        return (this._eventManager) ? this._eventManager : null;
    };
    Controller.prototype.componentData = function (newData) {
        if (newData) {
            this._componentData = newData;
        }
        return this._componentData;
    };
    Controller.prototype.propertyKey = function (accessor, key, value, trans) {
        var animator = accessor.animator(this, key);
        if (value === undefined) {
            if (animator) {
                return animator.get();
            }
            else {
                return accessor.get(this, key);
            }
        }
        else if (value === null) {
            accessor.set(this, null);
            return this;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = accessor.animator(this, key, value, trans);
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                accessor.set(this, key, value);
            }
            return this;
        }
    };
    Controller.prototype.propertyKeyNumber = function (accessor, key, value, trans) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.propertyKey(accessor, key, value, trans);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    Controller.prototype.propertyKeyColor = function (accessor, key, value, trans) {
        if (value !== undefined && value !== null) {
            value = Color.fromAny(value);
        }
        var result = this.propertyKey(accessor, key, value, trans);
        if (typeof result === 'string') {
            result = Color.fromAny(result);
        }
        return result;
    };
    Controller.prototype.property = function (accessor, value, trans) {
        var animator = accessor.animator(this);
        if (value === undefined) {
            if (animator) {
                return animator.get();
            }
            else {
                return accessor.get(this);
            }
        }
        else if (value === null) {
            accessor.set(this, null);
            return this;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = accessor.animator(this, value, trans);
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                accessor.set(this, value);
            }
            return this;
        }
    };
    Controller.prototype.propertyNumber = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    Controller.prototype.propertyColor = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = Color.fromAny(value);
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = Color.fromAny(result);
        }
        return result;
    };
    Controller.prototype.propertyEnum = function (accessor, value, trans) {
        return this.property(accessor, value, trans);
    };
    Controller.prototype.propertyNumberEnum = function (accessor, value, trans) {
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string' && isFinite(+result)) {
            result = +result;
        }
        return result;
    };
    Controller.prototype.propertyAngle = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = Angle.fromAny(value);
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = Angle.fromAny(result);
        }
        return result;
    };
    Controller.prototype.propertyKeyAngle = function (accessor, key, value, trans) {
        if (value !== undefined && value !== null) {
            value = Angle.fromAny(value);
        }
        var result = this.propertyKey(accessor, key, value, trans);
        if (typeof result === 'string') {
            result = Angle.fromAny(result);
        }
        return result;
    };
    Controller.prototype.propertyKeyLength = function (accessor, key, value, trans) {
        if (value !== undefined && value !== null) {
            value = Length.fromAny(value, this._view.node);
        }
        var result = this.propertyKey(accessor, key, value, trans);
        if (typeof result === 'string') {
            result = Length.fromAny(result, this._view.node);
        }
        return result;
    };
    Controller.prototype.propertyLength = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = Length.fromAny(value, this._view.node);
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = Length.fromAny(result, this._view.node);
        }
        return result;
    };
    Controller.prototype.propertyLengthEnum = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            try {
                value = Length.fromAny(value, this._view.node);
            }
            catch (swallow) {
            }
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            try {
                result = Length.fromAny(result, this._view.node);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    Controller.prototype.propertyColorEnum = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            try {
                value = Color.fromAny(value);
            }
            catch (swallow) {
            }
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            try {
                result = Color.fromAny(result);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    Controller.prototype.propertyBoolean = function (accessor, value, trans) {
        return this.property(accessor, value, trans);
    };
    return Controller;
}());

//# sourceMappingURL=data:application/json;base64,

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDIn0=

var AppEventManager = (function () {
    function AppEventManager() {
        this._eventListeners = {};
        for (var type in AppEventTypes) {
            this._eventListeners[type] = [];
        }
    }
    AppEventManager.prototype.addEventListener = function (eventType, eventUID, callback) {
        if (this._eventListeners[eventType] !== undefined) {
            var targetControlEvt = this._eventListeners[eventType]["'" + eventUID + "'"] || null;
            if (targetControlEvt !== null) {
                var functionArr = new Array();
                for (var i = 0; i < targetControlEvt.length; i++) {
                    if (callback === targetControlEvt[i]) {
                        console.error("event already exists");
                        return;
                    }
                    else {
                        var addEvent = true;
                        for (var x = 0; x < functionArr.length; x++) {
                            if (targetControlEvt[i] === functionArr[x]) {
                                addEvent = false;
                            }
                        }
                        if (addEvent) {
                            functionArr.push(targetControlEvt[i]);
                        }
                    }
                }
                functionArr.push(callback);
                this._eventListeners[eventType]["'" + eventUID + "'"] = functionArr;
            }
            else {
                this._eventListeners[eventType]["'" + eventUID + "'"] = [callback];
            }
        }
    };
    AppEventManager.prototype.removeEventListener = function (eventType, eventUID, callback) {
        var tempEventList = [];
        if (this._eventListeners[eventType] !== undefined) {
            for (var control in this._eventListeners[eventType]) {
                if (callback === null || callback === undefined) {
                    if ("'" + eventUID + "'" !== control && this._eventListeners[eventType][control] !== undefined) {
                        tempEventList[control] = this._eventListeners[eventType][control];
                    }
                }
                else {
                    if ("'" + eventUID + "'" === control && this._eventListeners[eventType][control] !== undefined) {
                        var newArr = new Array();
                        var currControlEvents = this._eventListeners[eventType][control];
                        var eventLen = currControlEvents.length;
                        for (var i = 0; i < eventLen; i++) {
                            if (currControlEvents[i] !== callback) {
                                newArr.push(currControlEvents[i]);
                            }
                        }
                        this._eventListeners[eventType][control] = newArr;
                    }
                    tempEventList[control] = this._eventListeners[eventType][control];
                }
            }
            this._eventListeners[eventType] = tempEventList;
        }
        return false;
    };
    AppEventManager.prototype.triggerEvent = function (eventType, eventUID, eventData) {
        if (eventUID !== 'renderFrame') {
        }
        if (this._eventListeners[eventType] !== undefined) {
            var newEvent = this._eventListeners[eventType]["'" + eventUID + "'"] || null;
            if (newEvent !== null) {
                if (typeof newEvent === "function") {
                    newEvent(eventData, eventUID);
                    return true;
                }
                if (typeof newEvent === "object") {
                    for (var key in newEvent) {
                        newEvent[key](eventData, eventUID);
                    }
                    return true;
                }
            }
        }
        return false;
    };
    AppEventManager.prototype.dumpEvents = function () {
        console.info('EventManager.triggerEvent', this._eventListeners);
    };
    return AppEventManager;
}());
var AppEventTypes = {
    click: "click",
    message: "message",
    onLink: "onLink",
    onUnlink: "onUnlink",
    didChange: 'didChange',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWV2ZW50LW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHAtZXZlbnQtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUlFO1FBRlEsb0JBQWUsR0FBMkIsRUFBRSxDQUFDO1FBSW5ELEtBQUssSUFBTSxJQUFJLElBQUksYUFBYSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVELDBDQUFnQixHQUFoQixVQUFpQixTQUFpQixFQUFFLFFBQWdCLEVBQUUsUUFBNkI7UUFFakYsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNqRCxJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUM7WUFDdkYsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUU7Z0JBQzdCLElBQU0sV0FBVyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7Z0JBQ2hDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ2hELElBQUksUUFBUSxLQUFLLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7d0JBQ3RDLE9BQU87cUJBQ1I7eUJBQU07d0JBQ0wsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO3dCQUNwQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs0QkFDM0MsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxXQUFX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

function ParentElement(node, tagname) {
    if (node === null) {
        return undefined;
    }
    if (tagname === undefined) {
        return node.parentElement;
    }
    else {
        var parent_1 = node.parentNode;
        tagname = tagname.toUpperCase();
        while (parent_1.tagName !== "HTML") {
            if (parent_1.tagName === tagname) {
                return parent_1;
            }
            parent_1 = parent_1.parentNode;
        }
        return parent_1;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZWxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxNQUFNLFVBQVUsYUFBYSxDQUFDLElBQWlCLEVBQUUsT0FBZ0I7SUFDL0QsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1FBQUUsT0FBTyxTQUFTLENBQUM7S0FBRTtJQUV4QyxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7UUFFekIsT0FBTyxJQUFJLENBQUMsYUFBNEIsQ0FBQztLQUMxQztTQUFNO1FBR0wsSUFBSSxRQUFNLEdBQUcsSUFBSSxDQUFDLFVBQXlCLENBQUM7UUFDNUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoQyxPQUFPLFFBQU0sQ0FBQyxPQUFPLEtBQUssTUFBTSxFQUFFO1lBQ2hDLElBQUksUUFBTSxDQUFDLE9BQU8sS0FBSyxPQUFPLEVBQUU7Z0JBQzlCLE9BQU8sUUFBTSxDQUFDO2FBQ2Y7WUFDRCxRQUFNLEdBQUcsUUFBTSxDQUFDLFVBQXlCLENBQUM7U0FDM0M7UUFDRCxPQUFPLFFBQU0sQ0FBQztLQUNmO0FBQ0gsQ0FBQyJ9

var Utils = (function () {
    function Utils() {
    }
    Utils.newGuid = function () {
        return 'xxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = (c === 'x') ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    Utils.stringToValue = function (stringValue) {
        if (!stringValue) {
            console.error('Utils.stringToValue no string value to cast');
            return null;
        }
        return Value.parseRecon(stringValue);
    };
    Utils.materializeScripts = function (parentNode, eventManager) {
        var newComponents = [];
        if (typeof document !== 'undefined') {
            var scripts = parentNode.querySelectorAll('script[type="text/recon"]');
            for (var i = 0; i < scripts.length; i += 1) {
                var scriptTag = scripts[i];
                if (scriptTag instanceof HTMLElement) {
                    var evalStack = EvalStack.of(Item.GlobalScope, View.GlobalScope);
                    var newComponent = Utils.materializeScript(scriptTag, evalStack, eventManager);
                    if (newComponent) {
                        newComponents.push(newComponent);
                    }
                }
            }
        }
        return newComponents;
    };
    Utils.materializeScript = function (scriptElement, evalStack, eventManager) {
        if (!evalStack) {
            console.error('Eval stack required');
        }
        var text = scriptElement.innerText;
        var tagValue = Utils.stringToValue(text);
        if (tagValue) {
            var component = this.cast(scriptElement, tagValue, evalStack, eventManager);
            if (component instanceof UiComponent) {
                return component;
            }
        }
        return null;
    };
    Utils.cast = function (parentElement, value, stack, eventManager) {
        var componentId = Utils.newGuid();
        if (!value.get('id').isEmpty()) {
            componentId = value.get('id').toString();
        }
        if (value.tag) {
            var swim_1 = window.swim;
            var facadeClass = swim_1.UiComponent.Global._uiComponentsMap[value.tag];
            var directiveClass = DirectiveForm.Global.cast(value);
            if (facadeClass) {
                var facadeComp = new facadeClass(value.tag);
                var newComponent = facadeComp.create(parentElement, value, stack, eventManager, componentId);
                return newComponent;
            }
            else if (directiveClass) {
            }
            else {
                console.error('Utils.cast: facade class not found', value.tag);
            }
        }
        else {
        }
        return undefined;
    };
    Utils.openSwimValueLink = function (linkConfig) {
        return new SwimLink('value', linkConfig).downlink;
    };
    Utils.openSwimMapLink = function (linkConfig) {
        return new SwimLink('map', linkConfig).downlink;
    };
    Utils.parseHost = function (host) {
        var hostObject = {};
        var parseHost = null;
        if (host.indexOf('://') !== -1) {
            parseHost = host.split('://');
            hostObject.isSecure = (parseHost[0] === 'wss') ? true : false;
        }
        else {
            hostObject.isSecure = false;
        }
        parseHost = (parseHost) ? parseHost[1].split(':') : host.split(':');
        hostObject.hostUrl = parseHost[0];
        hostObject.hostPort = (parseHost[1]) ? parseHost[1] : '';
        return hostObject;
    };
    return Utils;
}());
var SwimLink = (function () {
    function SwimLink(type, config, debug) {
        if (debug === void 0) { debug = false; }
        this.type = type;
        this.config = config;
        this.shortUrl = null;
        this._debug = debug;
        this._downlink = null;
        this.connect();
    }
    SwimLink.prototype.connect = function () {
        switch (this.type) {
            case "value":
                this._swimService = downlinkValue;
                break;
            default:
                this._swimService = downlinkMap;
                break;
        }
        var portUrl = (this.config.hostPort) ? ":" + this.config.hostPort : '';
        this.shortUrl = ((this.config.isSecure) ? 'wss' : 'ws') + "://" + this.config.hostUrl + portUrl;
        this.fullUrlWithPath = "" + this.shortUrl + this.config.node + "/" + this.config.lane + "/";
        if (this.config.keepSynced === undefined || this.config.keepSynced === null) {
            this.config.keepSynced = false;
        }
        this._downlink = this._swimService()
            .host(this.shortUrl)
            .node(this.config.node)
            .lane(this.config.lane)
            .keepSynced(this.config.keepSynced)
            .didConnect(this.didConnect.bind(this))
            .didFail(this.didFail.bind(this))
            .didSync(this.didSync.bind(this))
            .didLink(this.didLink.bind(this))
            .didUnlink(this.didUnlink.bind(this));
        this.valueType();
        this.mapType();
        this.open();
    };
    Object.defineProperty(SwimLink.prototype, "downlink", {
        get: function () {
            if (this._downlink === null) {
                this.connect();
            }
            return this._downlink;
        },
        enumerable: true,
        configurable: true
    });
    SwimLink.prototype.valueType = function () {
        if (this.type !== 'value') {
            return;
        }
        this._downlink.didSet(this.didSet.bind(this));
    };
    SwimLink.prototype.didSet = function (value) {
        if (this._debug) {
            console.log("[util] " + this.fullUrlWithPath + " didSet", value);
        }
        if (!this.config.didSet) {
            return;
        }
        this.config.didSet(value);
    };
    SwimLink.prototype.mapType = function () {
        if (this.type === 'value') {
            return;
        }
        this._downlink.didSync(this.didSync.bind(this));
        this._downlink.didUpdate(this.didUpdate.bind(this));
    };
    SwimLink.prototype.didSync = function () {
        if (this._debug) {
            console.log("[util] " + this.fullUrlWithPath + " didSync");
        }
        if (!this.config.didSync) {
            return;
        }
        this.config.didSync();
    };
    SwimLink.prototype.didLink = function () {
        if (this._debug) {
            console.log("[util] " + this.fullUrlWithPath + " didLink");
        }
        if (!this.config.didLink) {
            return;
        }
        this.config.didLink();
    };
    SwimLink.prototype.didUnlink = function () {
        if (this._debug) {
            console.log("[util] " + this.fullUrlWithPath + " didunlink");
        }
        if (!this.config.didUnlink) {
            return;
        }
        this.config.didUnlink();
    };
    SwimLink.prototype.didUpdate = function (key, value) {
        if (this._debug) {
            console.log("[util] " + this.fullUrlWithPath + " didUpdate - key: " + key + ", Value: ", value);
        }
        if (!this.config.didUpdate) {
            return;
        }
        this.config.didUpdate(key, value);
    };
    SwimLink.prototype.update = function (type, config, debug) {
        if (debug === void 0) { debug = false; }
        this.close();
        this.type = type;
        this.config = config;
        this._debug = debug;
        this.connect();
    };
    SwimLink.prototype.didConnect = function (newLink) {
        if (!this._debug) {
            return;
        }
        console.log("[util] " + this.fullUrlWithPath + " opened.");
    };
    SwimLink.prototype.didFail = function (error) {
        if (!this._debug) {
            return;
        }
        console.error(this.fullUrlWithPath + " error: " + error);
        if (!this.config.didFail) {
            return;
        }
        this.config.didFail(error);
    };
    SwimLink.prototype.open = function () {
        this._downlink.open();
    };
    SwimLink.prototype.close = function () {
        this._downlink.close();
        this._downlink.didSync(null);
        this._downlink.didUpdate(null);
    };
    SwimLink.create = function (type, config, debug) {
        return new SwimLink(type, config, debug);
    };
    return SwimLink;
}());

//# sourceMappingURL=data:application/json;base64,

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsYUFBYSxHQUNkLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFDTCxLQUFLLEVBQ0wsUUFBUSxHQUNULE1BQU0sU0FBUyxDQUFDIn0=

var AppController = (function () {
    function AppController(parentNode, appModel, eventManager) {
        if (eventManager === void 0) { eventManager = new AppEventManager(); }
        this._frameNumber = 0;
        this._targetFPS = 30;
        this._appRunning = false;
        this._renderTimeBuffer = [];
        this._showFps = false;
        this._eventManager = eventManager;
        this._parentNode = parentNode;
    }
    AppController.prototype.create = function () {
        this._componentList = Utils.materializeScripts(this._parentNode, this._eventManager);
        if (this._showFps) {
            this._fpsDiv = document.createElement("div");
            this._fpsDiv.style.position = "fixed";
            this._fpsDiv.style.top = "0px";
            this._fpsDiv.style.right = "0px";
            this._fpsDiv.style.color = "rgba(0,0,255,0.5)";
            this._fpsDiv.style.fontWeight = "900";
            this._fpsDiv.style.fontSize = "10px";
            this._fpsDiv.style.padding = "3px";
            document.body.appendChild(this._fpsDiv);
        }
    };
    AppController.prototype.remove = function () {
        this.stop();
        for (var _i = 0, _a = this._componentList; _i < _a.length; _i++) {
            var component = _a[_i];
            component.remove();
        }
    };
    AppController.prototype.start = function () {
        for (var _i = 0, _a = this._componentList; _i < _a.length; _i++) {
            var component = _a[_i];
            component.start();
        }
        this._frameNumber = 0;
        this._renderIntervalTime = 1000 / this._targetFPS;
        this._renderInterval = setTimeout(this.onRefreshFrame.bind(this), this._renderIntervalTime);
        this._appRunning = true;
        window.addEventListener("resize", this.handleResize.bind(this));
    };
    AppController.prototype.stop = function () {
        clearInterval(this._renderInterval);
        this._appRunning = false;
        for (var _i = 0, _a = this._componentList; _i < _a.length; _i++) {
            var component = _a[_i];
            component.stop();
        }
    };
    AppController.prototype.handleResize = function () {
        for (var _i = 0, _a = this._componentList; _i < _a.length; _i++) {
            var component = _a[_i];
            component.resize();
        }
        this._eventManager.triggerEvent(AppEventTypes.message, 'windowResize', this);
    };
    AppController.prototype.eventManager = function (eventManager) {
        if (eventManager) {
            this._eventManager = eventManager;
        }
        return this._eventManager;
    };
    AppController.prototype.onRefreshFrame = function () {
        var _this = this;
        if (this._appRunning) {
            this._frameNumber++;
            var currRenderTimeMS = Date.now();
            var bufferSize = 10;
            if (!this._lastRenderTimeMS) {
                this._lastRenderTimeMS = currRenderTimeMS;
            }
            var frameIntervalTime = currRenderTimeMS - this._lastRenderTimeMS;
            this._renderTimeBuffer.unshift(frameIntervalTime);
            this._renderTimeBuffer = this._renderTimeBuffer.slice(0, bufferSize);
            var currFps_1 = 0;
            this._renderTimeBuffer.forEach(function (bufferTime) {
                currFps_1 += bufferTime;
            });
            currFps_1 = 1000 / (currFps_1 / bufferSize);
            this._lastRenderTimeMS = currRenderTimeMS;
            this._componentList.forEach(function (component) {
                component.render(_this._frameNumber);
            });
            var postRenderTime = Date.now();
            if (this._showFps) {
                this._fpsDiv.innerHTML = "Render Time: " + (postRenderTime - currRenderTimeMS) + "ms @ " + Math.round(currFps_1) + " fps";
            }
            this._eventManager.triggerEvent(AppEventTypes.message, 'renderFrame', this._frameNumber);
            clearTimeout(this._renderInterval);
            this._renderInterval = setTimeout(this.onRefreshFrame.bind(this), this._renderIntervalTime - (postRenderTime - currRenderTimeMS));
        }
    };
    return AppController;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHAtY29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFJakM7SUFpQkUsdUJBQVksVUFBdUIsRUFBRSxRQUFtQixFQUFFLFlBQXFEO1FBQXJELDZCQUFBLEVBQUEsbUJBQW9DLGVBQWUsRUFBRTtRQVp2RyxpQkFBWSxHQUFXLENBQUMsQ0FBQztRQUN6QixlQUFVLEdBQVcsRUFBRSxDQUFDO1FBR3hCLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBSTdCLHNCQUFpQixHQUFhLEVBQUUsQ0FBQztRQUNqQyxhQUFRLEdBQVksS0FBSyxDQUFDO1FBS2hDLElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO0lBTWhDLENBQUM7SUFPRCw4QkFBTSxHQUFOO1FBRUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFckYsSUFBRyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUss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

var App = (function () {
    function App() {
    }
    App.prototype.create = function (parentNode) {
        this._parentNode = (parentNode) ? parentNode : document.body;
        this._appController = new AppController(this._parentNode);
        this._appController.create();
        this._parentNode['app'] = this;
        this.eventManager().addEventListener(AppEventTypes.message, 'removeApp', this.remove.bind(this));
    };
    App.prototype.remove = function () {
        this.eventManager().removeEventListener(AppEventTypes.message, 'removeApp', this.remove.bind(this));
        this._appController.remove();
        delete this._appController;
    };
    App.prototype.start = function () {
        this._appController.start();
        this.eventManager().removeEventListener(AppEventTypes.message, 'startApp', this.start.bind(this));
        this.eventManager().addEventListener(AppEventTypes.message, 'stopApp', this.stop.bind(this));
    };
    App.prototype.stop = function () {
        this.eventManager().addEventListener(AppEventTypes.message, 'startApp', this.start.bind(this));
        this.eventManager().removeEventListener(AppEventTypes.message, 'stopApp', this.stop.bind(this));
        this._appController.stop();
    };
    App.prototype.eventManager = function () {
        return this._appController.eventManager();
    };
    App.prototype.ping = function () {
        console.info('pong');
    };
    return App;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQW1CLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBR3JFO0lBS0k7SUFFQSxDQUFDO0lBRUQsb0JBQU0sR0FBTixVQUFPLFVBQXdCO1FBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBSTdELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUM7UUFHNUIsSUFBSSxDQUFDLFdBQW1CLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JHLENBQUM7SUFFRCxvQkFBTSxHQUFOO1FBQ0ksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsQ0FBQztJQUVELG1CQUFLLEdBQUw7UUFHSSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7SUFFRCxrQkFBSSxHQUFKO1FBQ0ksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDaEcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsMEJBQVksR0FBWjtRQUNJLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBS0Qsa0JBQUksR0FBSjtRQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVMLFVBQUM7QUFBRCxDQUFDLEFBckRELElBcURDIn0=

var DateTimeLocale = (function () {
    function DateTimeLocale(periods, weekdays, shortWeekdays, months, shortMonths) {
        if (periods === void 0) { periods = DateTimeLocale.Periods; }
        if (weekdays === void 0) { weekdays = DateTimeLocale.Weekdays; }
        if (shortWeekdays === void 0) { shortWeekdays = DateTimeLocale.ShortWeekdays; }
        if (months === void 0) { months = DateTimeLocale.Months; }
        if (shortMonths === void 0) { shortMonths = DateTimeLocale.ShortMonths; }
        this.periods = periods;
        this.weekdays = weekdays;
        this.shortWeekdays = shortWeekdays;
        this.months = months;
        this.shortMonths = shortMonths;
    }
    DateTimeLocale.Periods = [
        'AM',
        'PM',
    ];
    DateTimeLocale.Weekdays = [
        'Sunday',
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
    ];
    DateTimeLocale.ShortWeekdays = [
        'Sun',
        'Mon',
        'Tue',
        'Wed',
        'Thu',
        'Fri',
        'Sat',
    ];
    DateTimeLocale.Months = [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December',
    ];
    DateTimeLocale.ShortMonths = [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec',
    ];
    DateTimeLocale.Default = new DateTimeLocale();
    return DateTimeLocale;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLWxvY2FsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGUtdGltZS1sb2NhbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFPRSx3QkFBWSxPQUF1RCxFQUN2RCxRQUF5RCxFQUN6RCxhQUFtRSxFQUNuRSxNQUFxRCxFQUNyRCxXQUErRDtRQUovRCx3QkFBQSxFQUFBLFVBQWlDLGNBQWMsQ0FBQyxPQUFPO1FBQ3ZELHlCQUFBLEVBQUEsV0FBa0MsY0FBYyxDQUFDLFFBQVE7UUFDekQsOEJBQUEsRUFBQSxnQkFBdUMsY0FBYyxDQUFDLGFBQWE7UUFDbkUsdUJBQUEsRUFBQSxTQUFnQyxjQUFjLENBQUMsTUFBTTtRQUNyRCw0QkFBQSxFQUFBLGNBQXFDLGNBQWMsQ0FBQyxXQUFXO1FBQ3pFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQ2pDLENBQUM7SUFFdUIsc0JBQU8sR0FBMEI7UUFDdkQsSUFBSTtRQUNKLElBQUk7S0FDTCxDQUFDO0lBQ3NCLHVCQUFRLEdBQTBCO1FBQ3hELFFBQVE7UUFDUixRQUFRO1FBQ1IsU0FBUztRQUNULFdBQVc7UUFDWCxVQUFVO1FBQ1YsUUFBUTtRQUNSLFVBQVU7S0FDWCxDQUFDO0lBQ3NCLDRCQUFhLEdBQTBCO1FBQzdELEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7S0FDTixDQUFDO0lBQ3NCLHFCQUFNLEdBQTBCO1FBQ3RELFNBQVM7UUFDVCxVQUFVO1FBQ1YsT0FBTztRQUNQLE9BQU87UUFDUCxLQUFLO1FBQ0wsTUFBTTtRQUNOLE1BQU07UUFDTixRQUFRO1FBQ1IsV0FBVztRQUNYLFNBQVM7UUFDVCxVQUFVO1FBQ1YsVUFBVTtLQUNYLENBQUM7SUFDc0IsMEJBQVcsR0FBMEI7UUFDM0QsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO0tBQ04sQ0FBQztJQUVjLHNCQUFPLEdBQW1CLElBQUksY0FBYyxFQUFFLENBQUM7SUFDakUscUJBQUM7Q0FBQSxBQXZFRCxJQXVFQztTQXZFWSxjQUFjIn0=

var TimeZone = (function () {
    function TimeZone(offset) {
        this._offset = offset;
    }
    Object.defineProperty(TimeZone.prototype, "name", {
        get: function () {
            if (this._offset === 0) {
                return 'UTC';
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeZone.prototype, "offset", {
        get: function () {
            return this._offset;
        },
        enumerable: true,
        configurable: true
    });
    TimeZone.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TimeZone) {
            return this._offset === that._offset;
        }
        return false;
    };
    TimeZone.prototype.hashCode = function () {
        return this._offset;
    };
    TimeZone.forName = function (name) {
        if (name === 'UTC') {
            return TimeZone.UTC;
        }
        throw new Error('unknown time zone: ' + name);
    };
    TimeZone.forOffset = function (offset) {
        if (offset === 0) {
            return TimeZone.UTC;
        }
        else {
            return new TimeZone(offset);
        }
    };
    TimeZone.fromAny = function (zone) {
        if (zone instanceof TimeZone) {
            return zone;
        }
        else if (typeof zone === 'string') {
            return TimeZone.forName(zone);
        }
        else if (typeof zone === 'number') {
            return TimeZone.forOffset(zone);
        }
        throw new TypeError('' + zone);
    };
    TimeZone.UTC = new TimeZone(0);
    TimeZone.Form = undefined;
    TimeZone.Local = TimeZone.forOffset(-new Date().getTimezoneOffset());
    return TimeZone;
}());
var TimeZoneForm = (function (_super) {
    __extends(TimeZoneForm, _super);
    function TimeZoneForm(unit) {
        if (unit === void 0) { unit = TimeZone.UTC; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    TimeZoneForm.prototype.mold = function (zone) {
        zone = TimeZone.fromAny(zone);
        return Num.valueOf(zone._offset);
    };
    TimeZoneForm.prototype.cast = function (value) {
        var offset = value.numberValue();
        if (offset !== undefined) {
            return TimeZone.forOffset(offset);
        }
        var name = value.stringValue();
        if (name !== undefined) {
            return TimeZone.forName(name);
        }
        return undefined;
    };
    return TimeZoneForm;
}(Form));
TimeZone.Form = new TimeZoneForm();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS16b25lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGltZS16b25lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQVEsR0FBRyxFQUFFLElBQUksRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUk3QztJQUtFLGtCQUFvQixNQUFjO1FBQ2hDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxzQkFBSSwwQkFBSTthQUFSO1lBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLENBQUMsRUFBRTtnQkFDdEIsT0FBTyxLQUFLLENBQUM7YUFDZDtZQUNELE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBRUQsc0JBQUksNEJBQU07YUFBVjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDOzs7T0FBQTtJQUVELHlCQUFNLEdBQU4sVUFBTyxJQUFTO1FBQ2QsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTSxJQUFJLElBQUksWUFBWSxRQUFRLEVBQUU7WUFDbkMsT0FBTyxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDdEM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCwyQkFBUSxHQUFSO1FBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFNTSxnQkFBTyxHQUFkLFVBQWUsSUFBWTtRQUN6QixJQUFJLElBQUksS0FBSyxLQUFLLEVBQUU7WUFDbEIsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDO1NBQ3JCO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU0sa0JBQVMsR0FBaEIsVUFBaUIsTUFBYztRQUM3QixJQUFJLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDaEIsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDO1NBQ3JCO2FBQU07WUFDTCxPQUFPLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQztJQUVNLGdCQUFPLEdBQWQsVUFBZSxJQUFpQjtRQUM5QixJQUFJLElBQUksWUFBWSxRQUFRLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUM7U0FDYjthQUFNLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ25DLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvQjthQUFNLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ25DLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQztRQUNELE1BQU0sSUFBSSxTQUFTLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUE1QmUsWUFBRyxHQUFHLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRCLGFBQUksR0FBZ0MsU0FBZ0IsQ0FBQztJQTRCckQsY0FBSyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztJQUM5RSxlQUFDO0NBQUEsQUFoRUQsSUFnRUM7U0FoRVksUUFBUTtBQW1FckI7SUFBMkIsd0NBQTJCO0lBR3BELHNCQUFZLElBQTZCO1FBQTdCLHFCQUFBLEVBQUEsT0FBaUIsUUFBUSxDQUFDLEdBQUc7UUFBekMsWUFDRSxpQkFBTyxTQUVSO1FBREMsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0lBQ25CLENBQUM7SUFFRCwyQkFBSSxHQUFKLFVBQUssSUFBaUI7UUFDcEIsSUFBSSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsMkJBQUksR0FBSixVQUFLLEtBQVk7UUFDZixJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkMsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3hCLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNuQztRQUNELElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqQyxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDdEIsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQXhCRCxDQUEyQixJQUFJLEdBd0I5QjtBQUNBLFFBQWdCLENBQUMsSUFBSSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUMifQ==

var DateTimeFormat = (function () {
    function DateTimeFormat() {
    }
    DateTimeFormat.prototype.format = function (date) {
        date = DateTime.fromAny(date);
        var output = new StringOutput();
        this.writeDate(date, output);
        return output.bind();
    };
    DateTimeFormat.prototype.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = this.parseDate(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    DateTimeFormat.prototype.parseDate = function (input, date) {
        var dateParser = this.parseDateTime(input, date);
        if (dateParser.isDone()) {
            return Iteratee.done(DateTime.fromAny(dateParser.bind()));
        }
        else if (dateParser.isError()) {
            return dateParser.asError();
        }
        else {
            return new DateTimeParser(dateParser);
        }
    };
    DateTimeFormat.formats = function (locale) {
        if (locale === void 0) { locale = DateTimeLocale.Default; }
        var formats;
        if (locale === DateTimeLocale.Default) {
            formats = DateTimeFormat.Formats;
        }
        if (!formats) {
            formats = {
                Y: DateTimeFormat.YearFormat,
                m: DateTimeFormat.MonthNumberFormat,
                B: new MonthFormat(locale),
                b: new ShortMonthFormat(locale),
                d: DateTimeFormat.DayOfMonthFormat,
                A: new WeekdayFormat(locale),
                a: new ShortWeekdayFormat(locale),
                H: DateTimeFormat.Hour24Format,
                I: DateTimeFormat.Hour12Format,
                p: new PeriodFormat(locale),
                M: DateTimeFormat.MinuteFormat,
                S: DateTimeFormat.SecondFormat,
                L: DateTimeFormat.MillisecondFormat,
            };
        }
        return formats;
    };
    DateTimeFormat.pattern = function (pattern, formats) {
        if (!formats || formats instanceof DateTimeLocale) {
            formats = DateTimeFormat.formats(formats);
        }
        return new PatternFormat(pattern, formats);
    };
    DateTimeFormat.iso8601 = function (formats) {
        if (!formats || formats instanceof DateTimeLocale) {
            formats = DateTimeFormat.formats(formats);
        }
        if (formats === DateTimeFormat.Formats && DateTimeFormat.Iso8601) {
            return DateTimeFormat.Iso8601;
        }
        else {
            return new PatternFormat('%Y-%m-%dT%H:%M:%S.%LZ', formats);
        }
    };
    DateTimeFormat.YearFormat = undefined;
    DateTimeFormat.MonthNumberFormat = undefined;
    DateTimeFormat.DayOfMonthFormat = undefined;
    DateTimeFormat.Hour24Format = undefined;
    DateTimeFormat.Hour12Format = undefined;
    DateTimeFormat.MinuteFormat = undefined;
    DateTimeFormat.SecondFormat = undefined;
    DateTimeFormat.MillisecondFormat = undefined;
    DateTimeFormat.Formats = undefined;
    DateTimeFormat.Iso8601 = undefined;
    return DateTimeFormat;
}());
function writeDateNumber2(value, output) {
    var c1 = 48 + value % 10;
    value /= 10;
    var c0 = 48 + value % 10;
    output.push(c0, c1);
}
function writeDateNumber3(value, output) {
    var c2 = 48 + value % 10;
    value /= 10;
    var c1 = 48 + value % 10;
    value /= 10;
    var c0 = 48 + value % 10;
    output.push(c0, c1, c2);
}
function writeDateNumber4(value, output) {
    var c3 = 48 + value % 10;
    value /= 10;
    var c2 = 48 + value % 10;
    value /= 10;
    var c1 = 48 + value % 10;
    value /= 10;
    var c0 = 48 + value % 10;
    output.push(c0, c1, c2, c3);
}
function parseDateNumber(factory, desc, minDigits, maxDigits, input, date, value, step) {
    if (value === void 0) { value = 0; }
    if (step === void 0) { step = 0; }
    var c = 0;
    while (step < maxDigits) {
        if (!input.isEmpty()) {
            c = input.head();
            if (Iteratee.isDigit(c)) {
                input.step();
                value = 10 * value + Iteratee.decodeDigit(c);
                step += 1;
                continue;
            }
            else {
                return Iteratee.expected(desc, input);
            }
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
        break;
    }
    if ((!input.isEmpty() || input.isDone()) && step >= minDigits) {
        return factory.bind(value, date);
    }
    return factory.cont(date, value, step);
}
function parseDateString(factory, locale, input, date, output) {
    if (output === void 0) { output = new StringOutput(); }
    var c = 0;
    do {
        if (!input.isEmpty() && (c = input.head(), Recon.isIdentStartChar(c))) {
            input.step();
            output.push(c);
            continue;
        }
        else if (!input.isEmpty() || input.isDone()) {
            return factory.bind(locale, output.bind(), date);
        }
        break;
    } while (true);
    return factory.cont(locale, date, output);
}
var YearFormat = (function (_super) {
    __extends(YearFormat, _super);
    function YearFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    YearFormat.prototype.writeDate = function (date, output) {
        writeDateNumber4(date.year(), output);
    };
    YearFormat.prototype.parseDateTime = function (input, date) {
        return YearParser.parse(input, date);
    };
    return YearFormat;
}(DateTimeFormat));
DateTimeFormat.YearFormat = new YearFormat();
var YearParser = (function (_super) {
    __extends(YearParser, _super);
    function YearParser(date, year, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.year = year;
        _this.step = step;
        return _this;
    }
    YearParser.prototype.feed = function (input) {
        return YearParser.parse(input, this.date, this.year, this.step);
    };
    YearParser.parse = function (input, date, year, step) {
        return parseDateNumber(YearParser, 'full year', 4, 4, input, date, year, step);
    };
    YearParser.bind = function (year, date) {
        if (date === void 0) { date = {}; }
        date.year = year;
        return Iteratee.done(date);
    };
    YearParser.cont = function (date, year, step) {
        return new YearParser(date, year, step);
    };
    return YearParser;
}(Iteratee));
var MonthNumberFormat = (function (_super) {
    __extends(MonthNumberFormat, _super);
    function MonthNumberFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MonthNumberFormat.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.month() + 1, output);
    };
    MonthNumberFormat.prototype.parseDateTime = function (input, date) {
        return MonthNumberParser.parse(input, date);
    };
    return MonthNumberFormat;
}(DateTimeFormat));
DateTimeFormat.MonthNumberFormat = new MonthNumberFormat();
var MonthNumberParser = (function (_super) {
    __extends(MonthNumberParser, _super);
    function MonthNumberParser(date, month, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.month = month;
        _this.step = step;
        return _this;
    }
    MonthNumberParser.prototype.feed = function (input) {
        return MonthNumberParser.parse(input, this.date, this.month, this.step);
    };
    MonthNumberParser.parse = function (input, date, month, step) {
        return parseDateNumber(MonthNumberParser, 'month number', 2, 2, input, date, month, step);
    };
    MonthNumberParser.bind = function (month, date) {
        if (date === void 0) { date = {}; }
        date.month = month - 1;
        return Iteratee.done(date);
    };
    MonthNumberParser.cont = function (date, month, step) {
        return new MonthNumberParser(date, month, step);
    };
    return MonthNumberParser;
}(Iteratee));
var MonthFormat = (function (_super) {
    __extends(MonthFormat, _super);
    function MonthFormat(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        return _this;
    }
    MonthFormat.prototype.writeDate = function (date, output) {
        output.push(this.locale.months[date.month()]);
    };
    MonthFormat.prototype.parseDateTime = function (input, date) {
        return MonthParser.parse(input, this.locale, date);
    };
    return MonthFormat;
}(DateTimeFormat));
var MonthParser = (function (_super) {
    __extends(MonthParser, _super);
    function MonthParser(locale, date, output) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.date = date;
        _this.output = output;
        return _this;
    }
    MonthParser.prototype.feed = function (input) {
        return MonthParser.parse(input, this.locale, this.date, this.output);
    };
    MonthParser.parse = function (input, locale, date, output) {
        return parseDateString(MonthParser, locale, input, date, output);
    };
    MonthParser.bind = function (locale, value, date) {
        if (date === void 0) { date = {}; }
        var month = locale.months.indexOf(value);
        if (month >= 0) {
            date.month = month;
            return Iteratee.done(date);
        }
        else {
            return Iteratee.error('expected month, but found ' + value);
        }
    };
    MonthParser.cont = function (locale, date, output) {
        return new MonthParser(locale, date, output);
    };
    return MonthParser;
}(Iteratee));
var ShortMonthFormat = (function (_super) {
    __extends(ShortMonthFormat, _super);
    function ShortMonthFormat(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        return _this;
    }
    ShortMonthFormat.prototype.writeDate = function (date, output) {
        output.push(this.locale.shortMonths[date.month()]);
    };
    ShortMonthFormat.prototype.parseDateTime = function (input, date) {
        return ShortMonthParser.parse(input, this.locale, date);
    };
    return ShortMonthFormat;
}(DateTimeFormat));
var ShortMonthParser = (function (_super) {
    __extends(ShortMonthParser, _super);
    function ShortMonthParser(locale, date, output) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.date = date;
        _this.output = output;
        return _this;
    }
    ShortMonthParser.prototype.feed = function (input) {
        return ShortMonthParser.parse(input, this.locale, this.date, this.output);
    };
    ShortMonthParser.parse = function (input, locale, date, output) {
        return parseDateString(ShortMonthParser, locale, input, date, output);
    };
    ShortMonthParser.bind = function (locale, value, date) {
        if (date === void 0) { date = {}; }
        var month = locale.shortMonths.indexOf(value);
        if (month >= 0) {
            date.month = month;
            return Iteratee.done(date);
        }
        else {
            return Iteratee.error('expected short month, but found ' + value);
        }
    };
    ShortMonthParser.cont = function (locale, date, output) {
        return new ShortMonthParser(locale, date, output);
    };
    return ShortMonthParser;
}(Iteratee));
var DayOfMonthFormat = (function (_super) {
    __extends(DayOfMonthFormat, _super);
    function DayOfMonthFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DayOfMonthFormat.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.day(), output);
    };
    DayOfMonthFormat.prototype.parseDateTime = function (input, date) {
        return DayOfMonthParser.parse(input, date);
    };
    return DayOfMonthFormat;
}(DateTimeFormat));
DateTimeFormat.DayOfMonthFormat = new DayOfMonthFormat();
var DayOfMonthParser = (function (_super) {
    __extends(DayOfMonthParser, _super);
    function DayOfMonthParser(date, day, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.day = day;
        _this.step = step;
        return _this;
    }
    DayOfMonthParser.prototype.feed = function (input) {
        return DayOfMonthParser.parse(input, this.date, this.day, this.step);
    };
    DayOfMonthParser.parse = function (input, date, day, step) {
        return parseDateNumber(DayOfMonthParser, 'day of month', 2, 2, input, date, day, step);
    };
    DayOfMonthParser.bind = function (day, date) {
        if (date === void 0) { date = {}; }
        date.day = day;
        return Iteratee.done(date);
    };
    DayOfMonthParser.cont = function (date, month, step) {
        return new DayOfMonthParser(date, month, step);
    };
    return DayOfMonthParser;
}(Iteratee));
var WeekdayFormat = (function (_super) {
    __extends(WeekdayFormat, _super);
    function WeekdayFormat(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        return _this;
    }
    WeekdayFormat.prototype.writeDate = function (date, output) {
        output.push(this.locale.weekdays[date.weekday()]);
    };
    WeekdayFormat.prototype.parseDateTime = function (input, date) {
        return WeekdayParser.parse(input, this.locale, date);
    };
    return WeekdayFormat;
}(DateTimeFormat));
var WeekdayParser = (function (_super) {
    __extends(WeekdayParser, _super);
    function WeekdayParser(locale, date, output) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.date = date;
        _this.output = output;
        return _this;
    }
    WeekdayParser.prototype.feed = function (input) {
        return WeekdayParser.parse(input, this.locale, this.date, this.output);
    };
    WeekdayParser.parse = function (input, locale, date, output) {
        return parseDateString(WeekdayParser, locale, input, date, output);
    };
    WeekdayParser.bind = function (locale, value, date) {
        if (date === void 0) { date = {}; }
        var day = locale.weekdays.indexOf(value);
        if (day >= 0) {
            return Iteratee.done(date);
        }
        else {
            return Iteratee.error('expected weekday, but found ' + value);
        }
    };
    WeekdayParser.cont = function (locale, date, output) {
        return new WeekdayParser(locale, date, output);
    };
    return WeekdayParser;
}(Iteratee));
var ShortWeekdayFormat = (function (_super) {
    __extends(ShortWeekdayFormat, _super);
    function ShortWeekdayFormat(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        return _this;
    }
    ShortWeekdayFormat.prototype.writeDate = function (date, output) {
        output.push(this.locale.shortWeekdays[date.weekday()]);
    };
    ShortWeekdayFormat.prototype.parseDateTime = function (input, date) {
        return ShortWeekdayParser.parse(input, this.locale, date);
    };
    return ShortWeekdayFormat;
}(DateTimeFormat));
var ShortWeekdayParser = (function (_super) {
    __extends(ShortWeekdayParser, _super);
    function ShortWeekdayParser(locale, date, output) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.date = date;
        _this.output = output;
        return _this;
    }
    ShortWeekdayParser.prototype.feed = function (input) {
        return ShortWeekdayParser.parse(input, this.locale, this.date, this.output);
    };
    ShortWeekdayParser.parse = function (input, locale, date, output) {
        return parseDateString(ShortWeekdayParser, locale, input, date, output);
    };
    ShortWeekdayParser.bind = function (locale, value, date) {
        if (date === void 0) { date = {}; }
        var day = locale.shortWeekdays.indexOf(value);
        if (day >= 0) {
            return Iteratee.done(date);
        }
        else {
            return Iteratee.error('expected short weekday, but found ' + value);
        }
    };
    ShortWeekdayParser.cont = function (locale, date, output) {
        return new ShortWeekdayParser(locale, date, output);
    };
    return ShortWeekdayParser;
}(Iteratee));
var Hour24Format = (function (_super) {
    __extends(Hour24Format, _super);
    function Hour24Format() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Hour24Format.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.hour(), output);
    };
    Hour24Format.prototype.parseDateTime = function (input, date) {
        return Hour24Parser.parse(input, date);
    };
    return Hour24Format;
}(DateTimeFormat));
DateTimeFormat.Hour24Format = new Hour24Format();
var Hour24Parser = (function (_super) {
    __extends(Hour24Parser, _super);
    function Hour24Parser(date, hour, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.hour = hour;
        _this.step = step;
        return _this;
    }
    Hour24Parser.prototype.feed = function (input) {
        return Hour24Parser.parse(input, this.date, this.hour, this.step);
    };
    Hour24Parser.parse = function (input, date, hour, step) {
        return parseDateNumber(Hour24Parser, 'hour (24)', 2, 2, input, date, hour, step);
    };
    Hour24Parser.bind = function (hour, date) {
        if (date === void 0) { date = {}; }
        date.hour = hour;
        return Iteratee.done(date);
    };
    Hour24Parser.cont = function (date, hour, step) {
        return new Hour24Parser(date, hour, step);
    };
    return Hour24Parser;
}(Iteratee));
var Hour12Format = (function (_super) {
    __extends(Hour12Format, _super);
    function Hour12Format() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Hour12Format.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.hour() % 12 || 12, output);
    };
    Hour12Format.prototype.parseDateTime = function (input, date) {
        return Hour12Parser.parse(input, date);
    };
    return Hour12Format;
}(DateTimeFormat));
DateTimeFormat.Hour12Format = new Hour12Format();
var Hour12Parser = (function (_super) {
    __extends(Hour12Parser, _super);
    function Hour12Parser(date, hour, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.hour = hour;
        _this.step = step;
        return _this;
    }
    Hour12Parser.prototype.feed = function (input) {
        return Hour12Parser.parse(input, this.date, this.hour, this.step);
    };
    Hour12Parser.parse = function (input, date, hour, step) {
        return parseDateNumber(Hour12Parser, 'hour (12)', 2, 2, input, date, hour, step);
    };
    Hour12Parser.bind = function (hour, date) {
        if (date === void 0) { date = {}; }
        date.hour = (date.hour || 0) + hour;
        return Iteratee.done(date);
    };
    Hour12Parser.cont = function (date, hour, step) {
        return new Hour12Parser(date, hour, step);
    };
    return Hour12Parser;
}(Iteratee));
var PeriodFormat = (function (_super) {
    __extends(PeriodFormat, _super);
    function PeriodFormat(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        return _this;
    }
    PeriodFormat.prototype.writeDate = function (date, output) {
        output.push(this.locale.periods[+(date.hour() >= 12)]);
    };
    PeriodFormat.prototype.parseDateTime = function (input, date) {
        return PeriodParser.parse(input, this.locale, date);
    };
    return PeriodFormat;
}(DateTimeFormat));
var PeriodParser = (function (_super) {
    __extends(PeriodParser, _super);
    function PeriodParser(locale, date, output) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.date = date;
        _this.output = output;
        return _this;
    }
    PeriodParser.prototype.feed = function (input) {
        return PeriodParser.parse(input, this.locale, this.date, this.output);
    };
    PeriodParser.parse = function (input, locale, date, output) {
        return parseDateString(PeriodParser, locale, input, date, output);
    };
    PeriodParser.bind = function (locale, value, date) {
        if (date === void 0) { date = {}; }
        var period = locale.months.indexOf(value);
        if (period >= 0) {
            date.hour = (date.hour || 0) + 12 * period;
            return Iteratee.done(date);
        }
        else {
            return Iteratee.error('expected hour period, but found ' + value);
        }
    };
    PeriodParser.cont = function (locale, date, output) {
        return new PeriodParser(locale, date, output);
    };
    return PeriodParser;
}(Iteratee));
var MinuteFormat = (function (_super) {
    __extends(MinuteFormat, _super);
    function MinuteFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MinuteFormat.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.minute(), output);
    };
    MinuteFormat.prototype.parseDateTime = function (input, date) {
        return MinuteParser.parse(input, date);
    };
    return MinuteFormat;
}(DateTimeFormat));
DateTimeFormat.MinuteFormat = new MinuteFormat();
var MinuteParser = (function (_super) {
    __extends(MinuteParser, _super);
    function MinuteParser(date, minute, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.minute = minute;
        _this.step = step;
        return _this;
    }
    MinuteParser.prototype.feed = function (input) {
        return MinuteParser.parse(input, this.date, this.minute, this.step);
    };
    MinuteParser.parse = function (input, date, minute, step) {
        return parseDateNumber(MinuteParser, 'minute', 2, 2, input, date, minute, step);
    };
    MinuteParser.bind = function (minute, date) {
        if (date === void 0) { date = {}; }
        date.minute = minute;
        return Iteratee.done(date);
    };
    MinuteParser.cont = function (date, minute, step) {
        return new MinuteParser(date, minute, step);
    };
    return MinuteParser;
}(Iteratee));
var SecondFormat = (function (_super) {
    __extends(SecondFormat, _super);
    function SecondFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SecondFormat.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.second(), output);
    };
    SecondFormat.prototype.parseDateTime = function (input, date) {
        return SecondParser.parse(input, date);
    };
    return SecondFormat;
}(DateTimeFormat));
DateTimeFormat.SecondFormat = new SecondFormat();
var SecondParser = (function (_super) {
    __extends(SecondParser, _super);
    function SecondParser(date, second, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.second = second;
        _this.step = step;
        return _this;
    }
    SecondParser.prototype.feed = function (input) {
        return SecondParser.parse(input, this.date, this.second, this.step);
    };
    SecondParser.parse = function (input, date, second, step) {
        return parseDateNumber(SecondParser, 'second', 2, 2, input, date, second, step);
    };
    SecondParser.bind = function (second, date) {
        if (date === void 0) { date = {}; }
        date.second = second;
        return Iteratee.done(date);
    };
    SecondParser.cont = function (date, second, step) {
        return new SecondParser(date, second, step);
    };
    return SecondParser;
}(Iteratee));
var MillisecondFormat = (function (_super) {
    __extends(MillisecondFormat, _super);
    function MillisecondFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MillisecondFormat.prototype.writeDate = function (date, output) {
        writeDateNumber3(date.millisecond(), output);
    };
    MillisecondFormat.prototype.parseDateTime = function (input, date) {
        return MillisecondParser.parse(input, date);
    };
    return MillisecondFormat;
}(DateTimeFormat));
DateTimeFormat.MillisecondFormat = new MillisecondFormat();
var MillisecondParser = (function (_super) {
    __extends(MillisecondParser, _super);
    function MillisecondParser(date, millisecond, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.millisecond = millisecond;
        _this.step = step;
        return _this;
    }
    MillisecondParser.prototype.feed = function (input) {
        return MillisecondParser.parse(input, this.date, this.millisecond, this.step);
    };
    MillisecondParser.parse = function (input, date, millisecond, step) {
        return parseDateNumber(MillisecondParser, 'millisecond', 1, 3, input, date, millisecond, step);
    };
    MillisecondParser.bind = function (millisecond, date) {
        if (date === void 0) { date = {}; }
        date.millisecond = millisecond;
        return Iteratee.done(date);
    };
    MillisecondParser.cont = function (date, millisecond, step) {
        return new MillisecondParser(date, millisecond, step);
    };
    return MillisecondParser;
}(Iteratee));
var PatternFormat = (function (_super) {
    __extends(PatternFormat, _super);
    function PatternFormat(pattern, formats) {
        var _this = _super.call(this) || this;
        _this.pattern = pattern;
        _this.formats = formats;
        return _this;
    }
    PatternFormat.prototype.writeDate = function (date, output) {
        var pattern = this.pattern;
        var formats = this.formats;
        var i = 0;
        var j = 0;
        var n = pattern.length;
        while (j < n) {
            if (pattern.charCodeAt(j) === 37) {
                if (i !== j) {
                    output.push(pattern.slice(i, j));
                }
                var s = pattern.charAt(j + 1);
                var f = formats[s];
                if (f) {
                    f.writeDate(date, output);
                }
                j += 2;
                i = j;
            }
            else {
                j += 1;
            }
        }
        if (i !== j) {
            output.push(pattern.slice(i, j));
        }
    };
    PatternFormat.prototype.parseDateTime = function (input, date) {
        return PatternFormatParser.parse(input, this.pattern, this.formats, date);
    };
    return PatternFormat;
}(DateTimeFormat));
var PatternFormatParser = (function (_super) {
    __extends(PatternFormatParser, _super);
    function PatternFormatParser(pattern, formats, date, dateParser, step) {
        var _this = _super.call(this) || this;
        _this.pattern = pattern;
        _this.formats = formats;
        _this.date = date;
        _this.dateParser = dateParser;
        _this.step = step;
        return _this;
    }
    PatternFormatParser.prototype.feed = function (input) {
        return PatternFormatParser.parse(input, this.pattern, this.formats, this.date, this.dateParser, this.step);
    };
    PatternFormatParser.parse = function (input, pattern, formats, date, dateParser, step) {
        if (step === void 0) { step = 0; }
        var c = 0;
        var n = pattern.length;
        while (step < n) {
            var p = pattern.charCodeAt(step);
            if (p === 37) {
                if (!dateParser) {
                    var s = pattern.charAt(step + 1);
                    var format = formats[s];
                    if (format) {
                        dateParser = format.parseDateTime(input, date);
                    }
                    else {
                        return Iteratee.error('unknown format specifier: ' + s);
                    }
                }
                while (dateParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    dateParser = dateParser.feed(input);
                }
                if (dateParser.isDone()) {
                    date = dateParser.bind();
                    dateParser = undefined;
                    step += 2;
                    continue;
                }
                else if (dateParser.isError()) {
                    return dateParser.asError();
                }
            }
            else {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === p) {
                        input.step();
                        step += 1;
                        continue;
                    }
                    else {
                        return Iteratee.expected(p, input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        }
        if (step === n) {
            date = date || {};
            return Iteratee.done(date);
        }
        return new PatternFormatParser(pattern, formats, date, dateParser, step);
    };
    return PatternFormatParser;
}(Iteratee));
var DateTimeParser = (function (_super) {
    __extends(DateTimeParser, _super);
    function DateTimeParser(dateParser) {
        var _this = _super.call(this) || this;
        _this.dateParser = dateParser;
        return _this;
    }
    DateTimeParser.prototype.feed = function (input) {
        return DateTimeParser.parse(input, this.dateParser);
    };
    DateTimeParser.parse = function (input, dateParser) {
        while (dateParser.isCont() && (!input.isEmpty() || input.isDone())) {
            dateParser = dateParser.feed(input);
        }
        if (dateParser.isDone()) {
            return Iteratee.done(DateTime.fromAny(dateParser.bind()));
        }
        else if (dateParser.isError()) {
            return dateParser.asError();
        }
        return new DateTimeParser(dateParser);
    };
    return DateTimeParser;
}(Iteratee));
DateTimeFormat.Formats = DateTimeFormat.formats();
DateTimeFormat.Iso8601 = DateTimeFormat.iso8601();
//# sourceMappingURL=data:application/json;base64,

var DateTime = (function () {
    function DateTime(time, zone) {
        if (zone === void 0) { zone = TimeZone.UTC; }
        this._time = time;
        this._zone = zone;
    }
    DateTime.prototype.time = function (time) {
        if (time === undefined) {
            return this._time;
        }
        else {
            return new DateTime(time, this._zone);
        }
    };
    DateTime.prototype.zone = function (zone) {
        if (zone === undefined) {
            return this._zone;
        }
        else {
            return new DateTime(this._time, zone);
        }
    };
    DateTime.prototype.year = function (year, month, day, hour, minute, second, millisecond) {
        var date = this.toUTCLocalDate();
        if (year === undefined) {
            return date.getUTCFullYear();
        }
        else {
            date.setUTCFullYear(year);
            if (month !== undefined) {
                date.setUTCMonth(month);
            }
            if (day !== undefined) {
                date.setUTCDate(day);
            }
            if (hour !== undefined) {
                date.setUTCHours(hour);
            }
            if (minute !== undefined) {
                date.setUTCMinutes(minute);
            }
            if (second !== undefined) {
                date.setUTCSeconds(second);
            }
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.month = function (month, day, hour, minute, second, millisecond) {
        var date = this.toUTCLocalDate();
        if (month === undefined) {
            return date.getUTCMonth();
        }
        else {
            date.setUTCMonth(month);
            if (day !== undefined) {
                date.setUTCDate(day);
            }
            if (hour !== undefined) {
                date.setUTCHours(hour);
            }
            if (minute !== undefined) {
                date.setUTCMinutes(minute);
            }
            if (second !== undefined) {
                date.setUTCSeconds(second);
            }
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.day = function (day, hour, minute, second, millisecond) {
        var date = this.toUTCLocalDate();
        if (day === undefined) {
            return date.getUTCDate();
        }
        else {
            date.setUTCDate(day);
            if (hour !== undefined) {
                date.setUTCHours(hour);
            }
            if (minute !== undefined) {
                date.setUTCMinutes(minute);
            }
            if (second !== undefined) {
                date.setUTCSeconds(second);
            }
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.hour = function (hour, minute, second, millisecond) {
        var date = this.toUTCLocalDate();
        if (hour === undefined) {
            return date.getUTCHours();
        }
        else {
            date.setUTCHours(hour);
            if (minute !== undefined) {
                date.setUTCMinutes(minute);
            }
            if (second !== undefined) {
                date.setUTCSeconds(second);
            }
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.minute = function (minute, second, millisecond) {
        var date = this.toUTCLocalDate();
        if (minute === undefined) {
            return date.getUTCMinutes();
        }
        else {
            date.setUTCMinutes(minute);
            if (second !== undefined) {
                date.setUTCSeconds(second);
            }
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.second = function (second, millisecond) {
        var date = this.toUTCLocalDate();
        if (second === undefined) {
            return date.getUTCSeconds();
        }
        else {
            date.setUTCSeconds(second);
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.millisecond = function (millisecond) {
        var date = this.toUTCLocalDate();
        if (millisecond === undefined) {
            return date.getUTCMilliseconds();
        }
        else {
            date.setUTCMilliseconds(millisecond);
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.weekday = function () {
        return this.toUTCLocalDate().getDay();
    };
    DateTime.prototype.toUTCLocalDate = function () {
        return new Date(this._time + 60000 * this._zone._offset);
    };
    DateTime.prototype.toDate = function () {
        return new Date(this._time);
    };
    DateTime.prototype.valueOf = function () {
        return this._time;
    };
    DateTime.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof DateTime) {
            return this._time === that._time && this._zone.equals(that._zone);
        }
        return false;
    };
    DateTime.prototype.compare = function (that) {
        var x = this._time;
        var y = +that;
        return x < y ? -1 : x > y ? 1 : x === y ? 0 : NaN;
    };
    DateTime.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x97A4F483, this._time), this._zone.hashCode()));
    };
    DateTime.prototype.toString = function () {
        return DateTimeFormat.Iso8601.format(this);
    };
    DateTime.fromUTCLocalDate = function (date, zone) {
        return new DateTime(date.getTime() - 60000 * zone._offset, zone);
    };
    DateTime.current = function (zone) {
        zone = zone !== undefined ? TimeZone.fromAny(zone) : TimeZone.Local;
        return new DateTime(Date.now(), zone);
    };
    DateTime.time = function (date) {
        if (date instanceof DateTime) {
            return date._time;
        }
        else if (date instanceof Date) {
            return date.getTime();
        }
        else if (typeof date === 'number') {
            return date;
        }
        else if (typeof date === 'string') {
            return DateTime.parse(date).time();
        }
        else if (date && typeof date === 'object') {
            DateTime.fromObject(date).time();
        }
        throw new TypeError('' + date);
    };
    DateTime.fromAny = function (date, zone) {
        if (date instanceof DateTime) {
            return date;
        }
        else if (date instanceof Date) {
            zone = zone !== undefined ? TimeZone.fromAny(zone) : TimeZone.UTC;
            return new DateTime(date.getTime(), zone);
        }
        else if (typeof date === 'number') {
            zone = zone !== undefined ? TimeZone.fromAny(zone) : TimeZone.UTC;
            return new DateTime(date, zone);
        }
        else if (typeof date === 'string') {
            return DateTime.parse(date, zone);
        }
        else if (date && typeof date === 'object') {
            return DateTime.fromObject(date, zone);
        }
        throw new TypeError('' + date);
    };
    DateTime.fromObject = function (init, zone) {
        var time = Date.UTC(init.year || 1970, init.month || 0, init.day, init.hour, init.minute, init.second, init.millisecond);
        if (init.zone !== undefined) {
            zone = TimeZone.fromAny(init.zone);
        }
        if (zone !== undefined) {
            zone = TimeZone.fromAny(zone);
            time += 60000 * zone._offset;
        }
        else {
            zone = TimeZone.UTC;
        }
        return new DateTime(time, zone);
    };
    DateTime.fromValue = function (value) {
        var positional;
        var header = value.header('date');
        if (header.isDefined()) {
            value = header;
            positional = true;
        }
        else {
            positional = false;
        }
        var init = {};
        value.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined) {
                if (key === 'year') {
                    init.year = item.toValue().numberValue(init.year);
                }
                else if (key === 'month') {
                    init.month = item.toValue().numberValue(init.month);
                }
                else if (key === 'day') {
                    init.day = item.toValue().numberValue(init.day);
                }
                else if (key === 'hour') {
                    init.hour = item.toValue().numberValue(init.hour);
                }
                else if (key === 'minute') {
                    init.minute = item.toValue().numberValue(init.minute);
                }
                else if (key === 'second') {
                    init.second = item.toValue().numberValue(init.second);
                }
                else if (key === 'millisecond') {
                    init.millisecond = item.toValue().numberValue(init.millisecond);
                }
                else if (key === 'zone') {
                    init.zone = item.toValue().cast(TimeZone.Form, init.zone);
                }
            }
            else if (item instanceof Value && positional) {
                if (index === 0) {
                    init.year = item.numberValue(init.year);
                }
                else if (index === 1) {
                    init.month = item.numberValue(init.month);
                }
                else if (index === 2) {
                    init.day = item.numberValue(init.day);
                }
                else if (index === 3) {
                    init.hour = item.numberValue(init.hour);
                }
                else if (index === 4) {
                    init.minute = item.numberValue(init.minute);
                }
                else if (index === 5) {
                    init.second = item.numberValue(init.second);
                }
                else if (index === 6) {
                    init.millisecond = item.numberValue(init.millisecond);
                }
                else if (index === 7) {
                    init.zone = item.cast(TimeZone.Form, init.zone);
                }
            }
        });
        if (DateTime.isInit(init)) {
            return DateTime.fromObject(init);
        }
        return undefined;
    };
    DateTime.parse = function (date, zone) {
        return DateTimeFormat.Iso8601.parse(date);
    };
    DateTime.isInit = function (value) {
        if (value && typeof value === 'object') {
            var init = value;
            return init.year !== undefined || init.month !== undefined || init.day !== undefined
                || init.hour !== undefined || init.minute !== undefined || init.second !== undefined
                || init.millisecond !== undefined;
        }
        return false;
    };
    DateTime.Form = undefined;
    return DateTime;
}());
var DateTimeForm = (function (_super) {
    __extends(DateTimeForm, _super);
    function DateTimeForm(unit) {
        if (unit === void 0) { unit = new DateTime(0); }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    DateTimeForm.prototype.mold = function (date) {
        date = DateTime.fromAny(date);
        return Text$1.valueOf(DateTimeFormat.Iso8601.format(date));
    };
    DateTimeForm.prototype.cast = function (value) {
        var date;
        try {
            date = DateTime.fromValue(value);
            if (!date) {
                var millis = value.numberValue();
                if (millis !== undefined) {
                    date = new DateTime(millis);
                }
                else {
                    var str = value.stringValue();
                    if (str !== undefined) {
                        date = DateTime.parse(str);
                    }
                }
            }
        }
        catch (e) {
        }
        return date;
    };
    return DateTimeForm;
}(Form));
DateTime.Form = new DateTimeForm();
//# sourceMappingURL=data:application/json;base64,

var SECOND = 1000;
var MINUTE = 60 * SECOND;
var HOUR = 60 * MINUTE;
var TimeInterval = (function () {
    function TimeInterval() {
    }
    TimeInterval.prototype.next = function (d, k) {
        return this.floor(this.offset(d, k));
    };
    TimeInterval.prototype.ceil = function (d) {
        if (d instanceof DateTime) {
            d = d.time(d.time() - 1);
        }
        else {
            d = DateTime.time(d) - 1;
        }
        return this.next(this.floor(d), 1);
    };
    TimeInterval.prototype.round = function (d) {
        d = DateTime.fromAny(d);
        var d0 = this.floor(d);
        var d1 = this.ceil(d);
        return d.time() - d0.time() < d1.time() - d.time() ? d0 : d1;
    };
    TimeInterval.prototype.range = function (d0, d1, step) {
        d0 = this.ceil(d0);
        d1 = DateTime.time(d1);
        var ds = [];
        step = typeof step === 'number' ? Math.floor(step) : 1;
        if (step > 0) {
            while (d0.time() < d1) {
                ds.push(d0);
                d0 = this.next(d0, step);
            }
        }
        return ds;
    };
    TimeInterval.prototype.filter = function (predicate) {
        return new FilterTimeInterval(this, predicate);
    };
    TimeInterval.years = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Years;
        }
        else if (d1 === undefined) {
            return TimeInterval.Years.every(d0);
        }
        else {
            return TimeInterval.Years.range(d0, d1, step);
        }
    };
    TimeInterval.months = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Months;
        }
        else if (d1 === undefined) {
            return TimeInterval.Months.every(d0);
        }
        else {
            return TimeInterval.Months.range(d0, d1, step);
        }
    };
    TimeInterval.weeks = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Weeks;
        }
        else {
            return TimeInterval.Weeks.range(d0, d1, step);
        }
    };
    TimeInterval.days = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Days;
        }
        else if (d1 === undefined) {
            return TimeInterval.Days.every(d0);
        }
        else {
            return TimeInterval.Days.range(d0, d1, step);
        }
    };
    TimeInterval.hours = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Hours;
        }
        else if (d1 === undefined) {
            return TimeInterval.Hours.every(d0);
        }
        else {
            return TimeInterval.Hours.range(d0, d1, step);
        }
    };
    TimeInterval.minutes = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Minutes;
        }
        else if (d1 === undefined) {
            return TimeInterval.Minutes.every(d0);
        }
        else {
            return TimeInterval.Minutes.range(d0, d1, step);
        }
    };
    TimeInterval.seconds = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Seconds;
        }
        else if (d1 === undefined) {
            return TimeInterval.Seconds.every(d0);
        }
        else {
            return TimeInterval.Seconds.range(d0, d1, step);
        }
    };
    TimeInterval.milliseconds = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Milliseconds;
        }
        else if (d1 === undefined) {
            return TimeInterval.Milliseconds.every(d0);
        }
        else {
            return TimeInterval.Milliseconds.range(d0, d1, step);
        }
    };
    TimeInterval.Years = undefined;
    TimeInterval.Months = undefined;
    TimeInterval.Weeks = undefined;
    TimeInterval.Days = undefined;
    TimeInterval.Hours = undefined;
    TimeInterval.Minutes = undefined;
    TimeInterval.Seconds = undefined;
    TimeInterval.Milliseconds = undefined;
    return TimeInterval;
}());
var FilterTimeInterval = (function (_super) {
    __extends(FilterTimeInterval, _super);
    function FilterTimeInterval(unit, predicate) {
        var _this = _super.call(this) || this;
        _this.unit = unit;
        _this.predicate = predicate;
        return _this;
    }
    FilterTimeInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        while (k < 0) {
            do {
                d = this.unit.offset(d, -1);
            } while (!this.predicate(d));
            k += 1;
        }
        while (k > 0) {
            do {
                d = this.unit.offset(d, 1);
            } while (!this.predicate(d));
            k -= 1;
        }
        return d;
    };
    FilterTimeInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        while (d = this.unit.floor(d), !this.predicate(d)) {
            d = d.time(d.time() - 1);
        }
        return d;
    };
    return FilterTimeInterval;
}(TimeInterval));
var UnitTimeInterval = (function (_super) {
    __extends(UnitTimeInterval, _super);
    function UnitTimeInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return UnitTimeInterval;
}(TimeInterval));
var YearInterval = (function (_super) {
    __extends(YearInterval, _super);
    function YearInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    YearInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.year(d.year() + k);
        return d;
    };
    YearInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.year(d.year() + k).month(0, 1).hour(0, 0, 0, 0);
    };
    YearInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        return d.month(0, 1).hour(0, 0, 0, 0);
    };
    YearInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        d = d.month(0, 1).hour(0, 0, 0, 0);
        d = d.year(d.year() + 1);
        return d.month(0, 1).hour(0, 0, 0, 0);
    };
    YearInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new YearsInterval(k);
        }
        else {
            throw new Error('' + k);
        }
    };
    return YearInterval;
}(UnitTimeInterval));
TimeInterval.Years = new YearInterval();
var YearsInterval = (function (_super) {
    __extends(YearsInterval, _super);
    function YearsInterval(stride) {
        var _this = _super.call(this) || this;
        _this.stride = stride || 1;
        return _this;
    }
    YearsInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.year(d.year() + k * this.stride);
    };
    YearsInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.year(Math.floor((d.year() + k * this.stride) / this.stride) * this.stride);
        return d.month(0, 1).hour(0, 0, 0, 0);
    };
    YearsInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        d = d.year(Math.floor(d.year() / this.stride) * this.stride);
        return d.month(0, 1).hour(0, 0, 0, 0);
    };
    YearsInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        d = d.year(Math.floor(d.year() / this.stride) * this.stride);
        d = d.month(0, 1).hour(0, 0, 0, 0);
        d = d.year(Math.floor((d.year() + this.stride) / this.stride) * this.stride);
        return d.month(0, 1).hour(0, 0, 0, 0);
    };
    return YearsInterval;
}(TimeInterval));
var MonthInterval = (function (_super) {
    __extends(MonthInterval, _super);
    function MonthInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MonthInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.month(d.month() + k);
    };
    MonthInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.month(d.month() + k);
        return d.day(1).hour(0, 0, 0, 0);
    };
    MonthInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        return d.day(1).hour(0, 0, 0, 0);
    };
    MonthInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        d = d.day(1).hour(0, 0, 0, 0);
        d = d.month(d.month() + 1);
        return d.day(1).hour(0, 0, 0, 0);
    };
    MonthInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new FilterTimeInterval(this, MonthInterval.modulo.bind(null, k));
        }
        else {
            throw new Error('' + k);
        }
    };
    MonthInterval.modulo = function (k, d) {
        return d.month() % k === 0;
    };
    return MonthInterval;
}(UnitTimeInterval));
TimeInterval.Months = new MonthInterval();
var WeekInterval = (function (_super) {
    __extends(WeekInterval, _super);
    function WeekInterval(day) {
        if (day === void 0) { day = 0; }
        var _this = _super.call(this) || this;
        _this.day = day;
        return _this;
    }
    WeekInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.day(d.day() + 7 * k);
    };
    WeekInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.day(d.day() + 7 * k);
        d = d.day(d.day() - (d.weekday() + 7 - this.day) % 7);
        return d.hour(0, 0, 0, 0);
    };
    WeekInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        d = d.day(d.day() - (d.weekday() + 7 - this.day) % 7);
        return d.hour(0, 0, 0, 0);
    };
    WeekInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        d = d.day(d.day() - (d.weekday() + 7 - this.day) % 7);
        d = d.hour(0, 0, 0, 0);
        d = d.day(d.day() + 7);
        d = d.day(d.day() - (d.weekday() + 7 - this.day) % 7);
        return d.hour(0, 0, 0, 0);
    };
    return WeekInterval;
}(TimeInterval));
TimeInterval.Weeks = new WeekInterval();
var DayInterval = (function (_super) {
    __extends(DayInterval, _super);
    function DayInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DayInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.day(d.day() + k);
    };
    DayInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.day(d.day() + k);
        return d.hour(0, 0, 0, 0);
    };
    DayInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        return d.hour(0, 0, 0, 0);
    };
    DayInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        d = d.hour(0, 0, 0, 0);
        d = d.day(d.day() + 1);
        return d.hour(0, 0, 0, 0);
    };
    DayInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new FilterTimeInterval(this, DayInterval.modulo.bind(null, k));
        }
        else {
            throw new Error('' + k);
        }
    };
    DayInterval.modulo = function (k, d) {
        return d.day() % k === 0;
    };
    return DayInterval;
}(UnitTimeInterval));
TimeInterval.Days = new DayInterval();
var HourInterval = (function (_super) {
    __extends(HourInterval, _super);
    function HourInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HourInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k * HOUR);
    };
    HourInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.time(d.time() + k * HOUR);
        var dtz = d.zone().offset * MINUTE % HOUR;
        if (dtz < 0) {
            dtz += HOUR;
        }
        return d.time(Math.floor((d.time() - dtz) / HOUR) * HOUR + dtz);
    };
    HourInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        var dtz = d.zone().offset * MINUTE % HOUR;
        if (dtz < 0) {
            dtz += HOUR;
        }
        return d.time(Math.floor((d.time() - dtz) / HOUR) * HOUR + dtz);
    };
    HourInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        var dtz = d.zone().offset * MINUTE % HOUR;
        if (dtz < 0) {
            dtz += HOUR;
        }
        d = d.time((Math.floor((d.time() - dtz) / HOUR) * HOUR + dtz) + HOUR);
        dtz = d.zone().offset * MINUTE % HOUR;
        if (dtz < 0) {
            dtz += HOUR;
        }
        return d.time(Math.floor((d.time() - dtz) / HOUR) * HOUR + dtz);
    };
    HourInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new FilterTimeInterval(this, HourInterval.modulo.bind(null, k));
        }
        else {
            throw new Error('' + k);
        }
    };
    HourInterval.modulo = function (k, d) {
        return d.hour() % k === 0;
    };
    return HourInterval;
}(UnitTimeInterval));
TimeInterval.Hours = new HourInterval();
var MinuteInterval = (function (_super) {
    __extends(MinuteInterval, _super);
    function MinuteInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MinuteInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k * MINUTE);
    };
    MinuteInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(Math.floor((d.time() + k * MINUTE) / MINUTE) * MINUTE);
    };
    MinuteInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        return d.time(Math.floor(d.time() / MINUTE) * MINUTE);
    };
    MinuteInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        return d.time(Math.floor(((Math.floor((d.time() - 1) / MINUTE) * MINUTE) + MINUTE) / MINUTE) * MINUTE);
    };
    MinuteInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new FilterTimeInterval(this, MinuteInterval.modulo.bind(null, k));
        }
        else {
            throw new Error('' + k);
        }
    };
    MinuteInterval.modulo = function (k, d) {
        return d.minute() % k === 0;
    };
    return MinuteInterval;
}(UnitTimeInterval));
TimeInterval.Minutes = new MinuteInterval();
var SecondInterval = (function (_super) {
    __extends(SecondInterval, _super);
    function SecondInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SecondInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k * SECOND);
    };
    SecondInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(Math.floor((d.time() + k * SECOND) / SECOND) * SECOND);
    };
    SecondInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        return d.time(Math.floor(d.time() / SECOND) * SECOND);
    };
    SecondInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        return d.time(Math.floor(((Math.floor((d.time() - 1) / SECOND) * SECOND) + SECOND) / SECOND) * SECOND);
    };
    SecondInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new FilterTimeInterval(this, SecondInterval.modulo.bind(null, k));
        }
        else {
            throw new Error('' + k);
        }
    };
    SecondInterval.modulo = function (k, d) {
        return d.second() % k === 0;
    };
    return SecondInterval;
}(UnitTimeInterval));
TimeInterval.Seconds = new SecondInterval();
var MillisecondInterval = (function (_super) {
    __extends(MillisecondInterval, _super);
    function MillisecondInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MillisecondInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k);
    };
    MillisecondInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k);
    };
    MillisecondInterval.prototype.floor = function (d) {
        return DateTime.fromAny(d);
    };
    MillisecondInterval.prototype.ceil = function (d) {
        return DateTime.fromAny(d);
    };
    MillisecondInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new MillisecondsInterval(k);
        }
        else {
            throw new Error('' + k);
        }
    };
    return MillisecondInterval;
}(UnitTimeInterval));
TimeInterval.Milliseconds = new MillisecondInterval();
var MillisecondsInterval = (function (_super) {
    __extends(MillisecondsInterval, _super);
    function MillisecondsInterval(stride) {
        var _this = _super.call(this) || this;
        _this.stride = stride || 1;
        return _this;
    }
    MillisecondsInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k * this.stride);
    };
    MillisecondsInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        var stride = this.stride;
        return d.time(Math.floor((d.time() + k * stride) / stride) * stride);
    };
    MillisecondsInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        var stride = this.stride;
        return d.time(Math.floor(d.time() / stride) * stride);
    };
    MillisecondsInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        var stride = this.stride;
        return d.time(Math.floor(((Math.floor((d.time() - 1) / stride) * stride) + stride) / stride) * stride);
    };
    return MillisecondsInterval;
}(TimeInterval));
//# sourceMappingURL=data:application/json;base64,

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQsT0FBTyxFQUdMLFFBQVEsR0FDVCxNQUFNLGFBQWEsQ0FBQztBQUVyQixPQUFPLEVBRUwsY0FBYyxHQUNmLE1BQU0sb0JBQW9CLENBQUM7QUFFNUIsT0FBTyxFQUNMLFlBQVksRUFDWixnQkFBZ0IsR0FDakIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBRUwsUUFBUSxHQUNULE1BQU0sYUFBYSxDQUFDIn0=

var PI = Math.PI;
var TAU = 2 * PI;
var Angle = (function () {
    function Angle() {
    }
    Angle.prototype.isDefined = function () {
        return this.value !== 0;
    };
    Angle.prototype.plus = function (that, units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(this.toValue(units) + Angle.fromAny(that).toValue(units), units);
    };
    Angle.prototype.neg = function (units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(-this.toValue(units), units);
    };
    Angle.prototype.minus = function (that, units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(this.toValue(units) - Angle.fromAny(that).toValue(units), units);
    };
    Angle.prototype.times = function (scalar, units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(this.toValue(units) * scalar, units);
    };
    Angle.prototype.divide = function (scalar, units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(this.toValue(units) / scalar, units);
    };
    Angle.prototype.norm = function (total, units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(this.toValue(units) / Angle.fromAny(total).toValue(units), units);
    };
    Angle.prototype.deg = function () {
        return new DegAngle(this.degValue());
    };
    Angle.prototype.grad = function () {
        return new GradAngle(this.gradValue());
    };
    Angle.prototype.rad = function () {
        return new RadAngle(this.radValue());
    };
    Angle.prototype.turn = function () {
        return new TurnAngle(this.turnValue());
    };
    Angle.prototype.toValue = function (units) {
        switch (units) {
            case 'deg': return this.degValue();
            case 'grad': return this.gradValue();
            case 'rad': return this.radValue();
            case 'turn': return this.turnValue();
            default: throw new TypeError(units);
        }
    };
    Angle.prototype.to = function (units) {
        switch (units) {
            case 'deg': return this.deg();
            case 'grad': return this.grad();
            case 'rad': return this.rad();
            case 'turn': return this.turn();
            default: throw new TypeError(units);
        }
    };
    Angle.prototype.equals = function (that) {
        if (that instanceof Angle) {
            return this.value === that.value && this.units === that.units;
        }
        return false;
    };
    Angle.prototype.toString = function () {
        return this.value + this.units;
    };
    Angle.form = function (units) {
        if (units !== undefined) {
            return new AngleForm(units);
        }
        else {
            return Angle.Form;
        }
    };
    Angle.zero = function (units) {
        units = units || 'rad';
        switch (units) {
            case 'deg': return new DegAngle(0);
            case 'grad': return new GradAngle(0);
            case 'rad': return new RadAngle(0);
            case 'turn': return new TurnAngle(0);
            default: throw new TypeError(units);
        }
    };
    Angle.deg = function (value) {
        return new DegAngle(value);
    };
    Angle.grad = function (value) {
        return new GradAngle(value);
    };
    Angle.rad = function (value) {
        return new RadAngle(value);
    };
    Angle.turn = function (value) {
        return new TurnAngle(value);
    };
    Angle.fromAny = function (value, units) {
        if (value instanceof Angle) {
            return value;
        }
        else if (typeof value === 'number') {
            if (typeof units === 'string') {
                switch (units) {
                    case 'deg': return new DegAngle(value);
                    case 'grad': return new GradAngle(value);
                    case '':
                    case 'rad': return new RadAngle(value);
                    case 'turn': return new TurnAngle(value);
                    default: throw new Error(units);
                }
            }
            else {
                return new RadAngle(value);
            }
        }
        else if (typeof value === 'string') {
            return Angle.parse(value);
        }
        else {
            throw new Error();
        }
    };
    Angle.fromValue = function (value) {
        if (value.length === 2) {
            var num = value.getItem(0).numberValue();
            var units = value.getItem(1);
            if (num !== undefined && isFinite(num) && units instanceof Attr$1 && units.value === Value.Extant) {
                switch (units.key.value) {
                    case 'deg': return new DegAngle(num);
                    case 'grad': return new GradAngle(num);
                    case 'rad': return new RadAngle(num);
                    case 'turn': return new TurnAngle(num);
                    default:
                }
            }
        }
        return undefined;
    };
    Angle.parse = function (str, defaultUnits) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = AngleParser.parse(input, defaultUnits);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    Angle.Form = undefined;
    return Angle;
}());
var DegAngle = (function (_super) {
    __extends(DegAngle, _super);
    function DegAngle(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Object.defineProperty(DegAngle.prototype, "units", {
        get: function () {
            return 'deg';
        },
        enumerable: true,
        configurable: true
    });
    DegAngle.prototype.degValue = function () {
        return this.value;
    };
    DegAngle.prototype.gradValue = function () {
        return this.value * 10 / 9;
    };
    DegAngle.prototype.radValue = function () {
        return this.value * PI / 180;
    };
    DegAngle.prototype.turnValue = function () {
        return this.value / 360;
    };
    DegAngle.prototype.deg = function () {
        return this;
    };
    return DegAngle;
}(Angle));
var GradAngle = (function (_super) {
    __extends(GradAngle, _super);
    function GradAngle(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Object.defineProperty(GradAngle.prototype, "units", {
        get: function () {
            return 'grad';
        },
        enumerable: true,
        configurable: true
    });
    GradAngle.prototype.degValue = function () {
        return this.value * 0.9;
    };
    GradAngle.prototype.gradValue = function () {
        return this.value;
    };
    GradAngle.prototype.radValue = function () {
        return this.value * PI / 200;
    };
    GradAngle.prototype.turnValue = function () {
        return this.value / 400;
    };
    GradAngle.prototype.grad = function () {
        return this;
    };
    return GradAngle;
}(Angle));
var RadAngle = (function (_super) {
    __extends(RadAngle, _super);
    function RadAngle(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Object.defineProperty(RadAngle.prototype, "units", {
        get: function () {
            return 'rad';
        },
        enumerable: true,
        configurable: true
    });
    RadAngle.prototype.degValue = function () {
        return this.value * 180 / PI;
    };
    RadAngle.prototype.gradValue = function () {
        return this.value * 200 / PI;
    };
    RadAngle.prototype.radValue = function () {
        return this.value;
    };
    RadAngle.prototype.turnValue = function () {
        return this.value / TAU;
    };
    RadAngle.prototype.rad = function () {
        return this;
    };
    return RadAngle;
}(Angle));
var TurnAngle = (function (_super) {
    __extends(TurnAngle, _super);
    function TurnAngle(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Object.defineProperty(TurnAngle.prototype, "units", {
        get: function () {
            return 'turn';
        },
        enumerable: true,
        configurable: true
    });
    TurnAngle.prototype.degValue = function () {
        return this.value * 360;
    };
    TurnAngle.prototype.gradValue = function () {
        return this.value * 400;
    };
    TurnAngle.prototype.radValue = function () {
        return this.value * TAU;
    };
    TurnAngle.prototype.turnValue = function () {
        return this.value;
    };
    TurnAngle.prototype.turn = function () {
        return this;
    };
    return TurnAngle;
}(Angle));
var AngleParser = (function (_super) {
    __extends(AngleParser, _super);
    function AngleParser(defaultUnits, valueParser, unitsOutput, step) {
        var _this = _super.call(this) || this;
        _this.defaultUnits = defaultUnits;
        _this.valueParser = valueParser;
        _this.unitsOutput = unitsOutput;
        _this.step = step;
        return _this;
    }
    AngleParser.prototype.feed = function (input) {
        return AngleParser.parse(input, this.defaultUnits, this.valueParser, this.unitsOutput, this.step);
    };
    AngleParser.parse = function (input, defaultUnits, valueParser, unitsOutput, step) {
        if (defaultUnits === void 0) { defaultUnits = ''; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!valueParser) {
                valueParser = Recon.Factory.parseDecimal(input);
            }
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 2;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 2) {
            unitsOutput = unitsOutput || new StringOutput();
            while (!input.isEmpty() && (c = input.head(), Iteratee.isAlpha(c))) {
                input.step();
                unitsOutput.push(c);
            }
            if (!input.isEmpty() || input.isDone()) {
                var value = valueParser.bind().numberValue();
                var units = unitsOutput.bind() || defaultUnits;
                switch (units) {
                    case 'deg': return Iteratee.done(new DegAngle(value));
                    case 'grad': return Iteratee.done(new GradAngle(value));
                    case '':
                    case 'rad': return Iteratee.done(new RadAngle(value));
                    case 'turn': return Iteratee.done(new TurnAngle(value));
                    default: return Iteratee.error(units);
                }
            }
        }
        return new AngleParser(defaultUnits, valueParser, unitsOutput, step);
    };
    return AngleParser;
}(Iteratee));
var AngleForm = (function (_super) {
    __extends(AngleForm, _super);
    function AngleForm(units) {
        var _this = _super.call(this) || this;
        _this.units = units;
        return _this;
    }
    Object.defineProperty(AngleForm.prototype, "unit", {
        get: function () {
            return Angle.zero(this.units);
        },
        enumerable: true,
        configurable: true
    });
    AngleForm.prototype.mold = function (angle) {
        angle = Angle.fromAny(angle);
        return Text$1.valueOf(angle.toString());
    };
    AngleForm.prototype.cast = function (value) {
        var angle;
        try {
            angle = Angle.fromValue(value);
            if (!angle) {
                var str = value.stringValue();
                if (str !== undefined) {
                    angle = Angle.parse(str);
                }
            }
        }
        catch (e) {
        }
        return angle;
    };
    return AngleForm;
}(Form));
Angle.Form = new AngleForm();
//# sourceMappingURL=data:application/json;base64,

function widthUnit(node) {
    while (node) {
        if (node instanceof HTMLElement && node.offsetParent instanceof HTMLElement) {
            return node.offsetParent.offsetWidth;
        }
        node = node.parentNode || undefined;
    }
    return 0;
}
function emUnit(node) {
    while (node) {
        if (node instanceof Element) {
            var fontSize = getComputedStyle(node).fontSize;
            if (fontSize !== null) {
                return parseFloat(fontSize);
            }
        }
        node = node.parentNode || undefined;
    }
    return 0;
}
function remUnit() {
    if (document.documentElement) {
        var fontSize = getComputedStyle(document.documentElement).fontSize;
        if (fontSize !== null) {
            return parseFloat(fontSize);
        }
        return 0;
    }
    return 0;
}
var Length = (function () {
    function Length() {
    }
    Length.prototype.isDefined = function () {
        return this.value !== 0;
    };
    Object.defineProperty(Length.prototype, "unitValue", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Length.prototype.emValue = function () {
        return this.pxValue() / emUnit(this.node);
    };
    Length.prototype.remValue = function () {
        return this.pxValue() / remUnit();
    };
    Length.prototype.pctValue = function () {
        return this.px().value / this.unitValue;
    };
    Length.prototype.px = function () {
        return new PxLength(this.pxValue(), this.node);
    };
    Length.prototype.em = function () {
        return new EmLength(this.emValue(), this.node);
    };
    Length.prototype.rem = function () {
        return new RemLength(this.remValue(), this.node);
    };
    Length.prototype.pct = function () {
        return new PctLength(this.pctValue(), this.node);
    };
    Length.prototype.toValue = function (units) {
        switch (units) {
            case 'px': return this.pxValue();
            case 'em': return this.emValue();
            case 'rem': return this.remValue();
            case '%': return this.pctValue();
            default: throw new TypeError(units);
        }
    };
    Length.prototype.to = function (units) {
        switch (units) {
            case 'px': return this.px();
            case 'em': return this.em();
            case 'rem': return this.rem();
            case '%': return this.pct();
            default: throw new TypeError(units);
        }
    };
    Length.prototype.equals = function (that) {
        if (that instanceof Length) {
            return this.value === that.value && this.units === that.units && this.node === that.node;
        }
        return false;
    };
    Length.prototype.toString = function () {
        return this.value + this.units;
    };
    Length.form = function (node) {
        if (node) {
            return new LengthForm(node);
        }
        else {
            return Length.Form;
        }
    };
    Length.zero = function (node) {
        return new PxLength(0, node);
    };
    Length.px = function (value, node) {
        return new PxLength(value, node);
    };
    Length.em = function (value, node) {
        return new EmLength(value, node);
    };
    Length.rem = function (value, node) {
        return new RemLength(value, node);
    };
    Length.pct = function (value, node) {
        return new PctLength(value, node);
    };
    Length.unitless = function (value, node) {
        return new UnitlessLength(value, node);
    };
    Length.fromAny = function (value, units, node) {
        if (value instanceof Length) {
            return value;
        }
        else if (typeof value === 'number') {
            if (typeof units === 'string') {
                switch (units) {
                    case 'px': return new PxLength(value, node);
                    case 'em': return new EmLength(value, node);
                    case 'rem': return new RemLength(value, node);
                    case '%': return new PctLength(value, node);
                    case '': return new UnitlessLength(value, node);
                    default: throw new Error(units);
                }
            }
            else {
                if (units !== undefined) {
                    node = units;
                }
                return new PxLength(value, node);
            }
        }
        else if (typeof value === 'string' && typeof units !== 'string') {
            return Length.parse(value, units);
        }
        else {
            throw new Error();
        }
    };
    Length.fromValue = function (value, node) {
        if (value.length === 2) {
            var num = value.getItem(0).numberValue();
            var units = value.getItem(1);
            if (num !== undefined && isFinite(num) && units instanceof Attr$1 && units.value === Value.Extant) {
                switch (units.key.value) {
                    case 'px': return new PxLength(num, node);
                    case 'em': return new EmLength(num, node);
                    case 'rem': return new RemLength(num, node);
                    case 'pct': return new PctLength(num, node);
                    default:
                }
            }
        }
        return undefined;
    };
    Length.parse = function (str, node) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = LengthParser.parse(input, node);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    Length.widthUnit = function () {
        return widthUnit(this.node);
    };
    Length.emUnit = function () {
        return emUnit(this.node);
    };
    Length.Form = undefined;
    return Length;
}());
var PxLength = (function (_super) {
    __extends(PxLength, _super);
    function PxLength(value, node) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(PxLength.prototype, "units", {
        get: function () {
            return 'px';
        },
        enumerable: true,
        configurable: true
    });
    PxLength.prototype.pxValue = function () {
        return this.value;
    };
    PxLength.prototype.px = function () {
        return this;
    };
    return PxLength;
}(Length));
var EmLength = (function (_super) {
    __extends(EmLength, _super);
    function EmLength(value, node) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(EmLength.prototype, "units", {
        get: function () {
            return 'em';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmLength.prototype, "unitValue", {
        get: function () {
            return emUnit(this.node);
        },
        enumerable: true,
        configurable: true
    });
    EmLength.prototype.pxValue = function () {
        return this.unitValue * this.value;
    };
    EmLength.prototype.em = function () {
        return this;
    };
    return EmLength;
}(Length));
var RemLength = (function (_super) {
    __extends(RemLength, _super);
    function RemLength(value, node) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(RemLength.prototype, "units", {
        get: function () {
            return 'rem';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemLength.prototype, "unitValue", {
        get: function () {
            return remUnit();
        },
        enumerable: true,
        configurable: true
    });
    RemLength.prototype.pxValue = function () {
        return this.unitValue * this.value;
    };
    RemLength.prototype.rem = function () {
        return this;
    };
    return RemLength;
}(Length));
var PctLength = (function (_super) {
    __extends(PctLength, _super);
    function PctLength(value, node) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(PctLength.prototype, "units", {
        get: function () {
            return '%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PctLength.prototype, "unitValue", {
        get: function () {
            return widthUnit(this.node);
        },
        enumerable: true,
        configurable: true
    });
    PctLength.prototype.pxValue = function (unitValue) {
        if (unitValue === void 0) { unitValue = this.unitValue; }
        return unitValue * this.value / 100;
    };
    PctLength.prototype.pct = function () {
        return this;
    };
    return PctLength;
}(Length));
var UnitlessLength = (function (_super) {
    __extends(UnitlessLength, _super);
    function UnitlessLength(value, node) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(UnitlessLength.prototype, "units", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    UnitlessLength.prototype.pxValue = function () {
        return this.value;
    };
    return UnitlessLength;
}(Length));
var LengthParser = (function (_super) {
    __extends(LengthParser, _super);
    function LengthParser(node, valueParser, unitsOutput, step) {
        var _this = _super.call(this) || this;
        _this.node = node;
        _this.valueParser = valueParser;
        _this.unitsOutput = unitsOutput;
        _this.step = step;
        return _this;
    }
    LengthParser.prototype.feed = function (input) {
        return LengthParser.parse(input, this.node, this.valueParser, this.unitsOutput, this.step);
    };
    LengthParser.parse = function (input, node, valueParser, unitsOutput, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!valueParser) {
                valueParser = Recon.Factory.parseDecimal(input);
            }
            while ((!input.isEmpty() || input.isDone()) && valueParser.isCont()) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 2;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 2) {
            unitsOutput = unitsOutput || new StringOutput();
            while (!input.isEmpty() && (c = input.head(), Iteratee.isAlpha(c) || c === 37)) {
                input.step();
                unitsOutput.push(c);
            }
            if (!input.isEmpty() || input.isDone()) {
                var value = valueParser.bind().numberValue();
                var units = unitsOutput.bind();
                switch (units) {
                    case 'px': return Iteratee.done(new PxLength(value, node));
                    case 'em': return Iteratee.done(new EmLength(value, node));
                    case 'rem': return Iteratee.done(new RemLength(value, node));
                    case '%': return Iteratee.done(new PctLength(value, node));
                    case '': return Iteratee.done(new UnitlessLength(value, node));
                    default: return Iteratee.error(units);
                }
            }
        }
        return new LengthParser(node, valueParser, unitsOutput, step);
    };
    return LengthParser;
}(Iteratee));
var LengthForm = (function (_super) {
    __extends(LengthForm, _super);
    function LengthForm(node) {
        var _this = _super.call(this) || this;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(LengthForm.prototype, "unit", {
        get: function () {
            return Length.zero(this.node);
        },
        enumerable: true,
        configurable: true
    });
    LengthForm.prototype.mold = function (length) {
        length = Length.fromAny(length);
        return Text$1.valueOf(length.toString());
    };
    LengthForm.prototype.cast = function (value) {
        var length;
        try {
            length = Length.fromValue(value);
            if (!length) {
                var str = value.stringValue();
                if (str !== undefined) {
                    length = Length.parse(str);
                }
            }
        }
        catch (e) {
        }
        return length;
    };
    return LengthForm;
}(Form));
Length.Form = new LengthForm();
//# sourceMappingURL=data:application/json;base64,

var DARKER = 0.7;
var BRIGHTER = 1 / DARKER;
var Color = (function () {
    function Color() {
    }
    Color.prototype.contrast = function (k) {
        return this.lightness() < 0.67 ? this.brighter(k) : this.darker(k);
    };
    Color.form = function (unit) {
        if (unit !== undefined) {
            return new ColorForm(Color.fromAny(unit));
        }
        else {
            return Color.Form;
        }
    };
    Color.transparent = function (alpha) {
        return Rgb.transparent(alpha);
    };
    Color.black = function () {
        return Rgb.black();
    };
    Color.white = function () {
        return Rgb.white();
    };
    Color.rgb = function (r, g, b, a) {
        if (arguments.length === 1) {
            return Color.fromAny(r).rgb();
        }
        else {
            return new Rgb(r, g, b, a);
        }
    };
    Color.hsl = function (h, s, l, a) {
        if (arguments.length === 1) {
            return Color.fromAny(h).hsl();
        }
        else {
            h = typeof h === 'number' ? h : Angle.fromAny(h).degValue();
            return new Hsl(h, s, l, a);
        }
    };
    Color.fromAny = function (value) {
        if (value instanceof Color) {
            return value;
        }
        else if (typeof value === 'string') {
            return Color.parse(value);
        }
        else if (value && typeof value === 'object') {
            var rgb = value;
            if (rgb.r !== undefined && rgb.g !== undefined && rgb.b !== undefined) {
                return new Rgb(rgb.r, rgb.g, rgb.b, rgb.a);
            }
            var hsl = value;
            if (hsl.h !== undefined && hsl.s !== undefined && hsl.l !== undefined) {
                var h = typeof hsl.h === 'number' ? hsl.h : Angle.fromAny(hsl.h).degValue();
                return new Hsl(h, hsl.s, hsl.l, hsl.a);
            }
        }
        throw new TypeError('' + value);
    };
    Color.fromValue = function (value) {
        var color;
        color = Rgb.fromValue(value);
        if (!color) {
            color = Hsl.fromValue(value);
        }
        return color;
    };
    Color.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = ColorParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    Color.isInit = function (value) {
        return Rgb.isInit(value) || Hsl.isInit(value);
    };
    Color.Form = undefined;
    return Color;
}());
var Rgb = (function (_super) {
    __extends(Rgb, _super);
    function Rgb(r, g, b, a) {
        if (a === void 0) { a = 1; }
        var _this = _super.call(this) || this;
        _this.r = r;
        _this.g = g;
        _this.b = b;
        _this.a = a;
        return _this;
    }
    Rgb.prototype.isDefined = function () {
        return this.r !== 0 || this.g !== 0 || this.b !== 0 || this.a !== 1;
    };
    Rgb.prototype.alpha = function (a) {
        if (a === undefined) {
            return this.a;
        }
        else {
            return new Rgb(this.r, this.g, this.b, a);
        }
    };
    Rgb.prototype.lightness = function () {
        var r = this.r / 255;
        var g = this.g / 255;
        var b = this.b / 255;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        return (max + min) / 2;
    };
    Rgb.prototype.brighter = function (k) {
        k = k === undefined ? BRIGHTER : Math.pow(BRIGHTER, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.a);
    };
    Rgb.prototype.darker = function (k) {
        k = k === undefined ? DARKER : Math.pow(DARKER, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.a);
    };
    Rgb.prototype.rgb = function () {
        return this;
    };
    Rgb.prototype.hsl = function () {
        var r = this.r / 255;
        var g = this.g / 255;
        var b = this.b / 255;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var h = NaN;
        var s = max - min;
        var l = (max + min) / 2;
        if (s) {
            if (r === max) {
                h = (g - b) / s + +(g < b) * 6;
            }
            else if (g === max) {
                h = (b - r) / s + 2;
            }
            else {
                h = (r - g) / s + 4;
            }
            s /= l < 0.5 ? max + min : 2 - (max + min);
            h *= 60;
        }
        else {
            s = l > 0 && l < 1 ? 0 : h;
        }
        return new Hsl(h, s, l, this.a);
    };
    Rgb.prototype.equals = function (other) {
        if (other instanceof Rgb) {
            return this.r === other.r && this.g === other.g && this.b === other.b && this.a === other.a;
        }
        return false;
    };
    Rgb.prototype.toHexString = function () {
        var r = Math.min(Math.max(0, Math.round(this.r || 0)), 255);
        var g = Math.min(Math.max(0, Math.round(this.g || 0)), 255);
        var b = Math.min(Math.max(0, Math.round(this.b || 0)), 255);
        var s = '#';
        s += Rgb.Base16Alphabet.charAt(r >>> 4 & 0xF);
        s += Rgb.Base16Alphabet.charAt(r & 0xF);
        s += Rgb.Base16Alphabet.charAt(g >>> 4 & 0xF);
        s += Rgb.Base16Alphabet.charAt(g & 0xF);
        s += Rgb.Base16Alphabet.charAt(b >>> 4 & 0xF);
        s += Rgb.Base16Alphabet.charAt(b & 0xF);
        return s;
    };
    Rgb.prototype.toString = function () {
        var a = this.a;
        a = isNaN(a) ? 1 : Math.max(0, Math.min(this.a, 1));
        if (a === 1) {
            return this.toHexString();
        }
        else {
            var s = 'rgba';
            s += '(';
            s += Math.max(0, Math.min(Math.round(this.r) || 0, 255));
            s += ',';
            s += Math.max(0, Math.min(Math.round(this.g) || 0, 255));
            s += ',';
            s += Math.max(0, Math.min(Math.round(this.b) || 0, 255));
            if (a !== 1) {
                s += ',';
                s += a;
            }
            s += ')';
            return s;
        }
    };
    Rgb.transparent = function (alpha) {
        if (alpha === void 0) { alpha = 0; }
        return new Rgb(0, 0, 0, alpha);
    };
    Rgb.black = function () {
        return new Rgb(0, 0, 0, 1);
    };
    Rgb.white = function () {
        return new Rgb(255, 255, 255, 1);
    };
    Rgb.fromValue = function (value) {
        var tag = value.tag;
        var positional;
        if (tag === 'rgb' || tag === 'rgba') {
            value = value.header(tag);
            positional = true;
        }
        else {
            positional = false;
        }
        var r;
        var g;
        var b;
        var a;
        value.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined) {
                if (key === 'r') {
                    r = item.toValue().numberValue(r);
                }
                else if (key === 'g') {
                    g = item.toValue().numberValue(g);
                }
                else if (key === 'b') {
                    b = item.toValue().numberValue(b);
                }
                else if (key === 'a') {
                    a = item.toValue().numberValue(a);
                }
            }
            else if (item instanceof Value && positional) {
                if (index === 0) {
                    r = item.numberValue(r);
                }
                else if (index === 1) {
                    g = item.numberValue(g);
                }
                else if (index === 2) {
                    b = item.numberValue(b);
                }
                else if (index === 3) {
                    a = item.numberValue(a);
                }
            }
        });
        if (r !== undefined && g !== undefined && b !== undefined) {
            return Color.rgb(r, g, b, a);
        }
        return undefined;
    };
    Rgb.parse = function (str) {
        return Color.parse(str).rgb();
    };
    Rgb.isInit = function (value) {
        if (value && typeof value === 'object') {
            var init = value;
            return init.r !== undefined && init.g !== undefined && init.b !== undefined;
        }
        return false;
    };
    Rgb.Base16Alphabet = '0123456789abcdef';
    return Rgb;
}(Color));
var Hsl = (function (_super) {
    __extends(Hsl, _super);
    function Hsl(h, s, l, a) {
        if (a === void 0) { a = 1; }
        var _this = _super.call(this) || this;
        _this.h = h;
        _this.s = s;
        _this.l = l;
        _this.a = a;
        return _this;
    }
    Hsl.prototype.isDefined = function () {
        return this.h !== 0 || this.s !== 0 || this.l !== 0 || this.a !== 1;
    };
    Hsl.prototype.alpha = function (a) {
        if (a === undefined) {
            return this.a;
        }
        else {
            return new Hsl(this.h, this.s, this.l, a);
        }
    };
    Hsl.prototype.lightness = function () {
        return this.l;
    };
    Hsl.prototype.brighter = function (k) {
        k = k === undefined ? BRIGHTER : Math.pow(BRIGHTER, k);
        return new Hsl(this.h, this.s, this.l * k, this.a);
    };
    Hsl.prototype.darker = function (k) {
        k = k === undefined ? DARKER : Math.pow(DARKER, k);
        return new Hsl(this.h, this.s, this.l * k, this.a);
    };
    Hsl.toRgb = function (h, m1, m2) {
        return 255 * (h < 60 ? m1 + (m2 - m1) * h / 60 :
            h < 180 ? m2 :
                h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 :
                    m1);
    };
    Hsl.prototype.rgb = function () {
        var h = this.h % 360 + +(this.h < 0) * 360;
        var s = isNaN(h) || isNaN(this.s) ? 0 : this.s;
        var l = this.l;
        var m2 = l + (l < 0.5 ? l : 1 - l) * s;
        var m1 = 2 * l - m2;
        return new Rgb(Hsl.toRgb(h >= 240 ? h - 240 : h + 120, m1, m2), Hsl.toRgb(h, m1, m2), Hsl.toRgb(h < 120 ? h + 240 : h - 120, m1, m2), this.a);
    };
    Hsl.prototype.hsl = function () {
        return this;
    };
    Hsl.prototype.equals = function (other) {
        if (other instanceof Hsl) {
            return this.h === other.h && this.s === other.s && this.l === other.l && this.a === other.a;
        }
        return false;
    };
    Hsl.prototype.toHexString = function () {
        return this.rgb().toHexString();
    };
    Hsl.prototype.toString = function () {
        var a = this.a;
        a = isNaN(a) ? 1 : Math.max(0, Math.min(this.a, 1));
        var s = a === 1 ? 'hsl' : 'hsla';
        s += '(';
        s += Math.max(0, Math.min(Math.round(this.h) || 0, 360));
        s += ',';
        s += Math.max(0, Math.min(100 * Math.round(this.s) || 0, 100)) + '%';
        s += ',';
        s += Math.max(0, Math.min(100 * Math.round(this.l) || 0, 100)) + '%';
        if (a !== 1) {
            s += ',';
            s += a;
        }
        s += ')';
        return s;
    };
    Hsl.transparent = function (alpha) {
        if (alpha === void 0) { alpha = 0; }
        return new Hsl(0, 0, 0, alpha);
    };
    Hsl.black = function () {
        return new Hsl(0, 0, 0, 1);
    };
    Hsl.white = function () {
        return new Hsl(0, 1, 1, 1);
    };
    Hsl.fromValue = function (value) {
        var tag = value.tag;
        var positional;
        if (tag === 'hsl' || tag === 'hsla') {
            value = value.header(tag);
            positional = true;
        }
        else {
            positional = false;
        }
        var h;
        var s;
        var l;
        var a;
        value.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined) {
                if (key === 'h') {
                    h = item.toValue().cast(Angle.Form, h);
                }
                else if (key === 's') {
                    s = item.toValue().numberValue(s);
                }
                else if (key === 'l') {
                    l = item.toValue().numberValue(l);
                }
                else if (key === 'a') {
                    a = item.toValue().numberValue(a);
                }
            }
            else if (item instanceof Value && positional) {
                if (index === 0) {
                    h = item.cast(Angle.Form, h);
                }
                else if (index === 1) {
                    s = item.numberValue(s);
                }
                else if (index === 2) {
                    l = item.numberValue(l);
                }
                else if (index === 3) {
                    a = item.numberValue(a);
                }
            }
        });
        if (h !== undefined && s !== undefined && l !== undefined) {
            return Color.hsl(h, s, l, a);
        }
        return undefined;
    };
    Hsl.parse = function (str) {
        return Color.parse(str).hsl();
    };
    Hsl.isInit = function (value) {
        if (value && typeof value === 'object') {
            var init = value;
            return init.h !== undefined && init.s !== undefined && init.l !== undefined;
        }
        return false;
    };
    return Hsl;
}(Color));
var ColorChannel = (function () {
    function ColorChannel(value, units) {
        if (units === void 0) { units = ''; }
        this.value = value;
        this.units = units;
    }
    ColorChannel.prototype.scale = function (k) {
        if (this.units === '%') {
            return this.value * k / 100;
        }
        else {
            return this.value;
        }
    };
    return ColorChannel;
}());
var ColorChannelParser = (function (_super) {
    __extends(ColorChannelParser, _super);
    function ColorChannelParser(valueParser, step) {
        var _this = _super.call(this) || this;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    ColorChannelParser.prototype.feed = function (input) {
        return ColorChannelParser.parse(input, this.valueParser, this.step);
    };
    ColorChannelParser.parse = function (input, valueParser, step) {
        if (step === void 0) { step = 1; }
        if (step === 1) {
            if (!valueParser) {
                valueParser = Recon.Factory.parseNumber(input);
            }
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 2;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 37) {
                input.step();
                return Iteratee.done(new ColorChannel(valueParser.bind().numberValue(), '%'));
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(new ColorChannel(valueParser.bind().numberValue()));
            }
        }
        return new ColorChannelParser(valueParser, step);
    };
    return ColorChannelParser;
}(Iteratee));
function parseColorFunction(input, identParser, xParser, yParser, zParser, aParser, step) {
    if (step === void 0) { step = 1; }
    var c = 0;
    if (step === 1) {
        if (!identParser) {
            identParser = Recon.Factory.parseIdent(input);
        }
        while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
            identParser = identParser.feed(input);
        }
        if (identParser.isDone()) {
            step = 2;
        }
        else if (identParser.isError()) {
            return identParser.asError();
        }
    }
    if (step === 2) {
        if (!input.isEmpty() && input.head() === 40) {
            input.step();
            step = 3;
        }
        else if (!input.isEmpty() || input.isDone()) {
            return Iteratee.expected('(', input);
        }
    }
    if (step === 3) {
        if (!xParser) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                xParser = this.parseX(input);
            }
        }
        if (xParser) {
            while (xParser.isCont() && (!input.isEmpty() || input.isDone())) {
                xParser = xParser.feed(input);
            }
            if (xParser.isDone()) {
                step = 4;
            }
            else if (xParser.isError()) {
                return xParser.asError();
            }
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 4) {
        while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
            input.step();
        }
        if (!input.isEmpty()) {
            if (c === 44) {
                input.step();
            }
            step = 5;
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 5) {
        if (!yParser) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                yParser = this.parseY(input);
            }
        }
        if (yParser) {
            while (yParser.isCont() && (!input.isEmpty() || input.isDone())) {
                yParser = yParser.feed(input);
            }
            if (yParser.isDone()) {
                step = 6;
            }
            else if (yParser.isError()) {
                return yParser.asError();
            }
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 6) {
        while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
            input.step();
        }
        if (!input.isEmpty()) {
            if (c === 44) {
                input.step();
            }
            step = 7;
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 7) {
        if (!zParser) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                zParser = this.parseZ(input);
            }
        }
        if (zParser) {
            while (zParser.isCont() && (!input.isEmpty() || input.isDone())) {
                zParser = zParser.feed(input);
            }
            if (zParser.isDone()) {
                step = 8;
            }
            else if (zParser.isError()) {
                return zParser.asError();
            }
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 8) {
        while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
            input.step();
        }
        if (!input.isEmpty()) {
            if (c === 41) {
                input.step();
                try {
                    return Iteratee.done(this.decode(identParser.bind().stringValue(), xParser.bind(), yParser.bind(), zParser.bind()));
                }
                catch (cause) {
                    return Iteratee.error(cause);
                }
            }
            else if (c === 44) {
                input.step();
            }
            step = 9;
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 9) {
        if (!aParser) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                aParser = this.parseA(input);
            }
        }
        if (aParser) {
            while (aParser.isCont() && (!input.isEmpty() || input.isDone())) {
                aParser = aParser.feed(input);
            }
            if (aParser.isDone()) {
                step = 10;
            }
            else if (aParser.isError()) {
                return aParser.asError();
            }
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 10) {
        while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
            input.step();
        }
        if (!input.isEmpty() && c === 41) {
            input.step();
            try {
                return Iteratee.done(this.decode(identParser.bind().stringValue(), xParser.bind(), yParser.bind(), zParser.bind(), aParser.bind()));
            }
            catch (cause) {
                return Iteratee.error(cause);
            }
        }
        else if (!input.isEmpty() || input.isDone()) {
            return Iteratee.expected(')', input);
        }
    }
    return this.cont(identParser, xParser, yParser, zParser, aParser, step);
}
var RgbHexParser = (function (_super) {
    __extends(RgbHexParser, _super);
    function RgbHexParser(value, step) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.step = step;
        return _this;
    }
    RgbHexParser.prototype.feed = function (input) {
        return RgbHexParser.parse(input, this.value, this.step);
    };
    RgbHexParser.parse = function (input, value, step) {
        if (value === void 0) { value = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty() && input.head() === 35) {
                input.step();
                step = 2;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('#', input);
            }
        }
        if (step >= 2) {
            while (step <= 9 && !input.isEmpty()) {
                c = input.head();
                if (Iteratee.isHexChar(c)) {
                    input.step();
                    value = (value << 4) | Iteratee.decodeHexChar(c);
                    step += 1;
                }
                else {
                    break;
                }
            }
            if (!input.isEmpty() || input.isDone()) {
                if (step === 5) {
                    return Iteratee.done(new Rgb(value >> 8 & 0x0f | value >> 4 & 0xf0, value >> 4 & 0x0f | value & 0xf0, value << 4 & 0xf0 | value & 0x0f));
                }
                else if (step === 6) {
                    return Iteratee.done(new Rgb(value >> 12 & 0x0f | value >> 8 & 0xf0, value >> 8 & 0x0f | value >> 4 & 0xf0, value >> 4 & 0x0f | value & 0xf0, (value << 4 & 0xf0 | value & 0x0f) / 255));
                }
                else if (step === 8) {
                    return Iteratee.done(new Rgb(value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff));
                }
                else if (step === 10) {
                    return Iteratee.done(new Rgb(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, (value & 0xff) / 255));
                }
                else {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new RgbHexParser(value, step);
    };
    return RgbHexParser;
}(Iteratee));
var RgbFunctionParser = (function (_super) {
    __extends(RgbFunctionParser, _super);
    function RgbFunctionParser(identParser, rParser, gParser, bParser, aParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.rParser = rParser;
        _this.gParser = gParser;
        _this.bParser = bParser;
        _this.aParser = aParser;
        _this.step = step;
        return _this;
    }
    RgbFunctionParser.prototype.feed = function (input) {
        return RgbFunctionParser.parse(input, this.identParser, this.rParser, this.gParser, this.bParser, this.aParser, this.step);
    };
    RgbFunctionParser.parse = function (input, identParser, rParser, gParser, bParser, aParser, step) {
        return parseColorFunction.call(RgbFunctionParser, input, identParser, rParser, gParser, bParser, aParser, step);
    };
    RgbFunctionParser.parseRest = function (input, identParser) {
        return RgbFunctionParser.parse(input, identParser, undefined, undefined, undefined, undefined, 2);
    };
    RgbFunctionParser.decode = function (ident, r, g, b, a) {
        if (ident === 'rgb' || ident === 'rgba') {
            return new Rgb(r.scale(255), g.scale(255), b.scale(255), a && a.scale(1));
        }
        else {
            throw new Error(ident);
        }
    };
    RgbFunctionParser.parseX = function (input) {
        return ColorChannelParser.parse(input);
    };
    RgbFunctionParser.parseY = function (input) {
        return ColorChannelParser.parse(input);
    };
    RgbFunctionParser.parseZ = function (input) {
        return ColorChannelParser.parse(input);
    };
    RgbFunctionParser.parseA = function (input) {
        return ColorChannelParser.parse(input);
    };
    RgbFunctionParser.cont = function (identParser, rParser, gParser, bParser, aParser, step) {
        return new RgbFunctionParser(identParser, rParser, gParser, bParser, aParser, step);
    };
    return RgbFunctionParser;
}(Iteratee));
var HslFunctionParser = (function (_super) {
    __extends(HslFunctionParser, _super);
    function HslFunctionParser(identParser, hParser, sParser, lParser, aParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.hParser = hParser;
        _this.sParser = sParser;
        _this.lParser = lParser;
        _this.aParser = aParser;
        _this.step = step;
        return _this;
    }
    HslFunctionParser.prototype.feed = function (input) {
        return HslFunctionParser.parse(input, this.identParser, this.hParser, this.sParser, this.lParser, this.aParser, this.step);
    };
    HslFunctionParser.parse = function (input, identParser, hParser, sParser, lParser, aParser, step) {
        return parseColorFunction.call(HslFunctionParser, input, identParser, hParser, sParser, lParser, aParser, step);
    };
    HslFunctionParser.parseRest = function (input, identParser) {
        return HslFunctionParser.parse(input, identParser, undefined, undefined, undefined, undefined, 2);
    };
    HslFunctionParser.decode = function (ident, h, s, l, a) {
        if (ident === 'hsl' || ident === 'hsla') {
            return new Hsl(h.deg().value, s.scale(1), l.scale(1), a && a.scale(1));
        }
        else {
            throw new Error(ident);
        }
    };
    HslFunctionParser.parseX = function (input) {
        return AngleParser.parse(input, 'deg');
    };
    HslFunctionParser.parseY = function (input) {
        return ColorChannelParser.parse(input);
    };
    HslFunctionParser.parseZ = function (input) {
        return ColorChannelParser.parse(input);
    };
    HslFunctionParser.parseA = function (input) {
        return ColorChannelParser.parse(input);
    };
    HslFunctionParser.cont = function (identParser, hParser, sParser, lParser, aParser, step) {
        return new HslFunctionParser(identParser, hParser, sParser, lParser, aParser, step);
    };
    return HslFunctionParser;
}(Iteratee));
var ColorParser = (function (_super) {
    __extends(ColorParser, _super);
    function ColorParser(identParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.step = step;
        return _this;
    }
    ColorParser.prototype.feed = function (input) {
        return ColorParser.parse(input, this.identParser, this.step);
    };
    ColorParser.parse = function (input, identParser, step) {
        if (step === void 0) { step = 1; }
        if (step === 1) {
            if (!input.isEmpty()) {
                if (input.head() === 35) {
                    return RgbHexParser.parse(input);
                }
                else {
                    step = 2;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                var ident = identParser.bind().stringValue();
                switch (ident) {
                    case 'rgb':
                    case 'rgba': return RgbFunctionParser.parseRest(input, identParser);
                    case 'hsl':
                    case 'hsla': return HslFunctionParser.parseRest(input, identParser);
                    case 'transparent': return Iteratee.done(Color.transparent());
                    case 'black': return Iteratee.done(Color.black());
                    case 'white': return Iteratee.done(Color.white());
                    default: return Iteratee.error(ident);
                }
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        return new ColorParser(identParser, step);
    };
    return ColorParser;
}(Iteratee));
var ColorForm = (function (_super) {
    __extends(ColorForm, _super);
    function ColorForm(unit) {
        if (unit === void 0) { unit = Color.transparent(); }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    ColorForm.prototype.mold = function (color) {
        color = Color.fromAny(color);
        return Text$1.valueOf(color.toString());
    };
    ColorForm.prototype.cast = function (value) {
        var color;
        try {
            color = Color.fromValue(value);
            if (!color) {
                var str = value.stringValue();
                if (str !== undefined) {
                    color = Color.parse(str);
                }
            }
        }
        catch (e) {
        }
        return color;
    };
    return ColorForm;
}(Form));
Color.Form = new ColorForm();
//# sourceMappingURL=data:application/json;base64,

var BoxShadow = (function () {
    function BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, next) {
        this.inset = inset;
        this.offsetX = offsetX;
        this.offsetY = offsetY;
        this.blurRadius = blurRadius;
        this.spreadRadius = spreadRadius;
        this.color = color;
        this.next = next;
    }
    BoxShadow.prototype.isDefined = function () {
        return this.inset || this.offsetX.isDefined() || this.offsetY.isDefined()
            || this.blurRadius.isDefined() || this.spreadRadius.isDefined()
            || this.color.isDefined() || (this.next ? this.next.isDefined() : false);
    };
    BoxShadow.prototype.and = function (inset, offsetX, offsetY, blurRadius, spreadRadius, color) {
        var next = this.next ? this.next.and.apply(this.next, arguments) : BoxShadow.of.apply(undefined, arguments);
        return new BoxShadow(this.inset, this.offsetX, this.offsetY, this.blurRadius, this.spreadRadius, this.color, next);
    };
    BoxShadow.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof BoxShadow) {
            return this.inset === that.inset && this.offsetX.equals(that.offsetX)
                && this.offsetY.equals(that.offsetY) && this.blurRadius.equals(that.blurRadius)
                && this.spreadRadius.equals(that.spreadRadius) && this.color.equals(that.color)
                && (this.next === null ? that.next === null : this.next.equals(that.next));
        }
        return false;
    };
    BoxShadow.prototype.toString = function () {
        if (this.isDefined()) {
            var s = '';
            var boxShadow = this;
            do {
                if (boxShadow.inset) {
                    s += 'inset';
                    s += ' ';
                }
                s += boxShadow.offsetX.toString();
                s += ' ';
                s += boxShadow.offsetY.toString();
                s += ' ';
                s += boxShadow.blurRadius.toString();
                s += ' ';
                s += boxShadow.spreadRadius.toString();
                s += ' ';
                s += boxShadow.color.toString();
                if (boxShadow.next) {
                    s += ', ';
                    boxShadow = boxShadow.next;
                    continue;
                }
                break;
            } while (true);
            return s;
        }
        else {
            return 'none';
        }
    };
    BoxShadow.form = function (unit) {
        if (unit !== undefined) {
            return new BoxShadowForm(BoxShadow.fromAny(unit));
        }
        else {
            return BoxShadow.Form;
        }
    };
    BoxShadow.of = function (inset, offsetX, offsetY, blurRadius, spreadRadius, color) {
        if (arguments.length === 1) {
            return BoxShadow.fromAny(arguments[0]);
        }
        else if (typeof inset !== 'boolean') {
            if (arguments.length === 3) {
                color = Color.fromAny(arguments[2]);
                spreadRadius = Length.zero();
                blurRadius = Length.zero();
                offsetY = Length.fromAny(arguments[1]);
                offsetX = Length.fromAny(arguments[0]);
            }
            else if (arguments.length === 4) {
                color = Color.fromAny(arguments[3]);
                spreadRadius = Length.zero();
                blurRadius = Length.fromAny(arguments[2]);
                offsetY = Length.fromAny(arguments[1]);
                offsetX = Length.fromAny(arguments[0]);
            }
            else if (arguments.length === 5) {
                color = Color.fromAny(arguments[4]);
                spreadRadius = Length.fromAny(arguments[3]);
                blurRadius = Length.fromAny(arguments[2]);
                offsetY = Length.fromAny(arguments[1]);
                offsetX = Length.fromAny(arguments[0]);
            }
            else {
                throw new TypeError('' + arguments);
            }
            inset = false;
        }
        else {
            if (arguments.length === 4) {
                color = Color.fromAny(arguments[3]);
                spreadRadius = Length.zero();
                blurRadius = Length.zero();
                offsetX = Length.fromAny(arguments[1]);
                offsetY = Length.fromAny(arguments[2]);
            }
            else if (arguments.length === 5) {
                color = Color.fromAny(arguments[4]);
                spreadRadius = Length.zero();
                blurRadius = Length.fromAny(arguments[3]);
                offsetX = Length.fromAny(arguments[1]);
                offsetY = Length.fromAny(arguments[2]);
            }
            else if (arguments.length === 6) {
                color = Color.fromAny(arguments[5]);
                spreadRadius = Length.fromAny(arguments[4]);
                blurRadius = Length.fromAny(arguments[3]);
                offsetY = Length.fromAny(arguments[2]);
                offsetX = Length.fromAny(arguments[1]);
            }
            else {
                throw new TypeError('' + arguments);
            }
        }
        return new BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, null);
    };
    BoxShadow.fromAny = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var value;
        if (arguments.length === 0) {
            value = BoxShadow.None;
        }
        else if (arguments.length === 1) {
            value = arguments[0];
        }
        else {
            value = arguments;
        }
        if (value instanceof BoxShadow) {
            return value;
        }
        else if (typeof value === 'string') {
            return BoxShadow.parse(value);
        }
        else if (value && typeof value === 'object' && value.length === undefined) {
            value = value;
            var inset = value.inset || false;
            var offsetX = value.offsetX !== undefined ? Length.fromAny(value.offsetX) : Length.zero();
            var offsetY = value.offsetY !== undefined ? Length.fromAny(value.offsetY) : Length.zero();
            var blurRadius = value.blurRadius !== undefined ? Length.fromAny(value.blurRadius) : Length.zero();
            var spreadRadius = value.spreadRadius !== undefined ? Length.fromAny(value.spreadRadius) : Length.zero();
            var color = value.color !== undefined ? Color.fromAny(value.color) : Color.black();
            return new BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, null);
        }
        else if (value && typeof value === 'object' && value.length > 0) {
            value = value;
            var boxShadow = BoxShadow.fromAny(value[0]);
            for (var i = 1; i < value.length; i += 1) {
                boxShadow = boxShadow.and(value[i]);
            }
            return boxShadow;
        }
        throw new TypeError('' + value);
    };
    BoxShadow.fromValue = function (value) {
        var boxShadow;
        value.forEach(function (item, index) {
            var header = item.header('boxShadow');
            if (header) {
                var inset_1;
                var offsetX_1;
                var offsetY_1;
                var blurRadius_1;
                var spreadRadius_1;
                var color_1;
                header.forEach(function (item, index) {
                    var key = item.key.stringValue();
                    if (key !== undefined) {
                        if (key === 'inset') {
                            inset_1 = item.toValue().booleanValue(inset_1);
                        }
                        else if (key === 'offsetX') {
                            offsetX_1 = item.toValue().cast(Length.Form, offsetX_1);
                        }
                        else if (key === 'offsetY') {
                            offsetY_1 = item.toValue().cast(Length.Form, offsetY_1);
                        }
                        else if (key === 'blurRadius') {
                            blurRadius_1 = item.toValue().cast(Length.Form, blurRadius_1);
                        }
                        else if (key === 'spreadRadius') {
                            spreadRadius_1 = item.toValue().cast(Length.Form, spreadRadius_1);
                        }
                        else if (key === 'color') {
                            color_1 = item.toValue().cast(Color.Form, color_1);
                        }
                    }
                    else if (item instanceof Value) {
                        if (index === 0 && item instanceof Text$1 && item.value === 'inset') {
                            inset_1 = true;
                        }
                        else if (index === 0 || index === 1 && inset_1 !== undefined) {
                            offsetX_1 = item.cast(Length.Form, offsetX_1);
                        }
                        else if (index === 1 || index === 2 && inset_1 !== undefined) {
                            offsetY_1 = item.cast(Length.Form, offsetY_1);
                        }
                        else if (index === 2 || index === 3 && inset_1 !== undefined) {
                            blurRadius_1 = item.cast(Length.Form, blurRadius_1);
                            if (blurRadius_1 === undefined) {
                                color_1 = item.cast(Color.Form, color_1);
                            }
                        }
                        else if ((index === 3 || index === 4 && inset_1 === undefined) && color_1 === undefined) {
                            spreadRadius_1 = item.cast(Length.Form, spreadRadius_1);
                            if (spreadRadius_1 === undefined) {
                                color_1 = item.cast(Color.Form, color_1);
                            }
                        }
                        else if ((index === 4 || index === 5 && inset_1 === undefined) && color_1 === undefined) {
                            color_1 = item.cast(Color.Form, color_1);
                        }
                    }
                });
                inset_1 = inset_1 !== undefined ? inset_1 : false;
                offsetX_1 = offsetX_1 !== undefined ? offsetX_1 : Length.zero();
                offsetY_1 = offsetY_1 !== undefined ? offsetY_1 : Length.zero();
                blurRadius_1 = blurRadius_1 !== undefined ? blurRadius_1 : Length.zero();
                spreadRadius_1 = spreadRadius_1 !== undefined ? spreadRadius_1 : Length.zero();
                color_1 = color_1 !== undefined ? color_1 : Color.black();
                var next = new BoxShadow(inset_1 || false, offsetX_1, offsetY_1, blurRadius_1, spreadRadius_1, color_1, null);
                if (boxShadow) {
                    boxShadow = boxShadow.and(next);
                }
                else {
                    boxShadow = next;
                }
            }
        });
        return boxShadow;
    };
    BoxShadow.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = BoxShadowParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    BoxShadow.isInit = function (value) {
        if (value && typeof value === 'object') {
            var init = value;
            return init.offsetX !== undefined && init.offsetY !== undefined && init.color !== undefined;
        }
        return false;
    };
    BoxShadow.None = new BoxShadow(false, Length.zero(), Length.zero(), Length.zero(), Length.zero(), Color.black(), null);
    BoxShadow.Form = undefined;
    return BoxShadow;
}());
var BoxShadowParser = (function (_super) {
    __extends(BoxShadowParser, _super);
    function BoxShadowParser(boxShadow, identParser, offsetXParser, offsetYParser, blurRadiusParser, spreadRadiusParser, colorParser, step) {
        var _this = _super.call(this) || this;
        _this.boxShadow = boxShadow;
        _this.identParser = identParser;
        _this.offsetXParser = offsetXParser;
        _this.offsetYParser = offsetYParser;
        _this.blurRadiusParser = blurRadiusParser;
        _this.spreadRadiusParser = spreadRadiusParser;
        _this.colorParser = colorParser;
        _this.step = step;
        return _this;
    }
    BoxShadowParser.prototype.feed = function (input) {
        return BoxShadowParser.parse(input, this.boxShadow, this.identParser, this.offsetXParser, this.offsetYParser, this.blurRadiusParser, this.spreadRadiusParser, this.colorParser, this.step);
    };
    BoxShadowParser.parse = function (input, boxShadow, identParser, offsetXParser, offsetYParser, blurRadiusParser, spreadRadiusParser, colorParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (Recon.isIdentStartChar(c)) {
                        step = 2;
                    }
                    else {
                        step = 4;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 2) {
                if (!identParser) {
                    identParser = Recon.Factory.parseIdent(input);
                }
                while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    identParser = identParser.feed(input);
                }
                if (identParser.isDone()) {
                    var ident = identParser.bind().stringValue();
                    if (ident === 'inset') {
                        step = 3;
                    }
                    else if (ident === 'none' && !boxShadow) {
                        return Iteratee.done(BoxShadow.None);
                    }
                    else {
                        return Iteratee.error('unexpected ' + ident);
                    }
                }
                else if (identParser.isError()) {
                    return identParser.asError();
                }
            }
            if (step === 3) {
                if (!input.isEmpty()) {
                    if (Iteratee.isSpace(input.head())) {
                        input.step();
                        step = 4;
                    }
                    else {
                        return Iteratee.expected('space', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                if (!offsetXParser) {
                    while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        offsetXParser = LengthParser.parse(input);
                    }
                }
                if (offsetXParser) {
                    while (offsetXParser.isCont() && (!input.isEmpty() || input.isDone())) {
                        offsetXParser = offsetXParser.feed(input);
                    }
                    if (offsetXParser.isDone()) {
                        step = 5;
                    }
                    else if (offsetXParser.isError()) {
                        return offsetXParser.asError();
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 5) {
                if (!input.isEmpty()) {
                    if (Iteratee.isSpace(input.head())) {
                        input.step();
                        step = 6;
                    }
                    else {
                        return Iteratee.expected('space', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 6) {
                if (!offsetYParser) {
                    while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        offsetYParser = LengthParser.parse(input);
                    }
                }
                if (offsetYParser) {
                    while (offsetYParser.isCont() && (!input.isEmpty() || input.isDone())) {
                        offsetYParser = offsetYParser.feed(input);
                    }
                    if (offsetYParser.isDone()) {
                        step = 7;
                    }
                    else if (offsetYParser.isError()) {
                        return offsetYParser.asError();
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 7) {
                if (!input.isEmpty()) {
                    if (Iteratee.isSpace(input.head())) {
                        input.step();
                        step = 8;
                    }
                    else {
                        return Iteratee.expected('space', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 8) {
                if (!blurRadiusParser) {
                    while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        if (c === 45 || c >= 48 && c <= 57) {
                            blurRadiusParser = LengthParser.parse(input);
                        }
                        else {
                            step = 12;
                        }
                    }
                }
                if (blurRadiusParser) {
                    while (blurRadiusParser.isCont() && (!input.isEmpty() || input.isDone())) {
                        blurRadiusParser = blurRadiusParser.feed(input);
                    }
                    if (blurRadiusParser.isDone()) {
                        step = 9;
                    }
                    else if (blurRadiusParser.isError()) {
                        return blurRadiusParser.asError();
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 9) {
                if (!input.isEmpty()) {
                    if (Iteratee.isSpace(input.head())) {
                        input.step();
                        step = 10;
                    }
                    else {
                        return Iteratee.expected('space', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 10) {
                if (!spreadRadiusParser) {
                    while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        if (c === 45 || c >= 48 && c <= 57) {
                            spreadRadiusParser = LengthParser.parse(input);
                        }
                        else {
                            step = 12;
                        }
                    }
                }
                if (spreadRadiusParser) {
                    while (spreadRadiusParser.isCont() && (!input.isEmpty() || input.isDone())) {
                        spreadRadiusParser = spreadRadiusParser.feed(input);
                    }
                    if (spreadRadiusParser.isDone()) {
                        step = 11;
                    }
                    else if (spreadRadiusParser.isError()) {
                        return spreadRadiusParser.asError();
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 11) {
                if (!input.isEmpty()) {
                    if (Iteratee.isSpace(input.head())) {
                        input.step();
                        step = 12;
                    }
                    else {
                        return Iteratee.expected('space', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 12) {
                if (!colorParser) {
                    while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        colorParser = ColorParser.parse(input);
                    }
                }
                if (colorParser) {
                    while (colorParser.isCont() && (!input.isEmpty() || input.isDone())) {
                        colorParser = colorParser.feed(input);
                    }
                    if (colorParser.isDone()) {
                        var inset = identParser ? identParser.bind().stringValue() === 'inset' : false;
                        var offsetX = offsetXParser.bind();
                        var offsetY = offsetYParser.bind();
                        var blurRadius = blurRadiusParser ? blurRadiusParser.bind() : Length.zero();
                        var spreadRadius = spreadRadiusParser ? spreadRadiusParser.bind() : Length.zero();
                        var color = colorParser.bind();
                        var next = new BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, null);
                        if (!boxShadow) {
                            boxShadow = next;
                        }
                        else {
                            boxShadow = boxShadow.and(next);
                        }
                        identParser = undefined;
                        offsetXParser = undefined;
                        offsetYParser = undefined;
                        blurRadiusParser = undefined;
                        spreadRadiusParser = undefined;
                        colorParser = undefined;
                        step = 13;
                    }
                    else if (colorParser.isError()) {
                        return colorParser.asError();
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 13) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty() && c === 44) {
                    input.step();
                    step = 1;
                    continue;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(boxShadow);
                }
            }
            break;
        } while (true);
        return new BoxShadowParser(boxShadow, identParser, offsetXParser, offsetYParser, blurRadiusParser, spreadRadiusParser, colorParser, step);
    };
    return BoxShadowParser;
}(Iteratee));
var BoxShadowForm = (function (_super) {
    __extends(BoxShadowForm, _super);
    function BoxShadowForm(unit) {
        if (unit === void 0) { unit = BoxShadow.None; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    BoxShadowForm.prototype.mold = function (boxShadow) {
        var shadow = BoxShadow.fromAny(boxShadow);
        var record = Record.empty();
        do {
            var header = Record.empty(5);
            if (shadow.inset) {
                header.push('inset');
            }
            header.push(Length.Form.mold(shadow.offsetX));
            header.push(Length.Form.mold(shadow.offsetY));
            header.push(Length.Form.mold(shadow.blurRadius));
            header.push(Length.Form.mold(shadow.spreadRadius));
            header.push(Color.Form.mold(shadow.color));
            record.attr('boxShadow', header);
            if (shadow.next) {
                shadow = shadow.next;
                continue;
            }
            break;
        } while (true);
        return record;
    };
    BoxShadowForm.prototype.cast = function (value) {
        var boxShadow;
        try {
            boxShadow = BoxShadow.fromValue(value);
            if (!boxShadow) {
                var str = value.stringValue();
                if (str !== undefined) {
                    boxShadow = BoxShadow.parse(str);
                }
            }
        }
        catch (e) {
        }
        return boxShadow;
    };
    return BoxShadowForm;
}(Form));
BoxShadow.Form = new BoxShadowForm();
//# sourceMappingURL=data:application/json;base64,

var Transform = (function () {
    function Transform() {
    }
    Transform.prototype.transform = function (that) {
        if (that instanceof IdentityTransform) {
            return this;
        }
        else {
            return new TransformList([this, that]);
        }
    };
    Transform.prototype.translate = function (x, y) {
        return this.transform(Transform.translate(x, y));
    };
    Transform.prototype.translateX = function (x) {
        return this.transform(Transform.translateX(x));
    };
    Transform.prototype.translateY = function (y) {
        return this.transform(Transform.translateY(y));
    };
    Transform.prototype.scale = function (x, y) {
        return this.transform(Transform.scale(x, y));
    };
    Transform.prototype.scaleX = function (x) {
        return this.transform(Transform.scaleX(x));
    };
    Transform.prototype.scaleY = function (y) {
        return this.transform(Transform.scaleY(y));
    };
    Transform.prototype.rotate = function (a) {
        return this.transform(Transform.rotate(a));
    };
    Transform.prototype.skew = function (x, y) {
        return this.transform(Transform.skew(x, y));
    };
    Transform.prototype.skewX = function (x) {
        return this.transform(Transform.skewX(x));
    };
    Transform.prototype.skewY = function (y) {
        return this.transform(Transform.skewY(y));
    };
    Transform.prototype.toAttributeString = function () {
        return this.toString();
    };
    Transform.from = function (unit) {
        if (unit !== undefined) {
            return new TransformForm(Transform.fromAny(unit));
        }
        else {
            return Transform.Form;
        }
    };
    Transform.translate = function (x, y) {
        return new TranslateTransform(x, y);
    };
    Transform.translateX = function (x) {
        return new TranslateTransform(x, 0);
    };
    Transform.translateY = function (y) {
        return new TranslateTransform(0, y);
    };
    Transform.scale = function (x, y) {
        return new ScaleTransform(x, y);
    };
    Transform.scaleX = function (x) {
        return new ScaleTransform(x, 1);
    };
    Transform.scaleY = function (y) {
        return new ScaleTransform(1, y);
    };
    Transform.rotate = function (a) {
        return new RotateTransform(a);
    };
    Transform.skew = function (x, y) {
        return new SkewTransform(x, y);
    };
    Transform.skewX = function (x) {
        return new SkewTransform(x, 1);
    };
    Transform.skewY = function (y) {
        return new SkewTransform(1, y);
    };
    Transform.matrix = function (x0, y0, x1, y1, tx, ty) {
        return new MatrixTransform(x0, y0, x1, y1, tx, ty);
    };
    Transform.fromAny = function (value) {
        if (value instanceof Transform) {
            return value;
        }
        else if (typeof value === 'string') {
            return Transform.parse(value);
        }
        throw new Error(value);
    };
    Transform.fromValue = function (value) {
        var tag = value.tag;
        if (tag === 'identity') {
            return IdentityTransform.fromValue(value);
        }
        else if (tag === 'translate') {
            return TranslateTransform.fromValue(value);
        }
        else if (tag === 'scale') {
            return ScaleTransform.fromValue(value);
        }
        else if (tag === 'rotate') {
            return RotateTransform.fromValue(value);
        }
        else if (tag === 'skew') {
            return SkewTransform.fromValue(value);
        }
        else if (tag === 'matrix') {
            return MatrixTransform.fromValue(value);
        }
        else {
            return TransformList.fromValue(value);
        }
    };
    Transform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = TransformListParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    Transform.Identity = undefined;
    Transform.Form = undefined;
    return Transform;
}());
var IdentityTransform = (function (_super) {
    __extends(IdentityTransform, _super);
    function IdentityTransform() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IdentityTransform.prototype.transform = function (that) {
        return that;
    };
    IdentityTransform.prototype.toMatrix = function () {
        return new MatrixTransform(1, 0, 0, 1, 0, 0);
    };
    IdentityTransform.prototype.toValue = function () {
        return Record.of(Attr$1.of('identity'));
    };
    IdentityTransform.prototype.conformsTo = function (that) {
        return that instanceof IdentityTransform;
    };
    IdentityTransform.prototype.equals = function (that) {
        return that instanceof IdentityTransform;
    };
    IdentityTransform.prototype.toString = function () {
        return 'none';
    };
    IdentityTransform.fromValue = function (value) {
        if (value.tag === 'identity') {
            return Transform.Identity;
        }
        return undefined;
    };
    return IdentityTransform;
}(Transform));
Transform.Identity = new IdentityTransform();
var TranslateTransform = (function (_super) {
    __extends(TranslateTransform, _super);
    function TranslateTransform(x, y) {
        var _this = _super.call(this) || this;
        _this.x = Length.fromAny(x);
        _this.y = Length.fromAny(y);
        return _this;
    }
    TranslateTransform.prototype.toMatrix = function () {
        return new MatrixTransform(1, 0, 0, 1, this.x.px().value, this.y.px().value);
    };
    TranslateTransform.prototype.toValue = function () {
        return Record.of(Attr$1.of('translate', Record.of(Slot.of('x', this.x.toString()), Slot.of('y', this.y.toString()))));
    };
    TranslateTransform.prototype.conformsTo = function (that) {
        return that instanceof TranslateTransform;
    };
    TranslateTransform.prototype.equals = function (that) {
        if (that instanceof TranslateTransform) {
            return this.x.equals(that.x) && this.y.equals(that.y);
        }
        return false;
    };
    TranslateTransform.prototype.toString = function () {
        if (this.x.value && !this.y.value) {
            return 'translate(' + this.x + ',0)';
        }
        else if (!this.x.value && this.y.value) {
            return 'translate(0,' + this.y + ')';
        }
        else {
            return 'translate(' + this.x + ',' + this.y + ')';
        }
    };
    TranslateTransform.prototype.toAttributeString = function () {
        if (this.x.value && !this.y.value) {
            return 'translate(' + this.x.px().value + ',0)';
        }
        else if (!this.x.value && this.y.value) {
            return 'translate(0,' + this.y.px().value + ')';
        }
        else {
            return 'translate(' + this.x.px().value + ',' + this.y.px().value + ')';
        }
    };
    TranslateTransform.fromAny = function (value) {
        if (value instanceof TranslateTransform) {
            return value;
        }
        else if (typeof value === 'string') {
            return TranslateTransform.parse(value);
        }
        throw new Error(value);
    };
    TranslateTransform.fromValue = function (value) {
        var header = value.header('translate');
        if (header.isDefined()) {
            var x_1 = Length.zero();
            var y_1 = Length.zero();
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key !== undefined) {
                    if (key === 'x') {
                        x_1 = item.toValue().cast(Length.Form, x_1);
                    }
                    else if (key === 'y') {
                        y_1 = item.toValue().cast(Length.Form, y_1);
                    }
                }
                else if (item instanceof Value) {
                    if (index === 0) {
                        x_1 = item.cast(Length.Form, x_1);
                    }
                    else if (index === 1) {
                        y_1 = item.cast(Length.Form, y_1);
                    }
                }
            }, this);
            return new TranslateTransform(x_1, y_1);
        }
        return undefined;
    };
    TranslateTransform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = TranslateTransformParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    return TranslateTransform;
}(Transform));
var ScaleTransform = (function (_super) {
    __extends(ScaleTransform, _super);
    function ScaleTransform(x, y) {
        var _this = _super.call(this) || this;
        _this.x = +x;
        _this.y = +y;
        return _this;
    }
    ScaleTransform.prototype.toMatrix = function () {
        return new MatrixTransform(this.x, 0, 0, this.y, 0, 0);
    };
    ScaleTransform.prototype.toValue = function () {
        return Record.of(Attr$1.of('scale', Record.of(Slot.of('x', this.x), Slot.of('y', this.y))));
    };
    ScaleTransform.prototype.conformsTo = function (that) {
        return that instanceof ScaleTransform;
    };
    ScaleTransform.prototype.equals = function (that) {
        if (that instanceof ScaleTransform) {
            return this.x === that.x && this.y === that.y;
        }
        return false;
    };
    ScaleTransform.prototype.toString = function () {
        if (this.x && !this.y) {
            return 'scaleX(' + this.x + ')';
        }
        else if (!this.x && this.y) {
            return 'scaleY(' + this.y + ')';
        }
        else {
            return 'scale(' + this.x + ',' + this.y + ')';
        }
    };
    ScaleTransform.fromAny = function (value) {
        if (value instanceof ScaleTransform) {
            return value;
        }
        else if (typeof value === 'string') {
            return ScaleTransform.parse(value);
        }
        throw new Error(value);
    };
    ScaleTransform.fromValue = function (value) {
        var header = value.header('scale');
        if (header.isDefined()) {
            var x_2 = 0;
            var y_2 = 0;
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key !== undefined) {
                    if (key === 'x') {
                        x_2 = item.toValue().numberValue(x_2);
                    }
                    else if (key === 'y') {
                        y_2 = item.toValue().numberValue(y_2);
                    }
                }
                else if (item instanceof Value) {
                    if (index === 0) {
                        x_2 = item.numberValue(x_2);
                    }
                    else if (index === 1) {
                        y_2 = item.numberValue(y_2);
                    }
                }
            }, this);
            return new ScaleTransform(x_2, y_2);
        }
        return undefined;
    };
    ScaleTransform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = ScaleTransformParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    return ScaleTransform;
}(Transform));
var RotateTransform = (function (_super) {
    __extends(RotateTransform, _super);
    function RotateTransform(a) {
        var _this = _super.call(this) || this;
        _this.a = Angle.fromAny(a);
        return _this;
    }
    RotateTransform.prototype.toMatrix = function () {
        var a = this.a.rad().value;
        return new MatrixTransform(Math.cos(a), Math.sin(a), -Math.sin(a), Math.cos(a), 0, 0);
    };
    RotateTransform.prototype.toValue = function () {
        return Record.of(Attr$1.of('rotate', this.a.toString()));
    };
    RotateTransform.prototype.conformsTo = function (that) {
        return that instanceof RotateTransform;
    };
    RotateTransform.prototype.equals = function (that) {
        if (that instanceof RotateTransform) {
            return this.a.equals(that.a);
        }
        return false;
    };
    RotateTransform.prototype.toString = function () {
        return 'rotate(' + this.a + ')';
    };
    RotateTransform.fromAny = function (value) {
        if (value instanceof RotateTransform) {
            return value;
        }
        else if (typeof value === 'string') {
            return RotateTransform.parse(value);
        }
        throw new Error(value);
    };
    RotateTransform.fromValue = function (value) {
        var header = value.header('rotate');
        if (header.isDefined()) {
            var a_1 = Angle.zero();
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key === 'a') {
                    a_1 = item.toValue().cast(Angle.Form, a_1);
                }
                else if (item instanceof Value && index === 0) {
                    a_1 = item.cast(Angle.Form, a_1);
                }
            }, this);
            return new RotateTransform(a_1);
        }
        return undefined;
    };
    RotateTransform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = RotateTransformParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    return RotateTransform;
}(Transform));
var SkewTransform = (function (_super) {
    __extends(SkewTransform, _super);
    function SkewTransform(x, y) {
        var _this = _super.call(this) || this;
        _this.x = Angle.fromAny(x);
        _this.y = Angle.fromAny(y);
        return _this;
    }
    SkewTransform.prototype.toMatrix = function () {
        var x = this.x.rad().value;
        var y = this.y.rad().value;
        return new MatrixTransform(1, Math.tan(y), Math.tan(x), 1, 0, 0);
    };
    SkewTransform.prototype.toValue = function () {
        return Record.of(Attr$1.of('skew', Record.of(Slot.of('x', this.x.toString()), Slot.of('y', this.y.toString()))));
    };
    SkewTransform.prototype.conformsTo = function (that) {
        return that instanceof SkewTransform;
    };
    SkewTransform.prototype.equals = function (that) {
        if (that instanceof SkewTransform) {
            return this.x.equals(that.x) && this.y.equals(that.y);
        }
        return false;
    };
    SkewTransform.prototype.toString = function () {
        if (this.x.value && !this.y.value) {
            return 'skewX(' + this.x + ')';
        }
        else if (!this.x.value && this.y.value) {
            return 'skewY(' + this.y + ')';
        }
        else {
            return 'skew(' + this.x + ',' + this.y + ')';
        }
    };
    SkewTransform.fromAny = function (value) {
        if (value instanceof SkewTransform) {
            return value;
        }
        else if (typeof value === 'string') {
            return SkewTransform.parse(value);
        }
        throw new Error(value);
    };
    SkewTransform.fromValue = function (value) {
        var header = value.header('skew');
        if (header.isDefined()) {
            var x_3 = Angle.zero();
            var y_3 = Angle.zero();
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key !== undefined) {
                    if (key === 'x') {
                        x_3 = item.toValue().cast(Angle.Form, x_3);
                    }
                    else if (key === 'y') {
                        y_3 = item.toValue().cast(Angle.Form, y_3);
                    }
                }
                else if (item instanceof Value) {
                    if (index === 0) {
                        x_3 = item.cast(Angle.Form, x_3);
                    }
                    else if (index === 1) {
                        y_3 = item.cast(Angle.Form, y_3);
                    }
                }
            }, this);
            return new SkewTransform(x_3, y_3);
        }
        return undefined;
    };
    SkewTransform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = SkewTransformParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    return SkewTransform;
}(Transform));
var MatrixTransform = (function (_super) {
    __extends(MatrixTransform, _super);
    function MatrixTransform(x0, y0, x1, y1, tx, ty) {
        if (x0 === void 0) { x0 = 1; }
        if (y0 === void 0) { y0 = 0; }
        if (x1 === void 0) { x1 = 0; }
        if (y1 === void 0) { y1 = 1; }
        if (tx === void 0) { tx = 0; }
        if (ty === void 0) { ty = 0; }
        var _this = _super.call(this) || this;
        _this.x0 = +x0;
        _this.y0 = +y0;
        _this.x1 = +x1;
        _this.y1 = +y1;
        _this.tx = +tx;
        _this.ty = +ty;
        return _this;
    }
    MatrixTransform.prototype.multiply = function (that) {
        var x0 = this.x0 * that.x0 + this.x1 * that.y0;
        var y0 = this.y0 * that.x0 + this.y1 * that.y0;
        var x1 = this.x0 * that.x1 + this.x1 * that.y1;
        var y1 = this.y0 * that.x1 + this.y1 * that.y1;
        var tx = this.x0 * that.tx + this.x1 * that.ty;
        var ty = this.y0 * that.tx + this.y1 * that.ty;
        return new MatrixTransform(x0, y0, x1, y1, tx, ty);
    };
    MatrixTransform.prototype.transform = function (that) {
        return this.multiply(that.toMatrix());
    };
    MatrixTransform.prototype.toMatrix = function () {
        return this;
    };
    MatrixTransform.prototype.toValue = function () {
        return Record.of(Attr$1.of('matrix', Record.of(this.x0, this.y0, this.x1, this.y1, this.tx, this.ty)));
    };
    MatrixTransform.prototype.conformsTo = function (that) {
        return that instanceof MatrixTransform;
    };
    MatrixTransform.prototype.equals = function (that) {
        if (that instanceof MatrixTransform) {
            return this.x0 === that.x0 && this.y0 === that.y0 &&
                this.x1 === that.x1 && this.y1 === that.y1 &&
                this.tx === that.tx && this.ty === that.ty;
        }
        return false;
    };
    MatrixTransform.prototype.toString = function () {
        return 'matrix(' + this.x0 + ',' + this.y0 + ',' + this.x1 + ',' + this.y1 + ',' + this.tx + ',' + this.ty + ')';
    };
    MatrixTransform.fromAny = function (value) {
        if (value instanceof MatrixTransform) {
            return value;
        }
        else if (typeof value === 'string') {
            return MatrixTransform.parse(value);
        }
        throw new Error(value);
    };
    MatrixTransform.fromValue = function (value) {
        var header = value.header('matrix');
        if (header.isDefined()) {
            var x0_1 = 0;
            var y0_1 = 0;
            var x1_1 = 0;
            var y1_1 = 0;
            var tx_1 = 0;
            var ty_1 = 0;
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key !== undefined) {
                    if (key === 'x0') {
                        x0_1 = item.toValue().numberValue(x0_1);
                    }
                    else if (key === 'y0') {
                        y0_1 = item.toValue().numberValue(y0_1);
                    }
                    else if (key === 'x1') {
                        x1_1 = item.toValue().numberValue(x1_1);
                    }
                    else if (key === 'y1') {
                        y1_1 = item.toValue().numberValue(y1_1);
                    }
                    else if (key === 'tx') {
                        tx_1 = item.toValue().numberValue(tx_1);
                    }
                    else if (key === 'ty') {
                        ty_1 = item.toValue().numberValue(ty_1);
                    }
                }
                else if (item instanceof Value) {
                    switch (index) {
                        case 0:
                            x0_1 = item.numberValue(x0_1);
                            break;
                        case 1:
                            y0_1 = item.numberValue(y0_1);
                            break;
                        case 2:
                            x1_1 = item.numberValue(x1_1);
                            break;
                        case 3:
                            y1_1 = item.numberValue(y1_1);
                            break;
                        case 4:
                            tx_1 = item.numberValue(tx_1);
                            break;
                        case 5:
                            ty_1 = item.numberValue(ty_1);
                            break;
                        default:
                    }
                }
            }, this);
            return new MatrixTransform(x0_1, y0_1, x1_1, y1_1, tx_1, ty_1);
        }
        return undefined;
    };
    MatrixTransform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = MatrixTransformParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    MatrixTransform.Identity = new MatrixTransform();
    return MatrixTransform;
}(Transform));
var TransformList = (function (_super) {
    __extends(TransformList, _super);
    function TransformList(transforms) {
        var _a;
        var _this = _super.call(this) || this;
        _this.transforms = [];
        for (var i = 0; i < transforms.length; i += 1) {
            var transform = transforms[i];
            if (transform instanceof TransformList) {
                (_a = _this.transforms).push.apply(_a, transform.transforms);
            }
            else if (transform && !(transform instanceof IdentityTransform)) {
                _this.transforms.push(transform);
            }
        }
        return _this;
    }
    TransformList.prototype.toMatrix = function () {
        var matrix = MatrixTransform.Identity;
        for (var i = 0; i < this.transforms.length; i += 1) {
            matrix = matrix.multiply(this.transforms[i].toMatrix());
        }
        return matrix;
    };
    TransformList.prototype.toValue = function () {
        var n = this.transforms.length;
        var record = Record.empty(n);
        for (var i = 0; i < n; i += 1) {
            record.push(this.transforms[i].toValue());
        }
        return record;
    };
    TransformList.prototype.conformsTo = function (that) {
        if (that instanceof TransformList) {
            var n = this.transforms.length;
            if (n === that.transforms.length) {
                for (var i = 0; i < n; i += 1) {
                    if (!this.transforms[i].conformsTo(that.transforms[i])) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    TransformList.prototype.equals = function (that) {
        if (that instanceof TransformList) {
            var n = this.transforms.length;
            if (n === that.transforms.length) {
                for (var i = 0; i < n; i += 1) {
                    if (!this.transforms[i].equals(that.transforms[i])) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    TransformList.prototype.toString = function () {
        var s = '';
        for (var i = 0; i < this.transforms.length; i += 1) {
            if (i > 0) {
                s += ' ';
            }
            s += this.transforms[i].toString();
        }
        return s;
    };
    TransformList.prototype.toAttributeString = function () {
        var s = '';
        for (var i = 0; i < this.transforms.length; i += 1) {
            if (i > 0) {
                s += ' ';
            }
            s += this.transforms[i].toAttributeString();
        }
        return s;
    };
    TransformList.fromAny = function (value) {
        if (value instanceof TransformList) {
            return value;
        }
        else if (typeof value === 'string') {
            return TransformList.parse(value);
        }
        throw new Error(value);
    };
    TransformList.fromValue = function (value) {
        var transforms = [];
        value.forEach(function (item) {
            var transform = Transform.fromValue(item.toValue());
            if (transform) {
                transforms.push(transform);
            }
        }, this);
        if (transforms.length) {
            return new TransformList(transforms);
        }
        return undefined;
    };
    TransformList.parse = function (str) {
        var transform = Transform.parse(str);
        if (transform instanceof TransformList) {
            return transform;
        }
        else {
            return new TransformList([transform]);
        }
    };
    return TransformList;
}(Transform));
var TranslateTransformParser = (function (_super) {
    __extends(TranslateTransformParser, _super);
    function TranslateTransformParser(identParser, xParser, yParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.xParser = xParser;
        _this.yParser = yParser;
        _this.step = step;
        return _this;
    }
    TranslateTransformParser.prototype.feed = function (input) {
        return TranslateTransformParser.parse(input, this.identParser, this.xParser, this.yParser, this.step);
    };
    TranslateTransformParser.parse = function (input, identParser, xParser, yParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                step = 2;
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 3;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('(', input);
            }
        }
        if (step === 3) {
            if (!xParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    xParser = LengthParser.parse(input);
                }
            }
            while (xParser.isCont() && (!input.isEmpty() || input.isDone())) {
                xParser = xParser.feed(input);
            }
            if (xParser.isDone()) {
                step = 4;
            }
            else if (xParser.isError()) {
                return xParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 41) {
                    input.step();
                    var ident = identParser.bind().stringValue();
                    if (ident === 'translateX') {
                        return Iteratee.done(Transform.translateX(xParser.bind()));
                    }
                    else if (ident === 'translateY') {
                        return Iteratee.done(Transform.translateY(xParser.bind()));
                    }
                    else {
                        return Iteratee.error(ident);
                    }
                }
                else if (c === 44) {
                    input.step();
                    step = 5;
                }
                else {
                    return Iteratee.expected(',', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            if (!yParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    yParser = LengthParser.parse(input);
                }
            }
            while (yParser.isCont() && (!input.isEmpty() || input.isDone())) {
                yParser = yParser.feed(input);
            }
            if (yParser.isDone()) {
                step = 6;
            }
            else if (yParser.isError()) {
                return yParser.asError();
            }
        }
        if (step === 6) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty() && input.head() === 41) {
                input.step();
                var ident = identParser.bind().stringValue();
                if (ident === 'translate') {
                    return Iteratee.done(Transform.translate(xParser.bind(), yParser.bind()));
                }
                else {
                    return Iteratee.error(ident);
                }
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected(')', input);
            }
        }
        return new TranslateTransformParser(identParser, xParser, yParser, step);
    };
    TranslateTransformParser.parseRest = function (input, identParser) {
        return TranslateTransformParser.parse(input, identParser, undefined, undefined, 2);
    };
    return TranslateTransformParser;
}(Iteratee));
var ScaleTransformParser = (function (_super) {
    __extends(ScaleTransformParser, _super);
    function ScaleTransformParser(identParser, xParser, yParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.xParser = xParser;
        _this.yParser = yParser;
        _this.step = step;
        return _this;
    }
    ScaleTransformParser.prototype.feed = function (input) {
        return ScaleTransformParser.parse(input, this.identParser, this.xParser, this.yParser, this.step);
    };
    ScaleTransformParser.parse = function (input, identParser, xParser, yParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                step = 2;
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 3;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('(', input);
            }
        }
        if (step === 3) {
            if (!xParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    xParser = Recon.Factory.parseNumber(input);
                }
            }
            while (xParser.isCont() && (!input.isEmpty() || input.isDone())) {
                xParser = xParser.feed(input);
            }
            if (xParser.isDone()) {
                step = 4;
            }
            else if (xParser.isError()) {
                return xParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 41) {
                    input.step();
                    var ident = identParser.bind().stringValue();
                    if (ident === 'scaleX') {
                        return Iteratee.done(Transform.scaleX(xParser.bind().numberValue()));
                    }
                    else if (ident === 'scaleY') {
                        return Iteratee.done(Transform.scaleY(xParser.bind().numberValue()));
                    }
                    else {
                        return Iteratee.error(ident);
                    }
                }
                else if (c === 44) {
                    input.step();
                    step = 5;
                }
                else {
                    return Iteratee.expected(',', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            if (!yParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    yParser = Recon.Factory.parseNumber(input);
                }
            }
            while (yParser.isCont() && (!input.isEmpty() || input.isDone())) {
                yParser = yParser.feed(input);
            }
            if (yParser.isDone()) {
                step = 6;
            }
            else if (yParser.isError()) {
                return yParser.asError();
            }
        }
        if (step === 6) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty() && input.head() === 41) {
                input.step();
                var ident = identParser.bind().stringValue();
                if (ident === 'scale') {
                    var x = xParser.bind().numberValue();
                    var y = yParser.bind().numberValue();
                    return Iteratee.done(Transform.scale(x, y));
                }
                else {
                    return Iteratee.error(ident);
                }
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected(')', input);
            }
        }
        return new ScaleTransformParser(identParser, xParser, yParser, step);
    };
    ScaleTransformParser.parseRest = function (input, identParser) {
        return ScaleTransformParser.parse(input, identParser, undefined, undefined, 2);
    };
    return ScaleTransformParser;
}(Iteratee));
var RotateTransformParser = (function (_super) {
    __extends(RotateTransformParser, _super);
    function RotateTransformParser(identParser, aParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.aParser = aParser;
        _this.step = step;
        return _this;
    }
    RotateTransformParser.prototype.feed = function (input) {
        return RotateTransformParser.parse(input, this.identParser, this.aParser, this.step);
    };
    RotateTransformParser.parse = function (input, identParser, aParser, step) {
        if (step === void 0) { step = 1; }
        if (step === 1) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                step = 2;
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 3;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('(', input);
            }
        }
        if (step === 3) {
            if (!aParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    aParser = AngleParser.parse(input);
                }
            }
            while (aParser.isCont() && (!input.isEmpty() || input.isDone())) {
                aParser = aParser.feed(input);
            }
            if (aParser.isDone()) {
                step = 4;
            }
            else if (aParser.isError()) {
                return aParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty() && input.head() === 41) {
                input.step();
                var ident = identParser.bind().stringValue();
                if (ident === 'rotate') {
                    return Iteratee.done(Transform.rotate(aParser.bind()));
                }
                else {
                    return Iteratee.error(ident);
                }
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected(')', input);
            }
        }
        return new RotateTransformParser(identParser, aParser, step);
    };
    RotateTransformParser.parseRest = function (input, identParser) {
        return RotateTransformParser.parse(input, identParser, undefined, 2);
    };
    return RotateTransformParser;
}(Iteratee));
var SkewTransformParser = (function (_super) {
    __extends(SkewTransformParser, _super);
    function SkewTransformParser(identParser, xParser, yParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.xParser = xParser;
        _this.yParser = yParser;
        _this.step = step;
        return _this;
    }
    SkewTransformParser.prototype.feed = function (input) {
        return SkewTransformParser.parse(input, this.identParser, this.xParser, this.yParser, this.step);
    };
    SkewTransformParser.parse = function (input, identParser, xParser, yParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                step = 2;
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 3;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('(', input);
            }
        }
        if (step === 3) {
            if (!xParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    xParser = AngleParser.parse(input);
                }
            }
            while (xParser.isCont() && (!input.isEmpty() || input.isDone())) {
                xParser = xParser.feed(input);
            }
            if (xParser.isDone()) {
                step = 4;
            }
            else if (xParser.isError()) {
                return xParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 41) {
                    input.step();
                    var ident = identParser.bind().stringValue();
                    if (ident === 'skewX') {
                        return Iteratee.done(Transform.skewX(xParser.bind()));
                    }
                    else if (ident === 'skewY') {
                        return Iteratee.done(Transform.skewY(xParser.bind()));
                    }
                    else {
                        return Iteratee.error(ident);
                    }
                }
                else if (c === 44) {
                    input.step();
                    step = 5;
                }
                else {
                    return Iteratee.expected(',', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            if (!yParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    yParser = AngleParser.parse(input);
                }
            }
            while (yParser.isCont() && (!input.isEmpty() || input.isDone())) {
                yParser = yParser.feed(input);
            }
            if (yParser.isDone()) {
                step = 6;
            }
            else if (yParser.isError()) {
                return yParser.asError();
            }
        }
        if (step === 6) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty() && input.head() === 41) {
                input.step();
                var ident = identParser.bind().stringValue();
                if (ident === 'skew') {
                    return Iteratee.done(Transform.skew(xParser.bind(), yParser.bind()));
                }
                else {
                    return Iteratee.error(ident);
                }
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected(')', input);
            }
        }
        return new SkewTransformParser(identParser, xParser, yParser, step);
    };
    SkewTransformParser.parseRest = function (input, identParser) {
        return SkewTransformParser.parse(input, identParser, undefined, undefined, 2);
    };
    return SkewTransformParser;
}(Iteratee));
var MatrixTransformParser = (function (_super) {
    __extends(MatrixTransformParser, _super);
    function MatrixTransformParser(identParser, entryParser, entries, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.entryParser = entryParser;
        _this.entries = entries;
        _this.step = step;
        return _this;
    }
    MatrixTransformParser.prototype.feed = function (input) {
        return MatrixTransformParser.parse(input, this.identParser, this.entryParser, this.entries, this.step);
    };
    MatrixTransformParser.parse = function (input, identParser, entryParser, entries, step) {
        if (entries === void 0) { entries = []; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                step = 2;
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 3;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('(', input);
            }
        }
        while (true) {
            if (step === 3) {
                if (!entryParser) {
                    while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        entryParser = Recon.Factory.parseNumber(input);
                    }
                }
                while (entryParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    entryParser = entryParser.feed(input);
                }
                if (entryParser.isDone()) {
                    entries.push(entryParser.bind().numberValue());
                    entryParser = undefined;
                    step = 4;
                }
                else if (entryParser.isError()) {
                    return entryParser.asError();
                }
            }
            if (step === 4) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 41) {
                        input.step();
                        var ident = identParser.bind().stringValue();
                        if (ident === 'matrix') {
                            return Iteratee.done(Transform.matrix.apply(Transform, entries));
                        }
                        else {
                            return Iteratee.error(ident);
                        }
                    }
                    else if (entries.length >= 6) {
                        return Iteratee.expected(')', input);
                    }
                    else if (c === 44) {
                        input.step();
                        step = 3;
                        continue;
                    }
                    else {
                        return Iteratee.expected(',', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        }
        return new MatrixTransformParser(identParser, entryParser, entries, step);
    };
    MatrixTransformParser.parseRest = function (input, identParser) {
        return MatrixTransformParser.parse(input, identParser, undefined, undefined, 2);
    };
    return MatrixTransformParser;
}(Iteratee));
var TransformParser = (function (_super) {
    __extends(TransformParser, _super);
    function TransformParser(identParser) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        return _this;
    }
    TransformParser.prototype.feed = function (input) {
        return TransformParser.parse(input, this.identParser);
    };
    TransformParser.parse = function (input, identParser) {
        if (!identParser) {
            identParser = Recon.Factory.parseIdent(input);
        }
        while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
            identParser = identParser.feed(input);
        }
        if (identParser.isDone()) {
            var ident = identParser.bind().stringValue();
            switch (ident) {
                case 'translateX':
                case 'translateY':
                case 'translate': return TranslateTransformParser.parseRest(input, identParser);
                case 'scaleX':
                case 'scaleY':
                case 'scale': return ScaleTransformParser.parseRest(input, identParser);
                case 'rotate': return RotateTransformParser.parseRest(input, identParser);
                case 'skewX':
                case 'skewY':
                case 'skew': return SkewTransformParser.parseRest(input, identParser);
                case 'matrix': return MatrixTransformParser.parseRest(input, identParser);
                case 'none': return Iteratee.done(Transform.Identity);
                default: return Iteratee.error(ident);
            }
        }
        else if (identParser.isError()) {
            return identParser.asError();
        }
        return new TransformParser(identParser);
    };
    return TransformParser;
}(Iteratee));
var TransformListParser = (function (_super) {
    __extends(TransformListParser, _super);
    function TransformListParser(transformParser, transform) {
        var _this = _super.call(this) || this;
        _this.transformParser = transformParser;
        _this.transform = transform;
        return _this;
    }
    TransformListParser.prototype.feed = function (input) {
        return TransformListParser.parse(input, this.transformParser, this.transform);
    };
    TransformListParser.parse = function (input, transformParser, transform) {
        if (transform === void 0) { transform = Transform.Identity; }
        while (true) {
            if (!transformParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    transformParser = TransformParser.parse(input);
                }
            }
            while (transformParser.isCont() && (!input.isEmpty() || input.isDone())) {
                transformParser = transformParser.feed(input);
            }
            if (transformParser.isDone()) {
                transform = transform.transform(transformParser.bind());
                continue;
            }
            else if (transformParser.isError()) {
                return transformParser.asError();
            }
            break;
        }
        return new TransformListParser(transformParser);
    };
    return TransformListParser;
}(Iteratee));
var TransformForm = (function (_super) {
    __extends(TransformForm, _super);
    function TransformForm(unit) {
        if (unit === void 0) { unit = Transform.Identity; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    TransformForm.prototype.mold = function (transform) {
        transform = Transform.fromAny(transform);
        return transform.toValue();
    };
    TransformForm.prototype.cast = function (value) {
        try {
            if (value instanceof Record) {
                return Transform.fromValue(value);
            }
            else {
                var str = value.stringValue();
                if (str !== undefined) {
                    return Transform.parse(str);
                }
            }
        }
        catch (e) {
        }
        return undefined;
    };
    return TransformForm;
}(Form));
//# sourceMappingURL=data:application/json;base64,

var Scale = (function () {
    function Scale() {
    }
    Scale.of = function (x0, x1, y0, y1) {
        if (x0 === 'time') {
            y1 = y0;
            y0 = x1;
            var now = DateTime.current();
            x1 = now;
            x0 = now.time(now.time() - 86400000);
        }
        else if (x0 === 'linear') {
            y1 = y0;
            y0 = x1;
            x1 = 1;
            x0 = 0;
        }
        if (x0 instanceof DateTime || x0 instanceof Date || x1 instanceof DateTime || x1 instanceof Date) {
            if (y0 instanceof Interpolator) {
                return new TimeScale(x0, x1, y0);
            }
            else {
                return new TimeScale(x0, x1, Interpolator.interpolate(y0, y1));
            }
        }
        else if (typeof x0 === 'number' && typeof x1 === 'number') {
            if (y0 instanceof Interpolator) {
                return new LinearScale(x0, x1, y0);
            }
            else {
                return new LinearScale(x0, x1, Interpolator.interpolate(y0, y1));
            }
        }
        throw new TypeError('' + arguments);
    };
    Scale.linear = function (x0, x1, y0, y1) {
        if (Array.isArray(x0)) {
            if (x1 instanceof Interpolator) {
                return new LinearScale(x0[0], x0[1], x1);
            }
            else {
                x1 = x1;
                return new LinearScale(x0[0], x0[1], Interpolator.interpolate(x1[0], x1[1]));
            }
        }
        else {
            x0 = x0;
            x1 = x1;
            if (y0 instanceof Interpolator) {
                return new LinearScale(x0, x1, y0);
            }
            else {
                y0 = y0;
                y1 = y1;
                return new LinearScale(x0, x1, Interpolator.interpolate(y0, y1));
            }
        }
    };
    Scale.time = function (t0, t1, y0, y1) {
        if (Array.isArray(t0)) {
            if (t1 instanceof Interpolator) {
                return new TimeScale(t0[0], t0[1], t1);
            }
            else {
                t1 = t1;
                return new TimeScale(t0[0], t0[1], Interpolator.interpolate(t1[0], t1[1]));
            }
        }
        else {
            t0 = t0;
            t1 = t1;
            if (y0 instanceof Interpolator) {
                return new TimeScale(t0, t1, y0);
            }
            else {
                y0 = y0;
                y1 = y1;
                return new TimeScale(t0, t1, Interpolator.interpolate(y0, y1));
            }
        }
    };
    Scale.Form = undefined;
    return Scale;
}());
var ContinuousScale = (function (_super) {
    __extends(ContinuousScale, _super);
    function ContinuousScale() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContinuousScale.Form = undefined;
    return ContinuousScale;
}(Scale));
var LinearScale = (function (_super) {
    __extends(LinearScale, _super);
    function LinearScale(x0, x1, fx) {
        var _this = _super.call(this) || this;
        _this.x0 = x0;
        _this.dx = x1 - _this.x0;
        _this.fx = fx;
        return _this;
    }
    LinearScale.prototype.norm = function (x) {
        return this.dx ? (x - this.x0) / this.dx : this.dx;
    };
    LinearScale.prototype.scale = function (x) {
        var u = this.norm(x);
        return this.fx.map(u);
    };
    LinearScale.prototype.unscale = function (y) {
        return this.x0 + this.dx * this.fx.unmap(y);
    };
    LinearScale.prototype.clampScale = function (x) {
        var u = Math.min(Math.max(0, this.norm(x)), 1);
        return this.fx.map(u);
    };
    LinearScale.prototype.domain = function (x0, x1) {
        if (x0 === undefined) {
            return [this.x0, this.x0 + this.dx];
        }
        else if (x1 === undefined) {
            x0 = x0;
            return new LinearScale(x0[0], x0[1], this.fx);
        }
        else {
            return new LinearScale(x0, x1, this.fx);
        }
    };
    LinearScale.prototype.range = function (y0, y1) {
        if (y0 === undefined) {
            return this.fx.range();
        }
        else if (y1 === undefined) {
            return new LinearScale(this.x0, this.x0 + this.dx, this.fx.range(y0));
        }
        else {
            return new LinearScale(this.x0, this.x0 + this.dx, this.fx.range(y0, y1));
        }
    };
    LinearScale.prototype.interpolate = function (fx) {
        if (fx === undefined) {
            return this.fx;
        }
        else {
            fx = Interpolator.fromAny(fx);
            return new LinearScale(this.x0, this.x0 + this.dx, fx);
        }
    };
    LinearScale.prototype.clampDomain = function (xMin, xMax, zMin, zMax) {
        var x0 = this.x0;
        var x1 = this.x0 + this.dx;
        if (xMin !== undefined) {
            if (x0 < x1 && x0 < xMin) {
                x0 = xMin;
            }
            else if (x1 < x0 && x1 < xMin) {
                x1 = xMin;
            }
        }
        if (xMax !== undefined) {
            if (x0 < x1 && x1 > xMax) {
                x1 = xMax;
            }
            else if (x1 < x0 && x0 > xMax) {
                x1 = xMax;
            }
        }
        var y0 = +this.scale(x0);
        var y1 = +this.scale(x1);
        var dy = y1 - y0;
        var z = Math.abs(dy / (x1 - x0));
        if (zMin !== undefined && z < 1 / zMin) {
            var dx = dy * zMin;
            var xSum = x0 + x1;
            x0 = (xSum - dx) / 2;
            x1 = (xSum + dx) / 2;
        }
        else if (zMax !== undefined && z > 1 / zMax) {
            var dx = dy * zMax;
            var xSum = x0 + x1;
            x0 = (xSum - dx) / 2;
            x1 = (xSum + dx) / 2;
        }
        if (x0 !== this.x0 || x1 - x0 !== this.dx) {
            return new LinearScale(x0, x1, this.fx);
        }
        else {
            return this;
        }
    };
    LinearScale.prototype.solveDomain = function (x1, y1, x2, y2) {
        var range = this.fx.range();
        var y0 = +range[0];
        var y3 = +range[1];
        var m;
        if (x2 === undefined || y2 === undefined || x1 === x2 || y1 === y2) {
            m = (y3 - y0) / this.dx;
        }
        else {
            m = (+y2 - +y1) / (x2 - x1);
        }
        var b = +y1 - m * x1;
        var x0 = (y0 - b) / m;
        var x3 = (y3 - b) / m;
        return new LinearScale(x0, x3, this.fx);
    };
    LinearScale.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LinearScale) {
            return this.x0 === that.x0 && this.dx === that.dx && this.fx.equals(that.fx);
        }
        return false;
    };
    return LinearScale;
}(ContinuousScale));
var TimeScale = (function (_super) {
    __extends(TimeScale, _super);
    function TimeScale(d0, d1, ft, zone) {
        var _this = _super.call(this) || this;
        d0 = DateTime.fromAny(d0);
        d1 = DateTime.fromAny(d1);
        _this.t0 = d0.time();
        _this.dt = d1.time() - _this.t0;
        _this.zone = zone || d0.zone();
        _this.ft = ft;
        return _this;
    }
    TimeScale.prototype.norm = function (d) {
        d = DateTime.time(d);
        return this.dt ? (d - this.t0) / this.dt : this.dt;
    };
    TimeScale.prototype.scale = function (d) {
        var u = this.norm(d);
        return this.ft.map(u);
    };
    TimeScale.prototype.unscale = function (y) {
        return new DateTime(this.t0 + this.dt * this.ft.unmap(y));
    };
    TimeScale.prototype.clampScale = function (d) {
        var u = Math.min(Math.max(0, this.norm(d)), 1);
        return this.ft.map(u);
    };
    TimeScale.prototype.domain = function (t0, t1) {
        if (t0 === undefined) {
            return [new DateTime(this.t0, this.zone), new DateTime(this.t0 + this.dt, this.zone)];
        }
        else if (t1 === undefined) {
            t0 = t0;
            return new TimeScale(t0[0], t0[1], this.ft, this.zone);
        }
        else {
            return new TimeScale(t0, t1, this.ft, this.zone);
        }
    };
    TimeScale.prototype.range = function (y0, y1) {
        if (y0 === undefined) {
            return this.ft.range();
        }
        else if (y1 === undefined) {
            return new TimeScale(this.t0, this.t0 + this.dt, this.ft.range(y0), this.zone);
        }
        else {
            return new TimeScale(this.t0, this.t0 + this.dt, this.ft.range(y0, y1), this.zone);
        }
    };
    TimeScale.prototype.interpolate = function (ft) {
        if (ft === undefined) {
            return this.ft;
        }
        else {
            ft = Interpolator.fromAny(ft);
            return new TimeScale(this.t0, this.t0 + this.dt, ft, this.zone);
        }
    };
    TimeScale.prototype.clampDomain = function (tMin, tMax, zMin, zMax) {
        var t0 = this.t0;
        var t1 = this.t0 + this.dt;
        if (tMin !== undefined) {
            if (t0 < t1 && t0 < +tMin) {
                t0 = +tMin;
            }
            else if (t1 < t0 && t1 < +tMin) {
                t1 = +tMin;
            }
        }
        if (tMax !== undefined) {
            if (t0 < t1 && t1 > +tMax) {
                t1 = +tMax;
            }
            else if (t1 < t0 && t0 > +tMax) {
                t1 = +tMax;
            }
        }
        var y0 = +this.scale(t0);
        var y1 = +this.scale(t1);
        var dy = y1 - y0;
        var z = Math.abs(dy / (t1 - t0));
        if (zMin !== undefined && z < 1 / zMin) {
            var dt = dy * zMin;
            var tSum = t0 + t1;
            t0 = (tSum - dt) / 2;
            t1 = (tSum + dt) / 2;
        }
        else if (zMax !== undefined && z > 1 / zMax) {
            var dt = dy * zMax;
            var tSum = t0 + t1;
            t0 = (tSum - dt) / 2;
            t1 = (tSum + dt) / 2;
        }
        if (t0 !== this.t0 || t1 - t0 !== this.dt) {
            return new TimeScale(t0, t1, this.ft, this.zone);
        }
        else {
            return this;
        }
    };
    TimeScale.prototype.solveDomain = function (t1, y1, t2, y2) {
        var range = this.ft.range();
        var y0 = +range[0];
        var y3 = +range[1];
        var m;
        if (t2 === undefined || y2 === undefined || t1 === t2 || y1 === y2) {
            m = (y3 - y0) / this.dt;
        }
        else {
            m = (+y2 - +y1) / (+t2 - +t1);
        }
        var b = +y1 - m * +t1;
        var t0 = (y0 - b) / m;
        var t3 = (y3 - b) / m;
        return new TimeScale(t0, t3, this.ft, this.zone);
    };
    TimeScale.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TimeScale) {
            return this.t0 === that.t0 && this.dt === that.dt && this.ft.equals(that.ft);
        }
        return false;
    };
    return TimeScale;
}(ContinuousScale));
var ScaleForm = (function (_super) {
    __extends(ScaleForm, _super);
    function ScaleForm(domainForm, interpolatorForm, unit) {
        var _this = _super.call(this) || this;
        _this.domainForm = domainForm;
        _this.interpolatorForm = interpolatorForm;
        _this.unit = unit;
        return _this;
    }
    ScaleForm.prototype.mold = function (scale) {
        if (scale instanceof ContinuousScale) {
            var domain = scale.domain();
            var x0 = this.domainForm.mold(domain[0]);
            var x1 = this.domainForm.mold(domain[1]);
            var header = Record.of(x0, x1);
            var record = Record.of(Attr$1.of('scale', header));
            var f = this.interpolatorForm.mold(scale.interpolate());
            if (f.isDefined()) {
                record = record.concat(f);
            }
            return record;
        }
        return Value.Absent;
    };
    ScaleForm.prototype.cast = function (value) {
        var header = value.header('scale');
        if (header.length >= 2) {
            var x0_1;
            var x1_1;
            header.forEach(function (item, index) {
                if (item instanceof Value) {
                    if (index === 0) {
                        x0_1 = item.cast(this.domainForm, x0_1);
                    }
                    else if (index === 1) {
                        x1_1 = item.cast(this.domainForm, x1_1);
                    }
                }
            }, this);
            var f = this.interpolatorForm.cast(value.body());
            if (x0_1 !== undefined && x1_1 !== undefined && f) {
                return Scale.of(x0_1, x1_1, f);
            }
        }
        return undefined;
    };
    return ScaleForm;
}(Form));

//# sourceMappingURL=data:application/json;base64,

var Interpolator = (function () {
    function Interpolator() {
    }
    Interpolator.form = function (form, unit) {
        return new InterpolatorForm(form, unit);
    };
    Interpolator.step = function (y0, y1) {
        return new StepInterpolator(y0, y1);
    };
    Interpolator.number = function (y0, y1) {
        return new NumberInterpolator(y0, y1);
    };
    Interpolator.date = function (d0, d1) {
        return new DateInterpolator(d0, d1);
    };
    Interpolator.angle = function (a0, a1) {
        return new AngleInterpolator(a0, a1);
    };
    Interpolator.len = function (l0, l1) {
        return new LengthInterpolator(l0, l1);
    };
    Interpolator.color = function (c0, c1) {
        if (c0 === undefined && c1 === undefined) {
            return new ColorInterpolator();
        }
        if (c0 !== undefined) {
            c0 = Color.fromAny(c0);
        }
        if (c1 !== undefined) {
            c1 = Color.fromAny(c1);
        }
        if (!c0 && !c1) {
            c1 = c0 = Color.transparent();
        }
        else if (!c1) {
            c1 = c0;
        }
        else if (!c0) {
            c0 = c1;
        }
        if (c0 instanceof Hsl && c1 instanceof Hsl) {
            return new HslInterpolator(c0, c1);
        }
        else {
            return new RgbInterpolator(c0.rgb(), c1.rgb());
        }
    };
    Interpolator.rgb = function (c0, c1) {
        return new RgbInterpolator(c0, c1);
    };
    Interpolator.hsl = function (c0, c1) {
        return new HslInterpolator(c0, c1);
    };
    Interpolator.transform = function (f0, f1) {
        if (f0 === undefined && f1 === undefined) {
            return new TransformInterpolator();
        }
        if (f0 !== undefined) {
            f0 = Transform.fromAny(f0);
        }
        if (f1 !== undefined) {
            f1 = Transform.fromAny(f1);
        }
        if (!f0 && !f1) {
            f1 = f0 = Transform.Identity;
        }
        else if (!f1) {
            f1 = f0;
        }
        else if (!f0) {
            f0 = f1;
        }
        if (f0 instanceof TranslateTransform && f1 instanceof TranslateTransform) {
            return new TranslateTransformInterpolator(f0, f1);
        }
        else if (f0 instanceof ScaleTransform && f1 instanceof ScaleTransform) {
            return new ScaleTransformInterpolator(f0, f1);
        }
        else if (f0 instanceof RotateTransform && f1 instanceof RotateTransform) {
            return new RotateTransformInterpolator(f0, f1);
        }
        else if (f0 instanceof SkewTransform && f1 instanceof SkewTransform) {
            return new SkewTransformInterpolator(f0, f1);
        }
        else if (f0 instanceof TransformList && f1 instanceof TransformList) {
            if (f0.conformsTo(f1)) {
                return new TransformListInterpolator(f0, f1);
            }
        }
        return new MatrixTransformInterpolator(f0.toMatrix(), f1.toMatrix());
    };
    Interpolator.scale = function (s0, s1) {
        if (s0 === undefined && s1 === undefined) {
            return new ScaleInterpolator();
        }
        if (!s1) {
            s1 = s0;
        }
        else if (!s0) {
            s0 = s1;
        }
        if (s0 instanceof LinearScale && s1 instanceof LinearScale) {
            return new LinearScaleInterpolator(s0, s1);
        }
        else if (s0 instanceof TimeScale && s1 instanceof TimeScale) {
            return new TimeScaleInterpolator(s0, s1);
        }
        else {
            throw new TypeError(s0 + ', ' + s1);
        }
    };
    Interpolator.array = function (a0, a1) {
        return new ArrayInterpolator(a0, a1);
    };
    Interpolator.interpolate = function (a, b) {
        if (a instanceof Interpolator && b instanceof Interpolator) {
            return new InterpolatorInterpolator(a, b);
        }
        else if (a instanceof DateTime || a instanceof Date
            || b instanceof DateTime || b instanceof Date) {
            return new DateInterpolator(a, b);
        }
        else if (a instanceof Angle || b instanceof Angle) {
            return new AngleInterpolator(a, b);
        }
        else if (a instanceof Length || b instanceof Length) {
            return new LengthInterpolator(a, b);
        }
        else if (a instanceof Color || b instanceof Color) {
            return Interpolator.color(a, b);
        }
        else if (a instanceof Transform || b instanceof Transform) {
            return Interpolator.transform(a, b);
        }
        else if (a instanceof ContinuousScale || b instanceof ContinuousScale) {
            return Interpolator.scale(a, b);
        }
        else if (a instanceof Item || b instanceof Item) {
            return Interpolator.recon(a, b);
        }
        else if (typeof a === 'number' || typeof b === 'number') {
            return new NumberInterpolator(a, b);
        }
        else if (Array.isArray(a) || Array.isArray(b)) {
            return new ArrayInterpolator(a, b);
        }
        else {
            return new StepInterpolator(a, b);
        }
    };
    Interpolator.fromAny = function (value) {
        if (value instanceof Interpolator) {
            return value;
        }
        else if (typeof value === 'string') {
            switch (value) {
                case 'step': return Interpolator.step();
                case 'number': return Interpolator.number();
                case 'angle': return Interpolator.angle();
                case 'length': return Interpolator.len();
                case 'color': return Interpolator.color();
                case 'rgb': return Interpolator.rgb();
                case 'hsl': return Interpolator.hsl();
                case 'transform': return Interpolator.transform();
                case 'translate': return Interpolator.transform();
                case 'scale': return Interpolator.transform();
                case 'rotate': return Interpolator.transform();
                case 'skew': return Interpolator.transform();
                case 'matrix': return Interpolator.transform();
                case 'transform-list': return Interpolator.transform();
                case 'scale': return Interpolator.scale();
                case 'array': return Interpolator.array();
            }
        }
        throw new Error(value);
    };
    Interpolator.Form = undefined;
    Interpolator.recon = undefined;
    return Interpolator;
}());
var StepInterpolator = (function (_super) {
    __extends(StepInterpolator, _super);
    function StepInterpolator(y0, y1) {
        var _this = _super.call(this) || this;
        if (y1 === undefined) {
            y1 = y0;
        }
        else if (y0 === undefined) {
            y0 = y1;
        }
        _this.y0 = y0;
        _this.y1 = y1;
        return _this;
    }
    StepInterpolator.prototype.map = function (u) {
        var v = u < 1 ? this.y0 : this.y1;
        if (v === undefined) {
            throw new TypeError();
        }
        return v;
    };
    StepInterpolator.prototype.unmap = function (y) {
        return y === this.y1 ? 1 : 0;
    };
    StepInterpolator.prototype.range = function (y0, y1) {
        if (y0 === undefined) {
            if (this.y0 === undefined || this.y1 === undefined) {
                throw new TypeError();
            }
            return [this.y0, this.y1];
        }
        else if (y1 === undefined) {
            y0 = y0;
            return new StepInterpolator(y0[0], y0[1]);
        }
        else {
            return new StepInterpolator(y0, y1);
        }
    };
    StepInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof StepInterpolator) {
            return this.y0 === that.y0 && this.y1 === that.y1;
        }
        return false;
    };
    return StepInterpolator;
}(Interpolator));
var NumberInterpolator = (function (_super) {
    __extends(NumberInterpolator, _super);
    function NumberInterpolator(y0, y1) {
        var _this = _super.call(this) || this;
        if (y0 === undefined && y1 === undefined) {
            y1 = y0 = 0;
        }
        else if (y1 === undefined) {
            y1 = y0;
        }
        else if (y0 === undefined) {
            y0 = y1;
        }
        _this.y0 = +y0;
        _this.dy = +y1 - _this.y0;
        return _this;
    }
    NumberInterpolator.prototype.map = function (u) {
        return this.y0 + this.dy * u;
    };
    NumberInterpolator.prototype.unmap = function (y) {
        return this.dy ? (y - this.y0) / this.dy : this.dy;
    };
    NumberInterpolator.prototype.range = function (y0, y1) {
        if (y0 === undefined) {
            return [this.y0, this.y0 + this.dy];
        }
        else if (y1 === undefined) {
            y0 = y0;
            return new NumberInterpolator(y0[0], y0[1]);
        }
        else {
            return new NumberInterpolator(y0, y1);
        }
    };
    NumberInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof NumberInterpolator) {
            return this.y0 === that.y0 && this.dy === that.dy;
        }
        return false;
    };
    return NumberInterpolator;
}(Interpolator));
var DateInterpolator = (function (_super) {
    __extends(DateInterpolator, _super);
    function DateInterpolator(d0, d1, zone) {
        var _this = _super.call(this) || this;
        if (d0 === undefined && d1 === undefined) {
            d1 = d0 = 0;
        }
        else if (d1 === undefined) {
            d1 = d0;
        }
        else if (d0 === undefined) {
            d0 = d1;
        }
        d0 = DateTime.fromAny(d0);
        d1 = DateTime.fromAny(d1);
        _this.t0 = d0.time();
        _this.dt = d1.time() - _this.t0;
        _this.zone = zone || d0.zone();
        return _this;
    }
    DateInterpolator.prototype.map = function (u) {
        return new DateTime(this.t0 + this.dt * u, this.zone);
    };
    DateInterpolator.prototype.unmap = function (d) {
        d = DateTime.time(d);
        return this.dt ? (d - this.t0) / this.dt : this.dt;
    };
    DateInterpolator.prototype.range = function (t0, t1) {
        if (t0 === undefined) {
            return [new DateTime(this.t0, this.zone), new DateTime(this.t0 + this.dt, this.zone)];
        }
        else if (t1 === undefined) {
            t0 = t0;
            return new DateInterpolator(t0[0], t0[1], this.zone);
        }
        else {
            return new DateInterpolator(t0, t1, this.zone);
        }
    };
    DateInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof DateInterpolator) {
            return this.t0 === that.t0 && this.dt === that.dt;
        }
        return false;
    };
    return DateInterpolator;
}(Interpolator));
var AngleInterpolator = (function (_super) {
    __extends(AngleInterpolator, _super);
    function AngleInterpolator(a0, a1) {
        var _this = _super.call(this) || this;
        if (a0 !== undefined) {
            a0 = Angle.fromAny(a0);
        }
        if (a1 !== undefined) {
            a1 = Angle.fromAny(a1);
        }
        if (!a0 && !a1) {
            a1 = a0 = Angle.zero();
        }
        else if (!a1) {
            a1 = a0;
        }
        else if (!a0) {
            a0 = a1;
        }
        else {
            a0 = a0.to(a1.units);
        }
        _this.v0 = a0.value;
        _this.dv = a1.value - _this.v0;
        _this.units = a1.units;
        return _this;
    }
    AngleInterpolator.prototype.map = function (u) {
        return Angle.fromAny(this.v0 + this.dv * u, this.units);
    };
    AngleInterpolator.prototype.unmap = function (a) {
        var v = Angle.fromAny(a).to(this.units).value;
        return this.dv ? (v - this.v0) / this.dv : this.dv;
    };
    AngleInterpolator.prototype.range = function (a0, a1) {
        if (a0 === undefined) {
            return [Angle.fromAny(this.v0, this.units), Angle.fromAny(this.v0 + this.dv, this.units)];
        }
        else if (a1 === undefined) {
            a0 = a0;
            return new AngleInterpolator(a0[0], a0[1]);
        }
        else {
            return new AngleInterpolator(a0, a1);
        }
    };
    AngleInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof AngleInterpolator) {
            return this.v0 === that.v0 && this.dv === that.dv && this.units === that.units;
        }
        return false;
    };
    return AngleInterpolator;
}(Interpolator));
var LengthInterpolator = (function (_super) {
    __extends(LengthInterpolator, _super);
    function LengthInterpolator(l0, l1) {
        var _this = _super.call(this) || this;
        if (l0 !== undefined) {
            l0 = Length.fromAny(l0);
        }
        if (l1 !== undefined) {
            l1 = Length.fromAny(l1);
        }
        if (!l1 && !l1) {
            l1 = l0 = Length.zero();
        }
        else if (!l1) {
            l1 = l0;
        }
        else if (!l0) {
            l0 = l1;
        }
        else {
            l0 = l0.to(l1.units);
        }
        _this.v0 = l0.value;
        _this.dv = l1.value - _this.v0;
        _this.units = l1.units;
        return _this;
    }
    LengthInterpolator.prototype.map = function (u) {
        return Length.fromAny(this.v0 + this.dv * u, this.units);
    };
    LengthInterpolator.prototype.unmap = function (l) {
        var v = Length.fromAny(l).to(this.units).value;
        return this.dv ? (v - this.v0) / this.dv : this.dv;
    };
    LengthInterpolator.prototype.range = function (v0, v1) {
        if (v0 === undefined) {
            return [Length.fromAny(this.v0, this.units), Length.fromAny(this.v0 + this.dv, this.units)];
        }
        else if (v1 === undefined) {
            v0 = v0;
            return new LengthInterpolator(v0[0], v0[1]);
        }
        else {
            return new LengthInterpolator(v0, v1);
        }
    };
    LengthInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LengthInterpolator) {
            return this.v0 === that.v0 && this.dv === that.dv && this.units === that.units;
        }
        return false;
    };
    return LengthInterpolator;
}(Interpolator));
var ColorInterpolator = (function (_super) {
    __extends(ColorInterpolator, _super);
    function ColorInterpolator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorInterpolator.prototype.map = function (u) {
        return Color.transparent();
    };
    ColorInterpolator.prototype.unmap = function (c) {
        return 0;
    };
    ColorInterpolator.prototype.range = function (c0, c1) {
        if (c0 === undefined) {
            return [this.map(0), this.map(1)];
        }
        else if (c1 === undefined) {
            c0 = c0;
            return Interpolator.color(c0[0], c0[1]);
        }
        else {
            return Interpolator.color(c0, c1);
        }
    };
    ColorInterpolator.prototype.equals = function (that) {
        return this === that;
    };
    return ColorInterpolator;
}(Interpolator));
var RgbInterpolator = (function (_super) {
    __extends(RgbInterpolator, _super);
    function RgbInterpolator(c0, c1) {
        var _this = _super.call(this) || this;
        if (c0 !== undefined) {
            c0 = Color.rgb(c0);
        }
        if (c1 !== undefined) {
            c1 = Color.rgb(c1);
        }
        if (!c0 && !c1) {
            c1 = c0 = Rgb.transparent();
        }
        else if (!c1) {
            c1 = c0;
        }
        else if (!c0) {
            c0 = c1;
        }
        _this.r0 = c0.r;
        _this.dr = c1.r - _this.r0;
        _this.g0 = c0.g;
        _this.dg = c1.g - _this.g0;
        _this.b0 = c0.b;
        _this.db = c1.b - _this.b0;
        _this.a0 = c0.a;
        _this.da = c1.a - _this.a0;
        return _this;
    }
    RgbInterpolator.prototype.map = function (u) {
        var r = this.r0 + this.dr * u;
        var g = this.g0 + this.dg * u;
        var b = this.b0 + this.db * u;
        var a = this.a0 + this.da * u;
        return new Rgb(r, g, b, a);
    };
    RgbInterpolator.prototype.unmap = function (c) {
        c = Color.rgb(c);
        var cr = c.r - this.r0;
        var cg = c.g - this.g0;
        var cb = c.b - this.b0;
        var ca = c.a - this.a0;
        var dp = cr * this.dr + cg * this.dg + cb * this.db + ca * this.da;
        var lc = Math.sqrt(cr * cr + cg * cg + cb * cb + ca * ca);
        return lc ? dp / lc : lc;
    };
    RgbInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof RgbInterpolator) {
            return this.r0 === that.r0 && this.dr === that.dr &&
                this.g0 === that.g0 && this.dg === that.dg &&
                this.b0 === that.b0 && this.db === that.db &&
                this.a0 === that.a0 && this.da === that.da;
        }
        return false;
    };
    return RgbInterpolator;
}(ColorInterpolator));
var HslInterpolator = (function (_super) {
    __extends(HslInterpolator, _super);
    function HslInterpolator(c0, c1) {
        var _this = _super.call(this) || this;
        if (c0 !== undefined) {
            c0 = Color.hsl(c0);
        }
        if (c1 !== undefined) {
            c1 = Color.hsl(c1);
        }
        if (!c0 && !c1) {
            c1 = c0 = Hsl.transparent();
        }
        else if (!c1) {
            c1 = c0;
        }
        else if (!c0) {
            c0 = c1;
        }
        _this.h0 = c0.h;
        _this.dh = c1.h - _this.h0;
        _this.s0 = c0.s;
        _this.ds = c1.s - _this.s0;
        _this.l0 = c0.l;
        _this.dl = c1.l - _this.l0;
        _this.a0 = c0.a;
        _this.da = c1.a - _this.a0;
        return _this;
    }
    HslInterpolator.prototype.map = function (u) {
        var h = this.h0 + this.dh * u;
        var s = this.s0 + this.ds * u;
        var l = this.l0 + this.dl * u;
        var a = this.a0 + this.da * u;
        return new Hsl(h, s, l, a);
    };
    HslInterpolator.prototype.unmap = function (c) {
        c = Color.hsl(c);
        var ch = c.h - this.h0;
        var cs = c.s - this.s0;
        var cl = c.l - this.l0;
        var ca = c.a - this.a0;
        var dp = ch * this.dh + cs * this.ds + cl * this.dl + ca * this.da;
        var lc = Math.sqrt(ch * ch + cs * cs + cl * cl + ca * ca);
        return lc ? dp / lc : lc;
    };
    HslInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof HslInterpolator) {
            return this.h0 === that.h0 && this.dh === that.dh &&
                this.s0 === that.s0 && this.ds === that.ds &&
                this.l0 === that.l0 && this.dl === that.dl &&
                this.a0 === that.a0 && this.da === that.da;
        }
        return false;
    };
    return HslInterpolator;
}(ColorInterpolator));
var TransformInterpolator = (function (_super) {
    __extends(TransformInterpolator, _super);
    function TransformInterpolator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TransformInterpolator.prototype.map = function (u) {
        return Transform.Identity;
    };
    TransformInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    TransformInterpolator.prototype.range = function (f0, f1) {
        if (f0 === undefined) {
            return [this.map(0), this.map(1)];
        }
        else if (f1 === undefined) {
            f0 = f0;
            return Interpolator.transform(f0[0], f0[1]);
        }
        else {
            return Interpolator.transform(f0, f1);
        }
    };
    TransformInterpolator.prototype.equals = function (that) {
        return this === that;
    };
    return TransformInterpolator;
}(Interpolator));
var TranslateTransformInterpolator = (function (_super) {
    __extends(TranslateTransformInterpolator, _super);
    function TranslateTransformInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        var x0;
        var y0;
        if (f0 !== undefined) {
            f0 = TranslateTransform.fromAny(f0);
            x0 = f0.x;
            y0 = f0.y;
        }
        else {
            x0 = undefined;
            y0 = undefined;
        }
        var x1;
        var y1;
        if (f1 !== undefined) {
            f1 = TranslateTransform.fromAny(f1);
            x1 = f1.x;
            y1 = f1.y;
        }
        else {
            x1 = undefined;
            y1 = undefined;
        }
        if (!x0 && !x1) {
            x1 = x0 = Length.zero();
        }
        else if (!x1) {
            x1 = x0;
        }
        else if (!x0) {
            x0 = x1;
        }
        else {
            x0 = x0.to(x1.units);
        }
        if (!y0 && !y1) {
            y1 = y0 = Length.zero();
        }
        else if (!y1) {
            y1 = y0;
        }
        else if (!y0) {
            y0 = y1;
        }
        else {
            y0 = y0.to(y1.units);
        }
        _this.x0 = x0.value;
        _this.dx = x1.value - _this.x0;
        _this.xUnits = x1.units;
        _this.y0 = y0.value;
        _this.dy = y1.value - _this.y0;
        _this.yUnits = y1.units;
        return _this;
    }
    TranslateTransformInterpolator.prototype.map = function (u) {
        var x = Length.fromAny(this.x0 + this.dx * u, this.xUnits);
        var y = Length.fromAny(this.y0 + this.dy * u, this.yUnits);
        return new TranslateTransform(x, y);
    };
    TranslateTransformInterpolator.prototype.unmap = function (f) {
        f = TranslateTransform.fromAny(f);
        var units = f.x.units;
        var x0 = Length.fromAny(this.x0, this.xUnits).to(units).value;
        var y0 = Length.fromAny(this.y0, this.yUnits).to(units).value;
        var dx = Length.fromAny(this.dx, this.xUnits).to(units).value;
        var dy = Length.fromAny(this.dy, this.yUnits).to(units).value;
        var fx = f.x.to(units).value - x0;
        var fy = f.y.to(units).value - y0;
        var dp = fx * dx + fy * dy;
        var lf = Math.sqrt(fx * fx + fy * fy);
        return lf ? dp / lf : lf;
    };
    TranslateTransformInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TranslateTransformInterpolator) {
            return this.x0 === that.x0 && this.dx === that.dx && this.xUnits === that.xUnits &&
                this.y0 === that.y0 && this.dy === that.dy && this.yUnits === that.yUnits;
        }
        return false;
    };
    return TranslateTransformInterpolator;
}(TransformInterpolator));
var ScaleTransformInterpolator = (function (_super) {
    __extends(ScaleTransformInterpolator, _super);
    function ScaleTransformInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        var x0;
        var y0;
        if (f0 !== undefined) {
            f0 = ScaleTransform.fromAny(f0);
            x0 = f0.x;
            y0 = f0.y;
        }
        else {
            x0 = undefined;
            y0 = undefined;
        }
        var x1;
        var y1;
        if (f1 !== undefined) {
            f1 = ScaleTransform.fromAny(f1);
            x1 = f1.x;
            y1 = f1.y;
        }
        else {
            x1 = undefined;
            y1 = undefined;
        }
        if (x0 === undefined && !x1) {
            x1 = x0 = 1;
        }
        else if (x1 === undefined) {
            x1 = x0;
        }
        else if (x0 === undefined) {
            x0 = x1;
        }
        if (y0 === undefined && y1 === undefined) {
            y1 = y0 = 1;
        }
        else if (y1 === undefined) {
            y1 = y0;
        }
        else if (y0 === undefined) {
            y0 = y1;
        }
        _this.x0 = x0;
        _this.dx = x1 - _this.x0;
        _this.y0 = y0;
        _this.dy = y1 - _this.y0;
        return _this;
    }
    ScaleTransformInterpolator.prototype.map = function (u) {
        var x = this.x0 + this.dx * u;
        var y = this.y0 + this.dy * u;
        return new ScaleTransform(x, y);
    };
    ScaleTransformInterpolator.prototype.unmap = function (f) {
        f = ScaleTransform.fromAny(f);
        var fx = f.x - this.x0;
        var fy = f.y - this.y0;
        var dp = fx * this.dx + fy * this.dy;
        var lf = Math.sqrt(fx * fx + fy * fy);
        return lf ? dp / lf : lf;
    };
    ScaleTransformInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ScaleTransformInterpolator) {
            return this.x0 === that.x0 && this.dx === that.dx &&
                this.y0 === that.y0 && this.dy === that.dy;
        }
        return false;
    };
    return ScaleTransformInterpolator;
}(TransformInterpolator));
var RotateTransformInterpolator = (function (_super) {
    __extends(RotateTransformInterpolator, _super);
    function RotateTransformInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        var a0;
        if (f0 !== undefined) {
            f0 = RotateTransform.fromAny(f0);
            a0 = f0.a;
        }
        else {
            a0 = undefined;
        }
        var a1;
        if (f1 !== undefined) {
            f1 = RotateTransform.fromAny(f1);
            a1 = f1.a;
        }
        else {
            a1 = undefined;
        }
        if (!a0 && !a1) {
            a1 = a0 = Angle.zero();
        }
        else if (!a1) {
            a1 = a0;
        }
        else if (!a0) {
            a0 = a1;
        }
        else {
            a0 = a0.to(a1.units);
        }
        _this.v0 = a0.value;
        _this.dv = a1.value - _this.v0;
        _this.units = a1.units;
        return _this;
    }
    RotateTransformInterpolator.prototype.map = function (u) {
        var a = Angle.fromAny(this.v0 + this.dv * u, this.units);
        return new RotateTransform(a);
    };
    RotateTransformInterpolator.prototype.unmap = function (f) {
        var v = RotateTransform.fromAny(f).a.to(this.units).value;
        return this.dv ? (v - this.v0) / this.dv : this.dv;
    };
    RotateTransformInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof RotateTransformInterpolator) {
            return this.v0 === that.v0 && this.dv === that.dv && this.units === that.units;
        }
        return false;
    };
    return RotateTransformInterpolator;
}(TransformInterpolator));
var SkewTransformInterpolator = (function (_super) {
    __extends(SkewTransformInterpolator, _super);
    function SkewTransformInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        var x0;
        var y0;
        if (f0 !== undefined) {
            f0 = SkewTransform.fromAny(f0);
            x0 = f0.x;
            y0 = f0.y;
        }
        else {
            x0 = undefined;
            y0 = undefined;
        }
        var x1;
        var y1;
        if (f1 !== undefined) {
            f1 = SkewTransform.fromAny(f1);
            x1 = f1.x;
            y1 = f1.y;
        }
        else {
            x1 = undefined;
            y1 = undefined;
        }
        if (!x0 && !x1) {
            x1 = x0 = Angle.zero();
        }
        else if (!x1) {
            x1 = x0;
        }
        else if (!x0) {
            x0 = x1;
        }
        else {
            x0 = x0.to(x1.units);
        }
        if (!y0 && !y1) {
            y1 = y0 = Angle.zero();
        }
        else if (!y1) {
            y1 = y0;
        }
        else if (!y0) {
            y0 = y1;
        }
        else {
            y0 = y0.to(y1.units);
        }
        _this.x0 = x0.value;
        _this.dx = x1.value - _this.x0;
        _this.xUnits = x1.units;
        _this.y0 = y0.value;
        _this.dy = y1.value - _this.y0;
        _this.yUnits = y1.units;
        return _this;
    }
    SkewTransformInterpolator.prototype.map = function (u) {
        var x = Angle.fromAny(this.x0 + this.dx * u, this.xUnits);
        var y = Angle.fromAny(this.y0 + this.dy * u, this.yUnits);
        return new SkewTransform(x, y);
    };
    SkewTransformInterpolator.prototype.unmap = function (f) {
        f = SkewTransform.fromAny(f);
        var units = f.x.units;
        var x0 = Angle.fromAny(this.x0, this.xUnits).to(units).value;
        var y0 = Angle.fromAny(this.y0, this.yUnits).to(units).value;
        var dx = Angle.fromAny(this.dx, this.xUnits).to(units).value;
        var dy = Angle.fromAny(this.dy, this.yUnits).to(units).value;
        var fx = f.x.to(units).value - x0;
        var fy = f.y.to(units).value - y0;
        var dp = fx * dx + fy * dy;
        var lf = Math.sqrt(fx * fx + fy * fy);
        return lf ? dp / lf : lf;
    };
    SkewTransformInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof SkewTransformInterpolator) {
            return this.x0 === that.x0 && this.dx === that.dx && this.xUnits === that.xUnits &&
                this.y0 === that.y0 && this.dy === that.dy && this.yUnits === that.yUnits;
        }
        return false;
    };
    return SkewTransformInterpolator;
}(TransformInterpolator));
var MatrixTransformInterpolator = (function (_super) {
    __extends(MatrixTransformInterpolator, _super);
    function MatrixTransformInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        if (f0 !== undefined) {
            f0 = MatrixTransform.fromAny(f0);
        }
        if (f1 !== undefined) {
            f1 = MatrixTransform.fromAny(f1);
        }
        if (!f0 && !f1) {
            f1 = f0 = new MatrixTransform();
        }
        else if (!f1) {
            f1 = f0;
        }
        else if (!f0) {
            f0 = f1;
        }
        _this.f0 = f0;
        _this.f1 = f1;
        return _this;
    }
    MatrixTransformInterpolator.prototype.map = function (u) {
        return this.f1;
    };
    MatrixTransformInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    MatrixTransformInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof MatrixTransformInterpolator) {
            return this.f0.equals(that.f0) && this.f1.equals(that.f1);
        }
        return false;
    };
    return MatrixTransformInterpolator;
}(TransformInterpolator));
var TransformListInterpolator = (function (_super) {
    __extends(TransformListInterpolator, _super);
    function TransformListInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        if (f0 !== undefined) {
            f0 = TransformList.fromAny(f0);
        }
        if (f1 !== undefined) {
            f1 = TransformList.fromAny(f1);
        }
        if (!f0 && !f1) {
            f1 = f0 = new TransformList([]);
        }
        else if (!f1) {
            f1 = f0;
        }
        else if (!f0) {
            f0 = f1;
        }
        _this.interpolators = [];
        var n = Math.min(f0.transforms.length, f1.transforms.length);
        for (var i = 0; i < n; i += 1) {
            _this.interpolators.push(Interpolator.transform(f0.transforms[i], f1.transforms[i]));
        }
        return _this;
    }
    TransformListInterpolator.prototype.map = function (u) {
        var transforms = [];
        for (var i = 0; i < this.interpolators.length; i += 1) {
            transforms.push(this.interpolators[i].map(u));
        }
        return new TransformList(transforms);
    };
    TransformListInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    TransformListInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TransformListInterpolator) {
            var n = this.interpolators.length;
            if (n === that.interpolators.length) {
                for (var i = 0; i < n; i += 1) {
                    if (!this.interpolators[i].equals(that.interpolators[i])) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    return TransformListInterpolator;
}(TransformInterpolator));
var TransformPathInterpolator = (function (_super) {
    __extends(TransformPathInterpolator, _super);
    function TransformPathInterpolator(d) {
        var _this = _super.call(this) || this;
        if (d instanceof SVGPathElement) {
            _this.path = d;
        }
        else {
            var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            path.setAttribute('d', '' + d);
            _this.path = path;
        }
        return _this;
    }
    TransformPathInterpolator.prototype.map = function (u) {
        var point = this.path.getPointAtLength(u * this.path.getTotalLength());
        return Transform.translate(point.x, point.y);
    };
    TransformPathInterpolator.prototype.unmap = function (d) {
        return 0;
    };
    TransformPathInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TransformPathInterpolator) {
            return this.path === that.path;
        }
        return false;
    };
    return TransformPathInterpolator;
}(TransformInterpolator));
var ScaleInterpolator = (function (_super) {
    __extends(ScaleInterpolator, _super);
    function ScaleInterpolator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScaleInterpolator.prototype.map = function (u) {
        throw new Error();
    };
    ScaleInterpolator.prototype.unmap = function (s) {
        return 0;
    };
    ScaleInterpolator.prototype.range = function (s0, s1) {
        if (s0 === undefined) {
            return [this.map(0), this.map(1)];
        }
        else if (s1 === undefined) {
            s0 = s0;
            return Interpolator.scale(s0[0], s0[1]);
        }
        else {
            return Interpolator.scale(s0, s1);
        }
    };
    ScaleInterpolator.prototype.equals = function (that) {
        return this === that;
    };
    return ScaleInterpolator;
}(Interpolator));
var LinearScaleInterpolator = (function (_super) {
    __extends(LinearScaleInterpolator, _super);
    function LinearScaleInterpolator(s0, s1) {
        var _this = _super.call(this) || this;
        if (!s0 && !s1) {
            throw new Error();
        }
        else if (!s1) {
            s1 = s0;
        }
        else if (!s0) {
            s0 = s1;
        }
        _this.x0 = new NumberInterpolator(s0.x0, s1.x0);
        _this.dx = new NumberInterpolator(s0.dx, s1.dx);
        _this.fx = new InterpolatorInterpolator(s0.fx, s1.fx);
        return _this;
    }
    LinearScaleInterpolator.prototype.map = function (u) {
        var x0 = this.x0.map(u);
        var dx = this.dx.map(u);
        var fx = this.fx.map(u);
        return new LinearScale(x0, x0 + dx, fx);
    };
    LinearScaleInterpolator.prototype.unmap = function (s) {
        return 0;
    };
    LinearScaleInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LinearScaleInterpolator) {
            return this.x0.equals(that.x0) && this.dx.equals(that.dx) && this.fx.equals(that.fx);
        }
        return false;
    };
    return LinearScaleInterpolator;
}(ScaleInterpolator));
var TimeScaleInterpolator = (function (_super) {
    __extends(TimeScaleInterpolator, _super);
    function TimeScaleInterpolator(s0, s1) {
        var _this = _super.call(this) || this;
        if (!s0 && !s1) {
            throw new Error();
        }
        else if (!s1) {
            s1 = s0;
        }
        else if (!s0) {
            s0 = s1;
        }
        _this.t0 = new NumberInterpolator(s0.t0, s1.t0);
        _this.dt = new NumberInterpolator(s0.dt, s1.dt);
        _this.ft = new InterpolatorInterpolator(s0.ft, s1.ft);
        return _this;
    }
    TimeScaleInterpolator.prototype.map = function (u) {
        var t0 = this.t0.map(u);
        var dt = this.dt.map(u);
        var ft = this.ft.map(u);
        return new TimeScale(t0, t0 + dt, ft);
    };
    TimeScaleInterpolator.prototype.unmap = function (s) {
        return 0;
    };
    TimeScaleInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TimeScaleInterpolator) {
            return this.t0.equals(that.t0) && this.dt.equals(that.dt) && this.ft.equals(that.ft);
        }
        return false;
    };
    return TimeScaleInterpolator;
}(ScaleInterpolator));
var ArrayInterpolator = (function (_super) {
    __extends(ArrayInterpolator, _super);
    function ArrayInterpolator(a0, a1) {
        var _this = _super.call(this) || this;
        if (!a0 && !a1) {
            a1 = a0 = [];
        }
        else if (!a1) {
            a1 = a0;
        }
        else if (!a0) {
            a0 = a1;
        }
        _this.interpolators = [];
        var n = Math.min(a0.length, a1.length);
        for (var i = 0; i < n; i += 1) {
            _this.interpolators.push(Interpolator.interpolate(a0[i], a1[i]));
        }
        return _this;
    }
    ArrayInterpolator.prototype.map = function (u) {
        var n = this.interpolators.length;
        var array = new Array(n);
        for (var i = 0; i < this.interpolators.length; i += 1) {
            array[i] = this.interpolators[i].map(u);
        }
        return array;
    };
    ArrayInterpolator.prototype.unmap = function (a) {
        return 0;
    };
    ArrayInterpolator.prototype.range = function (a0, a1) {
        if (a0 === undefined) {
            return [this.map(0), this.map(1)];
        }
        else if (a1 === undefined) {
            a0 = a0;
            return new ArrayInterpolator(a0[0], a0[1]);
        }
        else {
            return new ArrayInterpolator(a0, a1);
        }
    };
    ArrayInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ArrayInterpolator) {
            var n = this.interpolators.length;
            if (n === that.interpolators.length) {
                for (var i = 0; i < n; i += 1) {
                    if (!this.interpolators[i].equals(that.interpolators[i])) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    return ArrayInterpolator;
}(Interpolator));
var InterpolatorInterpolator = (function (_super) {
    __extends(InterpolatorInterpolator, _super);
    function InterpolatorInterpolator(i0, i1) {
        var _this = _super.call(this) || this;
        if (!i0 && !i1) {
            throw new Error();
        }
        else if (!i1) {
            i1 = i0;
        }
        else if (!i0) {
            i0 = i1;
        }
        _this.i0 = i0;
        _this.i1 = i1;
        _this.i00 = _this.i1.range(_this.i0.map(0), _this.i1.map(0));
        _this.i11 = _this.i1.range(_this.i0.map(1), _this.i1.map(1));
        return _this;
    }
    InterpolatorInterpolator.prototype.map = function (u) {
        if (u === 0) {
            return this.i0;
        }
        else if (u === 1) {
            return this.i1;
        }
        else {
            return this.i1.range(this.i00.map(u), this.i11.map(u));
        }
    };
    InterpolatorInterpolator.prototype.unmap = function (i) {
        return 0;
    };
    InterpolatorInterpolator.prototype.range = function (i0, i1) {
        if (i0 === undefined) {
            return [this.i0, this.i1];
        }
        else if (i1 === undefined) {
            i0 = i0;
            return new InterpolatorInterpolator(i0[0], i0[1]);
        }
        else {
            return new InterpolatorInterpolator(i0, i1);
        }
    };
    InterpolatorInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof InterpolatorInterpolator) {
            return this.i0.equals(that.i0) && this.i1.equals(that.i1);
        }
        return false;
    };
    return InterpolatorInterpolator;
}(Interpolator));
var InterpolatorForm = (function (_super) {
    __extends(InterpolatorForm, _super);
    function InterpolatorForm(form, unit) {
        var _this = _super.call(this) || this;
        _this.form = form;
        _this.unit = unit;
        return _this;
    }
    InterpolatorForm.prototype.mold = function (interpolator) {
        if (interpolator !== undefined) {
            interpolator = Interpolator.fromAny(interpolator);
            var a = this.form.mold(interpolator.map(0));
            var b = this.form.mold(interpolator.map(1));
            if (a.isDefined() && b.isDefined()) {
                return Record.of(Attr$1.of('interpolate', Record.of(a, b)));
            }
        }
        return Value.Absent;
    };
    InterpolatorForm.prototype.cast = function (value) {
        var header = value.header('interpolate');
        if (header.length >= 2) {
            var a = this.form.cast(header.getItem(0).toValue());
            var b = this.form.cast(header.getItem(1).toValue());
            if (a !== undefined && b !== undefined) {
                return Interpolator.interpolate(a, b);
            }
        }
        return undefined;
    };
    return InterpolatorForm;
}(Form));

//# sourceMappingURL=data:application/json;base64,

var Ease = {
    linear: function (t) {
        return t;
    },
    quadIn: function (t) {
        return t * t;
    },
    quadOut: function (t) {
        return t * (2 - t);
    },
    quadInOut: function (t) {
        t *= 2;
        if (t <= 1) {
            t = t * t;
        }
        else {
            t -= 1;
            t = t * (2 - t);
            t += 1;
        }
        t /= 2;
        return t;
    },
    cubicIn: function (t) {
        return t * t * t;
    },
    cubicOut: function (t) {
        t -= 1;
        t = t * t * t;
        t += 1;
        return t;
    },
    cubicInOut: function (t) {
        t *= 2;
        if (t <= 1) {
            t = t * t * t;
        }
        else {
            t -= 2;
            t = t * t * t;
            t += 2;
        }
        t /= 2;
        return t;
    },
    quartIn: function (t) {
        return t * t * t * t;
    },
    quartOut: function (t) {
        t -= 1;
        return 1 - t * t * t * t;
    },
    quartInOut: function (t) {
        var t1 = t - 1;
        return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * t1 * t1 * t1 * t1;
    },
    expoIn: function (t) {
        if (t === 0) {
            return 0;
        }
        return Math.pow(2, 10 * (t - 1));
    },
    expoOut: function (t) {
        if (t === 1) {
            return 1;
        }
        return (-Math.pow(2, -10 * t) + 1);
    },
    expoInOut: function (t) {
        if (t === 1 || t === 0) {
            return t;
        }
        t *= 2;
        if (t < 1) {
            return 0.5 * Math.pow(2, 10 * (t - 1));
        }
        return 0.5 * (-Math.pow(2, -10 * (t - 1)) + 2);
    },
    circIn: function (t) {
        return -1 * (Math.sqrt(1 - (t / 1) * t) - 1);
    },
    circOut: function (t) {
        t -= 1;
        return Math.sqrt(1 - t * t);
    },
    circInOut: function (t) {
        t *= 2;
        if (t < 1) {
            return -0.5 * (Math.sqrt(1 - t * t) - 1);
        }
        var st = t - 2;
        return 0.5 * (Math.sqrt(1 - st * st) + 1);
    },
    backIn: function (t) {
        var m = 1.70158;
        return t * t * ((m + 1) * t - m);
    },
    backOut: function (t) {
        var m = 1.70158;
        var st = (t / 1) - 1;
        return (st * st * ((m + 1) * m + m)) + 1;
    },
    backInOut: function (t) {
        var m = 1.70158;
        var s = m * 1.525;
        if ((t *= 2) < 1) {
            return 0.5 * t * t * (((s + 1) * t) - s);
        }
        var st = t - 2;
        return 0.5 * (st * st * ((s + 1) * st + s) + 2);
    },
    elasticIn: function (t) {
        if (t === 0 || t === 1) {
            return t;
        }
        var m = 0.7;
        var st = (t / 1) - 1;
        var s = (1 - m) / 2 * Math.PI * Math.asin(1);
        return -(Math.pow(2, 10 * st) * Math.sin((st - s) * 2 * Math.PI / (1 - m)));
    },
    elasticOut: function (t) {
        if (t === 0 || t === 1) {
            return t;
        }
        var m = 0.7;
        var s = (1 - m) / (2 * Math.PI) * Math.asin(1);
        t *= 2;
        return (Math.pow(2, -10 * t) * Math.sin((t - s) * 2 * Math.PI / (1 - m))) + 1;
    },
    elasticInOut: function (t) {
        if (t === 0 || t === 1) {
            return t;
        }
        var m = 0.65;
        var s = (1 - m) / (2 * Math.PI) * Math.asin(1);
        var st = t * 2;
        var st1 = st - 1;
        if (st < 1) {
            return -0.5 * (Math.pow(2, 10 * st1) * Math.sin((st1 - s) * 2 * Math.PI / (1 - m)));
        }
        return (Math.pow(2, -10 * st1) * Math.sin((st1 - s) * 2 * Math.PI / (1 - m)) * 0.5) + 1;
    },
    bounceIn: function (t) {
        var p = 7.5625;
        if ((t = 1 - t) < 1 / 2.75) {
            return 1 - (p * t * t);
        }
        else if (t < 2 / 2.75) {
            return 1 - (p * (t -= 1.5 / 2.75) * t + 0.75);
        }
        else if (t < 2.5 / 2.75) {
            return 1 - (p * (t -= 2.25 / 2.75) * t + 0.9375);
        }
        return 1 - (p * (t -= 2.625 / 2.75) * t + 0.984375);
    },
    bounceOut: function (t) {
        var p = 7.5625;
        if (t < 1 / 2.75) {
            return p * t * t;
        }
        else if (t < 2 / 2.75) {
            return p * (t -= 1.5 / 2.75) * t + 0.75;
        }
        else if (t < 2.5 / 2.75) {
            return p * (t -= 2.25 / 2.75) * t + 0.9375;
        }
        return p * (t -= 2.625 / 2.75) * t + 0.984375;
    },
    bounceInOut: function (t) {
        var invert = t < 0.5;
        t = invert ? 1 - (t * 2) : (t * 2) - 1;
        var p = 7.5625;
        if (t < 1 / 2.75) {
            t = p * t * t;
        }
        else if (t < 2 / 2.75) {
            t = p * (t -= 1.5 / 2.75) * t + 0.75;
        }
        else if (t < 2.5 / 2.75) {
            t = p * (t -= 2.25 / 2.75) * t + 0.9375;
        }
        else {
            t = p * (t -= 2.625 / 2.75) * t + 0.984375;
        }
        return invert ? (1 - t) * 0.5 : t * 0.5 + 0.5;
    },
    Form: undefined,
    form: function (unit) {
        if (unit !== undefined) {
            return new EaseForm(Ease.fromAny(unit));
        }
        else {
            return Ease.Form;
        }
    },
    fromAny: function (value) {
        if (typeof value === 'function') {
            return value;
        }
        else if (typeof value === 'string') {
            switch (value) {
                case 'linear': return Ease.linear;
                case 'quad-in': return Ease.quadIn;
                case 'quad-out': return Ease.quadOut;
                case 'quad-in-out': return Ease.quadInOut;
                case 'cubic-in': return Ease.cubicIn;
                case 'cubic-out': return Ease.cubicOut;
                case 'cubic-in-out': return Ease.cubicInOut;
                case 'quart-in': return Ease.quartIn;
                case 'quart-out': return Ease.quartOut;
                case 'quart-in-out': return Ease.quartInOut;
                case 'expo-in': return Ease.expoIn;
                case 'expo-out': return Ease.expoOut;
                case 'expo-in-out': return Ease.expoInOut;
                case 'circ-in': return Ease.circIn;
                case 'circ-out': return Ease.circOut;
                case 'circ-in-out': return Ease.circInOut;
                case 'back-in': return Ease.backIn;
                case 'back-out': return Ease.backOut;
                case 'back-in-out': return Ease.backInOut;
                case 'elastic-in': return Ease.elasticIn;
                case 'elastic-out': return Ease.elasticOut;
                case 'elastic-in-out': return Ease.elasticInOut;
                case 'bounce-in': return Ease.bounceIn;
                case 'bounce-out': return Ease.bounceOut;
                case 'bounce-in-out': return Ease.bounceInOut;
            }
        }
        throw new Error(value);
    },
};
Ease.linear.type = 'linear';
Ease.quadIn.type = 'quad-in';
Ease.quadOut.type = 'quad-out';
Ease.quadInOut.type = 'quad-in-out';
Ease.cubicIn.type = 'cubic-in';
Ease.cubicOut.type = 'cubic-out';
Ease.cubicInOut.type = 'cubic-in-out';
Ease.quartIn.type = 'quart-in';
Ease.quartOut.type = 'quart-out';
Ease.quartInOut.type = 'quart-in-out';
Ease.expoIn.type = 'expo-in';
Ease.expoOut.type = 'expo-out';
Ease.expoInOut.type = 'expo-in-out';
Ease.circIn.type = 'circ-in';
Ease.circOut.type = 'circ-out';
Ease.circInOut.type = 'circ-in-out';
Ease.backIn.type = 'back-in';
Ease.backOut.type = 'back-out';
Ease.backInOut.type = 'back-in-out';
Ease.elasticIn.type = 'elastic-in';
Ease.elasticOut.type = 'elastic-out';
Ease.elasticInOut.type = 'elastic-in-out';
Ease.bounceIn.type = 'bounce-in';
Ease.bounceOut.type = 'bounce-out';
Ease.bounceInOut.type = 'bounce-in-out';
var EaseForm = (function (_super) {
    __extends(EaseForm, _super);
    function EaseForm(unit) {
        if (unit === void 0) { unit = Ease.linear; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    EaseForm.prototype.mold = function (ease) {
        ease = Ease.fromAny(ease);
        return Text$1.valueOf(ease.type);
    };
    EaseForm.prototype.cast = function (value) {
        var str = value.stringValue();
        if (str !== undefined) {
            try {
                return Ease.fromAny(str);
            }
            catch (e) {
            }
        }
        return undefined;
    };
    return EaseForm;
}(Form));
Ease.Form = new EaseForm();
//# sourceMappingURL=data:application/json;base64,

var Transition = (function () {
    function Transition(dt, ft, f, f0, f1, fi) {
        this.dt = dt;
        this.ft = ft ? Ease.fromAny(ft) : undefined;
        this.f = f ? Interpolator.fromAny(f) : undefined;
        this.f0 = f0;
        this.f1 = f1;
        this.fi = fi;
    }
    Transition.prototype.duration = function (dt) {
        if (!arguments.length) {
            return this.dt;
        }
        else {
            return new Transition(dt, this.ft, this.f, this.f0, this.f1, this.fi);
        }
    };
    Transition.prototype.ease = function (ft) {
        if (!arguments.length) {
            return this.ft;
        }
        else {
            return new Transition(this.dt, ft, this.f, this.f0, this.f1, this.fi);
        }
    };
    Transition.prototype.interpolate = function (f) {
        if (!arguments.length) {
            return this.f;
        }
        else {
            return new Transition(this.dt, this.ft, f, this.f0, this.f1, this.fi);
        }
    };
    Transition.prototype.range = function (y0, y1) {
        if (y0 === undefined) {
            return this.f && this.f.range();
        }
        else {
            var f = void 0;
            if (this.f) {
                f = this.f.range(y0, y1);
            }
            else {
                f = Interpolator.interpolate(y0, y1);
            }
            return new Transition(this.dt, this.ft, f, this.f0, this.f1, this.fi);
        }
    };
    Transition.prototype.onStart = function (f0) {
        if (!arguments.length) {
            return this.f0;
        }
        else {
            return new Transition(this.dt, this.ft, this.f, f0, this.f1, this.fi);
        }
    };
    Transition.prototype.onEnd = function (f1) {
        if (!arguments.length) {
            return this.f1;
        }
        else {
            return new Transition(this.dt, this.ft, this.f, this.f0, f1, this.fi);
        }
    };
    Transition.prototype.onInterrupt = function (fi) {
        if (!arguments.length) {
            return this.fi;
        }
        else {
            return new Transition(this.dt, this.ft, this.f, this.f0, this.f1, fi);
        }
    };
    Transition.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Transition) {
            return this.dt === that.dt && this.ft === that.ft
                && (this.f === undefined ? that.f === undefined : this.f.equals(that.f));
        }
        return false;
    };
    Transition.form = function (interpolatorForm, unit) {
        return new TransitionForm(interpolatorForm, unit);
    };
    Transition.duration = function (dt, ft, f) {
        return new Transition(dt, ft, f);
    };
    Transition.ease = function (ft, f) {
        return new Transition(undefined, ft, f);
    };
    Transition.interpolate = function (f) {
        return new Transition(undefined, undefined, f);
    };
    Transition.range = function (y0, y1) {
        var f;
        if (y1 === undefined) {
            y0 = y0;
            f = Interpolator.interpolate(y0[0], y0[1]);
        }
        else {
            f = Interpolator.interpolate(y0, y1);
        }
        return new Transition(undefined, undefined, f);
    };
    Transition.fromAny = function (trans, value, dt, ft) {
        if (trans instanceof Transition) {
            return trans;
        }
        else if (typeof trans === 'object') {
            return new Transition(trans.duration, trans.ease, trans.interpolate, trans.onStart, trans.onEnd, trans.onInterrupt);
        }
        else if (trans === true) {
            return new Transition(dt, ft, Interpolator.interpolate(value));
        }
        else {
            return undefined;
        }
    };
    Transition.isInit = function (value) {
        if (value && typeof value === 'object') {
            var init = value;
            return init.duration !== undefined || init.ease !== undefined || init.interpolate !== undefined;
        }
        return false;
    };
    Transition.Form = undefined;
    return Transition;
}());
var TransitionForm = (function (_super) {
    __extends(TransitionForm, _super);
    function TransitionForm(interpolatorForm, unit) {
        var _this = _super.call(this) || this;
        _this.interpolatorForm = interpolatorForm;
        _this.unit = unit;
        return _this;
    }
    TransitionForm.prototype.mold = function (transition) {
        if (transition !== undefined) {
            transition = Transition.fromAny(transition);
            var header = Record.empty();
            if (transition.dt !== undefined) {
                header.slot('dt', transition.dt);
            }
            if (transition.ft !== undefined) {
                header.slot('ease', Ease.Form.mold(transition.ft));
            }
            var record = Record.of(Attr$1.of('transition', header));
            var f = this.interpolatorForm.mold(transition.f);
            if (f.isDefined()) {
                record = record.concat(f);
            }
            return record;
        }
        return Value.Absent;
    };
    TransitionForm.prototype.cast = function (value) {
        var header = value.header('transition');
        if (header.length >= 2) {
            var dt_1;
            var ft_1;
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key !== undefined) {
                    if (key === 'dt') {
                        dt_1 = item.toValue().numberValue(dt_1);
                    }
                    else if (key === 'ease') {
                        ft_1 = item.toValue().cast(Ease.Form, ft_1);
                    }
                }
                else if (item instanceof Value) {
                    if (index === 0) {
                        dt_1 = item.numberValue(dt_1);
                    }
                    else if (index === 1) {
                        ft_1 = item.cast(Ease.Form, ft_1);
                    }
                }
            }, this);
            var f = this.interpolatorForm.cast(value.body());
            return new Transition(dt_1, ft_1, f);
        }
        return undefined;
    };
    return TransitionForm;
}(Form));

//# sourceMappingURL=data:application/json;base64,

var UiValue = {
    Form: undefined,
    form: function (unit) {
        if (unit !== undefined) {
            return new UiValueForm(unit);
        }
        else {
            return UiValue.Form;
        }
    },
    fromAny: function (value) {
        if (value instanceof DateTime || value instanceof Angle || value instanceof Length
            || value instanceof Color || value instanceof BoxShadow
            || value instanceof Transform || value instanceof Interpolator
            || value instanceof Scale || value instanceof Transition
            || typeof value === 'number' || typeof value === 'boolean') {
            return value;
        }
        else if (value instanceof Date || DateTime.isInit(value)) {
            return DateTime.fromAny(value);
        }
        else if (Color.isInit(value)) {
            return Color.fromAny(value);
        }
        else if (BoxShadow.isInit(value)) {
            return BoxShadow.fromAny(value);
        }
        else if (Transition.isInit(value)) {
            return Transition.fromAny(value);
        }
        else if (typeof value === 'string') {
            return UiValue.parse(value);
        }
        throw new TypeError('' + value);
    },
    parse: function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = UiValueParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    },
};
var ISO_8601_REST = DateTimeFormat.pattern('%m-%dT%H:%M:%S.%LZ');
var UiValueParser = (function (_super) {
    __extends(UiValueParser, _super);
    function UiValueParser(identParser, valueParser, unitsOutput, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.valueParser = valueParser;
        _this.unitsOutput = unitsOutput;
        _this.step = step;
        return _this;
    }
    UiValueParser.prototype.feed = function (input) {
        return UiValueParser.parse(input, this.identParser, this.valueParser, this.unitsOutput, this.step);
    };
    UiValueParser.parse = function (input, identParser, valueParser, unitsOutput, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 35) {
                    return RgbHexParser.parse(input);
                }
                else if (Recon.isIdentStartChar(c)) {
                    step = 2;
                }
                else {
                    step = 3;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                var ident = identParser.bind().stringValue();
                switch (ident) {
                    case 'rgb':
                    case 'rgba': return RgbFunctionParser.parseRest(input, identParser);
                    case 'hsl':
                    case 'hsla': return HslFunctionParser.parseRest(input, identParser);
                    case 'translateX':
                    case 'translateY':
                    case 'translate': return TranslateTransformParser.parseRest(input, identParser);
                    case 'scaleX':
                    case 'scaleY':
                    case 'scale': return ScaleTransformParser.parseRest(input, identParser);
                    case 'rotate': return RotateTransformParser.parseRest(input, identParser);
                    case 'skewX':
                    case 'skewY':
                    case 'skew': return SkewTransformParser.parseRest(input, identParser);
                    case 'matrix': return MatrixTransformParser.parseRest(input, identParser);
                    case 'true': return Iteratee.done(true);
                    case 'false': return Iteratee.done(false);
                    default: return Iteratee.error(ident);
                }
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 3) {
            if (!valueParser) {
                valueParser = Recon.Factory.parseDecimal(input);
            }
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 4;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 4) {
            if (!input.isEmpty() && (c = input.head(), c === 45)) {
                input.step();
                var date = {};
                date.year = valueParser.bind().numberValue();
                return ISO_8601_REST.parseDate(input, date);
            }
            else if (!input.isEmpty() || input.isDone()) {
                step = 5;
            }
        }
        if (step === 5) {
            unitsOutput = unitsOutput || new StringOutput();
            while (!input.isEmpty() && (c = input.head(), Iteratee.isAlpha(c) || c === 37)) {
                input.step();
                unitsOutput.push(c);
            }
            if (!input.isEmpty() || input.isDone()) {
                var value = valueParser.bind().numberValue();
                var units = unitsOutput.bind();
                switch (units) {
                    case 'deg': return Iteratee.done(Angle.deg(value));
                    case 'grad': return Iteratee.done(Angle.grad(value));
                    case 'rad': return Iteratee.done(Angle.rad(value));
                    case 'turn': return Iteratee.done(Angle.turn(value));
                    case 'px': return Iteratee.done(Length.px(value));
                    case 'em': return Iteratee.done(Length.em(value));
                    case 'rem': return Iteratee.done(Length.rem(value));
                    case '%': return Iteratee.done(Length.pct(value));
                    case '': return Iteratee.done(value);
                    default: return Iteratee.error(units);
                }
            }
        }
        return new UiValueParser(identParser, valueParser, unitsOutput, step);
    };
    return UiValueParser;
}(Iteratee));
var UiValueForm = (function (_super) {
    __extends(UiValueForm, _super);
    function UiValueForm(unit) {
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    UiValueForm.prototype.mold = function (value) {
        if (value !== undefined) {
            value = UiValue.fromAny(value);
            if (value instanceof DateTime) {
                return DateTime.Form.mold(value);
            }
            else if (value instanceof Angle) {
                return Angle.Form.mold(value);
            }
            else if (value instanceof Length) {
                return Length.Form.mold(value);
            }
            else if (value instanceof Color) {
                return Color.Form.mold(value);
            }
            else if (value instanceof BoxShadow) {
                return BoxShadow.Form.mold(value);
            }
            else if (value instanceof Transform) {
                return Transform.Form.mold(value);
            }
            else if (value instanceof Interpolator) {
                return Interpolator.Form.mold(value);
            }
            else if (value instanceof Scale) {
                return Scale.Form.mold(value);
            }
            else if (value instanceof Transition) {
                return Transition.Form.mold(value);
            }
            else if (typeof value === 'number') {
                return Num.valueOf(value);
            }
        }
        return Value.Absent;
    };
    UiValueForm.prototype.cast = function (value) {
        if (value instanceof Num) {
            return value.numberValue();
        }
        if (value instanceof Bool) {
            return value.booleanValue();
        }
        var str = value.stringValue();
        if (str !== undefined) {
            try {
                return UiValue.parse(str);
            }
            catch (e) {
            }
        }
        if (value instanceof Record) {
            var date = DateTime.fromValue(value);
            if (date) {
                return date;
            }
            var angle = Angle.fromValue(value);
            if (angle) {
                return angle;
            }
            var length_1 = Length.fromValue(value);
            if (length_1) {
                return length_1;
            }
            var color = Color.fromValue(value);
            if (color) {
                return color;
            }
            var boxShadow = BoxShadow.fromValue(value);
            if (boxShadow) {
                return boxShadow;
            }
            var transform = Transform.fromValue(value);
            if (transform) {
                return transform;
            }
            var interpolator = Interpolator.Form.cast(value);
            if (interpolator) {
                return interpolator;
            }
            var scale = Scale.Form.cast(value);
            if (scale) {
                return scale;
            }
            var transition = Transition.Form.cast(value);
            if (transition) {
                return transition;
            }
        }
        return undefined;
    };
    return UiValueForm;
}(Form));
UiValue.Form = new UiValueForm();
Interpolator.Form = new InterpolatorForm(UiValue.Form);
Scale.Form = new ScaleForm(UiValue.Form, Interpolator.Form);
ContinuousScale.Form = Scale.Form;
Transition.Form = new TransitionForm(Interpolator.Form);
//# sourceMappingURL=data:application/json;base64,

var DateFunc = (function (_super) {
    __extends(DateFunc, _super);
    function DateFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DateFunc.prototype, "name", {
        get: function () {
            return 'date';
        },
        enumerable: true,
        configurable: true
    });
    DateFunc.prototype.invoke = function (args, stack) {
        var date;
        var options;
        if (args instanceof Extant) {
            date = DateTime.current();
        }
        else {
            if (args.length >= 2) {
                date = args.getItem(0).evaluate(stack).cast(DateTime.Form);
                options = args.getItem(1).evaluate(stack).toValue().toAny();
            }
            else {
                if (args instanceof Num) {
                    date = args.evaluate(stack).cast(DateTime.Form);
                }
                else {
                    date = DateTime.current();
                    options = args.evaluate(stack).toValue().toAny();
                }
            }
        }
        if (!date) {
            return Item.Absent;
        }
        if (options && options.pattern) {
            var newDate = DateTimeFormat.pattern(options.pattern).format(date._time);
            return Item.Text.valueOf(newDate);
        }
        else {
            return DateTime.Form.mold(date);
        }
    };
    return DateFunc;
}(Func));
var NowFunc = (function (_super) {
    __extends(NowFunc, _super);
    function NowFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NowFunc.prototype, "name", {
        get: function () {
            return 'now';
        },
        enumerable: true,
        configurable: true
    });
    NowFunc.prototype.invoke = function (args) {
        return Num.valueOf(Date.now());
    };
    return NowFunc;
}(Func));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBWSxJQUFJLEVBQVMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDdEUsT0FBTyxFQUFDLFFBQVEsRUFBRSxjQUFjLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFbkQ7SUFBOEIsb0NBQUk7SUFBbEM7O0lBbUNBLENBQUM7SUFsQ0Msc0JBQUksMEJBQUk7YUFBUjtZQUNFLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7OztPQUFBO0lBRUQseUJBQU0sR0FBTixVQUFPLElBQVcsRUFBRSxLQUFnQjtRQUNsQyxJQUFJLElBQUksQ0FBQztRQUNULElBQUksT0FBWSxDQUFDO1FBRWpCLElBQUksSUFBSSxZQUFZLE1BQU0sRUFBRTtZQUMxQixJQUFJLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzNCO2FBQU07WUFDTCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO2dCQUNwQixJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDM0QsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQzdEO2lCQUFNO2dCQUNMLElBQUcsSUFBSSxZQUFZLEdBQUcsRUFBRTtvQkFDdEIsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDakQ7cUJBQU07b0JBQ0wsSUFBSSxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDMUIsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ2xEO2FBQ0Y7U0FDRjtRQUVELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFBRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7U0FBRTtRQUVsQyxJQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQzdCLElBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxPQUFPLENBQUUsQ0FBQztTQUNyQzthQUFNO1lBQ0wsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQztJQUVILENBQUM7SUFDSCxlQUFDO0FBQUQsQ0FBQyxBQW5DRCxDQUE4QixJQUFJLEdBbUNqQzs7QUFFRDtJQUE2QixtQ0FBSTtJQUFqQzs7SUFRQSxDQUFDO0lBUEMsc0JBQUkseUJBQUk7YUFBUjtZQUNFLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQzs7O09BQUE7SUFFRCx3QkFBTSxHQUFOLFVBQU8sSUFBVztRQUNoQixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBUkQsQ0FBNkIsSUFBSSxHQVFoQyJ9

var InterpolatorFunc = (function (_super) {
    __extends(InterpolatorFunc, _super);
    function InterpolatorFunc(interpolator) {
        var _this = _super.call(this) || this;
        _this.interpolator = interpolator;
        return _this;
    }
    Object.defineProperty(InterpolatorFunc.prototype, "name", {
        get: function () {
            return 'interpolator';
        },
        enumerable: true,
        configurable: true
    });
    InterpolatorFunc.prototype.invoke = function (args, stack) {
        var u = args.evaluate(stack).numberValue();
        if (u !== undefined) {
            u = Math.min(Math.max(0, u || 0), 1);
            var value = this.interpolator.map(u);
            return UiValue.Form.mold(value);
        }
        return Item.Absent;
    };
    return InterpolatorFunc;
}(Func));
var InterpolateFunc = (function (_super) {
    __extends(InterpolateFunc, _super);
    function InterpolateFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(InterpolateFunc.prototype, "name", {
        get: function () {
            return 'inerpolate';
        },
        enumerable: true,
        configurable: true
    });
    InterpolateFunc.prototype.invoke = function (args, stack) {
        var a;
        var b;
        if (args.length >= 2) {
            a = args.getItem(0).evaluate(stack).cast(UiValue.Form);
            b = args.getItem(1).evaluate(stack).cast(UiValue.Form);
        }
        else {
            a = args.evaluate(stack).cast(UiValue.Form);
        }
        if (a !== undefined || b !== undefined) {
            var interpolator = Interpolator.interpolate(a, b);
            return new InterpolatorFunc(interpolator);
        }
        return Item.Absent;
    };
    return InterpolateFunc;
}(Func));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJwb2xhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlcnBvbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFZLElBQUksRUFBUyxJQUFJLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDekQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQy9DLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFaEM7SUFBc0MsNENBQUk7SUFHeEMsMEJBQVksWUFBbUM7UUFBL0MsWUFDRSxpQkFBTyxTQUVSO1FBREMsS0FBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7O0lBQ25DLENBQUM7SUFFRCxzQkFBSSxrQ0FBSTthQUFSO1lBQ0UsT0FBTyxjQUFjLENBQUM7UUFDeEIsQ0FBQzs7O09BQUE7SUFFRCxpQ0FBTSxHQUFOLFVBQU8sSUFBVyxFQUFFLEtBQWdCO1FBQ2xDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDM0MsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNyQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUFyQkQsQ0FBc0MsSUFBSSxHQXFCekM7O0FBRUQ7SUFBcUMsMkNBQUk7SUFBekM7O0lBb0JBLENBQUM7SUFuQkMsc0JBQUksaUNBQUk7YUFBUjtZQUNFLE9BQU8sWUFBWSxDQUFDO1FBQ3RCLENBQUM7OztPQUFBO0lBRUQsZ0NBQU0sR0FBTixVQUFPLElBQVcsRUFBRSxLQUFnQjtRQUNsQyxJQUFJLENBQXNCLENBQUM7UUFDM0IsSUFBSSxDQUFzQixDQUFDO1FBQzNCLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDcEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkQsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEQ7YUFBTTtZQUNMLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0M7UUFDRCxJQUFJLENBQUMsS0FBSyxTQUFTLElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUN0QyxJQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNwRCxPQUFPLElBQUksZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQXBCRCxDQUFxQyxJQUFJLEdBb0J4QyJ9

var BrighterFunc = (function (_super) {
    __extends(BrighterFunc, _super);
    function BrighterFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BrighterFunc.prototype, "name", {
        get: function () {
            return 'brighter';
        },
        enumerable: true,
        configurable: true
    });
    BrighterFunc.prototype.invoke = function (args, stack) {
        var color;
        var k;
        if (args.length >= 2) {
            color = args.getItem(0).evaluate(stack).cast(Color.Form);
            k = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            color = args.evaluate(stack).cast(Color.Form);
        }
        if (color) {
            color = color.brighter(k);
            return Color.Form.mold(color);
        }
        return Item.Absent;
    };
    return BrighterFunc;
}(Func));
var DarkerFunc = (function (_super) {
    __extends(DarkerFunc, _super);
    function DarkerFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DarkerFunc.prototype, "name", {
        get: function () {
            return 'darker';
        },
        enumerable: true,
        configurable: true
    });
    DarkerFunc.prototype.invoke = function (args, stack) {
        var color;
        var k;
        if (args.length >= 2) {
            color = args.getItem(0).evaluate(stack).cast(Color.Form);
            k = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            color = args.evaluate(stack).cast(Color.Form);
        }
        if (color) {
            color = color.darker(k);
            return Color.Form.mold(color);
        }
        return Item.Absent;
    };
    return DarkerFunc;
}(Func));
var ContrastFunc = (function (_super) {
    __extends(ContrastFunc, _super);
    function ContrastFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ContrastFunc.prototype, "name", {
        get: function () {
            return 'contrast';
        },
        enumerable: true,
        configurable: true
    });
    ContrastFunc.prototype.invoke = function (args, stack) {
        var color;
        var k;
        if (args.length >= 2) {
            color = args.getItem(0).evaluate(stack).cast(Color.Form);
            k = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            color = args.evaluate(stack).cast(Color.Form);
        }
        if (color) {
            color = color.contrast(k);
            return Color.Form.mold(color);
        }
        return Item.Absent;
    };
    return ContrastFunc;
}(Func));
var OpacityFunc = (function (_super) {
    __extends(OpacityFunc, _super);
    function OpacityFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(OpacityFunc.prototype, "name", {
        get: function () {
            return 'opacity';
        },
        enumerable: true,
        configurable: true
    });
    OpacityFunc.prototype.invoke = function (args, stack) {
        var color;
        var a;
        if (args.length >= 2) {
            color = args.getItem(0).evaluate(stack).cast(Color.Form);
            a = args.getItem(1).evaluate(stack).numberValue();
            if (color && a !== undefined) {
                color = color.alpha(a);
                return Color.Form.mold(color);
            }
        }
        return Item.Absent;
    };
    return OpacityFunc;
}(Func));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdHlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFZLElBQUksRUFBUyxJQUFJLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDekQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVuQztJQUFrQyx3Q0FBSTtJQUF0Qzs7SUFvQkEsQ0FBQztJQW5CQyxzQkFBSSw4QkFBSTthQUFSO1lBQ0UsT0FBTyxVQUFVLENBQUM7UUFDcEIsQ0FBQzs7O09BQUE7SUFFRCw2QkFBTSxHQUFOLFVBQU8sSUFBVyxFQUFFLEtBQWdCO1FBQ2xDLElBQUksS0FBd0IsQ0FBQztRQUM3QixJQUFJLENBQXFCLENBQUM7UUFDMUIsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNwQixLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6RCxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDbkQ7YUFBTTtZQUNMLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDL0M7UUFDRCxJQUFJLEtBQUssRUFBRTtZQUNULEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0I7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FB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

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWxFLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxTQUFTLENBQUMifQ==

var UiFunc = {
    Date: new DateFunc(),
    Now: new NowFunc(),
    Brighter: new BrighterFunc(),
    Darker: new DarkerFunc(),
    Contrast: new ContrastFunc(),
    Opacity: new OpacityFunc(),
    Interpolate: new InterpolateFunc(),
    GlobalScope: undefined,
};
UiFunc.GlobalScope = Item.GlobalScope.branch()
    .slot('date', UiFunc.Date)
    .slot('now', UiFunc.Now)
    .slot('brighter', UiFunc.Brighter)
    .slot('darker', UiFunc.Darker)
    .slot('contrast', UiFunc.Contrast)
    .slot('opacity', UiFunc.Opacity)
    .slot('interpolate', UiFunc.Interpolate)
    .commit();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktZnVuYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVpLWZ1bmMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLElBQUksRUFBc0IsTUFBTSxhQUFhLENBQUM7QUFDdEQsT0FBTyxLQUFLLFlBQVksTUFBTSxjQUFjLENBQUM7QUFrQjdDLE1BQU0sQ0FBQyxJQUFNLE1BQU0sR0FBRztJQUNwQixJQUFJLEVBQUUsSUFBSSxZQUFZLENBQUMsUUFBUSxFQUFVO0lBQ3pDLEdBQUcsRUFBRSxJQUFJLFlBQVksQ0FBQyxPQUFPLEVBQVU7SUFDdkMsUUFBUSxFQUFFLElBQUksWUFBWSxDQUFDLFlBQVksRUFBVTtJQUNqRCxNQUFNLEVBQUUsSUFBSSxZQUFZLENBQUMsVUFBVSxFQUFVO0lBQzdDLFFBQVEsRUFBRSxJQUFJLFlBQVksQ0FBQyxZQUFZLEVBQVU7SUFDakQsT0FBTyxFQUFFLElBQUksWUFBWSxDQUFDLFdBQVcsRUFBVTtJQUMvQyxXQUFXLEVBQUUsSUFBSSxZQUFZLENBQUMsZUFBZSxFQUFVO0lBQ3ZELFdBQVcsRUFBRSxTQUF5QjtDQUN2QyxDQUFDO0FBRUYsTUFBTSxDQUFDLFdBQVcsR0FBSSxJQUFJLENBQUMsV0FBc0IsQ0FBQyxNQUFNLEVBQUU7S0FDckQsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDO0tBQ3pCLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQztLQUN2QixJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUM7S0FDakMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDO0tBQzdCLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQztLQUNqQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUM7S0FDL0IsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDO0tBQ3ZDLE1BQU0sRUFBRSxDQUFDIn0=

var UiEnvelope = (function () {
    function UiEnvelope() {
    }
    Object.defineProperty(UiEnvelope.prototype, "tag", {
        get: function () {
            return this.constructor.tag;
        },
        enumerable: true,
        configurable: true
    });
    UiEnvelope.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    Object.defineProperty(UiEnvelope, "tag", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    UiEnvelope.fromValue = function (value) {
        switch (value.tag) {
            case 'append': return UiAppendEnvelope.fromValue(value);
            case 'prepend': return UiPrependEnvelope.fromValue(value);
            case 'insert': return UiInsertEnvelope.fromValue(value);
            case 'remove': return UiRemoveEnvelope.fromValue(value);
            case 'state': return UiStateEnvelope.fromValue(value);
            case 'model': return UiModelEnvelope.fromValue(value);
            default: return undefined;
        }
    };
    UiEnvelope.parseRecon = function (input) {
        return UiEnvelope.fromValue(Value.parseRecon(input));
    };
    return UiEnvelope;
}());
var UiTreeEnvelope = (function (_super) {
    __extends(UiTreeEnvelope, _super);
    function UiTreeEnvelope(parent, child, target, body) {
        var _this = _super.call(this) || this;
        _this._parent = parent;
        _this._child = child;
        _this._target = target;
        _this._body = body;
        return _this;
    }
    UiTreeEnvelope.prototype.parent = function (parent) {
        if (parent === undefined) {
            return this._parent;
        }
        else {
            return this.copy(parent, this._child, this._target, this._body);
        }
    };
    UiTreeEnvelope.prototype.child = function (child) {
        if (child === undefined) {
            return this._child;
        }
        else {
            return this.copy(this._parent, child, this._target, this._body);
        }
    };
    UiTreeEnvelope.prototype.target = function (target) {
        if (target === undefined) {
            return this._target;
        }
        else {
            return this.copy(this._parent, this._child, target, this._body);
        }
    };
    UiTreeEnvelope.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._parent, this._child, this._target, body);
        }
    };
    UiTreeEnvelope.prototype.toValue = function () {
        var header = Record.empty(this._target ? 3 : 2)
            .slot('parent', this._parent)
            .slot('child', this._child);
        if (this._target) {
            header.slot('target', this._target);
        }
        return Attr$1.of(this.tag, header).concat(this._body);
    };
    UiTreeEnvelope.fromValue = function (value, E) {
        var parent;
        var child;
        var target = '';
        var header = value.header(E.tag);
        header.forEach(function (item, index) {
            if (item.key instanceof Text$1) {
                var key = item.key.value;
                if (key === 'parent') {
                    parent = item.toValue().stringValue(parent);
                }
                else if (key === 'child') {
                    child = item.toValue().stringValue(child);
                }
                else if (key === 'target') {
                    target = item.toValue().stringValue(target);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    parent = item.stringValue(parent);
                }
                else if (index === 1) {
                    child = item.stringValue(child);
                }
                else if (index === 2) {
                    target = item.stringValue(target);
                }
            }
        }, this);
        if (parent !== undefined && child !== undefined) {
            var body = value.body();
            return new E(parent, child, target, body);
        }
        return undefined;
    };
    return UiTreeEnvelope;
}(UiEnvelope));
var UiViewEnvelope = (function (_super) {
    __extends(UiViewEnvelope, _super);
    function UiViewEnvelope(child, body) {
        var _this = _super.call(this) || this;
        _this._child = child;
        _this._body = body;
        return _this;
    }
    UiViewEnvelope.prototype.parent = function (parent) {
        if (parent === undefined) {
            return '';
        }
        else {
            return this;
        }
    };
    UiViewEnvelope.prototype.child = function (child) {
        if (child === undefined) {
            return this._child;
        }
        else {
            return this.copy(child, this._body);
        }
    };
    UiViewEnvelope.prototype.target = function (target) {
        if (target === undefined) {
            return '';
        }
        else {
            return this;
        }
    };
    UiViewEnvelope.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._child, body);
        }
    };
    UiViewEnvelope.prototype.toValue = function () {
        var header = Record.empty(1)
            .slot('child', this._child);
        return Attr$1.of(this.tag, header).concat(this._body);
    };
    UiViewEnvelope.fromValue = function (value, E) {
        var child;
        var header = value.header(E.tag);
        header.forEach(function (item, index) {
            if (item.key instanceof Text$1) {
                var key = item.key.value;
                if (key === 'child') {
                    child = item.toValue().stringValue(child);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    child = item.stringValue(child);
                }
            }
        }, this);
        if (child !== undefined) {
            var body = value.body();
            return new E(child, body);
        }
        return undefined;
    };
    return UiViewEnvelope;
}(UiEnvelope));
var UiAppendEnvelope = (function (_super) {
    __extends(UiAppendEnvelope, _super);
    function UiAppendEnvelope(parent, child, target, body) {
        return _super.call(this, parent, child, target, body) || this;
    }
    UiAppendEnvelope.prototype.copy = function (parent, child, target, body) {
        return new UiAppendEnvelope(parent, child, target, body);
    };
    UiAppendEnvelope.fromValue = function (value) {
        return UiTreeEnvelope.fromValue(value, UiAppendEnvelope);
    };
    Object.defineProperty(UiAppendEnvelope, "tag", {
        get: function () {
            return 'append';
        },
        enumerable: true,
        configurable: true
    });
    UiAppendEnvelope.of = function (parent, child, target, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiAppendEnvelope(parent, child, target, body);
    };
    return UiAppendEnvelope;
}(UiTreeEnvelope));
var UiPrependEnvelope = (function (_super) {
    __extends(UiPrependEnvelope, _super);
    function UiPrependEnvelope(parent, child, target, body) {
        return _super.call(this, parent, child, target, body) || this;
    }
    UiPrependEnvelope.prototype.copy = function (parent, child, target, body) {
        return new UiPrependEnvelope(parent, child, target, body);
    };
    UiPrependEnvelope.fromValue = function (value) {
        return UiTreeEnvelope.fromValue(value, UiPrependEnvelope);
    };
    Object.defineProperty(UiPrependEnvelope, "tag", {
        get: function () {
            return 'prepend';
        },
        enumerable: true,
        configurable: true
    });
    UiPrependEnvelope.of = function (parent, child, target, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiPrependEnvelope(parent, child, target, body);
    };
    return UiPrependEnvelope;
}(UiTreeEnvelope));
var UiInsertEnvelope = (function (_super) {
    __extends(UiInsertEnvelope, _super);
    function UiInsertEnvelope(parent, child, target, body) {
        return _super.call(this, parent, child, target, body) || this;
    }
    UiInsertEnvelope.prototype.copy = function (parent, child, target, body) {
        return new UiInsertEnvelope(parent, child, target, body);
    };
    UiInsertEnvelope.fromValue = function (value) {
        return UiTreeEnvelope.fromValue(value, UiInsertEnvelope);
    };
    Object.defineProperty(UiInsertEnvelope, "tag", {
        get: function () {
            return 'insert';
        },
        enumerable: true,
        configurable: true
    });
    UiInsertEnvelope.of = function (parent, child, target, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiInsertEnvelope(parent, child, target, body);
    };
    return UiInsertEnvelope;
}(UiTreeEnvelope));
var UiRemoveEnvelope = (function (_super) {
    __extends(UiRemoveEnvelope, _super);
    function UiRemoveEnvelope(parent, child, target, body) {
        if (body === void 0) { body = Value.Absent; }
        return _super.call(this, parent, child, target, body) || this;
    }
    UiRemoveEnvelope.prototype.copy = function (parent, child, target, body) {
        return new UiRemoveEnvelope(parent, child, target, body);
    };
    UiRemoveEnvelope.fromValue = function (value) {
        return UiTreeEnvelope.fromValue(value, UiRemoveEnvelope);
    };
    Object.defineProperty(UiRemoveEnvelope, "tag", {
        get: function () {
            return 'remove';
        },
        enumerable: true,
        configurable: true
    });
    UiRemoveEnvelope.of = function (parent, child, target, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiRemoveEnvelope(parent, child, target, body);
    };
    return UiRemoveEnvelope;
}(UiTreeEnvelope));
var UiStateEnvelope = (function (_super) {
    __extends(UiStateEnvelope, _super);
    function UiStateEnvelope(child, body) {
        return _super.call(this, child, body) || this;
    }
    UiStateEnvelope.prototype.copy = function (child, body) {
        return new UiStateEnvelope(child, body);
    };
    UiStateEnvelope.fromValue = function (value) {
        return UiViewEnvelope.fromValue(value, UiStateEnvelope);
    };
    Object.defineProperty(UiStateEnvelope, "tag", {
        get: function () {
            return 'state';
        },
        enumerable: true,
        configurable: true
    });
    UiStateEnvelope.of = function (child, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiStateEnvelope(child, body);
    };
    return UiStateEnvelope;
}(UiViewEnvelope));
var UiModelEnvelope = (function (_super) {
    __extends(UiModelEnvelope, _super);
    function UiModelEnvelope(child, body) {
        return _super.call(this, child, body) || this;
    }
    UiModelEnvelope.prototype.copy = function (child, body) {
        return new UiModelEnvelope(child, body);
    };
    UiModelEnvelope.fromValue = function (value) {
        return UiViewEnvelope.fromValue(value, UiModelEnvelope);
    };
    Object.defineProperty(UiModelEnvelope, "tag", {
        get: function () {
            return 'model';
        },
        enumerable: true,
        configurable: true
    });
    UiModelEnvelope.of = function (child, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiModelEnvelope(child, body);
    };
    return UiModelEnvelope;
}(UiViewEnvelope));

//# sourceMappingURL=data:application/json;base64,

var UiComponent = (function () {
    function UiComponent() {
        this._isRunning = false;
    }
    UiComponent.prototype.create = function (parentNode, componentInfo, stack, eventManager, id) {
        this.id(id || Utils.newGuid());
        this._stack = stack;
        this._componentInfo = componentInfo;
        this._stack.push(Model.GlobalScope);
        if (parentNode instanceof Element) {
            this._rootElement = parentNode;
            if (this._rootElement.tagName.toLocaleLowerCase() === "script") {
                var divElement = document.createElement('div');
                divElement.className = 'swimComponentFrame';
                divElement.id = this.id();
                divElement['component'] = this;
                var rootElemParent = this._rootElement.parentElement;
                this.parentView(new HtmlView(divElement, id));
                rootElemParent.replaceChild(this.parentView().node, this._rootElement);
            }
            else if (this._rootElement.tagName.toLocaleLowerCase() === "g") {
                this.parentView(new HtmlView(parentNode, id));
            }
            else {
                this.parentView(new HtmlView(parentNode, id));
            }
        }
        else if (parentNode instanceof UiComponent) {
            parentNode.id(this.id());
            parentNode.view().node['component'] = this;
            this.parentComponent(parentNode);
            this.parentView(this.parentComponent().view());
        }
    };
    UiComponent.prototype.remove = function () {
        this.stop();
        this.controller().remove();
        var parentView = this.parentView();
        if (this._rootElement && parentView && parentView.node && parentView.node.parentNode && this._rootElement.tagName === "SCRIPT") {
            parentView.node.parentElement.replaceChild(this._rootElement, this.parentView().node);
        }
    };
    UiComponent.prototype.start = function () {
        this._isRunning = true;
        this.controller().start();
    };
    UiComponent.prototype.stop = function () {
        this._isRunning = false;
        this.controller().stop();
    };
    UiComponent.prototype.resize = function () {
        this.controller().resize();
    };
    UiComponent.prototype.id = function (newModel) {
        if (newModel === undefined) {
            return this._id;
        }
        this._id = newModel;
        return this;
    };
    UiComponent.prototype.stack = function (newStack) {
        if (newStack === undefined) {
            return this._stack;
        }
        this._stack = newStack;
        return this;
    };
    UiComponent.prototype.controller = function (newController) {
        if (newController === undefined) {
            return this._controller;
        }
        this._controller = newController;
        return this;
    };
    UiComponent.prototype.view = function (newView) {
        if (newView === undefined) {
            return (this.controller()) ? this.controller().view() : null;
        }
        this.controller().view(newView);
        return this;
    };
    UiComponent.prototype.model = function (newModel) {
        if (newModel === undefined) {
            return this.controller().model();
        }
        this.controller().model(newModel);
        return this;
    };
    UiComponent.prototype.parentView = function (parentView) {
        if (parentView === undefined) {
            return this._parentView;
        }
        this._parentView = parentView;
        return this;
    };
    UiComponent.prototype.parentComponent = function (parentComponent) {
        if (parentComponent) {
            this._parentComponent = parentComponent;
        }
        return this._parentComponent;
    };
    UiComponent.prototype.eventManager = function (eventManager) {
        if (eventManager) {
            this.controller().eventManager(eventManager);
        }
        return this.controller().eventManager();
    };
    UiComponent.prototype.render = function (frameNumber) {
        this.controller().render(frameNumber);
    };
    UiComponent.addGlobal = function (componentKey, componentClass) {
        UiComponent.Global = UiComponent.Global.addComponent(componentKey, componentClass);
    };
    UiComponent.removeGlobal = function (componentKey) {
        UiComponent.Global = UiComponent.Global.removeComponent(componentKey);
    };
    UiComponent.Global = undefined;
    return UiComponent;
}());
var PolyUiComponent = (function (_super) {
    __extends(PolyUiComponent, _super);
    function PolyUiComponent() {
        var _this = _super.call(this) || this;
        _this._uiComponentsMap = {};
        _this._uiComponentsMap = {};
        return _this;
    }
    Object.defineProperty(PolyUiComponent.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    PolyUiComponent.prototype.addComponent = function (componentKey, componentClass) {
        var keyList = Object.keys(this._uiComponentsMap);
        if (componentKey && keyList.indexOf(componentKey) < 0) {
            this._uiComponentsMap[componentKey] = componentClass;
        }
        return this;
    };
    PolyUiComponent.prototype.removeComponent = function (componentKey) {
        var keyList = Object.keys(this._uiComponentsMap);
        if (componentKey && keyList.indexOf(componentKey) < 0) {
            delete this._uiComponentsMap[componentKey];
        }
        return this;
    };
    return PolyUiComponent;
}(UiComponent));
UiComponent.Global = new PolyUiComponent();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidWktY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQStCLFFBQVEsRUFBRSxLQUFLLEVBQVcsS0FBSyxFQUFRLE1BQU0sVUFBVSxDQUFDO0FBRTlGO0lBVUU7UUFIVSxlQUFVLEdBQVksS0FBSyxDQUFDO0lBS3RDLENBQUM7SUFJRCw0QkFBTSxHQUFOLFVBQU8sVUFBOEMsRUFBRSxhQUFvQixFQUFFLEtBQWdCLEVBQUUsWUFBNkIsRUFBRSxFQUFXO1FBRXZJLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUlwQyxJQUFHLFVBQVUsWUFBWSxPQUFPLEVBQUU7WUFJaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUM7WUFDL0IsSUFBRyxJQUFJLENBQUMsWUFBYSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLFFBQVEsRUFBRTtnQkFHOUQsSUFBTSxVQUFVLEdBQWdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzlELFVBQVUsQ0FBQyxTQUFTLEdBQUcsb0JBQW9CLENBQUM7Z0JBQzVDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUd6QixVQUFrQixDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQztnQkFHeEMsSUFBTSxjQUFjLEdBQXVCLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDO2dCQVUzRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksUUFB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

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsT0FBTyxHQUNSLE1BQU0sWUFBWSxDQUFDO0FBRXBCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFbkMsT0FBTyxFQUNMLFVBQVUsRUFDVixjQUFjLEVBQ2QsY0FBYyxFQUNkLGdCQUFnQixFQUNoQixpQkFBaUIsRUFDakIsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixlQUFlLEVBQ2YsZUFBZSxHQUNoQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQ0wsV0FBVyxFQUNYLGVBQWUsR0FDaEIsTUFBTSxnQkFBZ0IsQ0FBQyJ9

var ModelParam = (function () {
    function ModelParam(name, type) {
        if (type === void 0) { type = null; }
        this._name = name;
        this._type = type;
    }
    ModelParam.prototype.getName = function () {
        return this._name;
    };
    ModelParam.prototype.getType = function () {
        return this._type;
    };
    return ModelParam;
}());
var Model = (function () {
    function Model(eventManager, id) {
        if (id === void 0) { id = Random.generateId(); }
        this._id = id;
        this._parentModel = null;
        this._childModels = [];
        this._directives = [];
        this._appModel = null;
        this._modelScope = new ModelScope(this);
        this._state = Value.Absent;
        this._flags = 0;
        this._eventManager = eventManager;
    }
    Object.defineProperty(Model.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "parentModel", {
        get: function () {
            return this._parentModel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "childModels", {
        get: function () {
            return this._childModels;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "appModel", {
        get: function () {
            var appModel = this._appModel;
            if (appModel === null) {
                var model = this;
                while (model) {
                    if (model instanceof Model.AppModel) {
                        this._appModel = appModel = model;
                        break;
                    }
                    model = model._parentModel;
                }
            }
            return appModel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "directives", {
        get: function () {
            return this._directives;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "modelScope", {
        get: function () {
            return this._modelScope;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "parentScope", {
        get: function () {
            var parentModel = this._parentModel;
            return parentModel ? parentModel._modelScope : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "downlinkContext", {
        get: function () {
            var model = this;
            while (model) {
                if (model._downlinkContext) {
                    return model._downlinkContext;
                }
                model = model._parentModel;
            }
            return client;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "params", {
        get: function () {
            return this.constructor.Params;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "state", {
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    Model.prototype.setState = function (newState) {
        newState = Value.fromAny(newState);
        var oldState = this._state;
        newState = this.willSetState(newState, oldState);
        if (!oldState.equals(newState)) {
            this._state = newState.commit();
            this.didSetState(newState, oldState);
        }
    };
    Model.prototype.willSetState = function (newState, oldState) {
        return newState;
    };
    Model.prototype.didSetState = function (newState, oldState) {
    };
    Model.prototype.setParentModel = function (parentModel) {
        var oldParentModel = this._parentModel;
        if (parentModel) {
            if (oldParentModel) {
                throw new Error();
            }
            this._parentModel = parentModel;
            this.requireRestate();
            this.didSetParentModel(parentModel);
        }
        else if (oldParentModel) {
            this._flags = 0;
            this._appModel = null;
            this._parentModel = null;
            this.didSetParentModel(null);
        }
    };
    Model.prototype.didSetParentModel = function (parentModel) {
    };
    Model.prototype.setAppModel = function (appModel) {
        this._appModel = appModel;
        if (appModel === null) {
            this._modelScope.close();
        }
        this.didSetAppModel(appModel);
    };
    Model.prototype.didSetAppModel = function (appModel) {
    };
    Model.prototype.appendChildModel = function (childModel) {
        if (!childModel) {
            throw new TypeError('' + childModel);
        }
        else if (this._childModels.indexOf(childModel) >= 0) {
            throw new Error('duplicate child');
        }
        else if (childModel._parentModel) {
            throw new Error('duplicate parent');
        }
        this._childModels.push(childModel);
        childModel.setParentModel(this);
        this.didInsertChildModel(childModel);
    };
    Model.prototype.prependChildModel = function (childModel) {
        if (!childModel) {
            throw new TypeError('' + childModel);
        }
        else if (this._childModels.indexOf(childModel) >= 0) {
            throw new Error('duplicate child');
        }
        else if (childModel._parentModel) {
            throw new Error('duplicate parent');
        }
        this._childModels.unshift(childModel);
        childModel.setParentModel(this);
        this.didInsertChildModel(childModel);
    };
    Model.prototype.insertChildModel = function (childModel, targetModel) {
        if (!childModel) {
            throw new TypeError('' + childModel);
        }
        else if (this._childModels.indexOf(childModel) >= 0) {
            throw new Error('duplicate child');
        }
        else if (childModel._parentModel) {
            throw new Error('duplicate parent');
        }
        var i = targetModel ? this._childModels.indexOf(targetModel) : -1;
        if (i < 0) {
            i = this._childModels.length;
        }
        this._childModels.splice(i, 0, childModel);
        childModel.setParentModel(this);
        this.didInsertChildModel(childModel);
    };
    Model.prototype.removeChildModel = function (childModel) {
        if (!childModel) {
            throw new TypeError('' + childModel);
        }
        var i = this._childModels.indexOf(childModel);
        if (i >= 0) {
            childModel.setParentModel(null);
            this._childModels.splice(i, 1);
            this.didRemoveChildModel(childModel);
        }
    };
    Model.prototype.didInsertChildModel = function (childModel) {
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].didInsertChildModel(childModel);
        }
        if ((childModel._flags & Model.REQUEST_RESTATE) !== 0) {
            this.requestRestate();
        }
    };
    Model.prototype.didRemoveChildModel = function (childModel) {
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].didRemoveChildModel(childModel);
        }
    };
    Model.prototype.addDirective = function (directive) {
        if (!directive) {
            throw new TypeError('' + directive);
        }
        else if (this._directives.indexOf(directive) >= 0) {
            throw new Error('duplicate directive');
        }
        else if (directive._model) {
            throw new Error('duplicate model');
        }
        this._directives.push(directive);
        directive.setModel(this);
        this.didAddDirective(directive);
    };
    Model.prototype.removeDirective = function (directive) {
        if (!directive) {
            throw new TypeError('' + directive);
        }
        var i = this._directives.indexOf(directive);
        if (i >= 0) {
            directive.setModel(null);
            this._directives.splice(i, 1);
            this.didRemoveDirective(directive);
        }
    };
    Model.prototype.didAddDirective = function (directive) {
    };
    Model.prototype.didRemoveDirective = function (directive) {
    };
    Model.prototype.isSealed = function (sealed) {
        if (sealed === undefined) {
            return (this._flags & Model.SEALED) !== 0;
        }
        else {
            if (sealed) {
                this._flags |= Model.SEALED;
            }
            else {
                this._flags &= ~Model.SEALED;
            }
            return this;
        }
    };
    Model.prototype.willRemodel = function (state, stack) {
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].willRemodel(state, stack);
        }
    };
    Model.prototype.didRemodel = function (state, stack) {
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].didRemodel(state, stack);
        }
    };
    Model.prototype.remodel = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var params = this.params;
        var state = Record.empty(params.length);
        this.willRemodel(state, stack);
        this.setState(state);
        this.didRemodel(state, stack);
    };
    Model.prototype.willRestate = function () {
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].willRestate();
        }
    };
    Model.prototype.didRestate = function () {
        this._modelScope.materializeScope();
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].didRestate();
        }
        this.remodel();
    };
    Model.prototype.requestRestate = function () {
        if ((this._flags & Model.REQUEST_RESTATE) === 0) {
            this._flags |= Model.REQUEST_RESTATE;
            if (this._parentModel) {
                this._parentModel.requestRestate();
            }
        }
    };
    Model.prototype.requireRestate = function (source) {
        if (source === void 0) { source = this; }
        if ((this._flags & Model.REQUIRE_RESTATE) === 0) {
            this._flags |= Model.REQUIRE_RESTATE;
            this.requestRestate();
            if (source === this || (this._flags & Model.SEALED) === 0) {
                var childModels = this._childModels;
                for (var i = 0, n = childModels.length; i < n; i += 1) {
                    childModels[i].requireRestate(source);
                }
            }
        }
    };
    Model.prototype.cascadeWillRestate = function () {
        if ((this._flags & Model.REQUEST_RESTATE) !== 0) {
            if ((this._flags & Model.REQUIRE_RESTATE) !== 0) {
                this.willRestate();
            }
            var childModels = this._childModels;
            for (var i = 0, n = childModels.length; i < n; i += 1) {
                childModels[i].cascadeWillRestate();
            }
        }
    };
    Model.prototype.cascadeDidRestate = function () {
        if ((this._flags & Model.REQUEST_RESTATE) !== 0) {
            this._flags &= ~Model.REQUEST_RESTATE;
            var childModels = this._childModels;
            for (var i = 0, n = childModels.length; i < n; i += 1) {
                childModels[i].cascadeDidRestate();
            }
            if ((this._flags & Model.REQUIRE_RESTATE) !== 0) {
                this._flags &= ~Model.REQUIRE_RESTATE;
                this.didRestate();
            }
        }
    };
    Model.prototype.importDownlink = function (linkValues, stack) {
        if (stack === void 0) { stack = this.stack(); }
        return this._modelScope.importDownlink(linkValues, stack);
    };
    Model.prototype.getData = function () {
        return this._modelScope._record;
    };
    Model.prototype.setData = function (data) {
        if (typeof data === 'string') {
            data = Record.parseRecon(data);
        }
        else if (!(data instanceof Record)) {
            data = Record.of(data);
        }
        this._modelScope._record = data;
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].setData(data);
        }
        this.requireRestate();
    };
    Model.prototype.initDownlink = function (init, stack) {
        if (stack === void 0) { stack = this.stack(); }
        if (!init || init.hostUri === undefined) {
            init = init || {};
            init.hostUri = MODEL_HOST_SELECTOR.evaluate(stack).cast(Form.Uri);
        }
        if (!init || init.nodeUri === undefined) {
            init = init || {};
            init.nodeUri = MODEL_NODE_SELECTOR.evaluate(stack).cast(Form.Uri);
        }
        if (!init || init.laneUri === undefined) {
            init = init || {};
            init.laneUri = MODEL_LANE_SELECTOR.evaluate(stack).cast(Form.Uri);
        }
        if (!init || init.prio === undefined) {
            init = init || {};
            init.prio = MODEL_PRIO_SELECTOR.evaluate(stack).numberValue();
        }
        if (!init || init.rate === undefined) {
            init = init || {};
            init.rate = MODEL_RATE_SELECTOR.evaluate(stack).numberValue();
        }
        return init;
    };
    Model.prototype.stack = function () {
        return EvalStack.of(Model.GlobalScope, this._modelScope);
    };
    Model.Params = [];
    Model.GlobalScope = UiFunc.GlobalScope;
    Model.REQUEST_RESTATE = 1 << 0;
    Model.REQUIRE_RESTATE = 1 << 1;
    Model.SEALED = 1 << 8;
    Model.AppModel = undefined;
    return Model;
}());
var ModelScope = (function (_super) {
    __extends(ModelScope, _super);
    function ModelScope(model) {
        var _this = _super.call(this) || this;
        _this._model = model;
        return _this;
    }
    Object.defineProperty(ModelScope.prototype, "parentScope", {
        get: function () {
            return this._model.parentScope;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelScope.prototype, "downlinkContext", {
        get: function () {
            return this._model.downlinkContext;
        },
        enumerable: true,
        configurable: true
    });
    ModelScope.prototype.initDownlink = function (init, stack) {
        return this._model.initDownlink(init, stack);
    };
    ModelScope.prototype.materializeMutableScope = function (value, stack) {
        var scope = new MutableScope(this._model);
        value.header('mutable').forEach(function (item) {
            if (item instanceof Selector) {
                scope._dependents.push(item);
            }
        }, this);
        scope._record = value.tail();
        return scope;
    };
    ModelScope.prototype.materializeValue = function (value, stack) {
        if (value.tag === 'mutable') {
            var scope = this.materializeMutableScope(value, stack);
            if (scope instanceof MutableScope) {
                return scope;
            }
        }
        return _super.prototype.materializeValue.call(this, value, stack);
    };
    ModelScope.prototype.didChange = function (newItem, oldItem, index, downlinkScope) {
        if (downlinkScope) {
            var hostUri = downlinkScope.hostUri();
            var nodeUri = downlinkScope.nodeUri();
            var laneUri = downlinkScope.laneUri();
            this._model._eventManager.triggerEvent(AppEventTypes.didChange, "" + hostUri + nodeUri + "/" + laneUri, newItem);
        }
        this._model.requireRestate();
    };
    ModelScope.prototype.stack = function () {
        return EvalStack.of(Model.GlobalScope, this);
    };
    return ModelScope;
}(DownlinkScope));
var RouteScope = (function (_super) {
    __extends(RouteScope, _super);
    function RouteScope(model) {
        var _this = _super.call(this) || this;
        _this._model = model;
        return _this;
    }
    Object.defineProperty(RouteScope.prototype, "parentScope", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    RouteScope.prototype.didChange = function (newItem, oldItem, index) {
        console.info('model.routescope.didchange');
        this._model.requireRestate();
    };
    RouteScope.prototype.stack = function () {
        return EvalStack.of(Model.GlobalScope, this);
    };
    return RouteScope;
}(RecordScope));
var MutableScope = (function (_super) {
    __extends(MutableScope, _super);
    function MutableScope(model) {
        var _this = _super.call(this) || this;
        _this._model = model;
        _this._dependents = Record.empty();
        return _this;
    }
    Object.defineProperty(MutableScope.prototype, "parentScope", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    MutableScope.prototype.didChange = function (newItem, oldItem, index) {
        this._model.requireRestate();
    };
    MutableScope.prototype.stack = function () {
        return EvalStack.of(Model.GlobalScope, this);
    };
    return MutableScope;
}(RecordScope));
var MODEL_HOST_SELECTOR = Selector.get('host');
var MODEL_NODE_SELECTOR = Selector.get('node');
var MODEL_LANE_SELECTOR = Selector.get('lane');
var MODEL_PRIO_SELECTOR = Selector.get('prio');
var MODEL_RATE_SELECTOR = Selector.get('rate');
//# sourceMappingURL=data:application/json;base64,

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQyJ9

var AppModel = (function (_super) {
    __extends(AppModel, _super);
    function AppModel(eventManager) {
        return _super.call(this, eventManager, 'app') || this;
    }
    return AppModel;
}(Model));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsS0FBSyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBR2xDO0lBQThCLG9DQUFLO0lBRWpDLGtCQUFZLFlBQTZCO2VBQ3ZDLGtCQUFNLFlBQVksRUFBRSxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVILGVBQUM7QUFBRCxDQUFDLEFBTkQsQ0FBOEIsS0FBSyxHQU1sQyJ9

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRTVCLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV2QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUMifQ==

var EachComponent = (function (_super) {
    __extends(EachComponent, _super);
    function EachComponent() {
        var _this = _super.call(this) || this;
        _this._tag = "each2";
        return _this;
    }
    Object.defineProperty(EachComponent.prototype, "tag", {
        get: function () {
            return this._tag;
        },
        enumerable: true,
        configurable: true
    });
    EachComponent.prototype.create = function (rootElement, componentInfo, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, componentInfo, stack, eventManager, id);
        if (!eventManager) {
            console.error('EachComponent.create - event manager not defined');
        }
        if (!this.parentView()) {
            console.error('EachComponent.create needs a parent node or view', this.parentView());
        }
        console.info('EachComponent.create', this._tag, this.id(), this._rootElement, componentInfo);
        this.controller(new EachController(this.id(), componentInfo, this, this.parentView(), this.stack(), eventManager));
        this.model(new EachModel(eventManager));
        this.model().setData(componentInfo);
        this.view(this.parentView());
        this.controller().create();
        console.info('EachComponent.created', this._tag, this.id(), this._rootElement, this.parentView(), this.view());
        return this;
    };
    EachComponent.prototype.start = function () {
        console.info('EachComponent.start', this._tag);
        _super.prototype.start.call(this);
        console.info('EachComponent.started');
    };
    return EachComponent;
}(UiComponent));
UiComponent.Global.addComponent('each2', EachComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVhY2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFcEMsT0FBTyxFQUFtQixjQUFjLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXRFO0lBQW1DLHlDQUFXO0lBUTFDO1FBQUEsWUFDSSxpQkFBTyxTQUNWO1FBUk8sVUFBSSxHQUFXLE9BQU8sQ0FBQzs7SUFRL0IsQ0FBQztJQU5ELHNCQUFJLDhCQUFHO2FBQVA7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQzs7O09BQUE7SUFNRCw4QkFBTSxHQUFOLFVBQU8sV0FBa0MsRUFBRSxhQUFvQixFQUFFLEtBQWdCLEVBQUUsWUFBNkIsRUFBRSxFQUFXO1FBQ3pILGlCQUFNLE1BQU0sWUFBQyxXQUFXLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDbEUsSUFBRyxDQUFDLFlBQVksRUFBRTtZQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztTQUNyRTtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxrREFBa0QsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUN4RjtRQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUc3RixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUduSCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVwQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRTdCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQy9HLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCw2QkFBSyxHQUFMO1FBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsaUJBQU0sS0FBSyxXQUFFLENBQUM7UUFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVMLG9CQUFDO0FBQUQsQ0FBQyxBQTFDRCxDQUFtQyxXQUFXLEdBMEM3Qzs7QUFFRCxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUcsYUFBYSxDQUFDLENBQUMifQ==

var EachModel = (function (_super) {
    __extends(EachModel, _super);
    function EachModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EachModel.EachParams = Model.Params.concat([
        new ModelParam('maxRows', Length.Form),
    ]);
    return EachModel;
}(Model));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFjaE1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWFjaE1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdEQ7SUFBK0IscUNBQUs7SUFBcEM7O0lBS0EsQ0FBQztJQUhtQixvQkFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzdDLElBQUksVUFBVSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDO0tBQ3pDLENBQUMsQ0FBQztJQUNQLGdCQUFDO0NBQUEsQUFMRCxDQUErQixLQUFLLEdBS25DO1NBTFksU0FBUyJ9

var EachController = (function (_super) {
    __extends(EachController, _super);
    function EachController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        _this._dataSet = null;
        _this._maxRows = null;
        _this._reverseOrder = false;
        _this._bindings = null;
        _this._template = Record.empty();
        return _this;
    }
    EachController.prototype.create = function () {
        var _this = this;
        _super.prototype.create.call(this);
        this._componentInfo.forEach(function (item) {
            if (item instanceof Attr$1 && item.key.value === _this._mainComponent.tag) {
                if (item.value instanceof GetSelector) {
                    _this._bindings = item.value;
                }
            }
            else if (item.key instanceof Text$1) {
            }
            else if (item instanceof RecordMap) {
                _this._template.push(item);
            }
            console.info('each item', item);
        });
        for (var _i = 0, _a = EachModel.EachParams; _i < _a.length; _i++) {
            var param = _a[_i];
            var name_1 = param.getName();
            var type = param.getType();
            var newStateValue = this.getStateValue(name_1, type, this._componentInfo);
            if (newStateValue) {
                if (name_1 === "maxRows") {
                    this._maxRows = newStateValue.value;
                }
            }
        }
    };
    EachController.prototype.start = function () {
        _super.prototype.start.call(this);
        if (this._parentView && this._view) {
            this._childComponents.forEach(function (child) {
                child.start();
            });
        }
    };
    EachController.prototype.render = function (frameNumber) {
        var _this = this;
        _super.prototype.render.call(this, frameNumber);
        var componentCount = 0;
        var dataRowCount = 0;
        if (this._dataSet !== null) {
            this._dataSet.forEach(function (value) {
                if (_this._maxRows !== null && dataRowCount >= _this._maxRows) {
                    return;
                }
                for (var i = 0; i < _this._template.length; i++) {
                    var currRow = _this._childComponents[componentCount];
                    if (!currRow && _this.view() !== null) {
                        currRow = Utils.cast(_this._mainComponent, _this._template.getItem(i), _this._stack, _this.eventManager());
                        if (currRow) {
                            _this._childComponents.push(currRow);
                            if (_this._componentInfo.get('wedgeStyle') instanceof RecordMap) {
                                currRow.controller().setViewAttributes(_this._componentInfo.get('wedgeStyle'));
                            }
                            if (_this._componentInfo.get('events')._array) {
                                currRow.view().eventsList(_this._componentInfo.get('events')._array);
                            }
                            currRow.start();
                        }
                    }
                    componentCount++;
                }
                dataRowCount++;
            });
        }
        this._childComponents.forEach(function (child) {
            child.render(frameNumber);
        });
    };
    EachController.prototype.onLinkData = function (linkData, eventUID) {
        _super.prototype.onLinkData.call(this, linkData, eventUID);
        var parentDownlinkMap = this._mainComponent.parentComponent().controller().downlinksMap();
        var dataSelector = this._bindings._key.toString();
        this._dataSet = parentDownlinkMap[dataSelector]._model._state;
        var rowCount = 0;
        var componentCount = 0;
        if (this._dataSet) {
            var setKeys = this._dataSet.keys();
            if (this._reverseOrder === true) {
                setKeys = this._dataSet.reverseKeys();
            }
            while ((this._reverseOrder) ? setKeys.hasPrevious() : setKeys.hasNext()) {
                var value = ((this._reverseOrder) ? setKeys.previous() : setKeys.next());
                if (this._maxRows !== null && rowCount >= this._maxRows) {
                    return;
                }
                var currState = new RecordMap([], [], 0, 0, 0);
                var rowValue = this._dataSet.get(value.value);
                currState.push(new Slot(Item.Text.valueOf('events'), linkData.get('events')));
                currState.push(new Slot(Item.Text.valueOf('maxRows'), this._componentInfo.get('maxRows')));
                for (var i = 0; i < this._template.length; i++) {
                    currState.push(new Slot(Value.parseRecon('key'), value.value));
                    currState.push(new Slot(Value.parseRecon('rowNumber'), Value.parseRecon("" + rowCount)));
                    currState.push(new Slot(Value.parseRecon(dataSelector), rowValue));
                    var currRow = this._childComponents[componentCount];
                    if (currRow) {
                        var rowParams = currRow.model().params;
                        for (var x = 0; x < rowParams.length; x++) {
                        }
                        currRow.controller().onLinkData(currState, eventUID);
                    }
                    componentCount++;
                }
                rowCount++;
            }
        }
    };
    return EachController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFjaENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlYWNoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBc0MsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUM1RixPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBYSxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUd2RztJQUFvQywwQ0FBVTtJQVExQyx3QkFBWSxFQUFVLEVBQUUsYUFBb0IsRUFBRSxrQkFBK0IsRUFBRSxVQUFnQixFQUFFLEtBQWdCLEVBQUUsWUFBNkI7UUFBaEosWUFDSSxrQkFBTSxFQUFFLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLFNBS2hGO1FBVlMsY0FBUSxHQUFlLElBQUksQ0FBQztRQUM1QixjQUFRLEdBQWtCLElBQUksQ0FBQztRQUMvQixtQkFBYSxHQUFZLEtBQUssQ0FBQztRQUlyQyxLQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixLQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7SUFHcEMsQ0FBQztJQUVELCtCQUFNLEdBQU47UUFBQSxpQkE4QkM7UUE3QkcsaUJBQU0sTUFBTSxXQUFFLENBQUM7UUFDZixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQVM7WUFDbEMsSUFBSSxJQUFJLFlBQVksSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLEtBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFO2dCQUNwRSxJQUFJLElBQUksQ0FBQyxLQUFLLFlBQVksV0FBVyxFQUFFO29CQUNuQyxLQUFJLENBQUMsU0FBUyxHQUFHLElB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

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsYUFBYSxHQUNkLE1BQU0sUUFBUSxDQUFDO0FBRWhCLE9BQU8sRUFDTCxTQUFTLEdBQ1YsTUFBTSxhQUFhLENBQUM7QUFFckIsT0FBTyxFQUNMLGNBQWMsR0FDZixNQUFNLGtCQUFrQixDQUFDIn0=

function toAttributeString(value) {
    if (value && typeof value === 'object' && typeof value.toAttributeString === 'function') {
        return value.toAttributeString();
    }
    else {
        return '' + value;
    }
}
function toStyleString(value) {
    if (value && typeof value === 'object' && typeof value.toStyleString === 'function') {
        return value.toStyleString();
    }
    else {
        return '' + value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdHlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXQSxNQUFNLFVBQVUsaUJBQWlCLENBQUMsS0FBVTtJQUMxQyxJQUFJLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksT0FBUSxLQUEyQixDQUFDLGlCQUFpQixLQUFLLFVBQVUsRUFBRTtRQUM5RyxPQUFRLEtBQTJCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztLQUN6RDtTQUFNO1FBQ0wsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDO0tBQ25CO0FBQ0gsQ0FBQztBQU1ELE1BQU0sVUFBVSxhQUFhLENBQUMsS0FBVTtJQUN0QyxJQUFJLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksT0FBUSxLQUF1QixDQUFDLGFBQWEsS0FBSyxVQUFVLEVBQUU7UUFDdEcsT0FBUSxLQUF1QixDQUFDLGFBQWEsRUFBRSxDQUFDO0tBQ2pEO1NBQU07UUFDTCxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUM7S0FDbkI7QUFDSCxDQUFDIn0=

var TweenState;
(function (TweenState) {
    TweenState[TweenState["Quiesced"] = 0] = "Quiesced";
    TweenState[TweenState["Diverged"] = 1] = "Diverged";
    TweenState[TweenState["Tracking"] = 2] = "Tracking";
    TweenState[TweenState["Converged"] = 3] = "Converged";
    TweenState[TweenState["Interrupt"] = 4] = "Interrupt";
})(TweenState || (TweenState = {}));
var Animator = (function () {
    function Animator() {
    }
    Animator.DISABLED = 1 << 0;
    Animator.REQUIRES_RESIZE = 1 << 4;
    return Animator;
}());
var FrameAnimator = (function (_super) {
    __extends(FrameAnimator, _super);
    function FrameAnimator() {
        var _this = _super.call(this) || this;
        _this.flags = 0;
        _this.animationFrame = 0;
        _this.onAnimationFrame = _this.onAnimationFrame.bind(_this);
        return _this;
    }
    FrameAnimator.prototype.enabled = function (enabled) {
        if (enabled === undefined) {
            return (this.flags & Animator.DISABLED) === 0;
        }
        else {
            if (enabled && (this.flags & Animator.DISABLED) !== 0) {
                this.flags &= ~Animator.DISABLED;
                this.animate();
            }
            else if (!enabled && (this.flags & Animator.DISABLED) === 0) {
                this.flags |= Animator.DISABLED;
            }
            return this;
        }
    };
    FrameAnimator.prototype.animate = function () {
        if (!this.animationFrame && (this.flags & Animator.DISABLED) === 0) {
            this.animationFrame = requestAnimationFrame(this.onAnimationFrame);
        }
    };
    FrameAnimator.prototype.cancel = function () {
        if (this.animationFrame) {
            cancelAnimationFrame(this.animationFrame);
            this.animationFrame = 0;
        }
    };
    FrameAnimator.prototype.onAnimationFrame = function (timestamp) {
        this.animationFrame = 0;
        this.onFrame(timestamp);
    };
    return FrameAnimator;
}(Animator));
var ChildAnimator = (function (_super) {
    __extends(ChildAnimator, _super);
    function ChildAnimator(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        return _this;
    }
    ChildAnimator.prototype.animate = function () {
        this.parent.animate();
    };
    return ChildAnimator;
}(Animator));
var TweenAnimator = (function (_super) {
    __extends(TweenAnimator, _super);
    function TweenAnimator(value, transition, flags) {
        if (flags === void 0) { flags = 0; }
        var _this = _super.call(this) || this;
        if (!transition.f) {
            throw new Error('no interpolator');
        }
        _this.dt = transition.dt !== undefined ? transition.dt : 0;
        _this.ft = transition.ft || Ease.linear;
        _this.f = transition.f;
        _this.f0 = transition.f0;
        _this.f1 = transition.f1;
        _this.fi = transition.fi;
        _this.fl = undefined;
        _this.v = value;
        _this.v1 = value;
        _this.t0 = 0;
        _this.flags = flags;
        _this.tweenState = 0;
        return _this;
    }
    TweenAnimator.prototype.enabled = function (enabled) {
        if (enabled === undefined) {
            return (this.flags & Animator.DISABLED) === 0;
        }
        else {
            if (enabled && (this.flags & Animator.DISABLED) !== 0) {
                this.flags &= ~Animator.DISABLED;
                this.animate();
            }
            else if (!enabled && (this.flags & Animator.DISABLED) === 0) {
                this.flags |= Animator.DISABLED;
            }
            return this;
        }
    };
    TweenAnimator.prototype.transition = function (transition) {
        if (!transition) {
            return new Transition(this.dt, this.ft, this.f);
        }
        else {
            if (transition.dt !== undefined) {
                this.dt = transition.dt;
            }
            if (transition.ft) {
                this.ft = transition.ft;
            }
            if (transition.f) {
                this.f = transition.f;
            }
            if (transition.f0 !== undefined) {
                this.f0 = transition.f0;
            }
            if (transition.f1 !== undefined) {
                this.f1 = transition.f1;
            }
            if (transition.fi !== undefined) {
                this.fi = transition.fi;
            }
            return this;
        }
    };
    TweenAnimator.prototype.duration = function (dt) {
        if (dt === undefined) {
            return this.dt;
        }
        else {
            this.dt = Math.max(0, dt);
            return this;
        }
    };
    TweenAnimator.prototype.ease = function (ft) {
        if (!ft) {
            return this.ft;
        }
        else {
            this.ft = Ease.fromAny(ft);
            return this;
        }
    };
    TweenAnimator.prototype.get = function () {
        return this.v;
    };
    TweenAnimator.prototype.set = function (value, transition) {
        var fl = this.fi;
        this.fi = undefined;
        if (transition) {
            this.transition(transition);
        }
        this.f = this.f.range(this.v, value);
        this.fl = fl;
        this.v1 = value;
        this.t0 = 0;
        if (this.tweenState === 2) {
            this.tweenState = 4;
        }
        else {
            this.tweenState = 1;
        }
        if (transition) {
            this.animate();
        }
        else {
            this.onFrame(0);
        }
    };
    TweenAnimator.prototype.onFrame = function (t) {
        if (this.tweenState === 0 || (this.flags & Animator.DISABLED) !== 0) {
            return;
        }
        if (this.tweenState === 4) {
            this.onInterrupt(this.v);
            if (this.fl) {
                this.fl(this.v);
                this.fl = undefined;
            }
            this.tweenState = 1;
        }
        if (this.tweenState === 1) {
            if (!equal(this.v, this.v1)) {
                this.t0 = t;
                this.onStart(this.v);
                if (this.f0) {
                    this.f0(this.v);
                    this.f0 = undefined;
                }
                this.tweenState = 2;
            }
            else {
                this.tween(1);
            }
        }
        if (this.tweenState === 2) {
            var u = this.dt ? Math.min(Math.max(0, (t - this.t0) / this.dt), 1) : 1;
            this.tween(u);
        }
        if (this.tweenState === 3) {
            this.onEnd(this.v);
            if (this.f1) {
                this.f1(this.v);
                this.f1 = undefined;
            }
            this.fi = undefined;
            this.t0 = 0;
            this.tweenState = 0;
        }
        else {
            this.animate();
        }
    };
    TweenAnimator.prototype.map = function (u) {
        return this.f.map(u);
    };
    TweenAnimator.prototype.tween = function (u) {
        u = this.ft(u);
        this.v = this.map(u);
        this.update(this.v);
        if (u === 1) {
            this.tweenState = 3;
        }
    };
    TweenAnimator.prototype.updateTarget = function (target) {
        var view = target.view;
        if (view) {
            if ((this.flags & Animator.REQUIRES_RESIZE) !== 0) {
                view.requireResize();
            }
        }
    };
    TweenAnimator.prototype.onStart = function (value) {
    };
    TweenAnimator.prototype.onEnd = function (value) {
    };
    TweenAnimator.prototype.onInterrupt = function (value) {
    };
    return TweenAnimator;
}(Animator));
var ChildFrameAnimator = (function (_super) {
    __extends(ChildFrameAnimator, _super);
    function ChildFrameAnimator(parent, value, transition, flags) {
        var _this = _super.call(this, value, transition, flags) || this;
        _this.parent = parent;
        return _this;
    }
    ChildFrameAnimator.prototype.animate = function () {
        if ((this.flags & Animator.DISABLED) === 0) {
            this.parent.animate();
        }
    };
    return ChildFrameAnimator;
}(TweenAnimator));
var TweenFrameAnimator = (function (_super) {
    __extends(TweenFrameAnimator, _super);
    function TweenFrameAnimator(value, transition, flags) {
        var _this = _super.call(this, value, transition, flags) || this;
        _this.animationFrame = 0;
        _this.onAnimationFrame = _this.onAnimationFrame.bind(_this);
        return _this;
    }
    TweenFrameAnimator.prototype.animate = function () {
        if (!this.animationFrame && (this.flags & Animator.DISABLED) === 0) {
            this.animationFrame = requestAnimationFrame(this.onAnimationFrame);
        }
    };
    TweenFrameAnimator.prototype.cancel = function () {
        if (this.animationFrame) {
            cancelAnimationFrame(this.animationFrame);
            this.animationFrame = 0;
        }
    };
    TweenFrameAnimator.prototype.onAnimationFrame = function (timestamp) {
        this.animationFrame = 0;
        this.onFrame(timestamp);
    };
    return TweenFrameAnimator;
}(TweenAnimator));
var AttributeAnimator = (function (_super) {
    __extends(AttributeAnimator, _super);
    function AttributeAnimator(target, name, value, transition, flags) {
        var _this = _super.call(this, value, transition, flags) || this;
        _this.target = target;
        _this.name = name;
        return _this;
    }
    AttributeAnimator.prototype.update = function (value) {
        var oldValue = this.target.getAttribute(this.name);
        var newValue = toAttributeString(value);
        if (oldValue !== newValue) {
            this.target.setAttribute(this.name, newValue);
            this.updateTarget(this.target);
        }
    };
    AttributeAnimator.prototype.animate = function () {
        _super.prototype.animate.call(this);
    };
    return AttributeAnimator;
}(TweenFrameAnimator));
var StyleAnimator = (function (_super) {
    __extends(StyleAnimator, _super);
    function StyleAnimator(target, name, value, transition, priority, flags) {
        var _this = _super.call(this, value, transition, flags) || this;
        _this.target = target;
        _this.name = name;
        _this.priority = priority;
        return _this;
    }
    StyleAnimator.prototype.update = function (value) {
        var oldValue = this.target.style.getPropertyValue(this.name);
        var newValue = toStyleString(value);
        if (oldValue !== newValue) {
            this.target.style.setProperty(this.name, newValue, this.priority);
            this.updateTarget(this.target);
        }
    };
    StyleAnimator.prototype.animate = function () {
        _super.prototype.animate.call(this);
    };
    return StyleAnimator;
}(TweenFrameAnimator));
var TextAnimator = (function (_super) {
    __extends(TextAnimator, _super);
    function TextAnimator(target, value, transition, format, flags) {
        var _this = _super.call(this, value, transition, flags) || this;
        _this.target = target;
        _this.format = format;
        return _this;
    }
    TextAnimator.prototype.update = function (value) {
        var text;
        var format = this.format;
        if (typeof format === 'object') {
            format = format.format;
        }
        if (typeof format === 'function') {
            text = format(value);
        }
        else if (value instanceof Item) {
            var stack = (this.target.view) ? this.target.view.stack() : EvalStack.of(Item.GlobalScope);
            text = value.evaluate(stack).stringValue('');
        }
        else {
            text = '' + value;
        }
        if (this.target instanceof Text) {
            this.target.nodeValue = text;
        }
        else if (this.target instanceof HTMLElement) {
            this.target.innerText = text;
        }
        else {
            this.target.textContent = text;
        }
    };
    TextAnimator.prototype.animate = function () {
        _super.prototype.animate.call(this);
    };
    return TextAnimator;
}(TweenFrameAnimator));
var ComponentAnimator = (function (_super) {
    __extends(ComponentAnimator, _super);
    function ComponentAnimator(view) {
        var _this = _super.call(this) || this;
        _this._view = view;
        return _this;
    }
    ComponentAnimator.prototype.onFrame = function (t) {
        for (var key in this) {
            if (this[key] instanceof ChildFrameAnimator) {
                this[key].onFrame(t);
            }
        }
    };
    ComponentAnimator.prototype.update = function (frameNumber) {
        if (this._view) {
        }
    };
    return ComponentAnimator;
}(FrameAnimator));

//# sourceMappingURL=data:application/json;base64,

var View = (function () {
    function View(id, parentView) {
        if (id === void 0) { id = Random.generateId(); }
        this._hasStarted = false;
        this._id = id;
        this._parentView = parentView;
        this._childViews = [];
        this._model = Value.Absent;
        this._state = Value.Absent;
        this._flags = 0;
    }
    View.prototype.create = function () {
    };
    View.prototype.remove = function () {
    };
    View.prototype.start = function () {
    };
    View.prototype.stop = function () {
    };
    View.prototype.resize = function () {
    };
    View.prototype.render = function (frameNumber) {
    };
    View.prototype.propertyKey = function (accessor, key, value, trans) {
        var animator = accessor.animator(this, key);
        if (value === undefined) {
            if (animator) {
                return animator.get();
            }
            else {
                return accessor.get(this, key);
            }
        }
        else if (value === null) {
            accessor.set(this, null);
            return this;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = accessor.animator(this, key, value, trans);
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                accessor.set(this, key, value);
            }
            return this;
        }
    };
    View.prototype.propertyKeyNumber = function (accessor, key, value, trans) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.propertyKey(accessor, key, value, trans);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    View.prototype.propertyKeyColor = function (accessor, key, value, trans) {
        if (value !== undefined && value !== null) {
            value = Color.fromAny(value);
        }
        var result = this.propertyKey(accessor, key, value, trans);
        if (typeof result === 'string') {
            result = Color.fromAny(result);
        }
        return result;
    };
    View.prototype.property = function (accessor, value, trans) {
        var animator = accessor.animator(this);
        if (value === undefined) {
            if (animator) {
                return animator.get();
            }
            else {
                return accessor.get(this);
            }
        }
        else if (value === null) {
            accessor.set(this, null);
            return this;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = accessor.animator(this, value, trans);
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                accessor.set(this, value);
            }
            return this;
        }
    };
    View.prototype.propertyNumber = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    View.prototype.propertyColor = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = Color.fromAny(value);
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = Color.fromAny(result);
        }
        return result;
    };
    Object.defineProperty(View.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "parentView", {
        get: function () {
            return this._parentView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "childViews", {
        get: function () {
            return this._childViews;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "model", {
        get: function () {
            return this._model;
        },
        enumerable: true,
        configurable: true
    });
    View.prototype.getModel = function () {
        return this._model;
    };
    View.prototype.setModel = function (newModel) {
        newModel = Value.fromAny(newModel);
        var oldModel = this._model;
        if (!oldModel.equals(newModel)) {
            this._model = newModel.commit();
        }
    };
    Object.defineProperty(View.prototype, "state", {
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    View.prototype.setState = function (newState) {
        newState = Value.fromAny(newState);
        var oldState = this._state;
        if (!oldState.equals(newState)) {
            this._state = newState.commit();
            this.didSetState(newState, oldState);
        }
    };
    View.prototype.didSetState = function (newState, oldState) {
        newState.forEach(function (item) {
            if (item instanceof Slot && item.key instanceof Text$1) {
                this.didSetStateParam(item.key.value, item.value);
            }
        }, this);
    };
    View.prototype.didSetStateParam = function (key, value) {
    };
    View.prototype.setParentView = function (parentView) {
        var oldParentView = this._parentView;
        if (parentView) {
            if (oldParentView) {
                return;
            }
            this._parentView = parentView;
            this.requireResize();
        }
        else if (oldParentView) {
            oldParentView.requireResize();
            this._flags = 0;
            this._parentView = null;
        }
    };
    View.prototype.appendChildView = function (childView) {
        if (!childView) {
            throw new TypeError('' + childView);
        }
        this._childViews.push(childView);
        childView.setParentView(this);
        this.didInsertChildView(childView);
    };
    View.prototype.prependChildView = function (childView) {
        if (!childView) {
            throw new TypeError('' + childView);
        }
        else if (this._childViews.indexOf(childView) >= 0) {
            throw new Error('duplicate child');
        }
        else if (childView._parentView) {
            throw new Error('duplicate parent');
        }
        this._childViews.unshift(childView);
        childView.setParentView(this);
        this.didInsertChildView(childView);
    };
    View.prototype.insertChildView = function (childView, targetView) {
        if (!childView) {
            throw new TypeError('' + childView);
        }
        else if (this._childViews.indexOf(childView) >= 0) {
            throw new Error('duplicate child');
        }
        else if (childView._parentView) {
            throw new Error('duplicate parent');
        }
        var i = targetView ? this._childViews.indexOf(targetView) : -1;
        if (i < 0) {
            i = this._childViews.length;
        }
        this._childViews.splice(i, 0, childView);
        childView.setParentView(this);
        this.didInsertChildView(childView);
    };
    View.prototype.removeChildView = function (childView) {
        if (!childView) {
            throw new TypeError('' + childView);
        }
        var i = this._childViews.indexOf(childView);
        if (i >= 0) {
            childView.setParentView(null);
            this._childViews.splice(i, 1);
        }
    };
    View.prototype.removeAllChildViews = function () {
        while (this._childViews.length) {
            var childView = this._childViews[0];
            childView.setParentView(null);
            this._childViews.splice(0, 1);
        }
    };
    View.prototype.didInsertChildView = function (childView) {
        if ((childView._flags & View.REQUEST_RESIZE) !== 0) {
            this.requestResize();
            this._flags |= View.REQUEST_RESIZE;
        }
    };
    View.prototype.isViewable = function () {
        return true;
    };
    View.prototype.willResize = function () {
    };
    View.prototype.didResize = function () {
    };
    View.prototype.willReview = function (viewable) {
    };
    View.prototype.didReview = function (viewable) {
    };
    View.prototype.willRedraw = function () {
    };
    View.prototype.didRedraw = function () {
    };
    View.prototype.eventsList = function (eventList) {
        return this;
    };
    View.prototype.requestResize = function () {
        if ((this._flags & View.REQUEST_RESIZE) === 0) {
            this._flags |= View.REQUEST_RESIZE;
            if (this._parentView) {
                this._parentView.requestResize();
            }
        }
    };
    View.prototype.requireResize = function () {
        if ((this._flags & View.REQUIRE_RESIZE) === 0) {
            this._flags |= View.REQUIRE_RESIZE;
            this.requestResize();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].requireResize();
            }
        }
    };
    View.prototype.cascadeWillResize = function () {
        if ((this._flags & View.REQUEST_RESIZE) !== 0) {
            if ((this._flags & View.REQUIRE_RESIZE) !== 0) {
                this.willResize();
            }
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeWillResize();
            }
        }
    };
    View.prototype.cascadeDidResize = function () {
        if ((this._flags & View.REQUEST_RESIZE) !== 0) {
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeDidResize();
            }
            this._flags &= ~View.REQUEST_RESIZE;
            if ((this._flags & View.REQUIRE_RESIZE) !== 0) {
                this._flags &= ~View.REQUIRE_RESIZE;
                this.didResize();
            }
        }
    };
    View.prototype.requestReview = function () {
        if ((this._flags & View.REQUEST_REVIEW) === 0) {
            this._flags |= View.REQUEST_REVIEW;
            if (this._parentView) {
                this._parentView.requestReview();
            }
        }
    };
    View.prototype.requireReview = function () {
        if ((this._flags & View.REQUIRE_REVIEW) === 0) {
            this._flags |= View.REQUIRE_REVIEW;
            this.requestReview();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].requireReview();
            }
        }
    };
    View.prototype.cascadeWillReview = function () {
        if ((this._flags & View.REQUEST_REVIEW) !== 0) {
            if ((this._flags & View.REQUIRE_REVIEW) !== 0) {
                if ((this._flags & View.VIEWABLE) === 0) {
                    if (this.isViewable()) {
                        this.willReview(true);
                    }
                }
                else if ((this._flags & View.VIEWABLE) !== 0) {
                    if (!this.isViewable()) {
                        this.willReview(false);
                    }
                }
            }
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeWillReview();
            }
        }
    };
    View.prototype.cascadeDidReview = function () {
        if ((this._flags & View.REQUEST_REVIEW) !== 0) {
            this._flags &= ~View.REQUEST_REVIEW;
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeDidReview();
            }
            if ((this._flags & View.REQUIRE_REVIEW) !== 0) {
                this._flags &= ~View.REQUIRE_REVIEW;
                if ((this._flags & View.VIEWABLE) === 0) {
                    if (this.isViewable()) {
                        this._flags |= View.VIEWABLE;
                        this.didReview(true);
                    }
                }
                else if ((this._flags & View.VIEWABLE) !== 0) {
                    if (!this.isViewable()) {
                        this._flags &= ~View.VIEWABLE;
                        this.didReview(false);
                    }
                }
            }
        }
    };
    View.prototype.requestRedraw = function () {
        if ((this._flags & View.REQUEST_REDRAW) === 0) {
            this._flags |= View.REQUEST_REDRAW;
            if (this._parentView) {
                this._parentView.requestRedraw();
            }
        }
    };
    View.prototype.requireRedraw = function () {
        if ((this._flags & View.REQUIRE_REDRAW) === 0) {
            this._flags |= View.REQUIRE_REDRAW;
            this.requestRedraw();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].requireRedraw();
            }
        }
    };
    View.prototype.cascadeWillRedraw = function () {
        if ((this._flags & View.REQUEST_REDRAW) !== 0) {
            if ((this._flags & View.REQUIRE_REDRAW) !== 0) {
                this.willRedraw();
            }
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeWillRedraw();
            }
        }
    };
    View.prototype.cascadeDidRedraw = function () {
        if ((this._flags & View.REQUEST_REDRAW) !== 0) {
            this._flags &= ~View.REQUEST_REDRAW;
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeDidRedraw();
            }
            if ((this._flags & View.REQUIRE_REDRAW) !== 0) {
                this._flags &= ~View.REQUIRE_REDRAW;
                this.didRedraw();
            }
        }
    };
    View.prototype.stack = function () {
        return EvalStack.of(View.GlobalScope, this._model, this._state);
    };
    View.initTheme = function () {
        var theme = Record.empty();
        theme.slot('textColor', '#555c78');
        theme.slot('subtextColor', '#555c78');
        theme.slot('primaryColor', '#9b9eb1');
        var primaryColor = Selector.get('primaryColor');
        var primaryColorDarker = Selector.get('darker').invoke(Record.of(primaryColor, 0.2));
        var primaryColorBrighter = Selector.get('brighter').invoke(Record.of(primaryColor, 0.2));
        var primaryHue = Selector.get('interpolate').invoke(Record.of(primaryColorDarker, primaryColorBrighter));
        theme.slot('primaryHue', primaryHue);
        return theme;
    };
    View.GlobalScope = UiFunc.GlobalScope;
    View.Theme = View.initTheme();
    View.REQUEST_RESIZE = 1 << 0;
    View.REQUIRE_RESIZE = 1 << 1;
    View.REQUEST_REVIEW = 1 << 2;
    View.REQUIRE_REVIEW = 1 << 3;
    View.REQUEST_REDRAW = 1 << 4;
    View.REQUIRE_REDRAW = 1 << 5;
    View.VIEWABLE = 1 << 6;
    View.NodeView = undefined;
    View.ElemView = undefined;
    View.TextView = undefined;
    View.HtmlView = undefined;
    View.SvgView = undefined;
    return View;
}());

//# sourceMappingURL=data:application/json;base64,

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDIn0=

var NodeView = (function (_super) {
    __extends(NodeView, _super);
    function NodeView(node, id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this.node = node;
        return _this;
    }
    NodeView.create = function (node) {
        if (node instanceof NodeView) {
            return node;
        }
        else if (typeof node === 'string') {
            return new View.ElemView(document.createElement(node));
        }
        else if (node.view) {
            return node.view;
        }
        else if (node instanceof HTMLElement) {
            return new View.HtmlView(node);
        }
        else if (node instanceof SVGElement) {
            return new View.SvgView(node);
        }
        else if (node instanceof Element) {
            return new View.ElemView(node);
        }
        else if (node instanceof Text) {
            return new View.TextView(node);
        }
        else {
            return new NodeView(node);
        }
    };
    return NodeView;
}(View));
View.NodeView = NodeView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS12aWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibm9kZS12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBTS9CO0lBQThCLG9DQUFJO0lBR2hDLGtCQUFZLElBQVUsRUFBRSxFQUFXLEVBQUUsVUFBd0I7UUFBN0QsWUFDRSxrQkFBTSxFQUFFLEVBQUUsVUFBVyxDQUFDLFNBR3ZCO1FBRkMsS0FBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0lBRW5CLENBQUM7SUFhTSxlQUFNLEdBQWIsVUFBYyxJQUFrQztRQUM5QyxJQUFJLElBQUksWUFBWSxRQUFRLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUM7U0FDYjthQUFNLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ25DLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUN4RDthQUFNLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNwQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDbEI7YUFBTSxJQUFJLElBQUksWUFBWSxXQUFXLEVBQUU7WUFDdEMsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7YUFBTSxJQUFJLElBQUksWUFBWSxVQUFVLEVBQUU7WUFDckMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDL0I7YUFBTSxJQUFJLElBQUksWUFBWSxPQUFPLEVBQUU7WUFDbEMsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7YUFBTSxJQUFJLElBQUksWUFBWSxJQUFJLEVBQUU7WUFDL0IsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7YUFBTTtZQUNMLE9BQU8sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBQ0gsZUFBQztBQUFELENBQUMsQUF2Q0QsQ0FBOEIsSUFBSSxHQXVDakM7O0FBQ0EsSUFBWSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMifQ==

var NodeModel = (function (_super) {
    __extends(NodeModel, _super);
    function NodeModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NodeModel;
}(Model));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5vZGUtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFakM7SUFBK0IscUNBQUs7SUFBcEM7O0lBRUEsQ0FBQztJQUFELGdCQUFDO0FBQUQsQ0FBQyxBQUZELENBQStCLEtBQUssR0FFbkMifQ==

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVksUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWpELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUMifQ==

var ElemView = (function (_super) {
    __extends(ElemView, _super);
    function ElemView(node, id) {
        var _this = _super.call(this, node, id) || this;
        _this.attributeAnimators = {};
        _this.styleAnimators = {};
        _this.textAnimator = undefined;
        _this._eventsPopover = {};
        _this._eventNode = null;
        return _this;
    }
    ElemView.prototype.isViewable = function () {
        var bounds = this.node.getBoundingClientRect();
        var windowWidth = document.documentElement.clientWidth;
        var windowHeight = document.documentElement.clientHeight;
        return (bounds.top <= 0 && bounds.bottom > 0 || bounds.top >= 0 && bounds.top < windowHeight)
            && (bounds.left <= 0 && bounds.right > 0 || bounds.left >= 0 && bounds.left < windowWidth);
    };
    ElemView.prototype.getAttribute = function (key) {
        var attributes = this.node.attributes;
        if (key === undefined) {
            var attributeObject = {};
            for (var i = 0; i < attributes.length; i++) {
                attributeObject[attributes[i].nodeName] = attributes[i].nodeValue;
            }
            return attributeObject;
        }
        else {
            for (var i = 0; i < attributes.length; i++) {
                if (attributes[i].nodeName === key) {
                    return attributes[i].nodeValue;
                }
            }
            return undefined;
        }
    };
    ElemView.prototype.setAttribute = function (key, value) {
        if (typeof key === 'string') {
            this.node.setAttribute(key, (value) ? value : '');
        }
        else if (typeof key === 'object') {
            for (var index in key) {
                this.node.setAttribute(index, key[index]);
            }
        }
        return this;
    };
    ElemView.prototype.removeAttribute = function (key, value) {
        if (typeof key === 'string') {
            this.node.removeAttribute(key);
        }
        else if (typeof key === 'object') {
            for (var index in key) {
                this.node.removeAttribute(index);
            }
        }
        return this;
    };
    ElemView.prototype.setProperty = function (key, value) {
        if (typeof key === 'string') {
            this.node.style.setProperty(key, (value) ? value : '');
        }
        else if (typeof key === 'object') {
            for (var index in key) {
                this.node.style.setProperty(index, key[index]);
            }
        }
        return this;
    };
    ElemView.prototype.removeProperty = function (key, value) {
        if (typeof key === 'string') {
            this.node.style.removeProperty(key);
        }
        else if (typeof key === 'object') {
            for (var index in key) {
                this.node.style.removeProperty(index);
            }
        }
        return this;
    };
    ElemView.prototype.attribute = function (name, value, trans, flags) {
        var animator = this.attributeAnimators[name];
        if (value === undefined) {
            if (animator) {
                return animator.get();
            }
            else {
                return this.node.getAttribute(name);
            }
        }
        else if (value === null) {
            if (animator) {
                animator.cancel();
                this.attributeAnimators[name] = undefined;
            }
            this.node.removeAttribute(name);
            return this;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = new AttributeAnimator(this.node, name, value, trans, flags);
                this.attributeAnimators[name] = animator;
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                var oldValue = this.node.getAttribute(name);
                var newValue = toAttributeString(value);
                if (oldValue !== newValue) {
                    this.node.setAttribute(name, newValue);
                    if (flags !== undefined && (flags & Animator.REQUIRES_RESIZE) !== 0) {
                        this.requireResize();
                    }
                }
            }
            return this;
        }
    };
    ElemView.prototype.text = function (value, trans) {
        var animator = this.textAnimator;
        if (value === undefined) {
            return (animator) ? animator.get() : this.node.nodeValue || '';
        }
        if (value === null) {
            if (animator) {
                animator.cancel();
                this.textAnimator = undefined;
            }
            this.node.nodeValue = null;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = new TextAnimator(this.node, value, trans);
                this.textAnimator = animator;
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                var text = "" + ((value instanceof Item) ? value.evaluate(this.stack()).stringValue('') : value);
                if (this.node instanceof Text$1) {
                    this.node.nodeValue = text;
                }
                else if (this.node instanceof HTMLElement) {
                    this.node.innerText = text;
                }
                else {
                    this.node.textContent = text;
                }
            }
        }
        return this;
    };
    ElemView.prototype.style = function (name, value, trans, flags) {
        var animator = this.styleAnimators[name];
        if (value === undefined) {
            if (animator) {
                return animator.get();
            }
            else {
                return this.node.style.getPropertyValue(name);
            }
        }
        else if (value === null) {
            if (animator) {
                animator.cancel();
                this.styleAnimators[name] = undefined;
            }
            this.node.style.removeProperty(name);
            return this;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = new StyleAnimator(this.node, name, value, trans, undefined, flags);
                this.styleAnimators[name] = animator;
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                var oldValue = this.node.style.getPropertyValue(name);
                var newValue = toStyleString(value);
                if (oldValue !== newValue) {
                    this.node.style.setProperty(name, newValue);
                    if (flags !== undefined && (flags & Animator.REQUIRES_RESIZE) !== 0) {
                        this.requireResize();
                    }
                }
            }
            return this;
        }
    };
    ElemView.prototype.attributeEnum = function (name, value, trans, flags) {
        return this.attribute(name, value, trans, flags);
    };
    ElemView.prototype.attributeNumber = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    ElemView.prototype.attributeLength = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Length.fromAny(value, this.node);
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Length.fromAny(result, this.node);
        }
        return result;
    };
    ElemView.prototype.attributeLengthEnum = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            try {
                value = Length.fromAny(value, this.node);
            }
            catch (swallow) {
            }
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            try {
                result = Length.fromAny(result, this.node);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    ElemView.prototype.attributeColor = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Color.fromAny(value);
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Color.fromAny(result);
        }
        return result;
    };
    ElemView.prototype.attributeTransform = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Transform.fromAny(value);
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Transform.fromAny(result);
        }
        return result;
    };
    ElemView.prototype.attributeBoolean = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = (value ? true : null);
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            result = !!result;
        }
        return result;
    };
    ElemView.prototype.attributeValue = function (name, value, trans, flags) {
        var uiValue;
        if (value !== undefined && value !== null) {
            uiValue = UiValue.Form.cast(value);
            if (uiValue === undefined) {
                uiValue = value.stringValue();
            }
        }
        var result = this.attribute(name, uiValue, trans, flags);
        if (typeof result === 'string') {
            result = UiValue.parse(result);
        }
        if (result !== this) {
            result = UiValue.Form.mold(result);
        }
        return result;
    };
    ElemView.prototype.styleEnum = function (name, value, trans, flags) {
        return this.style(name, value, trans, flags);
    };
    ElemView.prototype.styleNumber = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    ElemView.prototype.styleNumberEnum = function (name, value, trans, flags) {
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string' && isFinite(+result)) {
            result = +result;
        }
        return result;
    };
    ElemView.prototype.styleLength = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Length.fromAny(value, this.node);
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Length.fromAny(result, this.node);
        }
        return result;
    };
    ElemView.prototype.styleLengthEnum = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            try {
                value = Length.fromAny(value, this.node);
            }
            catch (swallow) {
            }
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            try {
                result = Length.fromAny(result, this.node);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    ElemView.prototype.styleColor = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Color.fromAny(value);
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Color.fromAny(result);
        }
        return result;
    };
    ElemView.prototype.styleColorEnum = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            try {
                value = Color.fromAny(value);
            }
            catch (swallow) {
            }
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            try {
                result = Color.fromAny(result);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    ElemView.prototype.styleTransform = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Transform.fromAny(value);
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Transform.fromAny(result);
        }
        return result;
    };
    ElemView.prototype.styleValue = function (name, value, trans, flags) {
        var uiValue;
        if (value !== undefined && value !== null) {
            uiValue = UiValue.Form.cast(value);
            if (uiValue === undefined) {
                uiValue = value.stringValue();
            }
        }
        var result = this.style(name, uiValue, trans, flags);
        if (typeof result === 'string') {
            result = UiValue.parse(result);
        }
        if (result !== this) {
            result = UiValue.Form.mold(result);
        }
        return result;
    };
    ElemView.prototype.propertyEnum = function (accessor, value, trans) {
        return this.property(accessor, value, trans);
    };
    ElemView.prototype.propertyNumberEnum = function (accessor, value, trans) {
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string' && isFinite(+result)) {
            result = +result;
        }
        return result;
    };
    ElemView.prototype.propertyAngle = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = Angle.fromAny(value);
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = Angle.fromAny(result);
        }
        return result;
    };
    ElemView.prototype.propertyKeyAngle = function (accessor, key, value, trans) {
        if (value !== undefined && value !== null) {
            value = Angle.fromAny(value);
        }
        var result = this.propertyKey(accessor, key, value, trans);
        if (typeof result === 'string') {
            result = Angle.fromAny(result);
        }
        return result;
    };
    ElemView.prototype.propertyKeyLength = function (accessor, key, value, trans) {
        if (value !== undefined && value !== null) {
            value = Length.fromAny(value, this.node);
        }
        var result = this.propertyKey(accessor, key, value, trans);
        if (typeof result === 'string') {
            result = Length.fromAny(result, this.node);
        }
        return result;
    };
    ElemView.prototype.propertyLength = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = Length.fromAny(value, this.node);
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = Length.fromAny(result, this.node);
        }
        return result;
    };
    ElemView.prototype.propertyLengthEnum = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            try {
                value = Length.fromAny(value, this.node);
            }
            catch (swallow) {
            }
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            try {
                result = Length.fromAny(result, this.node);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    ElemView.prototype.propertyColorEnum = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            try {
                value = Color.fromAny(value);
            }
            catch (swallow) {
            }
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            try {
                result = Color.fromAny(result);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    ElemView.prototype.propertyBoolean = function (accessor, value, trans) {
        return this.property(accessor, value, trans);
    };
    ElemView.prototype.elemId = function (value, trans) {
        return this.attribute('id', value, trans);
    };
    ElemView.prototype.name = function (value, trans) {
        return this.attribute('name', value, trans);
    };
    ElemView.prototype.className = function (value, trans) {
        return this.attribute('class', value, trans);
    };
    ElemView.prototype.on = function (type, listener, options) {
        this.node.addEventListener(type, listener, options);
        return this;
    };
    ElemView.prototype.off = function (type, listener, options) {
        this.node.removeEventListener(type, listener, options);
        return this;
    };
    ElemView.prototype.createChildView = function (node) {
        return ElemView.create(node);
    };
    ElemView.prototype.append = function (node) {
        var childView = this.createChildView(node);
        this.appendChildView(childView);
        this.node.appendChild(childView.node);
        return childView;
    };
    ElemView.prototype.prepend = function (node) {
        var childView = this.createChildView(node);
        this.prependChildView(childView);
        this.node.insertBefore(childView.node, this.node.firstChild);
        return childView;
    };
    ElemView.prototype.insertBefore = function (node, target) {
        var targetView;
        if (target instanceof NodeView) {
            targetView = target;
            target = target.node;
        }
        else if (target) {
            targetView = target.view || null;
        }
        else {
            targetView = null;
        }
        var childView = this.createChildView(node);
        this.insertChildView(childView, targetView);
        this.node.insertBefore(childView.node, target);
        return childView;
    };
    ElemView.prototype.remove = function (child) {
        if (child === undefined) {
            if (this._parentView) {
                this._parentView.removeChildView(this);
            }
            if (this.node.parentNode) {
                this.node.parentNode.removeChild(this.node);
            }
        }
        else {
            var childView = void 0;
            var childNode = void 0;
            if (child instanceof NodeView) {
                childView = child;
                childNode = childView.node;
            }
            else {
                childNode = child;
                childView = childNode.view;
            }
            this.node.removeChild(childNode);
            if (childView) {
                this.removeChildView(childView);
            }
        }
        return this;
    };
    ElemView.prototype.removeAll = function () {
        var childNode;
        while (childNode = this.node.firstChild, childNode) {
            this.node.removeChild(childNode);
            if (childNode.view) {
                this.removeChildView(childNode.view);
            }
        }
        this.removeAllChildViews();
        return this;
    };
    ElemView.prototype.didInsertChildView = function (childView) {
        _super.prototype.didInsertChildView.call(this, childView);
        if (childView instanceof NodeView && !childView.node.parentNode) {
            this.node.appendChild(childView.node);
        }
    };
    ElemView.prototype.didRemoveChildView = function (childView) {
        if (childView instanceof NodeView && childView.node.parentNode === this.node) {
            childView.node.parentNode.removeChild(childView.node);
        }
    };
    ElemView.prototype.didSetStateParam = function (key, value) {
        if (key === 'attrs') {
            this.didSetAttrs(value);
        }
        else if (key === 'style') {
            this.didSetStyle(value);
        }
        else if (key === 'events') {
            this.didSetEvents(value);
        }
        else {
            _super.prototype.didSetStateParam.call(this, key, value);
        }
    };
    ElemView.prototype.didSetAttrs = function (attrs) {
        var trans = attrs.get('transition').cast(Transition.Form);
        attrs.forEach(function (item) {
            if (item instanceof Slot && item.key instanceof Text$1) {
                var name_1 = item.key.value;
                if (name_1 !== 'transition') {
                    this.didSetAttrsParam(item.key.value, item.value, trans);
                }
            }
        }, this);
    };
    ElemView.prototype.didSetAttrsParam = function (name, value, trans) {
        this.attributeValue(name, value, trans);
    };
    ElemView.prototype.didSetEvents = function (events) {
        events.forEach(function (item) {
            if (item instanceof Slot && item.key instanceof Text$1 && item.value instanceof InvokeExpr) {
                var type = item.key.value;
                this.didSetEventParam(type, item.value);
            }
        }, this);
    };
    ElemView.prototype.didSetEventParam = function (type, expr) {
        if (expr instanceof InvokeExpr) {
            var func = window[expr.func._key.toString()];
            this.node[type] = func.bind(this, expr.args.toAny());
        }
    };
    ElemView.prototype.didSetStyle = function (style) {
        var trans = style.get('transition').cast(Transition.Form);
        style.forEach(function (item) {
            if (item instanceof Slot && item.key instanceof Text$1) {
                var name_2 = item.key.value;
                if (name_2 !== 'transition') {
                    this.didSetStyleParam(item.key.value, item.value, trans);
                }
            }
        }, this);
    };
    ElemView.prototype.didSetStyleParam = function (name, value, trans) {
        this.styleValue(name, value, trans);
    };
    ElemView.prototype.eventsFunc = function (event, eventType, value) {
    };
    ElemView.prototype.eventsPopover = function (event, eventType, value, eventManager) {
    };
    ElemView.prototype.eventPopupPivot = function (event, eventType, value) {
        var eventsPopover = this._eventsPopover[eventType];
        if (!eventsPopover) {
            return;
        }
        eventsPopover.setPivot(this.parentView, event.offsetX, event.offsetY);
    };
    ElemView.prototype.eventInvokeExpr = function (event, eventType, value) {
    };
    ElemView.prototype.eventsDefault = function (node) {
        var _this = this;
        node.onmouseleave = function (event) {
            if (_this._eventsPopover['onmouseenter']) {
                _this._eventsPopover['onmouseenter'].hide();
            }
            if (_this._eventsPopover['onmousemove']) {
                _this._eventsPopover['onmousemove'].hide();
            }
        };
        node.onmouseout = function (event) {
            if (_this._eventsPopover['onmouseover']) {
                _this._eventsPopover['onmouseover'].hide();
            }
        };
        node.onmouseup = function (event) {
            if (_this._eventsPopover['onmousedown']) {
                event.stopPropagation();
            }
        };
    };
    Object.defineProperty(ElemView.prototype, "eventNode", {
        get: function () {
            return this._eventNode;
        },
        set: function (node) {
            this._eventNode = node;
        },
        enumerable: true,
        configurable: true
    });
    ElemView.prototype.appendEventHandlers = function (eventType, value, eventManager) {
        if (!value) {
            return;
        }
        var node = this._eventNode || this.node;
        this.eventsDefault(node);
        this.eventsHandler(node, eventType, value, eventManager);
    };
    ElemView.prototype.eventsHandler = function (node, eventType, value, eventManager) {
        var _this = this;
        node[eventType] = function (event) {
            if (value.tag === 'eventsPopover') {
                event.stopPropagation();
                _this.eventsPopover(event, eventType, value, eventManager);
            }
            else if (value instanceof InvokeExpr) {
                _this.eventInvokeExpr(event, eventType, value);
            }
            else {
                _this.eventsFunc(event, eventType, value);
            }
        };
    };
    return ElemView;
}(NodeView));
View.ElemView = ElemView;
//# sourceMappingURL=data:application/json;base64,

var ElemModel = (function (_super) {
    __extends(ElemModel, _super);
    function ElemModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ElemModel;
}(NodeModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbS1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVsZW0tbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFcEM7SUFBK0IscUNBQVM7SUFBeEM7O0lBRUEsQ0FBQztJQUFELGdCQUFDO0FBQUQsQ0FBQyxBQUZELENBQStCLFNBQVMsR0FFdkMifQ==

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVksUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWpELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUMifQ==

var HtmlView = (function (_super) {
    __extends(HtmlView, _super);
    function HtmlView(node, id) {
        return _super.call(this, node, id) || this;
    }
    HtmlView.create = function (node) {
        if (node instanceof NodeView) {
            return node;
        }
        else if (typeof node === 'string') {
            return new View.HtmlView(document.createElement(node));
        }
        else if (node.view) {
            return node.view;
        }
        else if (node instanceof HTMLElement) {
            return new View.HtmlView(node);
        }
        else if (node instanceof SVGElement) {
            return new View.SvgView(node);
        }
        else if (node instanceof Element) {
            return new View.ElemView(node);
        }
        else if (node instanceof Text) {
            return new View.TextView(node);
        }
        else {
            return new NodeView(node);
        }
    };
    HtmlView.prototype.width = function (value, trans) {
        return this.styleLengthEnum('width', value, trans, Animator.REQUIRES_RESIZE);
    };
    HtmlView.prototype.minWidth = function (value, trans) {
        return this.styleLengthEnum('min-width', value, trans);
    };
    HtmlView.prototype.maxWidth = function (value, trans) {
        return this.styleLengthEnum('max-width', value, trans);
    };
    HtmlView.prototype.height = function (value, trans) {
        return this.styleLengthEnum('height', value, trans, Animator.REQUIRES_RESIZE);
    };
    HtmlView.prototype.minHeight = function (value, trans) {
        return this.styleLengthEnum('min-height', value, trans);
    };
    HtmlView.prototype.maxHeight = function (value, trans) {
        return this.styleLengthEnum('max-height', value, trans);
    };
    HtmlView.prototype.type = function (value, trans) {
        return this.attribute('type', value, trans);
    };
    HtmlView.prototype.value = function (value, trans) {
        return this.attribute('value', value, trans);
    };
    HtmlView.prototype.placeholder = function (value, trans) {
        return this.attribute('placeholder', value, trans);
    };
    HtmlView.prototype.autocomplete = function (value, trans) {
        return this.attribute('autocomplete', value, trans);
    };
    HtmlView.prototype.selected = function (value, trans) {
        return this.attributeBoolean('selected', value, trans);
    };
    HtmlView.prototype.checked = function (value, trans) {
        return this.attributeBoolean('checked', value, trans);
    };
    HtmlView.prototype.disabled = function (value, trans) {
        return this.attributeBoolean('disabled', value, trans);
    };
    HtmlView.prototype.title = function (value, trans) {
        return this.attribute('title', value, trans);
    };
    HtmlView.prototype.display = function (value, trans) {
        return this.styleEnum('display', value, trans);
    };
    HtmlView.prototype.visibility = function (value, trans) {
        return this.styleEnum('visibility', value, trans);
    };
    HtmlView.prototype.position = function (value, trans) {
        return this.styleEnum('position', value, trans);
    };
    HtmlView.prototype.justifyContent = function (value, trans) {
        return this.styleEnum('justify-content', value, trans);
    };
    HtmlView.prototype.alignContent = function (value, trans) {
        return this.styleEnum('align-content', value, trans);
    };
    HtmlView.prototype.alignItems = function (value, trans) {
        return this.styleEnum('align-items', value, trans);
    };
    HtmlView.prototype.alignSelf = function (value, trans) {
        return this.styleEnum('align-self', value, trans);
    };
    HtmlView.prototype.flexDirection = function (value, trans) {
        return this.styleEnum('flex-direction', value, trans);
    };
    HtmlView.prototype.flexWrap = function (value, trans) {
        return this.styleEnum('flex-wrap', value, trans);
    };
    HtmlView.prototype.flexGrow = function (value, trans) {
        return this.styleNumber('flex-grow', value, trans);
    };
    HtmlView.prototype.flexShrink = function (value, trans) {
        return this.styleNumber('flex-shrink', value, trans);
    };
    HtmlView.prototype.flexBasis = function (value, trans) {
        return this.styleLengthEnum('flex-basis', value, trans);
    };
    HtmlView.prototype.order = function (value, trans) {
        return this.styleNumber('order', value, trans);
    };
    HtmlView.prototype.verticalAlign = function (value, trans) {
        return this.styleLengthEnum('vertical-align', value, trans);
    };
    HtmlView.prototype.overflowX = function (value, trans) {
        return this.styleEnum('overflow-x', value, trans);
    };
    HtmlView.prototype.overflowY = function (value, trans) {
        return this.styleEnum('overflow-y', value, trans);
    };
    HtmlView.prototype.overflow = function (value, trans) {
        return this.styleEnum('overflow', value, trans);
    };
    HtmlView.prototype.pointerEvents = function (value, trans) {
        return this.styleEnum('pointer-events', value, trans);
    };
    HtmlView.prototype.cursor = function (value, trans) {
        return this.styleEnum('cursor', value, trans);
    };
    HtmlView.prototype.opacity = function (value, trans) {
        return this.styleNumber('opacity', value, trans);
    };
    HtmlView.prototype.backgroundColor = function (value, trans) {
        return this.styleColor('background-color', value, trans);
    };
    HtmlView.prototype.backdropFilter = function (value, trans) {
        return this.style('backdrop-filter', value, trans);
    };
    HtmlView.prototype.filter = function (value, trans) {
        return this.style('filter', value, trans);
    };
    HtmlView.prototype.boxShadow = function (value, trans) {
        if (value !== undefined && value !== null) {
            value = BoxShadow.fromAny(value);
        }
        var result = this.style('box-shadow', value, trans);
        if (typeof result === 'string') {
            result = BoxShadow.fromAny(result);
        }
        return result;
    };
    HtmlView.prototype.boxSizing = function (value, trans) {
        return this.styleEnum('box-sizing', value, trans);
    };
    HtmlView.prototype.transform = function (value, trans) {
        return this.styleTransform('transform', value, trans);
    };
    HtmlView.prototype.top = function (value, trans) {
        return this.styleLengthEnum('top', value, trans);
    };
    HtmlView.prototype.right = function (value, trans) {
        return this.styleLengthEnum('right', value, trans);
    };
    HtmlView.prototype.bottom = function (value, trans) {
        return this.styleLengthEnum('bottom', value, trans);
    };
    HtmlView.prototype.left = function (value, trans) {
        return this.styleLengthEnum('left', value, trans);
    };
    HtmlView.prototype.marginTop = function (value, trans) {
        return this.styleLengthEnum('margin-top', value, trans);
    };
    HtmlView.prototype.marginRight = function (value, trans) {
        return this.styleLengthEnum('margin-right', value, trans);
    };
    HtmlView.prototype.marginBottom = function (value, trans) {
        return this.styleLengthEnum('margin-bottom', value, trans);
    };
    HtmlView.prototype.marginLeft = function (value, trans) {
        return this.styleLengthEnum('margin-left', value, trans);
    };
    HtmlView.prototype.margin = function (value, trans) {
        if (value === undefined) {
            return [this.marginTop(), this.marginRight(), this.marginBottom(), this.marginLeft()];
        }
        else {
            if (Array.isArray(value)) {
                if (value.length >= 1) {
                    this.marginTop(value[0], trans);
                }
                if (value.length >= 2) {
                    this.marginRight(value[1], trans);
                }
                if (value.length >= 3) {
                    this.marginBottom(value[2], trans);
                }
                if (value.length >= 4) {
                    this.marginLeft(value[3], trans);
                }
            }
            else {
                this.marginTop(value, trans);
                this.marginRight(value, trans);
                this.marginBottom(value, trans);
                this.marginLeft(value, trans);
            }
            return this;
        }
    };
    HtmlView.prototype.paddingTop = function (value, trans) {
        return this.styleLength('padding-top', value, trans);
    };
    HtmlView.prototype.paddingRight = function (value, trans) {
        return this.styleLength('padding-right', value, trans);
    };
    HtmlView.prototype.paddingBottom = function (value, trans) {
        return this.styleLength('padding-bottom', value, trans);
    };
    HtmlView.prototype.paddingLeft = function (value, trans) {
        return this.styleLength('padding-left', value, trans);
    };
    HtmlView.prototype.padding = function (value, trans) {
        if (value === undefined) {
            return [this.paddingTop(), this.paddingRight(), this.paddingBottom(), this.paddingLeft()];
        }
        else {
            if (Array.isArray(value)) {
                if (value.length >= 1) {
                    this.paddingTop(value[0], trans);
                }
                if (value.length >= 2) {
                    this.paddingRight(value[1], trans);
                }
                if (value.length >= 3) {
                    this.paddingBottom(value[2], trans);
                }
                if (value.length >= 4) {
                    this.paddingLeft(value[3], trans);
                }
            }
            else {
                this.paddingTop(value, trans);
                this.paddingRight(value, trans);
                this.paddingBottom(value, trans);
                this.paddingLeft(value, trans);
            }
            return this;
        }
    };
    HtmlView.prototype.borderTopWidth = function (value, trans) {
        return this.styleLengthEnum('border-top-width', value, trans);
    };
    HtmlView.prototype.borderRightWidth = function (value, trans) {
        return this.styleLengthEnum('border-right-width', value, trans);
    };
    HtmlView.prototype.borderBottomWidth = function (value, trans) {
        return this.styleLengthEnum('border-bottom-width', value, trans);
    };
    HtmlView.prototype.borderLeftWidth = function (value, trans) {
        return this.styleLengthEnum('border-left-width', value, trans);
    };
    HtmlView.prototype.borderWidth = function (value, trans) {
        if (value === undefined) {
            return [this.borderTopWidth(), this.borderRightWidth(), this.borderBottomWidth(), this.borderLeftWidth()];
        }
        else {
            if (Array.isArray(value)) {
                if (value.length >= 1) {
                    this.borderTopWidth(value[0], trans);
                }
                if (value.length >= 2) {
                    this.borderRightWidth(value[1], trans);
                }
                if (value.length >= 3) {
                    this.borderBottomWidth(value[2], trans);
                }
                if (value.length >= 4) {
                    this.borderLeftWidth(value[3], trans);
                }
            }
            else {
                this.borderTopWidth(value, trans);
                this.borderRightWidth(value, trans);
                this.borderBottomWidth(value, trans);
                this.borderLeftWidth(value, trans);
            }
            return this;
        }
    };
    HtmlView.prototype.borderTopStyle = function (value, trans) {
        return this.styleEnum('border-top-style', value, trans);
    };
    HtmlView.prototype.borderRightStyle = function (value, trans) {
        return this.styleEnum('border-right-style', value, trans);
    };
    HtmlView.prototype.borderBottomStyle = function (value, trans) {
        return this.styleEnum('border-bottom-style', value, trans);
    };
    HtmlView.prototype.borderLeftStyle = function (value, trans) {
        return this.styleEnum('border-left-style', value, trans);
    };
    HtmlView.prototype.borderStyle = function (value, trans) {
        if (value === undefined) {
            return [this.borderTopStyle(), this.borderRightStyle(), this.borderBottomStyle(), this.borderLeftStyle()];
        }
        else {
            if (Array.isArray(value)) {
                if (value.length >= 1) {
                    this.borderTopStyle(value[0], trans);
                }
                if (value.length >= 2) {
                    this.borderRightStyle(value[1], trans);
                }
                if (value.length >= 3) {
                    this.borderBottomStyle(value[2], trans);
                }
                if (value.length >= 4) {
                    this.borderLeftStyle(value[3], trans);
                }
            }
            else {
                this.borderTopStyle(value, trans);
                this.borderRightStyle(value, trans);
                this.borderBottomStyle(value, trans);
                this.borderLeftStyle(value, trans);
            }
            return this;
        }
    };
    HtmlView.prototype.borderTopColor = function (value, trans) {
        return this.styleColorEnum('border-top-color', value, trans);
    };
    HtmlView.prototype.borderRightColor = function (value, trans) {
        return this.styleColorEnum('border-right-color', value, trans);
    };
    HtmlView.prototype.borderBottomColor = function (value, trans) {
        return this.styleColorEnum('border-bottom-color', value, trans);
    };
    HtmlView.prototype.borderLeftColor = function (value, trans) {
        return this.styleColorEnum('border-left-color', value, trans);
    };
    HtmlView.prototype.borderColor = function (value, trans) {
        if (value === undefined) {
            return [this.borderTopColor(), this.borderRightColor(), this.borderBottomColor(), this.borderLeftColor()];
        }
        else {
            if (Array.isArray(value)) {
                if (value.length >= 1) {
                    this.borderTopColor(value[0], trans);
                }
                if (value.length >= 2) {
                    this.borderRightColor(value[1], trans);
                }
                if (value.length >= 3) {
                    this.borderBottomColor(value[2], trans);
                }
                if (value.length >= 4) {
                    this.borderLeftColor(value[3], trans);
                }
            }
            else {
                this.borderTopColor(value, trans);
                this.borderRightColor(value, trans);
                this.borderBottomColor(value, trans);
                this.borderLeftColor(value, trans);
            }
            return this;
        }
    };
    HtmlView.prototype.borderTopLeftRadius = function (value, trans) {
        return this.styleLength('border-top-left-radius', value, trans);
    };
    HtmlView.prototype.borderTopRightRadius = function (value, trans) {
        return this.styleLength('border-top-right-radius', value, trans);
    };
    HtmlView.prototype.borderBottomRightRadius = function (value, trans) {
        return this.styleLength('border-bottom-right-radius', value, trans);
    };
    HtmlView.prototype.borderBottomLeftRadius = function (value, trans) {
        return this.styleLength('border-bottom-left-radius', value, trans);
    };
    HtmlView.prototype.borderRadius = function (value, trans) {
        return this.styleLength('border-radius', value, trans);
    };
    HtmlView.prototype.borderCollapse = function (value, trans) {
        return this.styleEnum('border-collapse', value, trans);
    };
    HtmlView.prototype.borderSpacing = function (value, trans) {
        return this.style('border-spacing', value, trans);
    };
    HtmlView.prototype.outlineWidth = function (value, trans) {
        return this.styleLengthEnum('outline-width', value, trans);
    };
    HtmlView.prototype.outlineStyle = function (value, trans) {
        return this.styleEnum('outline-style', value, trans);
    };
    HtmlView.prototype.outlineColor = function (value, trans) {
        return this.styleColorEnum('outline-color', value, trans);
    };
    HtmlView.prototype.appearance = function (value, trans) {
        return this.styleEnum('appearance', value, trans);
    };
    HtmlView.prototype.zIndex = function (value, trans) {
        return this.styleNumberEnum('z-index', value, trans);
    };
    HtmlView.prototype.fontFamily = function (value, trans) {
        return this.style('font-family', value, trans);
    };
    HtmlView.prototype.fontSize = function (value, trans) {
        return this.styleLengthEnum('font-size', value, trans);
    };
    HtmlView.prototype.fontStyle = function (value, trans) {
        return this.styleEnum('font-style', value, trans);
    };
    HtmlView.prototype.fontWeight = function (value, trans) {
        return this.styleEnum('font-weight', value, trans);
    };
    HtmlView.prototype.fontVariant = function (value, trans) {
        return this.style('font-variant', value, trans);
    };
    HtmlView.prototype.lineHeight = function (value, trans) {
        if (typeof value === 'number') {
            value = Length.fromAny(value, '');
        }
        return this.styleLengthEnum('line-height', value, trans);
    };
    HtmlView.prototype.textTransform = function (value, trans) {
        return this.styleEnum('text-transform', value, trans);
    };
    HtmlView.prototype.textOverflow = function (value, trans) {
        return this.style('text-overflow', value, trans);
    };
    HtmlView.prototype.textAlign = function (value, trans) {
        return this.styleEnum('text-align', value, trans);
    };
    HtmlView.prototype.textDecorationLine = function (value, trans) {
        return this.style('text-decoration-line', value, trans);
    };
    HtmlView.prototype.textDecorationStyle = function (value, trans) {
        return this.styleEnum('text-decoration-style', value, trans);
    };
    HtmlView.prototype.textDecorationColor = function (value, trans) {
        return this.styleColorEnum('text-decoration-color', value, trans);
    };
    HtmlView.prototype.whiteSpace = function (value, trans) {
        return this.styleEnum('white-space', value, trans);
    };
    HtmlView.prototype.userSelect = function (value, trans) {
        this.styleEnum('-webkit-user-select', value, trans);
        this.styleEnum('-moz-user-select', value, trans);
        this.styleEnum('-ms-user-select', value, trans);
        return this.styleEnum('user-select', value, trans);
    };
    HtmlView.prototype.color = function (value, trans) {
        return this.styleColorEnum('color', value, trans);
    };
    HtmlView.prototype.fill = function (value, trans) {
        return this.styleColorEnum('fill', value, trans);
    };
    HtmlView.prototype.fillRule = function (value, trans) {
        return this.style('fill-rule', value, trans);
    };
    HtmlView.prototype.stroke = function (value, trans) {
        return this.styleColorEnum('stroke', value, trans);
    };
    HtmlView.prototype.strokeWidth = function (value, trans) {
        return this.styleNumber('stroke-width', value, trans);
    };
    HtmlView.prototype.strokeDashArray = function (value, trans) {
        return this.styleNumber('stroke-dasharray', value, trans);
    };
    HtmlView.prototype.createChildView = function (node) {
        return HtmlView.create(node);
    };
    HtmlView.prototype.append = function (node) {
        return _super.prototype.append.call(this, node);
    };
    HtmlView.prototype.prepend = function (node) {
        return _super.prototype.prepend.call(this, node);
    };
    HtmlView.prototype.insertBefore = function (node, target) {
        return _super.prototype.insertBefore.call(this, node, target);
    };
    return HtmlView;
}(ElemView));
View.HtmlView = HtmlView;
//# sourceMappingURL=data:application/json;base64,

var HtmlModel = (function (_super) {
    __extends(HtmlModel, _super);
    function HtmlModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return HtmlModel;
}(Model));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImh0bWwtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFakM7SUFBK0IscUNBQUs7SUFBcEM7O0lBRUEsQ0FBQztJQUFELGdCQUFDO0FBQUQsQ0FBQyxBQUZELENBQStCLEtBQUssR0FFbkMifQ==

var HtmlController = (function (_super) {
    __extends(HtmlController, _super);
    function HtmlController(id, componentValue, componentReference, parentView, stack, eventManager) {
        return _super.call(this, id, componentValue, componentReference, parentView, stack, eventManager) || this;
    }
    HtmlController.prototype.create = function () {
        _super.prototype.create.call(this);
        var value = this._model.getData();
        this.processRecord(value);
    };
    HtmlController.prototype.processRecord = function (value) {
        var _this = this;
        value.forEach(function (valueItem) {
            if (valueItem instanceof Attr$1) {
                if (valueItem.value instanceof Record) {
                    valueItem.value.forEach(function (childItem) {
                        if (childItem instanceof Slot) {
                            var attrValueName = childItem.key.value;
                            var attrValueStr_1 = '';
                            if (childItem.value instanceof RecordMap) {
                                childItem.value.forEach(function (attrValue) {
                                    if (attrValue.value instanceof Text$1) {
                                        attrValueStr_1 += attrValue.key + ": " + attrValue.value + "; ";
                                    }
                                    else {
                                        attrValueStr_1 += "" + attrValue;
                                    }
                                });
                            }
                            else {
                                attrValueStr_1 = childItem.value.value;
                            }
                            _this._view.node.setAttribute(attrValueName, attrValueStr_1);
                        }
                    });
                }
            }
            if (valueItem instanceof Slot) {
                var attrValueName = valueItem.key.value;
                if (attrValueName === 'style') {
                    var attrValueStr_2 = '';
                    if (valueItem.value instanceof RecordMap) {
                        valueItem.value.forEach(function (attrValue) {
                            if (attrValue.value instanceof Text$1) {
                                attrValueStr_2 += attrValue.key + ": " + attrValue.value + "; ";
                            }
                            else {
                                attrValueStr_2 += attrValue + "; ";
                            }
                        });
                    }
                    else {
                        attrValueStr_2 = valueItem.value.value;
                    }
                    _this._view.node.setAttribute(attrValueName, attrValueStr_2);
                }
            }
            if (valueItem instanceof Text$1 && _this.view() !== null) {
                var textComponent = new TextComponent();
                textComponent.create(_this._mainComponent, valueItem, _this.stack(), _this.eventManager());
                _this._childComponents.push(textComponent);
            }
            if (valueItem instanceof RecordMap) {
                var childComponent = Utils.cast(_this._mainComponent, valueItem, _this._stack, _this.eventManager());
                if (childComponent) {
                    childComponent.controller().downlinks(_this.downlinks());
                    _this._childComponents.push(childComponent);
                }
                else {
                    valueItem.forEach(function (subValueItem) {
                        var subChildComponent = Utils.cast(_this._mainComponent, subValueItem, _this._stack, _this.eventManager());
                        if (subChildComponent) {
                            _this._childComponents.push(subChildComponent);
                        }
                        else {
                            _this.processRecord(subValueItem);
                        }
                    });
                }
            }
        });
    };
    HtmlController.prototype.start = function () {
        _super.prototype.start.call(this);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this._childComponents.forEach(function (child) {
                child.start();
            });
        }
    };
    HtmlController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        this._childComponents.forEach(function (child) {
            child.render(frameNumber);
        });
    };
    HtmlController.prototype.onLinkData = function (linkData, eventUID) {
        _super.prototype.onLinkData.call(this, linkData, eventUID);
        if (this._childComponents) {
            this._childComponents.forEach(function (child) {
                child.controller().onLinkData(linkData, eventUID);
            });
        }
    };
    return HtmlController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC1jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaHRtbC1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWdELEtBQUssRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzNHLE9BQU8sRUFBUSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUUxRjtJQUFvQywwQ0FBVTtJQUUxQyx3QkFBWSxFQUFVLEVBQUUsY0FBcUIsRUFBRSxrQkFBK0IsRUFBRSxVQUFnQixFQUFFLEtBQWdCLEVBQUUsWUFBNkI7ZUFFN0ksa0JBQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQztJQUNsRixDQUFDO0lBRUQsK0JBQU0sR0FBTjtRQUNJLGlCQUFNLE1BQU0sV0FBRSxDQUFDO1FBRWYsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTlCLENBQUM7SUFFRCxzQ0FBYSxHQUFiLFVBQWMsS0FBeUI7UUFBdkMsaUJBMEZDO1FBeEZHLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxTQUFjO1lBSXpCLElBQUksU0FBUyxZQUFZLElBQUksRUFBRTtnQkFJM0IsSUFBSSxTQUFTLENBQUMsS0FBSyxZQUFZLE1BQU0sRUFBRTtvQkFDbkMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxTQUFlO3dCQUVwQyxJQUFJLFNBQVMsWUFBWSxJQUFJLEVBQUU7NEJBQzNCLElBQU0sYUFBYSxHQUFJLFNBQVMsQ0FBQyxHQUFZLENBQUMsS0FBSyxDQUFDOzRCQUNwRCxJQUFJLGNBQVksR0FBRyxFQUFFLENBQUM7NEJBQ3RCLElBQUssU0FBUyxDQUFDLEtBQWEsWUFBWSxTQUFTLEVBQUU7Z0NBQy9DLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsU0FBYztvQ0FDbkMsSUFBSSxTQUFTLENBQUMsS0FBSyxZQUFZLElBQUksRUFBRTt3Q0FDakMsY0FBWSxJQUFPLFNBQVMsQ0FBQyxHQUFHLFVBQUssU0FBUyxDQUFDLEtBQUssT0FBSSxDQUFDO3FDQUM1RDt5Q0FBTTt3Q0FDSCxjQUFZLElBQUksS0FBRyxTQUFXLENBQUM7cUNBQ2xDO2dDQUNMLENBQUMsQ0FBQyxDQUFDOzZCQUNOO2lDQUFNO2dDQUNILGNBQVksR0FBSSxTQUFTLENBQUMsS0FBYSxDQUFDLEtBQUssQ0FBQzs2QkFDakQ7NEJBQ0EsS0FBSSxDQUFDLEtBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsY0FBWSxDQUFDLENBQUM7eUJBQzNFO29CQUNMLENBQUMsQ0FBQyxDQUFDO2lCQUNOO2FBQ0o7WUFHRCxJQUFJLFNBQVMsWUFBWSxJQUFJLEVBQUU7Z0JBRTNCLElBQU0sYUFBYSxHQUFJLFNBQVMsQ0FBQyxHQUFZLENBQUMsS0FBSyxDQUFDO2dCQUNwRCxJQUFJLGFBQWEsS0FBSyxPQUFPLEVBQUU7b0JBQzNCLElBQUksY0FBWSxHQUFHLEVBQUUsQ0FBQztvQkFDdEIsSUFBSyxTQUFTLENBQUMsS0FBYSxZQUFZLFNBQVMsRUFBRTt3QkFFL0MsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxTQUFjOzRCQUNuQyxJQUFJLFNBQVMsQ0FBQyxLQUFLLFlBQVksSUFBSSxFQUFFO2dDQUNqQyxjQUFZLElBQU8sU0FBUyxDQUFDLEdBQUcsVUFBSyxTQUFTLENBQUMsS0FBSyxPQUFJLENBQUM7NkJBQzVEO2lDQUFNO2dDQUNILGNBQVksSUFBTyxTQUFTLE9BQUksQ0FBQzs2QkFDcEM7d0JBRUwsQ0FBQyxDQUFDLENBQUM7cUJBQ047eUJBQU07d0JBQ0gsY0FBWSxHQUFJLFNBQVMsQ0FBQyxLQUFhLENBQUMsS0FBSyxDQUFDO3FCQUNqRDtvQkFDQSxLQUFJLENBQUMsS0FBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxjQUFZLENBQUMsQ0FBQztpQkFDM0U7YUFDSjtZQUdELElBQUksU0FBUyxZQUFZLElBQUksSUFBSSxLQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO2dCQUVuRCxJQUFNLGFBQWEsR0FBa0IsSUFBSSxhQUFhLEVBQUUsQ0FBQztnQkFDekQsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFJLENBQUMsY0FBYyxFQUFFLFNBQVMsRUFBRSxLQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7Z0JBQ3hGLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDN0M7WUFHRCxJQUFJLFNBQVMsWUFBWSxTQUFTLEVBQUU7Z0JBRWhDLElBQU0sY0FBYyxHQUE0QixLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxjQUFjLEVBQUUsU0FBUyxFQUFFLEtBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7Z0JBRTdILElBQUksY0FBYyxFQUFFO29CQUVoQixjQUFjLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO29CQUN4RCxLQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2lCQUM5QztxQkFBTTtvQkFFSCxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUMsWUFBaUI7d0JBQ2hDLElBQU0saUJBQWlCLEdBQTRCLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsS0FBSSxDQUFDLE1BQU0sRUFBRSxLQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQzt3QkFFbkksSUFBRyxpQkFBaUIsRUFBRTs0QkFDbEIsS0FBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO3lCQUNqRDs2QkFBTTs0QkFDSCxLQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO3lCQUNwQztvQkFFTCxDQUFDLENBQUMsQ0FBQztpQkFDTjthQUVKO1FBRUwsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsOEJBQUssR0FBTDtRQUNJLGlCQUFNLEtBQUssV0FBRSxDQUFDO1FBRWQsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFrQjtnQkFDN0MsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDO0lBRUQsK0JBQU0sR0FBTixVQUFPLFdBQW1CO1FBQ3RCLGlCQUFNLE1BQU0sWUFBQyxXQUFXLENBQUMsQ0FBQztRQUUxQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBa0I7WUFDN0MsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxtQ0FBVSxHQUFWLFVBQVcsUUFBZSxFQUFFLFFBQWlCO1FBQ3pDLGlCQUFNLFVBQVUsWUFBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFLckMsSUFBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQWtCO2dCQUM3QyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN0RCxDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQUVMLHFCQUFDO0FBQUQsQ0FBQyxBQTNJRCxDQUFvQyxVQUFVLEdBMkk3QyJ9

var Html = (function (_super) {
    __extends(Html, _super);
    function Html(tagName) {
        var _this = _super.call(this) || this;
        _this._tag = tagName;
        return _this;
    }
    Object.defineProperty(Html.prototype, "tag", {
        get: function () {
            return this._tag;
        },
        enumerable: true,
        configurable: true
    });
    Html.prototype.create = function (rootElement, componentInfo, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, componentInfo, stack, eventManager, id);
        if (!eventManager) {
            console.error('Html.create - event manager not defined');
        }
        if (!this.parentView()) {
            console.error('Html.create needs a parent node or view', this.parentView());
        }
        this.controller(new HtmlController(this.id(), componentInfo, this, this.parentView(), this.stack(), eventManager));
        this.model(new HtmlModel(eventManager));
        this.view(new HtmlView(document.createElement(this._tag), this.id()));
        this.controller().create();
        return this;
    };
    Html.prototype.start = function () {
        _super.prototype.start.call(this);
    };
    return Html;
}(UiComponent));
var HtmlTags = [
    "div", "a", "p", "ul", "ol", "li", "hr", "span", "img", "br", "h1", "h2", "h3", "h4", "h5", "h6",
    "table", "thead", "tr", "td", "pre", "code", "i", "b", "audio", "video", "em",
];
HtmlTags.forEach(function (tagName) {
    UiComponent.Global.addComponent(tagName, Html);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImh0bWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFHcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUM3QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QztJQUEwQixnQ0FBVztJQVFqQyxjQUFZLE9BQWU7UUFBM0IsWUFDSSxpQkFBTyxTQUVWO1FBREcsS0FBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7O0lBQ3hCLENBQUM7SUFQRCxzQkFBSSxxQkFBRzthQUFQO1lBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3JCLENBQUM7OztPQUFBO0lBT0QscUJBQU0sR0FBTixVQUFPLFdBQWtDLEVBQUUsYUFBb0IsRUFBRSxLQUFnQixFQUFFLFlBQTZCLEVBQUUsRUFBVztRQUN6SCxpQkFBTSxNQUFNLFlBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2xFLElBQUcsQ0FBQyxZQUFZLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7U0FDNUQ7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMseUNBQXlDLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDL0U7UUFJRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUduSCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFJeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBR3RFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUzQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsb0JBQUssR0FBTDtRQUVJLGlCQUFNLEtBQUssV0FBRSxDQUFDO0lBRWxCLENBQUM7SUFFTCxXQUFDO0FBQUQsQ0FBQyxBQTdDRCxDQUEwQixXQUFXLEdBNkNwQzs7QUFFRCxNQUFNLENBQUMsSUFBTSxRQUFRLEdBQWE7SUFDOUIsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSTtJQUNoRyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSTtDQUNoRixDQUFDO0FBRUYsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFDLE9BQU87SUFDckIsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFHLElBQUksQ0FBQyxDQUFDO0FBQ3BELENBQUMsQ0FBQyxDQUFDIn0=

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFekMsT0FBTyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUMifQ==

var SvgView = (function (_super) {
    __extends(SvgView, _super);
    function SvgView(node, id) {
        return _super.call(this, node, id) || this;
    }
    SvgView.prototype.viewBox = function (value, trans) {
        return this.attribute('viewBox', value, trans);
    };
    SvgView.prototype.preserveAspectRatio = function (value, trans) {
        return this.attributeBoolean('preserveAspectRatio', value, trans);
    };
    SvgView.prototype.transform = function (value, trans) {
        this.attributeTransform('transform', value, trans);
        return this.styleTransform('transform', value, trans);
    };
    SvgView.prototype.x = function (value, trans) {
        return this.attributeNumber('x', value, trans);
    };
    SvgView.prototype.y = function (value, trans) {
        return this.attributeNumber('y', value, trans);
    };
    SvgView.prototype.x1 = function (value, trans) {
        return this.attributeNumber('x1', value, trans);
    };
    SvgView.prototype.y1 = function (value, trans) {
        return this.attributeNumber('y1', value, trans);
    };
    SvgView.prototype.x2 = function (value, trans) {
        return this.attributeNumber('x2', value, trans);
    };
    SvgView.prototype.y2 = function (value, trans) {
        return this.attributeNumber('y2', value, trans);
    };
    SvgView.prototype.cx = function (value, trans) {
        return this.attributeNumber('cx', value, trans);
    };
    SvgView.prototype.cy = function (value, trans) {
        return this.attributeNumber('cy', value, trans);
    };
    SvgView.prototype.dx = function (value, trans) {
        return this.attributeNumber('dx', value, trans);
    };
    SvgView.prototype.dy = function (value, trans) {
        return this.attributeNumber('dy', value, trans);
    };
    SvgView.prototype.r = function (value, trans) {
        return this.attributeNumber('r', value, trans);
    };
    SvgView.prototype.d = function (value, trans) {
        return this.attribute('d', value, trans);
    };
    SvgView.prototype.points = function (value, trans) {
        return this.attribute('points', value, trans);
    };
    SvgView.prototype.clipPath = function (value, trans) {
        return this.attribute('clip-path', value, trans);
    };
    SvgView.prototype.in = function (value, trans) {
        return this.attribute('in', value, trans);
    };
    SvgView.prototype.in2 = function (value, trans) {
        return this.attribute('in2', value, trans);
    };
    SvgView.prototype.mode = function (value, trans) {
        return this.attribute('mode', value, trans);
    };
    SvgView.prototype.edgeMode = function (value, trans) {
        return this.attribute('edgeMode', value, trans);
    };
    SvgView.prototype.stdDeviation = function (value, trans) {
        return this.attribute('stdDeviation', value, trans);
    };
    SvgView.prototype.type = function (value, trans) {
        return this.attribute('type', value, trans);
    };
    SvgView.prototype.values = function (value, trans) {
        return this.attribute('values', value, trans);
    };
    SvgView.prototype.result = function (value, trans) {
        return this.attribute('result', value, trans);
    };
    SvgView.prototype.width = function (value, trans) {
        return this.attributeLength('width', value, trans);
    };
    SvgView.prototype.height = function (value, trans) {
        return this.attributeLength('height', value, trans);
    };
    SvgView.prototype.alignmentBaseline = function (value, trans) {
        return this.attributeEnum('alignment-baseline', value, trans);
    };
    SvgView.prototype.textAnchor = function (value, trans) {
        return this.attributeEnum('text-anchor', value, trans);
    };
    SvgView.prototype.fill = function (value, trans) {
        return this.styleColorEnum('fill', value, trans);
    };
    SvgView.prototype.fillRule = function (value, trans) {
        return this.style('fill-rule', value, trans);
    };
    SvgView.prototype.stroke = function (value, trans) {
        return this.styleColorEnum('stroke', value, trans);
    };
    SvgView.prototype.strokeWidth = function (value, trans) {
        return this.styleNumber('stroke-width', value, trans);
    };
    SvgView.prototype.strokeDashArray = function (value, trans) {
        return this.styleNumber('stroke-dasharray', value, trans);
    };
    SvgView.prototype.cursor = function (value, trans) {
        return this.styleEnum('cursor', value, trans);
    };
    SvgView.prototype.createChildView = function (node) {
        return SvgView.create(node);
    };
    SvgView.prototype.append = function (node) {
        return _super.prototype.append.call(this, node);
    };
    SvgView.prototype.prepend = function (node) {
        return _super.prototype.prepend.call(this, node);
    };
    SvgView.prototype.insertBefore = function (node, target) {
        return _super.prototype.insertBefore.call(this, node, target);
    };
    SvgView.create = function (node) {
        if (node instanceof NodeView) {
            return node;
        }
        else if (typeof node === 'string') {
            return new View.SvgView(document.createElementNS(SvgView.NS, node));
        }
        else if (node.view) {
            return node.view;
        }
        else if (node instanceof HTMLElement) {
            return new View.HtmlView(node);
        }
        else if (node instanceof SVGElement) {
            return new View.SvgView(node);
        }
        else if (node instanceof Element) {
            return new View.ElemView(node);
        }
        else if (node instanceof Text) {
            return new View.TextView(node);
        }
        else {
            return new NodeView(node);
        }
    };
    SvgView.NS = 'http://www.w3.org/2000/svg';
    return SvgView;
}(ElemView));
View.SvgView = SvgView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLXZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdmctdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBS0EsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUMvQixPQUFPLEVBQVcsUUFBUSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzdDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFbkM7SUFBNkIsbUNBQVE7SUFHbkMsaUJBQVksSUFBZ0IsRUFBRSxFQUFXO2VBQ3ZDLGtCQUFNLElBQUksRUFBRSxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUlELHlCQUFPLEdBQVAsVUFBUSxLQUFxQixFQUFFLEtBQXFCO1FBQ2xELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFJRCxxQ0FBbUIsR0FBbkIsVUFBb0IsS0FBc0IsRUFBRSxLQUFzQjtRQUNoRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUlELDJCQUFTLEdBQVQsVUFBVSxLQUEyQixFQUFFLEtBQXdCO1FBQzdELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ25ELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFJRCxtQkFBQyxHQUFELFVBQUUsS0FBcUIsRUFBRSxLQUFxQjtRQUM1QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBSUQsbUJBQUMsR0FBRCxVQUFFLEtBQXFCLEVBQUUsS0FBcUI7UUFDNUMsT0FBTyxJQUFJLENBQUMs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

var SvgModel = (function (_super) {
    __extends(SvgModel, _super);
    function SvgModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SvgModel;
}(ElemModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3ZnLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXBDO0lBQThCLG9DQUFTO0lBQXZDOztJQUVBLENBQUM7SUFBRCxlQUFDO0FBQUQsQ0FBQyxBQUZELENBQThCLFNBQVMsR0FFdEMifQ==

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXJDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUMifQ==

var TextView = (function (_super) {
    __extends(TextView, _super);
    function TextView(node, id) {
        var _this = _super.call(this, node, id) || this;
        _this._dirty = true;
        return _this;
    }
    TextView.prototype.textValue = function (value) {
        if (value === undefined) {
            return this._textValue;
        }
        if (this._textValue !== value) {
            this._textValue = value;
            this._dirty = true;
        }
        return this;
    };
    TextView.prototype.text = function (value, trans) {
        var animator = this.textAnimator;
        if (value === undefined) {
            if (animator) {
                return animator.get();
            }
            else {
                return this.node.nodeValue || '';
            }
        }
        else if (value === null) {
            if (animator) {
                animator.cancel();
                this.textAnimator = undefined;
            }
            this.node.nodeValue = null;
            return this;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = new TextAnimator(this.node, value, trans);
                this.textAnimator = animator;
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                if (value instanceof Item) {
                    var stack = this.stack();
                    this.node.nodeValue = value.evaluate(stack).stringValue('');
                }
                else {
                    this.node.nodeValue = '' + value;
                }
            }
            return this;
        }
    };
    TextView.prototype.render = function (frameNumber, trans) {
        if (this.textValue() !== null && this.textValue() !== undefined) {
            if (typeof this.textValue() === 'number') {
                var newValue = this.textValue();
                if (this.textValue() !== newValue.toFixed(0)) {
                    this.textValue(newValue.toFixed(0));
                }
            }
            if (this._dirty) {
                this.text(this.textValue().toString());
                this._dirty = false;
            }
        }
    };
    return TextView;
}(NodeView));
View.TextView = TextView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC12aWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGV4dC12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBUyxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQU1yQztJQUE4QixvQ0FBUTtJQU1wQyxrQkFBWSxJQUFVLEVBQUUsRUFBVztRQUFuQyxZQUNFLGtCQUFNLElBQUksRUFBRSxFQUFFLENBQUMsU0FDaEI7UUFKUyxZQUFNLEdBQVksSUFBSSxDQUFDOztJQUlqQyxDQUFDO0lBSUQsNEJBQVMsR0FBVCxVQUFVLEtBQTBDO1FBQ2xELElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUFFO1FBQ3BELElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxLQUFLLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7WUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDcEI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFJRCx1QkFBSSxHQUFKLFVBQVEsS0FBZ0IsRUFBRSxLQUFnQjtRQUN4QyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBK0IsQ0FBQztRQUNwRCxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDdkIsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osT0FBTyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7YUFDdkI7aUJBQU07Z0JBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxFQUFF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

var TextModel = (function (_super) {
    __extends(TextModel, _super);
    function TextModel(eventManager, id) {
        return _super.call(this, eventManager, id) || this;
    }
    TextModel.prototype.remodel = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var state = Record.empty();
        var transition = TEXT_TRANSITION_SELECTOR.evaluate(stack).toValue();
        if (transition.isDefined()) {
            state.slot('transition', transition);
        }
        var text = TEXT_SELECTOR.substitute(stack).toValue();
        if (text.isDefined()) {
            state.slot('text', text);
        }
        this.setState(state);
    };
    return TextModel;
}(NodeModel));
var TEXT_TRANSITION_SELECTOR = Selector.get('transition');
var TEXT_SELECTOR = Selector.get('text');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRleHQtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBWSxNQUFNLEVBQUUsUUFBUSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3hELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFHcEM7SUFBK0IscUNBQVM7SUFDdEMsbUJBQVksWUFBNkIsRUFBRyxFQUFXO2VBQ3JELGtCQUFNLFlBQVksRUFBRSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELDJCQUFPLEdBQVAsVUFBUSxLQUErQjtRQUEvQixzQkFBQSxFQUFBLFFBQW1CLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDckMsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRTdCLElBQU0sVUFBVSxHQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN0RSxJQUFJLFVBQVUsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUMxQixLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztTQUN0QztRQUVELElBQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdkQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDcEIsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDMUI7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXZCLENBQUM7SUFDSCxnQkFBQztBQUFELENBQUMsQUFyQkQsQ0FBK0IsU0FBUyxHQXFCdkM7O0FBRUQsSUFBTSx3QkFBd0IsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzVELElBQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMifQ==

var TextController = (function (_super) {
    __extends(TextController, _super);
    function TextController(id, componentValue, componentReference, parentView, stack, eventManager) {
        var _this = _super.call(this, id, componentValue, componentReference, parentView, stack, eventManager) || this;
        _this.animator = new TextAnimator$1(_this.view());
        return _this;
    }
    TextController.prototype.create = function () {
        _super.prototype.create.call(this);
    };
    TextController.prototype.start = function () {
        _super.prototype.start.call(this);
        var modelData = this._model.getData().head();
        var evaluatedModel = modelData.evaluate(this._stack);
        this.view().text(evaluatedModel);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
        }
    };
    TextController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
    };
    TextController.prototype.onLinkData = function (linkData, eventUID) {
        _super.prototype.onLinkData.call(this, linkData, eventUID);
        var selectorInfo = this._componentInfo.head().toValue();
        if (this._componentInfo instanceof RecordMap) {
            if (selectorInfo instanceof GetSelector) {
                var linkInfo = this.stack().get(selectorInfo._key.toString());
                var currUid = this.getLinkUID(linkInfo);
                if (linkInfo.isEmpty()) {
                    var parsedValue = selectorInfo.evaluate(linkData);
                    if (this.view().textValue() !== parsedValue.numberValue()) {
                        this.view().textValue(parsedValue.numberValue());
                    }
                }
                else if (currUid === eventUID) {
                    var trans = this.stack().get('transition').cast(Transition.Form);
                    var parsedValue = selectorInfo.then.evaluate(linkData);
                    if (parsedValue.isEmpty()) {
                        parsedValue = selectorInfo.evaluate(linkData);
                    }
                    if (!parsedValue.isEmpty()) {
                        if (trans) {
                            if (this.view().textValue() !== parsedValue.numberValue()) {
                                this.propertyKeyNumber(NumberAnimator, 'textValue', parsedValue.numberValue(), trans);
                            }
                        }
                        else {
                            if (this.view().textValue() !== parsedValue.numberValue()) {
                                this.view().textValue(parsedValue.numberValue());
                            }
                        }
                    }
                    else {
                    }
                }
            }
        }
    };
    return TextController;
}(Controller));
var TextAnimator$1 = (function (_super) {
    __extends(TextAnimator, _super);
    function TextAnimator(gauge) {
        var _this = _super.call(this) || this;
        _this.textView = gauge;
        return _this;
    }
    TextAnimator.prototype.onFrame = function (t) {
        for (var key in this) {
            if (this[key] instanceof ChildFrameAnimator) {
                this[key].onFrame(t);
            }
        }
        this.update(t);
    };
    TextAnimator.prototype.update = function (frameNumber) {
        if (this.textView) {
            this.textView.render(frameNumber);
        }
    };
    return TextAnimator;
}(FrameAnimator));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGV4dC1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBaUQsV0FBVyxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDckksT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEQ7SUFBb0MsMENBQVU7SUFJMUMsd0JBQVksRUFBVSxFQUFFLGNBQXFCLEVBQUUsa0JBQStCLEVBQUUsVUFBZ0IsRUFBRSxLQUFnQixFQUFFLFlBQTZCO1FBQWpKLFlBRUksa0JBQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxTQUVqRjtRQURHLEtBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxZQUFZLENBQUMsS0FBSSxDQUFDLElBQUksRUFBYyxDQUFDLENBQUM7O0lBQzlELENBQUM7SUFFRCwrQkFBTSxHQUFOO1FBQ0ksaUJBQU0sTUFBTSxXQUFFLENBQUM7SUFHbkIsQ0FBQztJQUVELDhCQUFLLEdBQUw7UUFDSSxpQkFBTSxLQUFLLFdBQUUsQ0FBQztRQUdkLElBQU0sU0FBUyxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckQsSUFBTSxjQUFjLEdBQVMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFNUQsSUFBSSxDQUFDLElBQUksRUFBZSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMvQyxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFD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

var TextComponent = (function (_super) {
    __extends(TextComponent, _super);
    function TextComponent() {
        var _this = _super.call(this) || this;
        _this._tag = "text";
        return _this;
    }
    Object.defineProperty(TextComponent.prototype, "tag", {
        get: function () {
            return this._tag;
        },
        enumerable: true,
        configurable: true
    });
    TextComponent.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('TextComponent needs a parent node or view', this.parentView());
        }
        this.controller(new TextController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new TextModel(eventManager));
        this.view(new TextView(new Text(), this.id()));
        this.controller().create();
        return this;
    };
    TextComponent.prototype.start = function () {
        _super.prototype.start.call(this);
    };
    return TextComponent;
}(UiComponent));
UiComponent.Global.addComponent("text", TextComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFHcEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxHQUFHLENBQUM7QUFDeEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRW5EO0lBQW1DLHlDQUFXO0lBUTFDO1FBQUEsWUFDSSxpQkFBTyxTQUNWO1FBUk8sVUFBSSxHQUFXLE1BQU0sQ0FBQzs7SUFROUIsQ0FBQztJQU5ELHNCQUFJLDhCQUFHO2FBQVA7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQzs7O09BQUE7SUFNRCw4QkFBTSxHQUFOLFVBQU8sV0FBa0MsRUFBRSxLQUFZLEVBQUUsS0FBZ0IsRUFBRSxZQUE2QixFQUFFLEVBQVc7UUFDakgsaUJBQU0sTUFBTSxZQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsMkNBQTJDLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDakY7UUFJRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUczRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFHeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFHL0MsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRzNCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCw2QkFBSyxHQUFMO1FBRUksaUJBQU0sS0FBSyxXQUFFLENBQUM7SUFFbEIsQ0FBQztJQUVMLG9CQUFDO0FBQUQsQ0FBQyxBQXpDRCxDQUFtQyxXQUFXLEdBeUM3Qzs7QUFFRCxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUcsYUFBYSxDQUFDLENBQUMifQ==

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVksUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWpELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFekMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUV2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDIn0=

var Directive = (function () {
    function Directive() {
        this._model = null;
    }
    Object.defineProperty(Directive.prototype, "model", {
        get: function () {
            return this._model;
        },
        enumerable: true,
        configurable: true
    });
    Directive.prototype.setModel = function (model) {
        var oldModel = this._model;
        if (model) {
            if (oldModel) {
                throw new Error();
            }
            this._model = model;
            this.didSetModel(model);
        }
        else if (oldModel) {
            this._model = null;
            this.didSetModel(null);
        }
    };
    Directive.prototype.didSetModel = function (model) {
    };
    Directive.prototype.didInsertChildModel = function (childModel) {
    };
    Directive.prototype.didRemoveChildModel = function (childModel) {
    };
    Directive.prototype.willRestate = function () {
    };
    Directive.prototype.didRestate = function () {
    };
    Directive.prototype.willRemodel = function (state, stack) {
    };
    Directive.prototype.didRemodel = function (state, stack) {
    };
    Directive.prototype.setData = function (data) {
    };
    Directive.prototype.setStyle = function (style) {
    };
    Directive.prototype.stack = function () {
        if (this._model) {
            return this._model.stack();
        }
        else {
            return EvalStack.of(Model.GlobalScope);
        }
    };
    Directive.prototype.injectStack = function (stack) {
    };
    return Directive;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQVMsTUFBTSxhQUFhLENBQUM7QUFDOUMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFlBQVksQ0FBQztBQUVqQztJQUlFO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELHNCQUFJLDRCQUFLO2FBQVQ7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQzs7O09BQUE7SUFHRCw0QkFBUSxHQUFSLFVBQVMsS0FBbUI7UUFDMUIsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM3QixJQUFJLEtBQUssRUFBRTtZQUNULElBQUksUUFBUSxFQUFFO2dCQUNaLE1BQU0sSUFBSSxLQUFLLEVBQUUsQ0FBQzthQUNuQjtZQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7YUFBTSxJQUFJLFFBQVEsRUFBRTtZQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNuQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVTLCtCQUFXLEdBQXJCLFVBQXNCLEtBQW1CO0lBRXpDLENBQUM7SUFFRCx1Q0FBbUIsR0FBbkIsVUFBb0IsVUFBaUI7SUFFckMsQ0FBQztJQUVELHVDQUFtQixHQUFuQixVQUFvQixVQUFpQjtJQUVyQyxDQUFDO0lBRUQsK0JBQVcsR0FBWDtJQUVBLENBQUM7SUFFRCw4QkFBVSxHQUFWO0lBRUEsQ0FBQztJQUVELCtCQUFXLEdBQVgsVUFBWSxLQUFhLEVBQUUsS0FBZ0I7SUFFM0MsQ0FBQztJQUVELDhCQUFVLEdBQVYsVUFBVyxLQUFhLEVBQUUsS0FBZ0I7SUFFMUMsQ0FBQztJQUVELDJCQUFPLEdBQVAsVUFBUSxJQUFZO0lBRXBCLENBQUM7SUFFRCw0QkFBUSxHQUFSLFVBQVMsS0FBYTtJQUV0QixDQUFDO0lBRUQseUJBQUssR0FBTDtRQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM1QjthQUFNO1lBQ0wsT0FBTyxTQUFTLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN4QztJQUNILENBQUM7SUFFRCwrQkFBVyxHQUFYLFVBQVksS0FBZ0I7SUFFNUIsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FBQyxBQTFFRCxJQTBFQyJ9

var AttrsDirective = (function (_super) {
    __extends(AttrsDirective, _super);
    function AttrsDirective() {
        var _this = _super.call(this) || this;
        _this._bindings = Record.empty();
        _this._attrs = Record.Empty;
        return _this;
    }
    AttrsDirective.prototype.reattr = function (state, stack) {
        var attrs = Record.empty(this._bindings.length);
        this._bindings.forEach(function (item) {
            if (item instanceof Slot && item.key instanceof Text$1) {
                var value = item.value.evaluate(stack).toValue();
                if (value.isDefined()) {
                    attrs.slot(item.key, value);
                }
            }
        }, this);
        if (!this._attrs.equals(attrs)) {
            this._attrs = attrs;
            state.slot('attrs', attrs);
        }
    };
    AttrsDirective.prototype.willRemodel = function (state, stack) {
        this.reattr(state, stack);
    };
    return AttrsDirective;
}(Directive));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cnMtZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXR0cnMtZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWtCLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFFdEM7SUFBb0MsMENBQVM7SUFNM0M7UUFBQSxZQUNFLGlCQUFPLFNBR1I7UUFGQyxLQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQyxLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7O0lBQzdCLENBQUM7SUFFUywrQkFBTSxHQUFoQixVQUFpQixLQUFhLEVBQUUsS0FBZ0I7UUFDOUMsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBVTtZQUN6QyxJQUFJLElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsWUFBWSxJQUFJLEVBQUU7Z0JBQ3BELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNuRCxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUUsRUFBRTtvQkFDckIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUM3QjthQUNGO1FBQ0gsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRVQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztJQUVELG9DQUFXLEdBQVgsVUFBWSxLQUFhLEVBQUUsS0FBZ0I7UUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQWhDRCxDQUFvQyxTQUFTLEdBZ0M1QyJ9

var DirectiveForm = (function () {
    function DirectiveForm() {
    }
    DirectiveForm.addGlobal = function (directiveForm) {
        DirectiveForm.Global = DirectiveForm.Global.withDirectiveForm(directiveForm);
    };
    DirectiveForm.removeGlobal = function (directiveForm) {
        DirectiveForm.Global = DirectiveForm.Global.withoutDirectiveForm(directiveForm);
    };
    DirectiveForm.Global = undefined;
    return DirectiveForm;
}());
var PolyDirectiveForm = (function (_super) {
    __extends(PolyDirectiveForm, _super);
    function PolyDirectiveForm(directiveForms) {
        var _this = _super.call(this) || this;
        _this._directiveForms = directiveForms;
        return _this;
    }
    Object.defineProperty(PolyDirectiveForm.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    PolyDirectiveForm.prototype.directiveForms = function () {
        return this._directiveForms.slice(0);
    };
    PolyDirectiveForm.prototype.withDirectiveForm = function (directiveForm) {
        if (this._directiveForms.indexOf(directiveForm) < 0) {
            var newDirectiveForms = this._directiveForms.slice(0);
            newDirectiveForms.push(directiveForm);
            return new PolyDirectiveForm(newDirectiveForms);
        }
        else {
            return this;
        }
    };
    PolyDirectiveForm.prototype.withDirectiveForms = function () {
        var directiveForms = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            directiveForms[_i] = arguments[_i];
        }
        var newDirectiveForms = this._directiveForms.slice(0);
        for (var i = 0; i < directiveForms.length; i += 1) {
            var directiveForm = directiveForms[i];
            if (newDirectiveForms.indexOf(directiveForm) < 0) {
                newDirectiveForms.push(directiveForm);
            }
        }
        if (this._directiveForms.length !== newDirectiveForms.length) {
            return new PolyDirectiveForm(newDirectiveForms);
        }
        else {
            return this;
        }
    };
    PolyDirectiveForm.prototype.withoutDirectiveForm = function (directiveForm) {
        var i = this._directiveForms.indexOf(directiveForm);
        if (i >= 0) {
            var newDirectiveForms = this._directiveForms.slice(0);
            newDirectiveForms.splice(i, 1);
            return new PolyDirectiveForm(newDirectiveForms);
        }
        else {
            return this;
        }
    };
    PolyDirectiveForm.prototype.cast = function (item) {
        if (typeof item === 'string') {
            item = Value.parseRecon(item);
        }
        for (var i = 0; i < this._directiveForms.length; i += 1) {
            var directiveForm = this._directiveForms[i];
            var directive = directiveForm.cast(item);
            if (directive !== undefined) {
                return directive;
            }
        }
        return undefined;
    };
    return PolyDirectiveForm;
}(DirectiveForm));
DirectiveForm.Global = new PolyDirectiveForm([]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLWZvcm0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaXJlY3RpdmUtZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFPLEtBQUssRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUd4QztJQUFBO0lBY0EsQ0FBQztJQVBRLHVCQUFTLEdBQWhCLFVBQWlCLGFBQTRCO1FBQzNDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRU0sMEJBQVksR0FBbkIsVUFBb0IsYUFBNEI7UUFDOUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFSTSxvQkFBTSxHQUFzQixTQUFnQixDQUFDO0lBU3RELG9CQUFDO0NBQUEsQUFkRCxJQWNDO1NBZHFCLGFBQWE7QUFnQm5DO0lBQXdFLDZDQUFnQjtJQUd0RiwyQkFBWSxjQUFrQztRQUE5QyxZQUNFLGlCQUFPLFNBRVI7UUFEQyxLQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQzs7SUFDeEMsQ0FBQztJQUVELHNCQUFJLGtDQUFHO2FBQVA7WUFDRSxPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDOzs7T0FBQTtJQUVELDBDQUFjLEdBQWQ7UUFDRSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCw2Q0FBaUIsR0FBakIsVUFBa0IsYUFBK0I7UUFDL0MsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbkQsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RCxpQkFBaUIsQ0FBQyxJQUFJ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

var AttrsForm = (function (_super) {
    __extends(AttrsForm, _super);
    function AttrsForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AttrsForm.prototype, "tag", {
        get: function () {
            return 'attrs';
        },
        enumerable: true,
        configurable: true
    });
    AttrsForm.prototype.cast = function (item) {
        if (item.tag === this.tag) {
            var directive_1 = new AttrsDirective();
            item.forEach(function (item) {
                this.materializeDirectiveParam(directive_1, item);
            }, this);
            return directive_1;
        }
        return undefined;
    };
    AttrsForm.prototype.materializeDirectiveParam = function (directive, item) {
        if (item instanceof Attr$1 && item.key.value === this.tag) {
            return;
        }
        else if (item instanceof Field) {
            directive._bindings.push(item);
        }
    };
    AttrsForm.Form = new AttrsForm();
    return AttrsForm;
}(DirectiveForm));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cnMtZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF0dHJzLWZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBTyxLQUFLLEVBQUUsSUFBSSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHakQ7SUFBK0IscUNBQTZCO0lBQTVEOztJQXlCQSxDQUFDO0lBeEJDLHNCQUFJLDBCQUFHO2FBQVA7WUFDRSxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDOzs7T0FBQTtJQUVELHdCQUFJLEdBQUosVUFBSyxJQUFVO1FBQ2IsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDekIsSUFBTSxXQUFTLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztZQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBVTtnQkFDL0IsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFdBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNsRCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDVCxPQUFPLFdBQVMsQ0FBQztTQUNsQjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCw2Q0FBeUIsR0FBekIsVUFBMEIsU0FBeUIsRUFBRSxJQUFVO1FBQzdELElBQUksSUFBSSxZQUFZLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ3ZELE9BQU87U0FDUjthQUFNLElBQUksSUFBSSxZQUFZLEtBQUssRUFBRTtZQUNoQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7SUFFZSxjQUFJLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUN6QyxnQkFBQztDQUFBLEFBekJELENBQStCLGFBQWEsR0F5QjNDO1NBekJZLFNBQVMifQ==

var EachDirective = (function (_super) {
    __extends(EachDirective, _super);
    function EachDirective() {
        var _this = _super.call(this) || this;
        _this._bindings = Record.Empty;
        _this._template = Record.empty();
        _this._keySelector = Selector.Identity;
        _this._childDirectives = new BTree();
        _this._index = 0;
        return _this;
    }
    Object.defineProperty(EachDirective.prototype, "bindings", {
        get: function () {
            return this._bindings;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EachDirective.prototype, "template", {
        get: function () {
            return this._template;
        },
        enumerable: true,
        configurable: true
    });
    EachDirective.prototype.createChildDirectives = function (key, scope, stack) {
        var _this = this;
        var childDirectives = [];
        stack.push(scope);
        this._template.forEach(function (item) {
            var childId = Random.generateId();
            var childDirective = new EachChildDirective(childId, _this._index);
            _this._index++;
            scope.forEach(function (item) {
                if (item instanceof Field) {
                    childDirective._scope.set(item.key, item.value);
                }
            }, _this);
            childDirectives.push(childDirective);
        }, this);
        stack.pop();
        return childDirectives;
    };
    EachDirective.prototype.updateChildDirectives = function (key, scope, childDirectives, stack) {
        var _loop_1 = function (i) {
            var childDirective = childDirectives[i];
            scope.forEach(function (item) {
                if (item instanceof Field) {
                    childDirective._scope.set(item.key, item.value);
                }
            }, this_1);
            childDirective.updateData();
        };
        var this_1 = this;
        for (var i = 0; i < childDirectives.length; i += 1) {
            _loop_1(i);
        }
    };
    EachDirective.prototype.deleteChildDirectives = function (key, childDirectives) {
        for (var i = 0; i < childDirectives.length; i += 1) {
        }
    };
    EachDirective.prototype.instantiate = function (live, scope, rank, stack) {
        if (rank < this._bindings.length) {
            var binding = this._bindings.getItem(rank);
            var bindKey_1 = binding.key.isDefined() ? binding.key : Num.valueOf(rank);
            stack.push(scope);
            var bindValues = binding.toValue().evaluate(stack);
            stack.pop();
            bindValues.forEach(function (item) {
                this.instantiate(live, scope.branch().slot(bindKey_1, item.toValue()), rank + 1, stack);
            }, this);
        }
        else {
            var key = this._keySelector.evaluate(scope).toValue();
            var childDirectives = this._childDirectives.get(key);
            if (childDirectives) {
                this.updateChildDirectives(key, scope, childDirectives, stack);
            }
            else {
                childDirectives = this.createChildDirectives(key, scope, stack);
                if (childDirectives.length) {
                    this._childDirectives.set(key, childDirectives);
                }
            }
            if (childDirectives.length) {
                live.set(key, childDirectives);
            }
        }
    };
    EachDirective.prototype.reinstantiate = function () {
        var live = new BTree();
        this.instantiate(live, Record.empty(), 0, this.stack());
        if (live.size < this._childDirectives.size) {
            this._index = 0;
            this._childDirectives.forEach(function (key, childDirectives) {
                if (!live.has(key)) {
                    this._childDirectives.delete(key);
                    this.deleteChildDirectives(key, childDirectives);
                }
                else {
                    var childDirectives_1 = this._childDirectives.get(key);
                    childDirectives_1[0].updateIndex(this._index);
                    this._index++;
                }
            }, this);
        }
    };
    EachDirective.prototype.willRestate = function () {
        this.reinstantiate();
    };
    EachDirective.prototype.didInsertChildModel = function (childModel) {
        this._childDirectives.forEach(function (key, childDirectives) {
            for (var i = 0; i < childDirectives.length; i += 1) {
                var childDirective = childDirectives[i];
                if (childDirective._id === childModel._id) {
                    childModel.addDirective(childDirective);
                    childDirective.initData();
                }
            }
        });
    };
    return EachDirective;
}(Directive));
var EachChildDirective = (function (_super) {
    __extends(EachChildDirective, _super);
    function EachChildDirective(id, index) {
        var _this = _super.call(this) || this;
        _this._id = id;
        _this._index = index;
        _this._scope = Record.empty();
        return _this;
    }
    EachChildDirective.prototype.initData = function () {
        if (this._model) {
            this._model._modelScope._record = this._scope.concat(this._model._modelScope._record);
            this._model._modelScope._record.set('index', this._index);
            this._model.requireRestate();
        }
    };
    EachChildDirective.prototype.updateIndex = function (index) {
        if (this._model) {
            this._index = index;
            this._model._modelScope._record.set('index', this._index);
        }
    };
    EachChildDirective.prototype.updateData = function () {
        if (this._model) {
            var record_1 = this._model._modelScope._record;
            var changed_1 = false;
            this._scope.forEach(function (item) {
                if (item instanceof Field) {
                    var oldValue = record_1.get(item.key);
                    var newValue = item.value;
                    if (!oldValue.equals(newValue)) {
                        record_1.set(item.key, item.value);
                        changed_1 = true;
                    }
                }
            }, this);
            if (changed_1) {
                this._model.requireRestate();
            }
        }
    };
    return EachChildDirective;
}(Directive));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFjaC1kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlYWNoLWRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFrQixLQUFLLEVBQVMsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUVoRyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBRXRDO0lBQW1DLHlDQUFTO0lBWTFDO1FBQUEsWUFDRSxpQkFBTyxTQU1SO1FBTEMsS0FBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzlCLEtBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2hDLEtBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUN0QyxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNwQyxLQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQzs7SUFDbEIsQ0FBQztJQUVELHNCQUFJLG1DQUFRO2FBQVo7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxtQ0FBUTthQUFaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7OztPQUFBO0lBRVMsNkNBQXFCLEdBQS9CLFVBQWdDLEdBQVUsRUFBRSxLQUFhLEVBQUUsS0FBZ0I7UUFBM0UsaUJBaUJDO1FBaEJDLElBQU0sZUFBZSxHQUFHLEVBQStCLENBQUM7UUFDeEQsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQVU7WUFDaEMsSUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3BD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

var EachForm = (function (_super) {
    __extends(EachForm, _super);
    function EachForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(EachForm.prototype, "tag", {
        get: function () {
            return 'each';
        },
        enumerable: true,
        configurable: true
    });
    EachForm.prototype.cast = function (item) {
        console.info('each-form', item);
        if (item.tag === this.tag) {
            var directive_1 = new EachDirective();
            item.forEach(function (item) {
                this.materializeDirectiveParam(directive_1, item);
            }, this);
            return directive_1;
        }
        return undefined;
    };
    EachForm.prototype.materializeDirectiveParam = function (directive, item) {
        if (item instanceof Attr$1 && item.key.value === this.tag) {
            if (item.value instanceof Record) {
                directive._bindings = item.value.commit();
            }
        }
        else if (item.key instanceof Text$1) {
            var key = item.key.value;
            if (key === 'key') {
                directive._keySelector = item.toValue();
            }
        }
        else if (item instanceof Value) {
            directive._template.push(item);
        }
    };
    EachForm.Form = new EachForm();
    return EachForm;
}(DirectiveForm));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWFjaC1mb3JtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWFjaC1mb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQU8sSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQzVELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFHL0M7SUFBOEIsb0NBQTRCO0lBQTFEOztJQWlDQSxDQUFDO0lBaENDLHNCQUFJLHlCQUFHO2FBQVA7WUFDRSxPQUFPLE1BQU0sQ0FBQztRQUNoQixDQUFDOzs7T0FBQTtJQUVELHVCQUFJLEdBQUosVUFBSyxJQUFVO1FBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDekIsSUFBTSxXQUFTLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztZQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBVTtnQkFDL0IsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFdBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNsRCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDVCxPQUFPLFdBQVMsQ0FBQztTQUNsQjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCw0Q0FBeUIsR0FBekIsVUFBMEIsU0FBd0IsRUFBRSxJQUFVO1FBQzVELElBQUksSUFBSSxZQUFZLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ3ZELElBQUksSUFBSSxDQUFDLEtBQUssWUFBWSxNQUFNLEVBQUU7Z0JBQ2hDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUMzQztTQUNGO2FBQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxZQUFZLElBQUksRUFBRTtZQUNuQyxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztZQUMzQixJQUFJLEdBQUcsS0FBSyxLQUFLLEVBQUU7Z0JBQ2pCLFNBQVMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ3pDO1NBQ0Y7YUFBTSxJQUFJLElBQUksWUFBWSxLQUFLLEVBQUU7WUFDaEMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7SUFDSCxDQUFDO0lBRWUsYUFBSSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7SUFDeEMsZUFBQztDQUFBLEFBakNELENBQThCLGFBQWEsR0FpQzFDO1NBakNZLFFBQVEifQ==

var EventHandlerDirective = (function (_super) {
    __extends(EventHandlerDirective, _super);
    function EventHandlerDirective() {
        var _this = _super.call(this) || this;
        _this._type = null;
        _this._expr = null;
        _this._bindings = Record.empty();
        _this._events = Record.Empty;
        return _this;
    }
    EventHandlerDirective.prototype.setEvent = function (type, expr) {
        this._type = type;
        this._expr = expr;
    };
    EventHandlerDirective.prototype.updateEvent = function (state, stack) {
        var events = Record.empty(this._bindings.length);
        this._bindings.forEach(function (item) {
            if (item instanceof Slot) {
                var value = item.toValue();
                var args = value.args.evaluate(stack).toValue();
                if (args.isDefined()) {
                    var expr = new InvokeExpr(value.func, args);
                    events.slot(item.key.toString(), expr);
                }
            }
        }, this);
        if (!this._events.equals(events)) {
            this._events = events;
            state.slot('events', events);
        }
    };
    EventHandlerDirective.prototype.willRemodel = function (state, stack) {
        this.updateEvent(state, stack);
    };
    return EventHandlerDirective;
}(Directive));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtaGFuZGxlci1kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJldmVudC1oYW5kbGVyLWRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFZLE1BQU0sRUFBRSxVQUFVLEVBQVEsSUFBSSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFFdEM7SUFBMkMsaURBQVM7SUFNbEQ7UUFBQSxZQUNFLGlCQUFPLFNBS1I7UUFKQyxLQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixLQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixLQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQyxLQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7O0lBQzlCLENBQUM7SUFFRCx3Q0FBUSxHQUFSLFVBQVMsSUFBWSxFQUFFLElBQWdCO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFUywyQ0FBVyxHQUFyQixVQUFzQixLQUFhLEVBQUUsS0FBZ0I7UUFDbkQsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBVTtZQUN6QyxJQUFJLElBQUksWUFBWSxJQUFJLEVBQUU7Z0JBQ3hCLElBQU0sS0FBSyxHQUFRLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDbEMsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBR2xELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO29CQUNwQixJQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUU5QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBQ3hDO2FBQ0Y7UUFDSCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFVCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFDdEIsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBRUQsMkNBQVcsR0FBWCxVQUFZLEtBQWEsRUFBRSxLQUFnQjtRQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ0gsNEJBQUM7QUFBRCxDQUFDLEFBNUNELENBQTJDLFNBQVMsR0E0Q25EIn0=

var EventHandlerForm = (function (_super) {
    __extends(EventHandlerForm, _super);
    function EventHandlerForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(EventHandlerForm.prototype, "tag", {
        get: function () {
            return 'events';
        },
        enumerable: true,
        configurable: true
    });
    EventHandlerForm.prototype.cast = function (item) {
        if (item.tag === this.tag) {
            var directive_1 = new EventHandlerDirective();
            item.forEach(function (item) {
                this.materializeDirectiveParam(directive_1, item);
            }, this);
            return directive_1;
        }
        return undefined;
    };
    EventHandlerForm.prototype.materializeDirectiveParam = function (directive, item) {
        if (item instanceof Attr && item.key.toString() === this.tag) {
            return;
        }
        if (item instanceof Field) {
            directive._bindings.push(item);
        }
    };
    EventHandlerForm.Form = new EventHandlerForm();
    return EventHandlerForm;
}(DirectiveForm));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtaGFuZGxlci1mb3JtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZXZlbnQtaGFuZGxlci1mb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQU8sS0FBSyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUdoRTtJQUFzQyw0Q0FBb0M7SUFBMUU7O0lBd0NBLENBQUM7SUF2Q0Msc0JBQUksaUNBQUc7YUFBUDtZQUNFLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUM7OztPQUFBO0lBRUQsK0JBQUksR0FBSixVQUFLLElBQVU7UUFnQmIsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDekIsSUFBTSxXQUFTLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1lBQzlDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFVO2dCQUMvQixJQUFJLENBQUMseUJBQXlCLENBQUMsV0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2xELENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNULE9BQU8sV0FBUyxDQUFDO1NBQ2xCO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELG9EQUF5QixHQUF6QixVQUEwQixTQUFnQyxFQUFFLElBQVU7UUFDcEUsSUFBSSxJQUFJLFlBQVksSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUFFLE9BQU87U0FBRTtRQUN6RSxJQUFJLElBQUksWUFBWSxLQUFLLEVBQUU7WUFDekIsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7SUFDSCxDQUFDO0lBRWUscUJBQUksR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7SUFDaEQsdUJBQUM7Q0FBQSxBQXhDRCxDQUFzQyxhQUFhLEdBd0NsRDtTQXhDWSxnQkFBZ0IifQ==

var InjectDirective = (function (_super) {
    __extends(InjectDirective, _super);
    function InjectDirective() {
        var _this = _super.call(this) || this;
        _this._selector = Selector.literal(Value.Absent);
        _this._bindings = Record.empty();
        return _this;
    }
    Object.defineProperty(InjectDirective.prototype, "selector", {
        get: function () {
            return this._selector;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InjectDirective.prototype, "bindings", {
        get: function () {
            return this._bindings;
        },
        enumerable: true,
        configurable: true
    });
    InjectDirective.prototype.reinject = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var scope = this._selector.evaluate(stack);
        if (scope instanceof Record) {
            this._bindings.forEach(function (binding) {
                var key = binding.key.evaluate(stack).toValue();
                if (key.isDefined()) {
                    var oldValue = scope.get(key);
                    var newValue = binding.toValue().evaluate(stack).toValue();
                    if (newValue.isDefined()) {
                        if (!oldValue.equals(newValue)) {
                            scope.set(key, newValue);
                        }
                    }
                    else if (oldValue.isDefined()) {
                        scope.delete(key);
                    }
                }
            }, this);
        }
    };
    InjectDirective.prototype.willRestate = function () {
        this.reinject();
    };
    return InjectDirective;
}(Directive));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LWRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluamVjdC1kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBa0IsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDckUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUV0QztJQUFxQywyQ0FBUztJQU01QztRQUFBLFlBQ0UsaUJBQU8sU0FHUjtRQUZDLEtBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsS0FBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7O0lBQ2xDLENBQUM7SUFFRCxzQkFBSSxxQ0FBUTthQUFaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7OztPQUFBO0lBRUQsc0JBQUkscUNBQVE7YUFBWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDOzs7T0FBQTtJQUVTLGtDQUFRLEdBQWxCLFVBQW1CLEtBQStCO1FBQS9CLHNCQUFBLEVBQUEsUUFBbUIsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNoRCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxJQUFJLEtBQUssWUFBWSxNQUFNLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxPQUFhO2dCQUM1QyxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDbEQsSUFBSSxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUU7b0JBQ25CLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ2hDLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBQzdELElBQUksUUFBUSxDQUFDLFNBQVMsRUFBRSxFQUFFO3dCQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTs0QkFDOUIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7eUJBQzFCO3FCQUNGO3lCQUFNLElBQUksUUFBUSxDQUFDLFNBQVMsRUFBRSxFQUFFO3dCQUMvQixLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUNuQjtpQkFDRjtZQUNILENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNWO0lBQ0gsQ0FBQztJQUVELHFDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQTNDRCxDQUFxQyxTQUFTLEdBMkM3QyJ9

var InjectForm = (function (_super) {
    __extends(InjectForm, _super);
    function InjectForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(InjectForm.prototype, "tag", {
        get: function () {
            return 'inject';
        },
        enumerable: true,
        configurable: true
    });
    InjectForm.prototype.cast = function (item) {
        if (item.tag === this.tag) {
            var directive_1 = new InjectDirective();
            item.forEach(function (item) {
                this.materializeDirectiveParam(directive_1, item);
            }, this);
            return directive_1;
        }
        return undefined;
    };
    InjectForm.prototype.materializeDirectiveParam = function (directive, item) {
        if (item instanceof Attr$1 && item.key.value === this.tag && item.value instanceof Selector) {
            directive._selector = item.value;
        }
        else if (item instanceof Field) {
            directive._bindings.push(item);
        }
    };
    InjectForm.Form = new InjectForm();
    return InjectForm;
}(DirectiveForm));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0LWZvcm0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmplY3QtZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFPLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3hELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFHbkQ7SUFBZ0Msc0NBQThCO0lBQTlEOztJQXlCQSxDQUFDO0lBeEJDLHNCQUFJLDJCQUFHO2FBQVA7WUFDRSxPQUFPLFFBQVEsQ0FBQztRQUNsQixDQUFDOzs7T0FBQTtJQUVELHlCQUFJLEdBQUosVUFBSyxJQUFVO1FBQ2IsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDekIsSUFBTSxXQUFTLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztZQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBVTtnQkFDL0IsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFdBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNsRCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDVCxPQUFPLFdBQVMsQ0FBQztTQUNsQjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCw4Q0FBeUIsR0FBekIsVUFBMEIsU0FBMEIsRUFBRSxJQUFVO1FBQzlELElBQUksSUFBSSxZQUFZLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLFlBQVksUUFBUSxFQUFFO1lBQ3pGLFNBQVMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNsQzthQUFNLElBQUksSUFBSSxZQUFZLEtBQUssRUFBRTtZQUNoQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7SUFFZSxlQUFJLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztJQUMxQyxpQkFBQztDQUFBLEFBekJELENBQWdDLGFBQWEsR0F5QjVDO1NBekJZLFVBQVUifQ==

var LetDirective = (function (_super) {
    __extends(LetDirective, _super);
    function LetDirective(key, rhs) {
        var _this = _super.call(this) || this;
        _this._key = key;
        _this._rhs = rhs;
        _this._value = Value.Absent;
        return _this;
    }
    LetDirective.prototype.reevaluate = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var oldValue = this._value;
        var newValue = this._rhs.evaluate(stack).toValue();
        if (newValue.isDefined()) {
            if (!oldValue.equals(newValue)) {
                this._value = newValue.commit();
                this._model._modelScope._record.set(this._key, newValue);
                this._model.requireRestate();
            }
        }
        else if (oldValue.isDefined()) {
            this._value = newValue.commit();
            this._model._modelScope._record.delete(this._key);
            this._model.requireRestate();
        }
    };
    LetDirective.prototype.willRestate = function () {
        this.reevaluate();
    };
    return LetDirective;
}(Directive));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGV0LWRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxldC1kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBWSxLQUFLLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDN0MsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUV0QztJQUFrQyx3Q0FBUztJQVF6QyxzQkFBWSxHQUFVLEVBQUUsR0FBVTtRQUFsQyxZQUNFLGlCQUFPLFNBSVI7UUFIQyxLQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixLQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7O0lBQzdCLENBQUM7SUFFUyxpQ0FBVSxHQUFwQixVQUFxQixLQUErQjtRQUEvQixzQkFBQSxFQUFBLFFBQW1CLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDbEQsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUM3QixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyRCxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxNQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDMUQsSUFBSSxDQUFDLE1BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUMvQjtTQUNGO2FBQU0sSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDaEMsSUFBSSxDQUFDLE1BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLE1BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFRCxrQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUFsQ0QsQ0FBa0MsU0FBUyxHQWtDMUMifQ==

var LetForm = (function (_super) {
    __extends(LetForm, _super);
    function LetForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(LetForm.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    LetForm.prototype.cast = function (item) {
        if (item instanceof Field) {
            var key = item.key;
            var rhs = item.value.header('let');
            if (rhs.isDefined()) {
                return new LetDirective(key, rhs);
            }
        }
        return undefined;
    };
    LetForm.Form = new LetForm();
    return LetForm;
}(DirectiveForm));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGV0LWZvcm0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsZXQtZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFPLEtBQUssRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRzdDO0lBQTZCLG1DQUEyQjtJQUF4RDs7SUFpQkEsQ0FBQztJQWhCQyxzQkFBSSx3QkFBRzthQUFQO1lBQ0UsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxHQUFKLFVBQUssSUFBVTtRQUNiLElBQUksSUFBSSxZQUFZLEtBQUssRUFBRTtZQUN6QixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ3JCLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JDLElBQUksR0FBRyxDQUFDLFNBQVMsRUFBRSxFQUFFO2dCQUNuQixPQUFPLElBQUksWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUNuQztTQUNGO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVlLFlBQUksR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBQ3ZDLGNBQUM7Q0FBQSxBQWpCRCxDQUE2QixhQUFhLEdBaUJ6QztTQWpCWSxPQUFPIn0=

var StyleDirective = (function (_super) {
    __extends(StyleDirective, _super);
    function StyleDirective() {
        var _this = _super.call(this) || this;
        _this._bindings = Record.empty();
        _this._style = Record.Empty;
        return _this;
    }
    StyleDirective.prototype.restyle = function (state, stack) {
        var style = Record.empty(this._bindings.length);
        this._bindings.forEach(function (item) {
            if (item instanceof Slot && item.key instanceof Text$1) {
                var value = item.value.evaluate(stack).toValue();
                if (value.isDefined()) {
                    style.slot(item.key, value);
                }
            }
        }, this);
        if (!this._style.equals(style)) {
            this._style = style;
            state.slot('style', style);
        }
    };
    StyleDirective.prototype.willRemodel = function (state, stack) {
        this.restyle(state, stack);
    };
    return StyleDirective;
}(Directive));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUtZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3R5bGUtZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWtCLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFFdEM7SUFBb0MsMENBQVM7SUFNM0M7UUFBQSxZQUNFLGlCQUFPLFNBR1I7UUFGQyxLQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQyxLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7O0lBQzdCLENBQUM7SUFFUyxnQ0FBTyxHQUFqQixVQUFrQixLQUFhLEVBQUUsS0FBZ0I7UUFDL0MsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBVTtZQUN6QyxJQUFJLElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsWUFBWSxJQUFJLEVBQUU7Z0JBQ3BELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNuRCxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUUsRUFBRTtvQkFDckIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUM3QjthQUNGO1FBQ0gsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRVQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztJQUVELG9DQUFXLEdBQVgsVUFBWSxLQUFhLEVBQUUsS0FBZ0I7UUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQWhDRCxDQUFvQyxTQUFTLEdBZ0M1QyJ9

var StyleForm = (function (_super) {
    __extends(StyleForm, _super);
    function StyleForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(StyleForm.prototype, "tag", {
        get: function () {
            return 'style';
        },
        enumerable: true,
        configurable: true
    });
    StyleForm.prototype.cast = function (item) {
        if (item.tag === this.tag) {
            var directive_1 = new StyleDirective();
            item.forEach(function (item) {
                this.materializeDirectiveParam(directive_1, item);
            }, this);
            return directive_1;
        }
        return undefined;
    };
    StyleForm.prototype.materializeDirectiveParam = function (directive, item) {
        if (item instanceof Attr$1 && item.key.value === this.tag) {
            return;
        }
        else if (item instanceof Field) {
            directive._bindings.push(item);
        }
    };
    StyleForm.Form = new StyleForm();
    return StyleForm;
}(DirectiveForm));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUtZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0eWxlLWZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBTyxLQUFLLEVBQUUsSUFBSSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFHakQ7SUFBK0IscUNBQTZCO0lBQTVEOztJQXlCQSxDQUFDO0lBeEJDLHNCQUFJLDBCQUFHO2FBQVA7WUFDRSxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDOzs7T0FBQTtJQUVELHdCQUFJLEdBQUosVUFBSyxJQUFVO1FBQ2IsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDekIsSUFBTSxXQUFTLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztZQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBVTtnQkFDL0IsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFdBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNsRCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDVCxPQUFPLFdBQVMsQ0FBQztTQUNsQjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCw2Q0FBeUIsR0FBekIsVUFBMEIsU0FBeUIsRUFBRSxJQUFVO1FBQzdELElBQUksSUFBSSxZQUFZLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ3ZELE9BQU87U0FDUjthQUFNLElBQUksSUFBSSxZQUFZLEtBQUssRUFBRTtZQUNoQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7SUFFZSxjQUFJLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUN6QyxnQkFBQztDQUFBLEFBekJELENBQStCLGFBQWEsR0F5QjNDO1NBekJZLFNBQVMifQ==

var TickDirective = (function (_super) {
    __extends(TickDirective, _super);
    function TickDirective(timeout) {
        var _this = _super.call(this) || this;
        _this._timeout = timeout;
        _this._deadline = 0;
        _this._timer = 0;
        _this.onTick = _this.onTick.bind(_this);
        return _this;
    }
    TickDirective.prototype.reschedule = function (stack) {
        var timeout = this._timeout.evaluate(stack).numberValue();
        if (timeout) {
            var deadline = Date.now() + timeout;
            if (Math.abs(this._deadline - deadline) > 16) {
                if (this._timer) {
                    clearTimeout(this._timer);
                }
                this._deadline = deadline;
                this._timer = setTimeout(this.onTick, timeout);
            }
        }
        else if (this._timer) {
            clearTimeout(this._timer);
            this._deadline = 0;
            this._timer = 0;
        }
    };
    TickDirective.prototype.onTick = function () {
        this._deadline = 0;
        this._timer = 0;
        this._model.requireRestate();
        this.reschedule(this.stack());
    };
    TickDirective.prototype.didRemodel = function (state, stack) {
        _super.prototype.didRemodel.call(this, state, stack);
        this.reschedule(stack);
    };
    return TickDirective;
}(Directive));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGljay1kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0aWNrLWRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUd0QztJQUFtQyx5Q0FBUztJQVExQyx1QkFBWSxPQUFjO1FBQTFCLFlBQ0UsaUJBQU8sU0FLUjtRQUpDLEtBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLEtBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLEtBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLENBQUM7O0lBQ3ZDLENBQUM7SUFFUyxrQ0FBVSxHQUFwQixVQUFxQixLQUFnQjtRQUNuQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1RCxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUM7WUFFdEMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUM1QyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ2YsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDM0I7Z0JBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDdkQ7U0FDRjthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUN0QixZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztJQUVTLDhCQUFNLEdBQWhCO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDLE1BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxrQ0FBVSxHQUFWLFVBQVcsS0FBYSxFQUFFLEtBQWdCO1FBQ3hDLGlCQUFNLFVBQVUsWUFBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQUFDLEFBOUNELENBQW1DLFNBQVMsR0E4QzNDIn0=

var TickForm = (function (_super) {
    __extends(TickForm, _super);
    function TickForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TickForm.prototype, "tag", {
        get: function () {
            return 'tick';
        },
        enumerable: true,
        configurable: true
    });
    TickForm.prototype.cast = function (item) {
        var timeout = item.header(this.tag);
        if (timeout.isDefined()) {
            return new TickDirective(timeout);
        }
        return undefined;
    };
    TickForm.Form = new TickForm();
    return TickForm;
}(DirectiveForm));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGljay1mb3JtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGljay1mb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRy9DO0lBQThCLG9DQUE0QjtJQUExRDs7SUFjQSxDQUFDO0lBYkMsc0JBQUkseUJBQUc7YUFBUDtZQUNFLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7OztPQUFBO0lBRUQsdUJBQUksR0FBSixVQUFLLElBQVU7UUFDYixJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUN2QixPQUFPLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ25DO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVlLGFBQUksR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQ3hDLGVBQUM7Q0FBQSxBQWRELENBQThCLGFBQWEsR0FjMUM7U0FkWSxRQUFRIn0=

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFakQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUV2QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBRXRDLE9BQU8sRUFDTCxhQUFhLEVBQ2IsaUJBQWlCLEdBQ2xCLE1BQU0sa0JBQWtCLENBQUM7QUFFMUIsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRS9DLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFFckMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFFaEUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFdEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRW5ELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTdDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFbkMsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRWpELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFFdkMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRS9DLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxhQUFhLENBQUMifQ==

var CustomEventConstructor = function (type, init) {
    if (init === void 0) { init = {}; }
    var event = document.createEvent('CustomEvent');
    event.initCustomEvent(type, init.bubbles || false, init.cancelable || false, init.detail);
    event.__proto__ = this.__proto__;
    return event;
};
if (typeof Event !== 'undefined') {
    CustomEventConstructor.prototype = Event.prototype;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWV2ZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3VzdG9tLWV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQU0sc0JBQXNCLEdBQzFCLFVBQTZCLElBQVksRUFBRSxJQUEwQjtJQUExQixxQkFBQSxFQUFBLFNBQTBCO0lBQ2pFLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFnQixDQUFDO0lBQ2pFLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLElBQUksS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLElBQUksS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6RixLQUFhLENBQUMsU0FBUyxHQUFJLElBQVksQ0FBQyxTQUFTLENBQUM7SUFDbkQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFRLENBQUM7QUFDYixJQUFJLE9BQU8sS0FBSyxLQUFLLFdBQVcsRUFBRTtJQUNoQyxzQkFBc0IsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztDQUNwRDtBQUVELE9BQU8sRUFBQyxzQkFBc0IsSUFBSSxXQUFXLEVBQUMsQ0FBQyJ9

var ResizeObserverPolyfill = (function () {
    function ResizeObserverPolyfill(callback) {
        this.callback = callback;
        this.observationTargets = [];
        this.activeTargets = [];
        this.skippedTargets = [];
        DETECTOR.addObserver(this);
    }
    ResizeObserverPolyfill.prototype.observe = function (target) {
        for (var i = 0; i < this.observationTargets.length; i += 1) {
            if (target === this.observationTargets[i].target) {
                return;
            }
        }
        var observation = new ResizeObservationPolyfill(target);
        this.observationTargets.push(observation);
        DETECTOR.redetect();
    };
    ResizeObserverPolyfill.prototype.unobserve = function (target) {
        for (var i = 0; i < this.observationTargets.length; i += 1) {
            if (target === this.observationTargets[i].target) {
                this.observationTargets.splice(i, 1);
            }
        }
        if (!this.observationTargets.length) {
            DETECTOR.removeObserver(this);
        }
    };
    ResizeObserverPolyfill.prototype.gatherActive = function (depth) {
        this.clearActive();
        this.clearSkipped();
        for (var i = 0; i < this.observationTargets.length; i += 1) {
            var observation = this.observationTargets[i];
            if (observation.isActive()) {
                var targetDepth = calculateDepth(observation.target);
                if (targetDepth > depth) {
                    this.activeTargets.push(observation);
                }
                else {
                    this.skippedTargets.push(observation);
                }
            }
        }
    };
    ResizeObserverPolyfill.prototype.broadcastActive = function (shallowestTargetDepth) {
        if (this.hasActive()) {
            var entries = [];
            for (var i = 0; i < this.activeTargets.length; i += 1) {
                var observation = this.observationTargets[i];
                var entry = new ResizeObserverEntryPolyfill(observation.target);
                entries.push(entry);
                observation.broadcastWidth = entry.contentRect.width;
                observation.broadcastHeight = entry.contentRect.height;
                var targetDepth = calculateDepth(observation.target);
                if (targetDepth < shallowestTargetDepth) {
                    shallowestTargetDepth = targetDepth;
                }
            }
            this.callback(entries, this);
            this.clearActive();
        }
        return shallowestTargetDepth;
    };
    ResizeObserverPolyfill.prototype.hasActive = function () {
        return this.activeTargets.length > 0;
    };
    ResizeObserverPolyfill.prototype.hasSkipped = function () {
        return this.skippedTargets.length > 0;
    };
    ResizeObserverPolyfill.prototype.clearActive = function () {
        this.activeTargets.length = 0;
    };
    ResizeObserverPolyfill.prototype.clearSkipped = function () {
        this.skippedTargets.length = 0;
    };
    ResizeObserverPolyfill.prototype.disconnect = function () {
        this.clearActive();
        this.observationTargets.length = 0;
        DETECTOR.removeObserver(this);
    };
    return ResizeObserverPolyfill;
}());
var ResizeObserver = (typeof window !== 'undefined' && typeof window.ResizeObserver !== 'undefined')
    ? window.ResizeObserver
    : ResizeObserverPolyfill;
var ResizeObserverEntryPolyfill = (function () {
    function ResizeObserverEntryPolyfill(target, contentRect) {
        this.target = target;
        this.contentRect = contentRect || getContentRect(target);
    }
    return ResizeObserverEntryPolyfill;
}());
var ResizeObservationPolyfill = (function () {
    function ResizeObservationPolyfill(target) {
        this.target = target;
        this.broadcastWidth = 0;
        this.broadcastHeight = 0;
    }
    ResizeObservationPolyfill.prototype.isActive = function () {
        var contentRect = getContentRect(this.target);
        return !!contentRect && (Math.round(contentRect.width) !== Math.round(this.broadcastWidth) ||
            Math.round(contentRect.height) !== Math.round(this.broadcastHeight));
    };
    return ResizeObservationPolyfill;
}());
var ResizeDetector = (function () {
    function ResizeDetector() {
        this.resizeObservers = [];
        this.mutationObserver = undefined;
        this.detectAnimationFrame = 0;
        this.connected = false;
        this.onResize = this.onResize.bind(this);
        this.onTransitionEnd = this.onTransitionEnd.bind(this);
        this.onMutation = this.onMutation.bind(this);
        this.onSubtreeModified = undefined;
        this.onDetectAnimationFrame = this.onDetectAnimationFrame.bind(this);
    }
    ResizeDetector.prototype.addObserver = function (observer) {
        if (this.resizeObservers.indexOf(observer) < 0) {
            this.resizeObservers.push(observer);
        }
        this.connect();
    };
    ResizeDetector.prototype.removeObserver = function (observer) {
        var index = this.resizeObservers.indexOf(observer);
        if (index >= 0) {
            this.resizeObservers.splice(index, 1);
        }
        if (!this.resizeObservers.length) {
            this.disconnect();
        }
    };
    ResizeDetector.prototype.gatherActive = function (depth) {
        for (var i = 0; i < this.resizeObservers.length; i += 1) {
            this.resizeObservers[i].gatherActive(depth);
        }
    };
    ResizeDetector.prototype.hasActive = function () {
        for (var i = 0; i < this.resizeObservers.length; i += 1) {
            if (this.resizeObservers[i].hasActive()) {
                return true;
            }
        }
        return false;
    };
    ResizeDetector.prototype.hasSkipped = function () {
        for (var i = 0; i < this.resizeObservers.length; i += 1) {
            if (this.resizeObservers[i].hasSkipped()) {
                return true;
            }
        }
        return false;
    };
    ResizeDetector.prototype.broadcastActive = function () {
        var shallowestTargetDepth = Number.POSITIVE_INFINITY;
        for (var i = 0; i < this.resizeObservers.length; i += 1) {
            shallowestTargetDepth = this.resizeObservers[i].broadcastActive(shallowestTargetDepth);
        }
        return shallowestTargetDepth;
    };
    ResizeDetector.prototype.detect = function () {
        var depth = 0;
        this.gatherActive(depth);
        do {
            depth = this.broadcastActive();
            this.gatherActive(depth);
        } while (this.hasActive());
        if (this.hasSkipped()) {
            window.dispatchEvent(new ErrorEvent('ResizeObserver loop completed with undelivered notifications.'));
        }
    };
    ResizeDetector.prototype.redetect = function () {
        if (!this.detectAnimationFrame) {
            this.detectAnimationFrame = requestAnimationFrame(this.onDetectAnimationFrame);
        }
    };
    ResizeDetector.prototype.onDetectAnimationFrame = function (timestamp) {
        this.detectAnimationFrame = 0;
        this.detect();
    };
    ResizeDetector.prototype.onResize = function (event) {
        this.redetect();
    };
    ResizeDetector.prototype.onTransitionEnd = function (event) {
        var reflow = false;
        for (var i = 0; i < REFLOW_KEYS.length; i += 1) {
            if (event.propertyName.indexOf(REFLOW_KEYS[i]) >= 0) {
                reflow = true;
                break;
            }
        }
        if (reflow) {
            this.redetect();
        }
    };
    ResizeDetector.prototype.onMutation = function (mutations) {
        for (var i = 0; i < mutations.length; i += 1) {
            var mutation = mutations[i];
            if (mutation.type === 'childList') {
                if (mutation.addedNodes && mutation.addedNodes.length > 0) {
                    for (var j = 0; j < mutation.addedNodes.length; j += 1) {
                        this.addShadows(mutation.addedNodes[j]);
                    }
                }
            }
        }
        this.redetect();
    };
    ResizeDetector.prototype.addShadows = function (node) {
        if (node instanceof Element) {
            for (var i = 0; i < node.childNodes.length; i += 1) {
                this.addShadows(node.childNodes[i]);
            }
            if (node.shadowRoot) {
                this.observe(node.shadowRoot);
                this.addShadows(node.shadowRoot);
            }
        }
    };
    ResizeDetector.prototype.observe = function (target) {
        this.mutationObserver.observe(target, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true,
        });
    };
    ResizeDetector.prototype.connect = function () {
        if (this.connected) {
            return;
        }
        window.addEventListener('resize', this.onResize);
        document.addEventListener('transitionend', this.onTransitionEnd);
        var isIE11 = typeof navigator !== 'undefined' && (/Trident\/.*rv:11/).test(navigator.userAgent);
        if (typeof MutationObserver !== 'undefined' && !isIE11) {
            this.mutationObserver = new MutationObserver(this.onMutation);
            this.observe(document);
            this.addShadows(document);
        }
        else {
            this.onSubtreeModified = this.onResize;
            document.addEventListener('DOMSubtreeModified', this.onSubtreeModified);
        }
        this.connected = true;
    };
    ResizeDetector.prototype.disconnect = function () {
        if (!this.connected) {
            return;
        }
        window.removeEventListener('resize', this.onResize);
        document.removeEventListener('transitionend', this.onTransitionEnd);
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = undefined;
        }
        if (this.onSubtreeModified) {
            document.removeEventListener('DOMSubtreeModified', this.onSubtreeModified);
            this.onSubtreeModified = undefined;
        }
        if (this.detectAnimationFrame) {
            cancelAnimationFrame(this.detectAnimationFrame);
            this.detectAnimationFrame = 0;
        }
        this.connected = false;
    };
    return ResizeDetector;
}());
var REFLOW_KEYS = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
var DETECTOR = new ResizeDetector();
function calculateDepth(node) {
    var k = 0;
    while (node.parentNode) {
        node = node.parentNode;
        k += 1;
    }
    return k;
}
function isSVGGraphicsElement(target) {
    return typeof SVGGraphicsElement !== 'undefined' ?
        target instanceof SVGGraphicsElement :
        target instanceof SVGElement && typeof target.getBBox === 'function';
}
function getContentRect(target) {
    if (target instanceof HTMLElement) {
        return getHTMLContentRect(target);
    }
    else if (isSVGGraphicsElement(target)) {
        return getSVGContentRect(target);
    }
    else {
        return createContentRect(0, 0, 0, 0);
    }
}
function getHTMLContentRect(target) {
    if (!target.clientWidth && !target.clientHeight) {
        return createContentRect(0, 0, 0, 0);
    }
    var style = getComputedStyle(target);
    var paddingLeft = toFloat(style.getPropertyValue('padding-left'));
    var paddingTop = toFloat(style.getPropertyValue('padding-top'));
    var xPadding = paddingLeft + toFloat(style.getPropertyValue('padding-right'));
    var yPadding = paddingTop + toFloat(style.getPropertyValue('padding-bottom'));
    var width = toFloat(style.getPropertyValue('width'));
    var height = toFloat(style.getPropertyValue('height'));
    if (style.getPropertyValue('box-sizing') === 'border-box') {
        if (Math.round(width + xPadding) !== target.clientWidth) {
            width -= xPadding + toFloat(style.getPropertyValue('border-left-width')) +
                toFloat(style.getPropertyValue('border-right-width'));
        }
        if (Math.round(height + yPadding) !== target.clientHeight) {
            height -= yPadding + toFloat(style.getPropertyValue('border-top-width')) +
                toFloat(style.getPropertyValue('border-bottom-width'));
        }
    }
    if (target !== document.documentElement) {
        var yScrollbar = Math.round(width + xPadding) - target.clientWidth;
        var xScrollbar = Math.round(height + yPadding) - target.clientHeight;
        if (Math.abs(yScrollbar) !== 1) {
            width -= yScrollbar;
        }
        if (Math.abs(xScrollbar) !== 1) {
            height -= xScrollbar;
        }
    }
    return createContentRect(paddingLeft, paddingTop, width, height);
}
function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createContentRect(0, 0, bbox.width, bbox.height);
}
function toFloat(value) {
    return parseFloat(value) || 0;
}
function createContentRect(x, y, width, height) {
    return {
        x: x,
        y: y,
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
    };
}
//# sourceMappingURL=data:application/json;base64,

var DurationFormat = (function () {
    function DurationFormat() {
    }
    return DurationFormat;
}());
var SECOND$1 = 1000;
var MINUTE$1 = 60 * SECOND$1;
var HOUR$1 = 60 * MINUTE$1;
var DAY = 24 * HOUR$1;
var WEEK = 7 * DAY;
var HMSDurationFormat = (function (_super) {
    __extends(HMSDurationFormat, _super);
    function HMSDurationFormat(units) {
        if (units === void 0) { units = ''; }
        var _this = _super.call(this) || this;
        _this.units = units;
        return _this;
    }
    HMSDurationFormat.prototype.format = function (millis) {
        if (isFinite(millis)) {
            var weeks = void 0;
            if (millis > WEEK) {
                weeks = Math.floor(millis / WEEK);
                millis %= WEEK;
            }
            var days = void 0;
            if (millis > DAY) {
                days = Math.floor(millis / DAY);
                millis %= DAY;
            }
            var hours = void 0;
            if (millis > HOUR$1) {
                hours = Math.floor(millis / HOUR$1);
                millis %= HOUR$1;
            }
            var minutes = void 0;
            if (millis > MINUTE$1) {
                minutes = Math.floor(millis / MINUTE$1);
                millis %= MINUTE$1;
            }
            var seconds = void 0;
            if (millis > SECOND$1) {
                seconds = Math.floor(millis / SECOND$1);
                millis %= SECOND$1;
            }
            var s = '';
            if (weeks) {
                s += weeks + 'w';
            }
            if (days) {
                s += days + 'd';
            }
            if (hours) {
                s += hours + 'h';
            }
            if (minutes) {
                s += minutes + 'm';
            }
            if (seconds || !s) {
                s += (seconds || 0) + 's';
            }
            s += this.units;
            return s;
        }
        else {
            return '' + millis;
        }
    };
    return HMSDurationFormat;
}(DurationFormat));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVyYXRpb24tZm9ybWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHVyYXRpb24tZm9ybWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtJQUFBO0lBRUEsQ0FBQztJQUFELHFCQUFDO0FBQUQsQ0FBQyxBQUZELElBRUM7O0FBRUQsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLElBQU0sTUFBTSxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUM7QUFDM0IsSUFBTSxJQUFJLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQztBQUN6QixJQUFNLEdBQUcsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLElBQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7QUFFckI7SUFBdUMsNkNBQWM7SUFHbkQsMkJBQVksS0FBa0I7UUFBbEIsc0JBQUEsRUFBQSxVQUFrQjtRQUE5QixZQUNFLGlCQUFPLFNBRVI7UUFEQyxLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzs7SUFDckIsQ0FBQztJQUVELGtDQUFNLEdBQU4sVUFBTyxNQUFjO1FBQ25CLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BCLElBQUksS0FBSyxTQUFBLENBQUM7WUFDVixJQUFJLE1BQU0sR0FBRyxJQUFJLEVBQUU7Z0JBQ2pCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQztnQkFDbEMsTUFBTSxJQUFJLElBQUksQ0FBQzthQUNoQjtZQUNELElBQUksSUFBSSxTQUFBLENBQUM7WUFDVCxJQUFJLE1BQU0sR0FBRyxHQUFHLEVBQUU7Z0JBQ2hCLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDaEMsTUFBTSxJQUFJLEdBQUcsQ0FBQzthQUNmO1lBQ0QsSUFBSSxLQUFLLFNBQUEsQ0FBQztZQUNWLElBQUksTUFBTSxHQUFHLElBQUksRUFBRTtnQkFDakIsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDO2dCQUNsQyxNQUFNLElBQUksSUFBSSxDQUFDO2FBQ2hCO1lBQ0QsSUFBSSxPQUFPLFNBQUEsQ0FBQztZQUNaLElBQUksTUFBTSxHQUFHLE1BQU0sRUFBRTtnQkFDbkIsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QyxNQUFNLElBQUksTUFBTSxDQUFDO2FBQ2xCO1lBQ0QsSUFBSSxPQUFPLFNBQUEsQ0FBQztZQUNaLElBQUksTUFBTSxHQUFHLE1BQU0sRUFBRTtnQkFDbkIsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QyxNQUFNLElBQUksTUFBTSxDQUFDO2FBQ2xCO1lBQ0QsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1gsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsQ0FBQyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUM7YUFDbEI7WUFDRCxJQUFJLElBQUksRUFBRTtnQkFDUixDQUFDLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQzthQUNqQjtZQUNELElBQUksS0FBSyxFQUFFO2dCQUNULENBQUMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO2FBQ2xCO1lBQ0QsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsQ0FBQyxJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUM7YUFDcEI7WUFDRCxJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUMsRUFBRTtnQkFDakIsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQzthQUMzQjtZQUNELENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ2hCLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7YUFBTTtZQUNMLE9BQU8sRUFBRSxHQUFHLE1BQU0sQ0FBQztTQUNwQjtJQUNILENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUF6REQsQ0FBdUMsY0FBYyxHQXlEcEQifQ==

var NumberFormat = (function () {
    function NumberFormat() {
    }
    return NumberFormat;
}());
var PREFIXES = ['p', 'n', 'u', 'm', '', 'k', 'M', 'G', 'T'];
var SINumberFormat = (function (_super) {
    __extends(SINumberFormat, _super);
    function SINumberFormat(digits, units, symbol) {
        if (digits === void 0) { digits = 2; }
        if (units === void 0) { units = ''; }
        if (symbol === void 0) { symbol = ''; }
        var _this = _super.call(this) || this;
        _this.digits = digits;
        _this.units = units;
        _this.symbol = symbol;
        return _this;
    }
    SINumberFormat.prototype.format = function (value) {
        if (isFinite(value)) {
            var se = value.toExponential(this.digits).split(/e/);
            var s = +se[0];
            var e = (+se[1] < 0) ? 0 : +se[1];
            var f = Math.floor(e / 3);
            return this.symbol + (s * Math.pow(10, e - f * 3)).toFixed(e) + PREFIXES[f + 4] + this.units;
        }
        else {
            return '' + value;
        }
    };
    return SINumberFormat;
}(NumberFormat));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLWZvcm1hdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm51bWJlci1mb3JtYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0lBQUE7SUFFQSxDQUFDO0lBQUQsbUJBQUM7QUFBRCxDQUFDLEFBRkQsSUFFQzs7QUFFRCxJQUFNLFFBQVEsR0FBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFeEU7SUFBb0MsMENBQVk7SUFLOUMsd0JBQVksTUFBa0IsRUFBRSxLQUFrQixFQUFFLE1BQW1CO1FBQTNELHVCQUFBLEVBQUEsVUFBa0I7UUFBRSxzQkFBQSxFQUFBLFVBQWtCO1FBQUUsdUJBQUEsRUFBQSxXQUFtQjtRQUF2RSxZQUNFLGlCQUFPLFNBSVI7UUFIQyxLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixLQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzs7SUFDdkIsQ0FBQztJQUVELCtCQUFNLEdBQU4sVUFBTyxLQUFhO1FBQ2xCLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25CLElBQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUV2RCxJQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQixJQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRTVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUM5RjthQUFNO1lBQ0wsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQXpCRCxDQUFvQyxZQUFZLEdBeUIvQyJ9

var ReconInterpolator = (function (_super) {
    __extends(ReconInterpolator, _super);
    function ReconInterpolator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReconInterpolator.prototype.map = function (u) {
        return Item.Absent;
    };
    ReconInterpolator.prototype.unmap = function (c) {
        return 0;
    };
    ReconInterpolator.prototype.range = function (i0, i1) {
        if (i0 === undefined) {
            return [this.map(0), this.map(1)];
        }
        else if (i1 === undefined) {
            i0 = i0;
            return Interpolator.recon(i0[0], i0[1]);
        }
        else {
            return Interpolator.recon(i0, i1);
        }
    };
    ReconInterpolator.prototype.equals = function (that) {
        return this === that;
    };
    return ReconInterpolator;
}(Interpolator));
var AttrInterpolator = (function (_super) {
    __extends(AttrInterpolator, _super);
    function AttrInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        if (!f0 && !f1) {
            throw new TypeError();
        }
        else if (!f1) {
            f1 = f0;
        }
        else if (!f0) {
            f0 = f1;
        }
        if (!(f0.key instanceof Text$1)) {
            throw new TypeError('' + f0.key);
        }
        else if (!(f1.key instanceof Text$1)) {
            throw new TypeError('' + f1.key);
        }
        f0.commit();
        f1.commit();
        _this.keyInterpolator = Interpolator.recon(f0.key, f1.key);
        _this.valueInterpolator = Interpolator.recon(f0.value, f1.value);
        return _this;
    }
    AttrInterpolator.prototype.map = function (u) {
        var key = this.keyInterpolator.map(u);
        var value = this.valueInterpolator.map(u);
        return Attr$1.of(key, value);
    };
    AttrInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    AttrInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof AttrInterpolator) {
            return this.keyInterpolator.equals(that.keyInterpolator)
                && this.valueInterpolator.equals(that.valueInterpolator);
        }
        return false;
    };
    return AttrInterpolator;
}(ReconInterpolator));
var SlotInterpolator = (function (_super) {
    __extends(SlotInterpolator, _super);
    function SlotInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        if (!f0 && !f1) {
            throw new TypeError();
        }
        else if (!f1) {
            f1 = f0;
        }
        else if (!f0) {
            f0 = f1;
        }
        f0.commit();
        f1.commit();
        _this.keyInterpolator = Interpolator.recon(f0.key, f1.key);
        _this.valueInterpolator = Interpolator.recon(f0.value, f1.value);
        return _this;
    }
    SlotInterpolator.prototype.map = function (u) {
        var key = this.keyInterpolator.map(u);
        var value = this.valueInterpolator.map(u);
        return Slot.of(key, value);
    };
    SlotInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    SlotInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof SlotInterpolator) {
            return this.keyInterpolator.equals(that.keyInterpolator)
                && this.valueInterpolator.equals(that.valueInterpolator);
        }
        return false;
    };
    return SlotInterpolator;
}(ReconInterpolator));
var ValueInterpolator = (function (_super) {
    __extends(ValueInterpolator, _super);
    function ValueInterpolator(v0, v1) {
        var _this = _super.call(this) || this;
        if (v0 !== undefined) {
            v0 = Value.fromAny(v0);
        }
        if (v1 !== undefined) {
            v1 = Value.fromAny(v1);
        }
        if (!v0 && !v1) {
            v1 = v0 = Value.Absent;
        }
        else if (!v1) {
            v1 = v0;
        }
        else if (!v0) {
            v0 = v1;
        }
        _this.v0 = v0.commit();
        _this.v1 = v1.commit();
        return _this;
    }
    ValueInterpolator.prototype.map = function (u) {
        return u < 1 ? this.v0 : this.v1;
    };
    ValueInterpolator.prototype.unmap = function (v) {
        return v.equals(this.v1) ? 1 : 0;
    };
    ValueInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ValueInterpolator) {
            return this.v0.equals(that.v0) && this.v1.equals(that.v1);
        }
        return false;
    };
    return ValueInterpolator;
}(ReconInterpolator));
var RecordInterpolator = (function (_super) {
    __extends(RecordInterpolator, _super);
    function RecordInterpolator(r0, r1) {
        var _this = _super.call(this) || this;
        if (r0 !== undefined) {
            r0 = Record.fromAny(r0);
        }
        if (r1 !== undefined) {
            r1 = Record.fromAny(r1);
        }
        if (!r0 && !r1) {
            r1 = r0 = Record.Empty;
        }
        else if (!r1) {
            r1 = r0;
        }
        else if (!r0) {
            r0 = r1;
        }
        r0.commit();
        r1.commit();
        _this.interpolators = [];
        var n = Math.min(r0.length, r1.length);
        for (var i = 0; i < n; i += 1) {
            _this.interpolators.push(Interpolator.recon(r0.getItem(i), r1.getItem(i)));
        }
        return _this;
    }
    RecordInterpolator.prototype.map = function (u) {
        var n = this.interpolators.length;
        var record = Record.empty(n);
        for (var i = 0; i < n; i += 1) {
            record.push(this.interpolators[i].map(u));
        }
        return record;
    };
    RecordInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    RecordInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof RecordInterpolator) {
            var n = this.interpolators.length;
            if (n === that.interpolators.length) {
                for (var i = 0; i < n; i += 1) {
                    if (!this.interpolators[i].equals(that.interpolators[i])) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    return RecordInterpolator;
}(ReconInterpolator));
var NumInterpolator = (function (_super) {
    __extends(NumInterpolator, _super);
    function NumInterpolator(y0, y1) {
        var _this = _super.call(this) || this;
        if (y0 === undefined && y1 === undefined) {
            y1 = y0 = 0;
        }
        else if (y1 === undefined) {
            y1 = y0;
        }
        else if (y0 === undefined) {
            y0 = y1;
        }
        _this.y0 = +y0;
        _this.dy = +y1 - _this.y0;
        return _this;
    }
    NumInterpolator.prototype.map = function (u) {
        return Num.valueOf(this.y0 + this.dy * u);
    };
    NumInterpolator.prototype.unmap = function (y) {
        return this.dy ? (y.value - this.y0) / this.dy : this.dy;
    };
    NumInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof NumInterpolator) {
            return this.y0 === that.y0 && this.dy === that.dy;
        }
        return false;
    };
    return NumInterpolator;
}(ReconInterpolator));
var InfixExprInterpolator = (function (_super) {
    __extends(InfixExprInterpolator, _super);
    function InfixExprInterpolator(e0, e1) {
        var _this = _super.call(this) || this;
        if (!e0 && !e1) {
            throw new TypeError();
        }
        else if (!e1) {
            e1 = e0;
        }
        else if (!e0) {
            e0 = e1;
        }
        _this.operator = e0.operator;
        if (_this.operator !== e1.operator) {
            throw new Error(e1.operator);
        }
        e0.commit();
        e1.commit();
        _this.lhsInterpolator = Interpolator.recon(e0.lhs, e1.lhs);
        _this.rhsInterpolator = Interpolator.recon(e0.rhs, e1.rhs);
        return _this;
    }
    InfixExprInterpolator.prototype.map = function (u) {
        var lhs = this.lhsInterpolator.map(u);
        var rhs = this.rhsInterpolator.map(u);
        switch (this.operator) {
            case '||': return lhs.or(rhs);
            case '&&': return lhs.and(rhs);
            case '|': return lhs.bor(rhs);
            case '^': return lhs.bxor(rhs);
            case '&': return lhs.band(rhs);
            case '<': return lhs.lt(rhs);
            case '<=': return lhs.le(rhs);
            case '==': return lhs.eq(rhs);
            case '!=': return lhs.ne(rhs);
            case '>=': return lhs.ge(rhs);
            case '>': return lhs.gt(rhs);
            case '+': return lhs.plus(rhs);
            case '-': return lhs.minus(rhs);
            case '*': return lhs.times(rhs);
            case '/': return lhs.divide(rhs);
            case '%': return lhs.modulo(rhs);
            default: throw new Error(this.operator);
        }
    };
    InfixExprInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    InfixExprInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof InfixExprInterpolator) {
            return this.lhsInterpolator.equals(that.lhsInterpolator)
                && this.rhsInterpolator.equals(that.rhsInterpolator);
        }
        return false;
    };
    return InfixExprInterpolator;
}(ReconInterpolator));
var PrefixExprInterpolator = (function (_super) {
    __extends(PrefixExprInterpolator, _super);
    function PrefixExprInterpolator(e0, e1) {
        var _this = _super.call(this) || this;
        if (!e0 && !e1) {
            throw new TypeError();
        }
        else if (!e1) {
            e1 = e0;
        }
        else if (!e0) {
            e0 = e1;
        }
        _this.operator = e0.operator;
        if (_this.operator !== e1.operator) {
            throw new Error(e1.operator);
        }
        e0.commit();
        e1.commit();
        _this.rhsInterpolator = Interpolator.recon(e0.rhs, e1.rhs);
        return _this;
    }
    PrefixExprInterpolator.prototype.map = function (u) {
        var rhs = this.rhsInterpolator.map(u);
        switch (this.operator) {
            case '!': return rhs.not();
            case '~': return rhs.bnot();
            case '-': return rhs.neg();
            default: throw new Error(this.operator);
        }
    };
    PrefixExprInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    PrefixExprInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof PrefixExprInterpolator) {
            return this.rhsInterpolator.equals(that.rhsInterpolator);
        }
        return false;
    };
    return PrefixExprInterpolator;
}(ReconInterpolator));
var InvokeExprInterpolator = (function (_super) {
    __extends(InvokeExprInterpolator, _super);
    function InvokeExprInterpolator(e0, e1) {
        var _this = _super.call(this) || this;
        if (!e0 && !e1) {
            throw new TypeError();
        }
        else if (!e1) {
            e1 = e0;
        }
        else if (!e0) {
            e0 = e1;
        }
        e0.commit();
        e1.commit();
        _this.funcInterpolator = Interpolator.recon(e0.func, e1.func);
        _this.argsInterpolator = Interpolator.recon(e0.args, e1.args);
        return _this;
    }
    InvokeExprInterpolator.prototype.map = function (u) {
        var func = this.funcInterpolator.map(u);
        var args = this.argsInterpolator.map(u);
        return Selector.literal(func).invoke(args);
    };
    InvokeExprInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    InvokeExprInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof InvokeExprInterpolator) {
            return this.funcInterpolator.equals(that.funcInterpolator)
                && this.argsInterpolator.equals(that.argsInterpolator);
        }
        return false;
    };
    return InvokeExprInterpolator;
}(ReconInterpolator));
Interpolator.recon = function (i0, i1) {
    if (i0 === undefined && i1 === undefined) {
        return new ReconInterpolator();
    }
    if (i0 !== undefined) {
        i0 = Item.fromAny(i0);
    }
    if (i1 !== undefined) {
        i1 = Item.fromAny(i1);
    }
    if (!i0 && !i1) {
        i1 = i0 = Item.Absent;
    }
    else if (!i1) {
        i1 = i0;
    }
    else if (!i0) {
        i0 = i1;
    }
    if (i0 instanceof Field && i1 instanceof Field) {
        if (i0 instanceof Attr$1 && i1 instanceof Attr$1
            || i0 instanceof Attr$1 && i1.key instanceof Text$1
            || i1 instanceof Attr$1 && i0.key instanceof Text$1) {
            return new AttrInterpolator(i0, i1);
        }
        else {
            return new SlotInterpolator(i0, i1);
        }
    }
    var v0 = i0.toValue();
    var v1 = i1.toValue();
    if (v0 instanceof Record && v1 instanceof Record) {
        return new RecordInterpolator(v0, v1);
    }
    else if (v0 instanceof Num && v1 instanceof Num) {
        return new NumInterpolator(v0, v1);
    }
    else if (v0 instanceof InfixExpr && v1 instanceof InfixExpr) {
        return new InfixExprInterpolator(v0, v1);
    }
    else if (v0 instanceof PrefixExpr && v1 instanceof PrefixExpr) {
        return new PrefixExprInterpolator(v0, v1);
    }
    else if (v0 instanceof InvokeExpr && v1 instanceof InvokeExpr) {
        return new InvokeExprInterpolator(v0, v1);
    }
    return new ValueInterpolator(v0, v1);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb24taW50ZXJwb2xhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVjb24taW50ZXJwb2xhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUwsSUFBSSxFQUNKLEtBQUssRUFDTCxJQUFJLEVBQ0osSUFBSSxFQUVKLEtBQUssRUFFTCxNQUFNLEVBQ04sSUFBSSxFQUVKLEdBQUcsRUFDSCxRQUFRLEVBQ1IsU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEdBQ1gsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTVDO0lBQXVELDZDQUFlO0lBQXRFOztJQXlCQSxDQUFDO0lBeEJDLCtCQUFHLEdBQUgsVUFBSSxDQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBVyxDQUFDO0lBQzFCLENBQUM7SUFFRCxpQ0FBSyxHQUFMLFVBQU0sQ0FBVTtRQUNkLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUlELGlDQUFLLEdBQUwsVUFBTSxFQUF3QixFQUFFLEVBQVk7UUFDMUMsSUFBSSxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQzthQUFNLElBQUksRUFBRSxLQUFLLFNBQVMsRUFBRTtZQUMzQixFQUFFLEdBQUcsRUFBZSxDQUFDO1lBQ3JCLE9BQU8sWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUF5QixDQUFDO1NBQ2pFO2FBQU07WUFDTCxPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBYSxFQUFFLEVBQUUsQ0FBeUIsQ0FBQztTQUN0RTtJQUNILENBQUM7SUFFRCxrQ0FBTSxHQUFOLFVBQU8sSUFBcUI7UUFDMUIsT0FB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QztRQUN4QyxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxRQUFRLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDckIsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUIsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0IsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUIsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0IsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0IsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0IsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUIsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUIsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUIsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUIsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0IsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDL0IsS0FB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

var NumberAnimator = (function (_super) {
    __extends(NumberAnimator, _super);
    function NumberAnimator(parent, key, value, transition) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.update(value);
        _this.view = parent.view() || parent.view || parent;
        _this.parent = parent.animator;
        _this.key = key;
        return _this;
    }
    NumberAnimator.prototype.update = function (value) {
        if (!this.key) {
            return;
        }
        this.view[this.key](value);
    };
    NumberAnimator.prototype.getProperty = function () {
        if (!this.key) {
            return;
        }
        this.view[this.key]();
    };
    NumberAnimator.prototype.setProperty = function (value) {
        if (!this.key) {
            return;
        }
        if (value === null) {
            this.parent[this.key] = undefined;
        }
        else {
            this.view[this.key](value);
            this.parent.animate();
        }
    };
    NumberAnimator.get = function (self, key) {
        return self.view[key]();
    };
    NumberAnimator.set = function (self, key, value) {
        if (value === null) {
            self.animator[key] = undefined;
        }
        else {
            var controller = self.view || self;
            controller[key](value);
            self.animator.animate();
        }
    };
    NumberAnimator.animator = function (self, key, value, trans) {
        if (value !== undefined && !self.animator[key]) {
            self.animator[key] = new NumberAnimator(self, key, value, trans);
        }
        return self.animator[key];
    };
    return NumberAnimator;
}(ChildFrameAnimator));
var LengthAnimator = (function (_super) {
    __extends(LengthAnimator, _super);
    function LengthAnimator(parent, key, value, transition) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.view = parent.view() || parent.view || parent;
        _this.parent = parent.animator;
        _this.key = key;
        return _this;
    }
    LengthAnimator.prototype.update = function (value) {
        if (!this.key) {
            return;
        }
        this.view[this.key](value);
    };
    LengthAnimator.prototype.getProperty = function () {
        if (!this.key) {
            return;
        }
        this.view[this.key]();
    };
    LengthAnimator.prototype.setProperty = function (value) {
        if (!this.key) {
            return;
        }
        if (value === null) {
            this.parent[this.key] = undefined;
        }
        else {
            this.view[this.key](value);
            this.parent.animate();
        }
    };
    LengthAnimator.get = function (self, key) {
        return self.view[key]();
    };
    LengthAnimator.set = function (self, key, value) {
        if (value === null) {
            self.animator[key] = undefined;
        }
        else {
            var controller = self._view || self.view;
            controller[key](value);
            self.animator.animate();
        }
    };
    LengthAnimator.animator = function (self, key, value, trans) {
        if (value !== undefined && !self.animator[key]) {
            self.animator[key] = new LengthAnimator(self, key, value, trans);
        }
        return self.animator[key];
    };
    return LengthAnimator;
}(ChildFrameAnimator));
var AngleAnimator = (function (_super) {
    __extends(AngleAnimator, _super);
    function AngleAnimator(parent, key, value, transition) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.view = parent.view() || parent.view || parent;
        _this.parent = parent.animator;
        _this.key = key;
        return _this;
    }
    AngleAnimator.prototype.update = function (value) {
        if (!this.key) {
            return;
        }
        this.view[this.key](value);
    };
    AngleAnimator.prototype.getProperty = function () {
        if (!this.key) {
            return;
        }
        this.view[this.key]();
    };
    AngleAnimator.prototype.setProperty = function (value) {
        if (!this.key) {
            return;
        }
        if (value === null) {
            this.parent[this.key] = undefined;
        }
        else {
            this.view[this.key](value);
            this.parent.animate();
        }
    };
    AngleAnimator.get = function (self, key) {
        return self.view[key]();
    };
    AngleAnimator.set = function (self, key, value) {
        if (value === null) {
            self.animator[key] = undefined;
        }
        else {
            var controller = self._view || self.view;
            controller[key](value);
            self.animator.animate();
        }
    };
    AngleAnimator.animator = function (self, key, value, trans) {
        if (value !== undefined && !self.animator[key]) {
            self.animator[key] = new AngleAnimator(self, key, value, trans);
        }
        return self.animator[key];
    };
    return AngleAnimator;
}(ChildFrameAnimator));
var ColorAnimator = (function (_super) {
    __extends(ColorAnimator, _super);
    function ColorAnimator(parent, key, value, transition) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.view = parent.view() || parent.view || parent;
        _this.parent = parent.animator;
        _this.key = key;
        return _this;
    }
    ColorAnimator.prototype.update = function (value) {
        if (!this.key) {
            return;
        }
        this.view[this.key](value);
    };
    ColorAnimator.prototype.getProperty = function () {
        if (!this.key) {
            return;
        }
        this.view[this.key]();
    };
    ColorAnimator.prototype.setProperty = function (value) {
        if (!this.key) {
            return;
        }
        if (value === null) {
            this.parent[this.key] = undefined;
        }
        else {
            this.view[this.key](value);
            this.parent.animate();
        }
    };
    ColorAnimator.get = function (self, key) {
        return self.view[key]();
    };
    ColorAnimator.set = function (self, key, value) {
        if (value === null) {
            self.animator[key] = undefined;
        }
        else {
            var controller = self._view || self.view;
            controller[key](value);
            self.animator.animate();
        }
    };
    ColorAnimator.animator = function (self, key, value, trans) {
        if (value !== undefined && !self.animator[key]) {
            self.animator[key] = new ColorAnimator(self, key, value, trans);
        }
        return self.animator[key];
    };
    return ColorAnimator;
}(ChildFrameAnimator));

//# sourceMappingURL=data:application/json;base64,

var COS_PI_4 = Math.cos(Math.PI / 4);
var SIN_PI_4 = Math.sin(Math.PI / 4);
var KinematicEvent = (function (_super) {
    __extends(KinematicEvent, _super);
    function KinematicEvent(type, init) {
        var _this = _super.call(this, type, init) || this;
        _this.points = init.points;
        return _this;
    }
    return KinematicEvent;
}(CustomEventConstructor));
var KinematicTrack = (function () {
    function KinematicTrack(kinematic, identifier) {
        this.kinematic = kinematic;
        this.identifier = identifier;
        this.path = [];
        this.t = NaN;
        this.cx = NaN;
        this.cy = NaN;
        this.vx = NaN;
        this.vy = NaN;
        this.ax = NaN;
        this.ay = NaN;
        this.dx = NaN;
        this.dy = NaN;
    }
    Object.defineProperty(KinematicTrack.prototype, "ghost", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    KinematicTrack.prototype.moveTo = function (t, cx, cy) {
        this.path.push({ t: t, cx: cx, cy: cy });
        while (this.path.length > 1) {
            if (t - this.path[0].t > this.kinematic.h) {
                this.path.splice(0, 1);
            }
            else {
                break;
            }
        }
        this.update();
    };
    KinematicTrack.prototype.update = function () {
        var p0 = this.path[0];
        var p1 = this.path[this.path.length - 1];
        if (p1 && p1 !== p0) {
            var dt = p1.t - p0.t;
            var vx = void 0;
            var vy = void 0;
            if (dt) {
                vx = (p1.cx - p0.cx) / dt;
                vy = (p1.cy - p0.cy) / dt;
                var v2 = vx * vx + vy * vy;
                var vMax = this.kinematic.vMax;
                var vMax2 = vMax * vMax;
                if (vMax2 < v2) {
                    var v = Math.sqrt(v2);
                    vx = vx * vMax / v;
                    vy = vy * vMax / v;
                }
            }
            else {
                vx = 0;
                vy = 0;
            }
            this.t = p1.t;
            this.dx = p1.cx - this.cx;
            this.dy = p1.cy - this.cy;
            this.cx = p1.cx;
            this.cy = p1.cy;
            this.vx = vx;
            this.vy = vy;
        }
        else if (p0) {
            this.t = p0.t;
            this.dx = p0.cx - this.cx;
            this.dy = p0.cy - this.cy;
            this.cx = p0.cx;
            this.cy = p0.cy;
            this.vx = 0;
            this.vy = 0;
        }
    };
    return KinematicTrack;
}());
var KinematicGhost = (function () {
    function KinematicGhost(kinematic, identifier, t, cx, cy, vx, vy, ax, ay) {
        this.kinematic = kinematic;
        this.identifier = identifier;
        this.t = t;
        this.cx = cx;
        this.cy = cy;
        this.vx = vx;
        this.vy = vy;
        this.ax = ax;
        this.ay = ay;
        this.dx = 0;
        this.dy = 0;
    }
    Object.defineProperty(KinematicGhost.prototype, "ghost", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    KinematicGhost.prototype.translate = function (dx, dy) {
        this.cx += dx;
        this.cy += dy;
    };
    KinematicGhost.prototype.update = function (t) {
        var dt = t - this.t;
        if (dt) {
            var vx = this.vx + this.ax * dt;
            var cx = void 0;
            if (vx < 0 === this.vx < 0) {
                cx = this.cx + this.vx * dt + 0.5 * (this.ax * dt * dt);
            }
            else {
                cx = this.cx - (this.vx * this.vx) / (2 * this.ax);
                vx = 0;
                this.ax = 0;
            }
            var vy = this.vy + this.ay * dt;
            var cy = void 0;
            if (vy < 0 === this.vy < 0) {
                cy = this.cy + this.vy * dt + 0.5 * (this.ay * dt * dt);
            }
            else {
                cy = this.cy - (this.vy * this.vy) / (2 * this.ay);
                vy = 0;
                this.ay = 0;
            }
            this.dx = cx - this.cx;
            this.dy = cy - this.cy;
            this.cx = cx;
            this.cy = cy;
            this.vx = vx;
            this.vy = vy;
            this.t = t;
        }
    };
    return KinematicGhost;
}());
var Kinematic = (function () {
    function Kinematic() {
        this.node = null;
        this.tracks = {};
        this.trackCount = 0;
        this.ghosts = {};
        this.ghostCount = 0;
        this.ghostFrame = 0;
        this.h = 67;
        this.a = 0.00175;
        this.vMax = 1.75;
        this.dMin = 10;
        this.onGhostFrame = this.onGhostFrame.bind(this);
    }
    Kinematic.prototype.surface = function (node) {
        if (node === undefined) {
            return this.node;
        }
        else {
            if (this.node) {
                this.detach(this.node);
            }
            this.node = node;
            if (this.node) {
                this.attach(this.node);
            }
            return this;
        }
    };
    Kinematic.prototype.hysteresis = function (h) {
        if (h === undefined) {
            return this.h;
        }
        else {
            this.h = h;
            return this;
        }
    };
    Kinematic.prototype.acceleration = function (a) {
        if (a === undefined) {
            return this.a;
        }
        else {
            this.a = a;
            return this;
        }
    };
    Kinematic.prototype.velocityMax = function (vMax) {
        if (vMax === undefined) {
            return this.vMax;
        }
        else {
            this.vMax = vMax;
            return this;
        }
    };
    Kinematic.prototype.distanceMin = function (dMin) {
        if (dMin === undefined) {
            return this.dMin;
        }
        else {
            this.dMin = dMin;
            return this;
        }
    };
    Kinematic.prototype.wheel = function (wheel) {
        if (wheel === undefined) {
            return false;
        }
        else {
            return this;
        }
    };
    Kinematic.prototype.points = function () {
        var points = [];
        for (var identifier in this.tracks) {
            points.push(this.tracks[identifier]);
        }
        for (var identifier in this.ghosts) {
            points.push(this.ghosts[identifier]);
        }
        return points;
    };
    Kinematic.prototype.interrupt = function () {
        if (this.ghostFrame) {
            cancelAnimationFrame(this.ghostFrame);
            this.ghostFrame = 0;
        }
        if (this.ghostCount) {
            this.ghosts = {};
            this.ghostCount = 0;
            if (this.trackCount) {
                this.kinematicUpdate();
            }
            else {
                this.kinematicEnd();
            }
        }
    };
    Kinematic.prototype.zoom = function (cx, cy, dz) {
        if (!dz) {
            return;
        }
        var t = Date.now();
        var a = this.a;
        var ax = a * COS_PI_4;
        var ay = a * SIN_PI_4;
        var vMax = this.vMax;
        var vx = 0.5 * vMax * COS_PI_4;
        var vy = 0.5 * vMax * SIN_PI_4;
        var dx = (4 * vx * vx) / ax;
        var dy = (4 * vy * vy) / ay;
        var zoom0 = this.ghosts.zoom0;
        var zoom1 = this.ghosts.zoom1;
        if (zoom0 && zoom1) {
            var dcx = Math.abs(zoom1.cx - zoom0.cx) / 2;
            var dcy = Math.abs(zoom1.cy - zoom0.cy) / 2;
            var dt = t - zoom0.t;
            dz = Math.min(Math.max(-vMax * dt, dz), vMax * dt);
            var zx = (dz * dcx * COS_PI_4) / dx;
            var zy = (dz * dcy * SIN_PI_4) / dy;
            ax = (ax * dcx) / dx;
            ay = (ay * dcy) / dy;
            if (dt > 0) {
                zoom0.t = t;
                zoom0.cx += zx;
                zoom0.cy += zy;
                zoom0.vx = zx / dt;
                zoom0.vy = zy / dt;
                zoom0.ax = zoom0.vx < 0 ? ax : zoom0.vx > 0 ? -ax : 0;
                zoom0.ay = zoom0.vy < 0 ? ay : zoom0.vy > 0 ? -ay : 0;
                zoom0.dx = zx;
                zoom0.dy = zy;
                zoom1.t = t;
                zoom1.cx -= zx;
                zoom1.cy -= zy;
                zoom1.vx = -zx / dt;
                zoom1.vy = -zy / dt;
                zoom1.ax = zoom1.vx < 0 ? ax : zoom1.vx > 0 ? -ax : 0;
                zoom1.ay = zoom1.vy < 0 ? ay : zoom1.vy > 0 ? -ay : 0;
                zoom1.dx = -zx;
                zoom1.dy = -zy;
            }
        }
        else {
            this.interrupt();
            this.kinematicStart();
            if (dz < 0) {
                zoom0 = new KinematicGhost(this, 'zoom0', t, cx - dx, cy - dy, -vx, -vy, ax, ay);
                zoom1 = new KinematicGhost(this, 'zoom1', t, cx + dx, cy + dy, vx, vy, -ax, -ay);
            }
            else {
                zoom0 = new KinematicGhost(this, 'zoom0', t, cx - dx, cy - dy, vx, vy, -ax, -ay);
                zoom1 = new KinematicGhost(this, 'zoom1', t, cx + dx, cy + dy, -vx, -vy, ax, ay);
            }
            this.ghosts.zoom0 = zoom0;
            this.ghostCount += 1;
            this.ghosts.zoom1 = zoom1;
            this.ghostCount += 1;
        }
        this.kinematicUpdate();
        if (this.ghostFrame) {
            cancelAnimationFrame(this.ghostFrame);
        }
        this.ghostFrame = requestAnimationFrame(this.onGhostFrame);
    };
    Kinematic.prototype.updateVelocity = function (t, points) {
        var p0 = points[0];
        var p1 = points[1];
        var i = 0;
        if (p0 && p1) {
            i = 2;
            var dx0 = Math.abs(p1.cx - p0.cx);
            var dy0 = Math.abs(p1.cy - p0.cy);
            if (p0 instanceof KinematicGhost) {
                p0.update(t);
            }
            if (p1 instanceof KinematicGhost) {
                p1.update(t);
            }
            var dx1 = Math.abs(p1.cx - p0.cx);
            var dy1 = Math.abs(p1.cy - p0.cy);
            var sx = dx1 / dx0;
            var sy = dy1 / dy0;
            p0.vx *= sx;
            p0.vy *= sy;
            p0.ax *= sx;
            p0.ay *= sy;
            p1.vx *= sx;
            p1.vy *= sy;
            p1.ax *= sx;
            p1.ay *= sy;
        }
        while (i < points.length) {
            var p = points[i];
            if (p instanceof KinematicGhost) {
                p.update(t);
            }
            i += 1;
        }
    };
    Kinematic.prototype.spreadVelocity = function (track) {
        for (var identifier in this.ghosts) {
            var ghost = this.ghosts[identifier];
            if (track.vx < 0 === ghost.vx < 0) {
                track.vx = (track.vx + ghost.vx) / 2;
                ghost.vx = (track.vx + ghost.vx) / 2;
            }
            else {
                track.vx = (track.vx - ghost.vx) / 2;
                ghost.vx = (ghost.vx - track.vx) / 2;
            }
            if (track.vy < 0 === ghost.vy < 0) {
                track.vy = (track.vy + ghost.vy) / 2;
                ghost.vy = (track.vy + ghost.vy) / 2;
            }
            else {
                track.vy = (track.vy - ghost.vy) / 2;
                ghost.vy = (ghost.vy - track.vy) / 2;
            }
        }
    };
    Kinematic.prototype.coast = function (track) {
        if (track.vx || track.vy) {
            this.spreadVelocity(track);
            var alpha = Math.atan2(Math.abs(track.vy), Math.abs(track.vx));
            var a = this.a;
            var ax = (track.vx < 0 ? a : track.vx > 0 ? -a : 0) * Math.cos(alpha);
            var ay = (track.vy < 0 ? a : track.vy > 0 ? -a : 0) * Math.sin(alpha);
            if (ax || ay) {
                var ghost = new KinematicGhost(this, track.identifier, track.t, track.cx, track.cy, track.vx, track.vy, ax, ay);
                this.ghosts[ghost.identifier] = ghost;
                this.ghostCount += 1;
                if (!this.ghostFrame) {
                    this.ghostFrame = requestAnimationFrame(this.onGhostFrame);
                }
            }
        }
    };
    Kinematic.prototype.translate = function (dx, dy) {
        dx = dx || 0;
        dy = dy || 0;
        for (var identifier in this.ghosts) {
            this.ghosts[identifier].translate(dx, dy);
        }
    };
    Kinematic.prototype.interpolate = function (t) {
        for (var identifier in this.tracks) {
            this.tracks[identifier].update();
        }
        this.updateVelocity(t, this.points());
        this.kinematicUpdate();
        for (var identifier in this.ghosts) {
            var ghost = this.ghosts[identifier];
            if (!ghost.ax && !ghost.ay) {
                delete this.ghosts[identifier];
                this.ghostCount -= 1;
            }
        }
        if (!this.trackCount && !this.ghostCount) {
            this.kinematicEnd();
        }
        else if (this.ghostCount && !this.ghostFrame) {
            this.ghostFrame = requestAnimationFrame(this.onGhostFrame);
        }
    };
    Kinematic.prototype.onGhostFrame = function (t) {
        this.ghostFrame = 0;
        this.interpolate(Date.now());
    };
    Kinematic.prototype.kinematicStart = function () {
        var event = new KinematicEvent('kinematicstart', {
            bubbles: true,
            cancelable: true,
            composed: true,
            points: this.points(),
        });
        this.node.dispatchEvent(event);
    };
    Kinematic.prototype.kinematicUpdate = function () {
        var event = new KinematicEvent('kinematicupdate', {
            bubbles: true,
            cancelable: true,
            composed: true,
            points: this.points(),
        });
        this.node.dispatchEvent(event);
    };
    Kinematic.prototype.kinematicEnd = function () {
        var event = new KinematicEvent('kinematicend', {
            bubbles: true,
            cancelable: true,
            composed: true,
            points: this.points(),
        });
        this.node.dispatchEvent(event);
    };
    Kinematic.prototype.trackStart = function (identifier, clientX, clientY, event) {
        this.interrupt();
        var track = new KinematicTrack(this, identifier);
        this.tracks[identifier] = track;
        track.moveTo(Date.now(), clientX, clientY);
        this.trackCount += 1;
        if (this.trackCount === 1) {
            this.startTracking(this.node);
        }
        this.trackDidStart(track, this.node, event);
    };
    Kinematic.prototype.trackMove = function (identifier, clientX, clientY, event) {
        var track = this.tracks[identifier];
        if (track) {
            track.moveTo(Date.now(), clientX, clientY);
            this.trackDidMove(track, this.node, event);
        }
    };
    Kinematic.prototype.trackCancel = function (identifier, clientX, clientY, event) {
        var track = this.tracks[identifier];
        if (track) {
            delete this.tracks[identifier];
            this.trackCount -= 1;
            track.update();
            this.trackDidCancel(track, this.node, event);
            if (this.trackCount === 0) {
                this.endTracking(this.node);
            }
        }
    };
    Kinematic.prototype.trackEnd = function (identifier, clientX, clientY, event) {
        var track = this.tracks[identifier];
        if (track) {
            delete this.tracks[identifier];
            this.trackCount -= 1;
            track.update();
            this.trackDidEnd(track, this.node, event);
            if (this.trackCount === 0) {
                this.endTracking(this.node);
            }
        }
    };
    Kinematic.prototype.trackDidStart = function (track, surface, event) {
        if (this.trackCount === 1) {
            this.kinematicStart();
        }
    };
    Kinematic.prototype.trackDidMove = function (track, surface, event) {
        this.translate(track.dx, track.dy);
        this.interpolate(Date.now());
    };
    Kinematic.prototype.trackDidCancel = function (track, surface, event) {
        if (!this.trackCount && !this.ghostCount) {
            this.kinematicEnd();
        }
    };
    Kinematic.prototype.trackDidEnd = function (track, surface, event) {
        this.coast(track);
        if (!this.trackCount && !this.ghostCount) {
            this.kinematicEnd();
        }
    };
    Kinematic.create = function () {
        if (typeof PointerEvent !== 'undefined') {
            return new PointerKinematic();
        }
        else if (typeof TouchEvent !== 'undefined') {
            return new TouchKinematic();
        }
        else {
            return new MouseKinematic();
        }
    };
    return Kinematic;
}());
var PointerKinematic = (function (_super) {
    __extends(PointerKinematic, _super);
    function PointerKinematic() {
        var _this = _super.call(this) || this;
        _this._wheel = true;
        _this.onPointerDown = _this.onPointerDown.bind(_this);
        _this.onPointerMove = _this.onPointerMove.bind(_this);
        _this.onPointerUp = _this.onPointerUp.bind(_this);
        _this.onWheel = _this.onWheel.bind(_this);
        return _this;
    }
    PointerKinematic.prototype.wheel = function (wheel) {
        if (wheel === undefined) {
            return this._wheel;
        }
        else {
            if (this._wheel !== wheel) {
                this._wheel = wheel;
                if (this.node) {
                    if (wheel) {
                        this.node.addEventListener('wheel', this.onWheel);
                    }
                    else {
                        this.node.removeEventListener('wheel', this.onWheel);
                    }
                }
            }
            return this;
        }
    };
    PointerKinematic.prototype.attach = function (surface) {
        surface.addEventListener('pointerdown', this.onPointerDown);
        if (this._wheel) {
            surface.addEventListener('wheel', this.onWheel);
        }
    };
    PointerKinematic.prototype.detach = function (surface) {
        surface.removeEventListener('pointerdown', this.onPointerDown);
        surface.removeEventListener('wheel', this.onWheel);
    };
    PointerKinematic.prototype.startTracking = function (surface) {
        surface.addEventListener('pointermove', this.onPointerMove);
        surface.addEventListener('pointerup', this.onPointerUp);
    };
    PointerKinematic.prototype.endTracking = function (surface) {
        surface.removeEventListener('pointermove', this.onPointerMove);
        surface.removeEventListener('pointerup', this.onPointerUp);
    };
    PointerKinematic.prototype.trackDidStart = function (track, surface, event) {
        _super.prototype.trackDidStart.call(this, track, surface, event);
        if (surface.setPointerCapture) {
            surface.setPointerCapture(+track.identifier);
        }
    };
    PointerKinematic.prototype.trackDidEnd = function (track, surface, event) {
        _super.prototype.trackDidEnd.call(this, track, surface, event);
        if (surface.releasePointerCapture) {
            surface.releasePointerCapture(+track.identifier);
        }
    };
    PointerKinematic.prototype.onPointerDown = function (event) {
        this.trackStart('' + event.pointerId, event.clientX, event.clientY, event);
    };
    PointerKinematic.prototype.onPointerMove = function (event) {
        this.trackMove('' + event.pointerId, event.clientX, event.clientY, event);
    };
    PointerKinematic.prototype.onPointerUp = function (event) {
        this.trackEnd('' + event.pointerId, event.clientX, event.clientY, event);
    };
    PointerKinematic.prototype.onWheel = function (event) {
        event.preventDefault();
        this.zoom(event.clientX, event.clientY, event.wheelDeltaY || event.deltaY);
    };
    return PointerKinematic;
}(Kinematic));
var TouchKinematic = (function (_super) {
    __extends(TouchKinematic, _super);
    function TouchKinematic() {
        var _this = _super.call(this) || this;
        _this.onTouchStart = _this.onTouchStart.bind(_this);
        _this.onTouchMove = _this.onTouchMove.bind(_this);
        _this.onTouchCancel = _this.onTouchCancel.bind(_this);
        _this.onTouchEnd = _this.onTouchEnd.bind(_this);
        return _this;
    }
    TouchKinematic.prototype.attach = function (surface) {
        surface.addEventListener('touchstart', this.onTouchStart);
    };
    TouchKinematic.prototype.detach = function (surface) {
        surface.removeEventListener('touchstart', this.onTouchStart);
    };
    TouchKinematic.prototype.startTracking = function (surface) {
        surface.addEventListener('touchmove', this.onTouchMove);
        surface.addEventListener('touchcancel', this.onTouchCancel);
        surface.addEventListener('touchend', this.onTouchEnd);
    };
    TouchKinematic.prototype.endTracking = function (surface) {
        surface.removeEventListener('touchmove', this.onTouchMove);
        surface.removeEventListener('touchcancel', this.onTouchCancel);
        surface.removeEventListener('touchend', this.onTouchEnd);
    };
    TouchKinematic.prototype.onTouchStart = function (event) {
        for (var i = 0; i < event.changedTouches.length; i += 1) {
            var touch = event.changedTouches[i];
            this.trackStart('' + touch.identifier, touch.clientX, touch.clientY, event);
        }
        if (event.changedTouches.length > 1 || this.trackCount > 1) {
            event.preventDefault();
        }
    };
    TouchKinematic.prototype.onTouchMove = function (event) {
        for (var i = 0; i < event.changedTouches.length; i += 1) {
            var touch = event.changedTouches[i];
            this.trackMove('' + touch.identifier, touch.clientX, touch.clientY, event);
        }
    };
    TouchKinematic.prototype.onTouchCancel = function (event) {
        for (var i = 0; i < event.changedTouches.length; i += 1) {
            var touch = event.changedTouches[i];
            this.trackCancel('' + touch.identifier, touch.clientX, touch.clientY, event);
        }
    };
    TouchKinematic.prototype.onTouchEnd = function (event) {
        for (var i = 0; i < event.changedTouches.length; i += 1) {
            var touch = event.changedTouches[i];
            this.trackEnd('' + touch.identifier, touch.clientX, touch.clientY, event);
        }
    };
    return TouchKinematic;
}(Kinematic));
var MouseKinematic = (function (_super) {
    __extends(MouseKinematic, _super);
    function MouseKinematic() {
        var _this = _super.call(this) || this;
        _this._wheel = true;
        _this.onMouseDown = _this.onMouseDown.bind(_this);
        _this.onMouseMove = _this.onMouseMove.bind(_this);
        _this.onMouseUp = _this.onMouseUp.bind(_this);
        _this.onWheel = _this.onWheel.bind(_this);
        return _this;
    }
    MouseKinematic.prototype.wheel = function (wheel) {
        if (wheel === undefined) {
            return this._wheel;
        }
        else {
            if (this._wheel !== wheel) {
                this._wheel = wheel;
                if (this.node) {
                    if (wheel) {
                        this.node.addEventListener('wheel', this.onWheel);
                    }
                    else {
                        this.node.removeEventListener('wheel', this.onWheel);
                    }
                }
            }
            return this;
        }
    };
    MouseKinematic.prototype.attach = function (surface) {
        surface.addEventListener('mousedown', this.onMouseDown);
        if (this._wheel) {
            surface.addEventListener('wheel', this.onWheel);
        }
    };
    MouseKinematic.prototype.detach = function (surface) {
        surface.removeEventListener('mousedown', this.onMouseDown);
        surface.removeEventListener('wheel', this.onWheel);
    };
    MouseKinematic.prototype.startTracking = function (surface) {
        document.body.addEventListener('mousemove', this.onMouseMove);
        document.body.addEventListener('mouseup', this.onMouseUp);
    };
    MouseKinematic.prototype.endTracking = function (surface) {
        document.body.removeEventListener('mousemove', this.onMouseMove);
        document.body.removeEventListener('mouseup', this.onMouseUp);
    };
    MouseKinematic.prototype.onMouseDown = function (event) {
        this.trackStart('mouse', event.clientX, event.clientY, event);
    };
    MouseKinematic.prototype.onMouseMove = function (event) {
        this.trackMove('mouse', event.clientX, event.clientY, event);
    };
    MouseKinematic.prototype.onMouseUp = function (event) {
        this.trackEnd('mouse', event.clientX, event.clientY, event);
    };
    MouseKinematic.prototype.onWheel = function (event) {
        event.preventDefault();
        this.zoom(event.clientX, event.clientY, event.wheelDeltaY || event.deltaY);
    };
    return MouseKinematic;
}(Kinematic));

//# sourceMappingURL=data:application/json;base64,

var KinematicScaleEvent = (function (_super) {
    __extends(KinematicScaleEvent, _super);
    function KinematicScaleEvent(type, init) {
        var _this = _super.call(this, type, init) || this;
        _this.kinematicScale = init.kinematicScale;
        _this.kinematic = init.kinematic;
        _this.ruler = init.ruler;
        _this.scale = init.scale;
        return _this;
    }
    return KinematicScaleEvent;
}(CustomEventConstructor));
var KinematicScale = (function () {
    function KinematicScale() {
        this._kinematic = null;
        this._ruler = null;
        this._scale = null;
        this._xMin = null;
        this._xMax = null;
        this._zMin = null;
        this._zMax = null;
        this._points = [];
        this.onKinematicStart = this.onKinematicStart.bind(this);
        this.onKinematicUpdate = this.onKinematicUpdate.bind(this);
        this.onKinematicEnd = this.onKinematicEnd.bind(this);
    }
    KinematicScale.prototype.kinematic = function (kinematic) {
        if (kinematic === undefined) {
            return this._kinematic;
        }
        else {
            if (this._kinematic) {
                this.detach(this._kinematic);
            }
            this._kinematic = kinematic;
            if (this._kinematic) {
                this.attach(this._kinematic);
            }
            return this;
        }
    };
    KinematicScale.prototype.hysteresis = function (h) {
        if (h === undefined) {
            return this._kinematic.hysteresis();
        }
        else {
            this._kinematic.hysteresis(h);
            return this;
        }
    };
    KinematicScale.prototype.acceleration = function (a) {
        if (a === undefined) {
            return this._kinematic.acceleration();
        }
        else {
            this._kinematic.acceleration(a);
            return this;
        }
    };
    KinematicScale.prototype.velocityMax = function (vMax) {
        if (vMax === undefined) {
            return this._kinematic.velocityMax();
        }
        else {
            this._kinematic.velocityMax(vMax);
            return this;
        }
    };
    KinematicScale.prototype.distanceMin = function (dMin) {
        if (dMin === undefined) {
            return this._kinematic.distanceMin();
        }
        else {
            this._kinematic.distanceMin(dMin);
            return this;
        }
    };
    KinematicScale.prototype.wheel = function (wheel) {
        if (wheel === undefined) {
            return this._kinematic.wheel();
        }
        else {
            this._kinematic.wheel(wheel);
            return this;
        }
    };
    KinematicScale.prototype.ruler = function (ruler) {
        if (ruler === undefined) {
            return this._ruler;
        }
        else {
            this._ruler = ruler;
            return this;
        }
    };
    KinematicScale.prototype.scale = function (scale) {
        if (scale === undefined) {
            return this._scale;
        }
        else {
            var oldScale = this._scale;
            this._scale = scale;
            if (oldScale === null) {
                this.zoomBounds(true);
            }
            return this;
        }
    };
    KinematicScale.prototype.domainMin = function (_xMin) {
        if (_xMin === undefined) {
            return this._xMin;
        }
        else {
            this._xMin = _xMin;
            return this;
        }
    };
    KinematicScale.prototype.domainMax = function (_xMax) {
        if (_xMax === undefined) {
            return this._xMax;
        }
        else {
            this._xMax = _xMax;
            return this;
        }
    };
    KinematicScale.prototype.domainBounds = function (_xMin, _xMax) {
        if (_xMin === undefined) {
            return [this._xMin, this._xMax];
        }
        else if (_xMax === undefined) {
            _xMin = _xMin;
            this._xMin = _xMin[0];
            this._xMax = _xMin[1];
            return this;
        }
        else {
            this._xMin = _xMin;
            this._xMax = _xMax;
            return this;
        }
    };
    KinematicScale.prototype.zoomMin = function (_zMin) {
        if (_zMin === undefined) {
            return this._zMin;
        }
        else {
            this._zMin = _zMin;
            return this;
        }
    };
    KinematicScale.prototype.zoomMax = function (_zMax) {
        if (_zMax === undefined) {
            return this._zMax;
        }
        else {
            this._zMax = _zMax;
            return this;
        }
    };
    KinematicScale.prototype.zoomBounds = function (_zMin, _zMax) {
        if (_zMin === undefined) {
            return [this._zMin, this._zMax];
        }
        else if (_zMax === undefined) {
            if (typeof _zMin === 'boolean') {
                if (this._scale instanceof LinearScale) {
                    this._zMin = 1000000;
                    this._zMax = 0.001;
                }
                else if (this._scale instanceof TimeScale) {
                    this._zMin = 86400000;
                    this._zMax = 1;
                }
            }
            else {
                _zMin = _zMin;
                this._zMin = _zMin[0];
                this._zMax = _zMin[1];
            }
            return this;
        }
        else {
            this._zMin = _zMin;
            this._zMax = _zMax;
            return this;
        }
    };
    KinematicScale.prototype.attach = function (kinematic) {
        var surface = this._kinematic && this._kinematic.surface();
        if (surface) {
            surface.addEventListener('kinematicstart', this.onKinematicStart);
            surface.addEventListener('kinematicupdate', this.onKinematicUpdate);
            surface.addEventListener('kinematicend', this.onKinematicEnd);
        }
    };
    KinematicScale.prototype.detach = function (kinematic) {
        var surface = this._kinematic && this._kinematic.surface();
        if (surface) {
            surface.removeEventListener('kinematicstart', this.onKinematicStart);
            surface.removeEventListener('kinematicupdate', this.onKinematicUpdate);
            surface.removeEventListener('kinematicend', this.onKinematicEnd);
        }
    };
    KinematicScale.prototype.createPoint = function (kinematicPoint) {
        var coords = this.coords(kinematicPoint.cx, kinematicPoint.cy);
        return {
            identifier: kinematicPoint.identifier,
            domainCoord: coords.domainCoord,
            rangeCoord: coords.rangeCoord,
        };
    };
    KinematicScale.prototype.updatePoint = function (kinematicPoint, scalePoint) {
        scalePoint.rangeCoord = this.rangeCoord(kinematicPoint.cx, kinematicPoint.cy);
    };
    KinematicScale.prototype.updatePoints = function (kinematicPoints) {
        var scalePoints = this._points;
        outer: for (var i = 0; i < kinematicPoints.length; i += 1) {
            var kinematicPoint = kinematicPoints[i];
            for (var j_1 = 0; j_1 < scalePoints.length; j_1 += 1) {
                var scalePoint_1 = scalePoints[j_1];
                if (kinematicPoint.identifier == scalePoint_1.identifier) {
                    this.updatePoint(kinematicPoint, scalePoint_1);
                    continue outer;
                }
            }
            var scalePoint = this.createPoint(kinematicPoint);
            scalePoints.push(scalePoint);
        }
        var j = 0;
        outer: while (j < scalePoints.length) {
            var scalePoint = scalePoints[j];
            for (var i = 0; i < kinematicPoints.length; i += 1) {
                var kinematicPoint = kinematicPoints[i];
                if (scalePoint.identifier == kinematicPoint.identifier) {
                    j += 1;
                    continue outer;
                }
            }
            scalePoints.splice(j, 1);
        }
    };
    KinematicScale.prototype.clampScale = function () {
        var _xMin = this._xMin !== null ? this._xMin : undefined;
        var _xMax = this._xMax !== null ? this._xMax : undefined;
        var _zMin = this._zMin !== null ? this._zMin : undefined;
        var _zMax = this._zMax !== null ? this._zMax : undefined;
        var scale = this._scale;
        this._scale = scale.clampDomain(_xMin, _xMax, _zMin, _zMax);
        if (this._scale !== scale) {
            for (var i = 0; i < this._points.length; i += 1) {
                var scalePoint = this._points[i];
                scalePoint.domainCoord = this._scale.unscale(scalePoint.rangeCoord);
            }
        }
    };
    KinematicScale.prototype.rescale = function () {
        var p0 = this._points[0];
        var p1 = this._points[1];
        if (p0 && p1) {
            var x0 = p0.domainCoord;
            var y0 = p0.rangeCoord;
            var x1 = p1.domainCoord;
            var y1 = p1.rangeCoord;
            this._scale = this._scale.solveDomain(x0, y0, x1, y1);
            this.clampScale();
        }
        else if (p0) {
            var x0 = p0.domainCoord;
            var y0 = p0.rangeCoord;
            this._scale = this._scale.solveDomain(x0, y0);
            this.clampScale();
        }
    };
    KinematicScale.prototype.onKinematicStart = function (event) {
        this.scaleStart();
    };
    KinematicScale.prototype.onKinematicUpdate = function (event) {
        this.updatePoints(event.points);
        this.rescale();
        this.scaleUpdate();
    };
    KinematicScale.prototype.onKinematicEnd = function (event) {
        this.scaleEnd();
    };
    KinematicScale.prototype.scaleStart = function () {
        var event = new KinematicScaleEvent('kinematicscalestart', {
            bubbles: true,
            cancelable: true,
            composed: true,
            kinematicScale: this,
            kinematic: this._kinematic,
            ruler: this._ruler,
            scale: this._scale,
        });
        this._ruler.dispatchEvent(event);
    };
    KinematicScale.prototype.scaleUpdate = function () {
        var event = new KinematicScaleEvent('kinematicscaleupdate', {
            bubbles: true,
            cancelable: true,
            composed: true,
            kinematicScale: this,
            kinematic: this._kinematic,
            ruler: this._ruler,
            scale: this._scale,
        });
        this._ruler.dispatchEvent(event);
    };
    KinematicScale.prototype.scaleEnd = function () {
        var event = new KinematicScaleEvent('kinematicscaleend', {
            bubbles: true,
            cancelable: true,
            composed: true,
            kinematicScale: this,
            kinematic: this._kinematic,
            ruler: this._ruler,
            scale: this._scale,
        });
        this._ruler.dispatchEvent(event);
        this._points.length = 0;
    };
    KinematicScale.horizontal = function () {
        return new KinematicScaleHorizontal();
    };
    KinematicScale.vertical = function () {
        return new KinematicScaleVertical();
    };
    return KinematicScale;
}());
var KinematicScaleHorizontal = (function (_super) {
    __extends(KinematicScaleHorizontal, _super);
    function KinematicScaleHorizontal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KinematicScaleHorizontal.prototype.coords = function (clientX, clientY) {
        var bounds = this._ruler.getBoundingClientRect();
        return {
            domainCoord: this._scale.unscale(clientX - bounds.left),
            rangeCoord: clientX - bounds.left,
        };
    };
    KinematicScaleHorizontal.prototype.rangeCoord = function (clientX, clientY) {
        var bounds = this._ruler.getBoundingClientRect();
        return clientX - bounds.left;
    };
    KinematicScaleHorizontal.prototype.isParallel = function (x0, y0, x1, y1) {
        return Math.abs(x1 - x0) >= Math.abs(y1 - y0);
    };
    return KinematicScaleHorizontal;
}(KinematicScale));
var KinematicScaleVertical = (function (_super) {
    __extends(KinematicScaleVertical, _super);
    function KinematicScaleVertical() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KinematicScaleVertical.prototype.coords = function (clientX, clientY) {
        var bounds = this._ruler.getBoundingClientRect();
        return {
            domainCoord: this._scale.unscale(clientY - bounds.top),
            rangeCoord: clientY - bounds.top,
        };
    };
    KinematicScaleVertical.prototype.rangeCoord = function (clientX, clientY) {
        var bounds = this._ruler.getBoundingClientRect();
        return clientY - bounds.top;
    };
    KinematicScaleVertical.prototype.isParallel = function (x0, y0, x1, y1) {
        return Math.abs(y1 - y0) >= Math.abs(x1 - x0);
    };
    return KinematicScaleVertical;
}(KinematicScale));

//# sourceMappingURL=data:application/json;base64,

var PI$1 = Math.PI;
var TAU$1 = 2 * PI$1;
var EPSILON = 1e-6;
var Path = (function () {
    function Path() {
        this.x0 = null;
        this.y0 = null;
        this.x1 = null;
        this.y1 = null;
        this.d = '';
    }
    Path.prototype.moveTo = function (x, y) {
        this.d += 'M' + (this.x0 = this.x1 = x) + ',' + (this.y0 = this.y1 = y);
    };
    Path.prototype.closePath = function () {
        if (this.x1 !== undefined) {
            this.x1 = this.x0;
            this.y1 = this.y0;
            this.d += 'Z';
        }
    };
    Path.prototype.lineTo = function (x, y) {
        this.d += 'L' + (this.x1 = x) + ',' + (this.y1 = y);
    };
    Path.prototype.quadraticCurveTo = function (x1, y1, x, y) {
        this.d += 'Q' + x1 + ',' + y1 + ',' + (this.x1 = x) + ',' + (this.y1 = y);
    };
    Path.prototype.bezierCurveTo = function (x1, y1, x2, y2, x, y) {
        this.d += 'C' + x1 + ',' + y1 + ',' + x2 + ',' + y2 + ',' + (this.x1 = x) + ',' + (this.y1 = y);
    };
    Path.prototype.arcTo = function (x1, y1, x2, y2, r) {
        var x0 = +this.x1;
        var y0 = +this.y1;
        var x21 = x2 - x1;
        var y21 = y2 - y1;
        var x01 = x0 - x1;
        var y01 = y0 - y1;
        var l01_2 = x01 * x01 + y01 * y01;
        if (r < 0) {
            throw new Error('negative radius: ' + r);
        }
        else if (this.x1 === null) {
            this.d += 'M' + (this.x1 = x1) + ',' + (this.y1 = y1);
        }
        else if (!(l01_2 > EPSILON)) {
        }
        else if (!(Math.abs(y01 * x21 - y21 * x01) > EPSILON) || !r) {
            this.d += 'L' + (this.x1 = x1) + ',' + (this.y1 = y1);
        }
        else {
            var x20 = x2 - x0;
            var y20 = y2 - y0;
            var l21_2 = x21 * x21 + y21 * y21;
            var l20_2 = x20 * x20 + y20 * y20;
            var l21 = Math.sqrt(l21_2);
            var l01 = Math.sqrt(l01_2);
            var l = r * Math.tan((PI$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2);
            var t01 = l / l01;
            var t21 = l / l21;
            if (Math.abs(t01 - 1) > EPSILON) {
                this.d += 'L' + (x1 + t01 * x01) + ',' + (y1 + t01 * y01);
            }
            this.d += 'A' + r + ',' + r + ',0,0,' + (+(y01 * x20 > x01 * y20)) + ',' +
                (this.x1 = x1 + t21 * x21) + ',' + (this.y1 = y1 + t21 * y21);
        }
    };
    Path.prototype.arc = function (x, y, r, a0, a1, ccw) {
        if (ccw === void 0) { ccw = false; }
        var dx = r * Math.cos(a0);
        var dy = r * Math.sin(a0);
        var x0 = x + dx;
        var y0 = y + dy;
        var cw = 1 ^ +ccw;
        var da = ccw ? a0 - a1 : a1 - a0;
        if (r < 0) {
            throw new Error('negative radius: ' + r);
        }
        else if (this.x1 === null) {
            this.d += 'M' + x0 + ',' + y0;
        }
        else if (Math.abs(+this.x1 - x0) > EPSILON || Math.abs(+this.y1 - y0) > EPSILON) {
            this.d += 'L' + x0 + ',' + y0;
        }
        if (!r) {
            return;
        }
        else if (da < 0) {
            da = da % TAU$1 + TAU$1;
        }
        if (da > TAU$1 - EPSILON) {
            this.d += 'A' + r + ',' + r + ',0,1,' + cw + ',' + (x - dx) + ',' + (y - dy) +
                'A' + r + ',' + r + ',0,1,' + cw + ',' + (this.x1 = x0) + ',' + (this.y1 = y0);
        }
        else if (da > EPSILON) {
            this.d += 'A' + r + ',' + r + ',0,' + (+(da >= PI$1)) + ',' + cw + ',' +
                (this.x1 = x + r * Math.cos(a1)) + ',' + (this.y1 = y + r * Math.sin(a1));
        }
    };
    Path.prototype.rect = function (x, y, w, h) {
        this.d += 'M' + (this.x0 = this.x1 = x) + ',' + (this.y0 = this.y1 = y) + 'h' + w + 'v' + h + 'h' + -w + 'Z';
    };
    Path.prototype.toString = function () {
        return this.d;
    };
    return Path;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBhdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUNuQixJQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ25CLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQztBQUVyQjtJQU9FO1FBQ0UsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDZixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNmLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ2YsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDZixJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxxQkFBTSxHQUFOLFVBQU8sQ0FBUyxFQUFFLENBQVM7UUFDekIsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCx3QkFBUyxHQUFUO1FBQ0UsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLFNBQVMsRUFBRTtZQUN6QixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1NBQ2Y7SUFDSCxDQUFDO0lBRUQscUJBQU0sR0FBTixVQUFPLENBQVMsRUFBRSxDQUFTO1FBQ3pCLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVB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

var PI$2 = Math.PI;
var PI_OVER_2 = PI$2 / 2;
var TAU$2 = 2 * PI$2;
var EPSILON$1 = 1e-12;
var Arc = (function () {
    function Arc(innerRadius, outerRadius, startAngle, deltaAngle, padAngle, padRadius, cornerRadius) {
        if (innerRadius === void 0) { innerRadius = 0; }
        if (outerRadius === void 0) { outerRadius = 0; }
        if (startAngle === void 0) { startAngle = Angle.zero(); }
        if (deltaAngle === void 0) { deltaAngle = Angle.zero(); }
        if (padAngle === void 0) { padAngle = Angle.zero(); }
        if (padRadius === void 0) { padRadius = null; }
        if (cornerRadius === void 0) { cornerRadius = 0; }
        this._innerRadius = innerRadius;
        this._outerRadius = outerRadius;
        this._startAngle = Angle.fromAny(startAngle);
        this._deltaAngle = Angle.fromAny(deltaAngle);
        this._padAngle = Angle.fromAny(padAngle);
        this._padRadius = padRadius;
        this._cornerRadius = cornerRadius;
        this.dirty = true;
    }
    Arc.prototype.innerRadius = function (innerRadius) {
        if (innerRadius === undefined) {
            return this._innerRadius;
        }
        else {
            if (this._innerRadius !== innerRadius) {
                this._innerRadius = innerRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.outerRadius = function (outerRadius) {
        if (outerRadius === undefined) {
            return this._outerRadius;
        }
        else {
            if (this._outerRadius !== outerRadius) {
                this._outerRadius = outerRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.startAngle = function (startAngle) {
        if (startAngle === undefined) {
            return this._startAngle;
        }
        else {
            startAngle = Angle.fromAny(startAngle);
            if (!this._startAngle.equals(startAngle)) {
                this._startAngle = startAngle;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.deltaAngle = function (deltaAngle) {
        if (deltaAngle === undefined) {
            return this._deltaAngle;
        }
        else {
            deltaAngle = Angle.fromAny(deltaAngle);
            if (!this._deltaAngle.equals(deltaAngle)) {
                this._deltaAngle = deltaAngle;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.padAngle = function (padAngle) {
        if (padAngle === undefined) {
            return this._padAngle;
        }
        else {
            padAngle = Angle.fromAny(padAngle);
            if (!this._padAngle.equals(padAngle)) {
                this._padAngle = padAngle;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.padRadius = function (padRadius) {
        if (padRadius === undefined) {
            return this._padRadius;
        }
        else {
            if (this._padRadius !== padRadius) {
                this._padRadius = padRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.cornerRadius = function (cornerRadius) {
        if (cornerRadius === undefined) {
            return this._cornerRadius;
        }
        else {
            if (this._cornerRadius !== cornerRadius) {
                this._cornerRadius = cornerRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.draw = function (context) {
        this.dirty = false;
        context = context || new Path();
        var r0 = this._innerRadius;
        var r1 = this._outerRadius;
        var a0 = (this._startAngle.radValue()) - PI_OVER_2;
        var da = this._deltaAngle.radValue();
        var a1 = a0 + da;
        var cw = da >= 0;
        if (r1 < r0) {
            var r = r1;
            r1 = r0;
            r0 = r;
        }
        if (!(r1 > EPSILON$1)) {
            context.moveTo(0, 0);
        }
        else if (da > TAU$2 - EPSILON$1) {
            context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));
            context.arc(0, 0, r1, a0, a1, !cw);
            if (r0 > EPSILON$1) {
                context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));
                context.arc(0, 0, r0, a1, a0, cw);
            }
        }
        else {
            var a01 = a0;
            var a11 = a1;
            var a00 = a0;
            var a10 = a1;
            var da0 = da;
            var da1 = da;
            var ap = (this._padAngle.radValue()) / 2;
            var rp = +(ap > EPSILON$1) && (this._padRadius !== null ? this._padRadius : Math.sqrt(r0 * r0 + r1 * r1));
            var rc = Math.min(Math.abs(r1 - r0) / 2, this._cornerRadius);
            var rc0 = rc;
            var rc1 = rc;
            if (rp > EPSILON$1) {
                var p0 = Math.asin(rp / r0 * Math.sin(ap));
                var p1 = Math.asin(rp / r1 * Math.sin(ap));
                if ((da0 -= p0 * 2) > EPSILON$1) {
                    p0 *= cw ? 1 : -1;
                    a00 += p0;
                    a10 -= p0;
                }
                else {
                    da0 = 0;
                    a00 = a10 = (a0 + a1) / 2;
                }
                if ((da1 -= p1 * 2) > EPSILON$1) {
                    p1 *= cw ? 1 : -1;
                    a01 += p1;
                    a11 -= p1;
                }
                else {
                    da1 = 0;
                    a01 = a11 = (a0 + a1) / 2;
                }
            }
            var x00 = void 0;
            var y00 = void 0;
            var x01 = r1 * Math.cos(a01);
            var y01 = r1 * Math.sin(a01);
            var x10 = r0 * Math.cos(a10);
            var y10 = r0 * Math.sin(a10);
            var x11 = void 0;
            var y11 = void 0;
            if (rc > EPSILON$1) {
                x11 = r1 * Math.cos(a11);
                y11 = r1 * Math.sin(a11);
                x00 = r0 * Math.cos(a00);
                y00 = r0 * Math.sin(a00);
                if (da < PI$2) {
                    var oc = da0 > EPSILON$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10];
                    var ax = x01 - oc[0];
                    var ay = y01 - oc[1];
                    var bx = x11 - oc[0];
                    var by = y11 - oc[1];
                    var kc = 1 / Math.sin(0.5 * Math.acos((ax * bx + ay * by) /
                        (Math.sqrt(ax * ax + ay * ay) *
                            Math.sqrt(bx * bx + by * by))));
                    var lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                    rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
                    rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
                }
            }
            if (!(da1 > EPSILON$1)) {
                context.moveTo(x01, y01);
            }
            else if (rc1 > EPSILON$1) {
                var t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                var t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
                if (rc1 < rc) {
                    context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
                }
                else {
                    context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                    context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                }
            }
            else {
                context.moveTo(x01, y01);
                context.arc(0, 0, r1, a01, a11, !cw);
            }
            if (!(r0 > EPSILON$1) || !(da0 > EPSILON$1)) {
                context.lineTo(x10, y10);
            }
            else if (rc0 > EPSILON$1) {
                var t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                var t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
                if (rc0 < rc) {
                    context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
                }
                else {
                    context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                    context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                }
            }
            else {
                context.arc(0, 0, r0, a10, a00, cw);
            }
        }
        context.closePath();
        if (!arguments.length) {
            return context.toString();
        }
    };
    return Arc;
}());
function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    var x10 = x1 - x0;
    var y10 = y1 - y0;
    var x32 = x3 - x2;
    var y32 = y3 - y2;
    var t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
    return [x0 + t * x10, y0 + t * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1;
    var y01 = y0 - y1;
    var lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01);
    var ox = lo * y01;
    var oy = -lo * x01;
    var x11 = x0 + ox;
    var y11 = y0 + oy;
    var x10 = x1 + ox;
    var y10 = y1 + oy;
    var x00 = (x11 + x10) / 2;
    var y00 = (y11 + y10) / 2;
    var dx = x10 - x11;
    var dy = y10 - y11;
    var d2 = dx * dx + dy * dy;
    var r = r1 - rc;
    var D = x11 * y10 - x10 * y11;
    var d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D));
    var cx0 = (D * dy - dx * d) / d2;
    var cy0 = (-D * dx - dy * d) / d2;
    var cx1 = (D * dy + dx * d) / d2;
    var cy1 = (-D * dx + dy * d) / d2;
    var dx0 = cx0 - x00;
    var dy0 = cy0 - y00;
    var dx1 = cx1 - x00;
    var dy1 = cy1 - y00;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) {
        cx0 = cx1;
        cy0 = cy1;
    }
    return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1),
    };
}
//# sourceMappingURL=data:application/json;base64,

var ArcAnimator = (function (_super) {
    __extends(ArcAnimator, _super);
    function ArcAnimator(target, arc) {
        var _this = _super.call(this) || this;
        _this.target = target;
        _this.arc = arc;
        _this.innerRadius = undefined;
        _this.outerRadius = undefined;
        _this.startAngle = undefined;
        _this.deltaAngle = undefined;
        _this.padAngle = undefined;
        _this.padRadius = undefined;
        _this.cornerRadius = undefined;
        return _this;
    }
    ArcAnimator.prototype.onFrame = function (t) {
        if (this.innerRadius) {
            this.innerRadius.onFrame(t);
        }
        if (this.outerRadius) {
            this.outerRadius.onFrame(t);
        }
        if (this.startAngle) {
            this.startAngle.onFrame(t);
        }
        if (this.deltaAngle) {
            this.deltaAngle.onFrame(t);
        }
        if (this.padAngle) {
            this.padAngle.onFrame(t);
        }
        if (this.padRadius) {
            this.padRadius.onFrame(t);
        }
        if (this.cornerRadius) {
            this.cornerRadius.onFrame(t);
        }
        this.update();
    };
    ArcAnimator.prototype.update = function () {
        if (this.arc.dirty) {
            this.target.setAttribute('d', this.arc.draw());
        }
    };
    return ArcAnimator;
}(FrameAnimator));
var ArcInnerRadiusAnimator = (function (_super) {
    __extends(ArcInnerRadiusAnimator, _super);
    function ArcInnerRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcInnerRadiusAnimator.prototype.update = function (value) {
        this.parent.arc.innerRadius(value);
    };
    ArcInnerRadiusAnimator.get = function (self) {
        return self.arc.innerRadius();
    };
    ArcInnerRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.innerRadius = undefined;
        }
        else {
            self.arc.innerRadius(value);
            self.arcAnimator.animate();
        }
    };
    ArcInnerRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.innerRadius) {
            self.arcAnimator.innerRadius = new ArcInnerRadiusAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.innerRadius;
    };
    return ArcInnerRadiusAnimator;
}(ChildFrameAnimator));
var ArcOuterRadiusAnimator = (function (_super) {
    __extends(ArcOuterRadiusAnimator, _super);
    function ArcOuterRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcOuterRadiusAnimator.prototype.update = function (value) {
        this.parent.arc.outerRadius(value);
    };
    ArcOuterRadiusAnimator.get = function (self) {
        return self.arc.outerRadius();
    };
    ArcOuterRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.outerRadius = undefined;
        }
        else {
            self.arc.outerRadius(value);
            self.arcAnimator.animate();
        }
    };
    ArcOuterRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.outerRadius) {
            self.arcAnimator.outerRadius = new ArcOuterRadiusAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.outerRadius;
    };
    return ArcOuterRadiusAnimator;
}(ChildFrameAnimator));
var ArcStartAngleAnimator = (function (_super) {
    __extends(ArcStartAngleAnimator, _super);
    function ArcStartAngleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcStartAngleAnimator.prototype.update = function (value) {
        this.parent.arc.startAngle(value);
    };
    ArcStartAngleAnimator.get = function (self) {
        return self.arc.startAngle();
    };
    ArcStartAngleAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.startAngle = undefined;
        }
        else {
            self.arc.startAngle(value);
            self.arcAnimator.animate();
        }
    };
    ArcStartAngleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.startAngle) {
            self.arcAnimator.startAngle = new ArcStartAngleAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.startAngle;
    };
    return ArcStartAngleAnimator;
}(ChildFrameAnimator));
var ArcDeltaAngleAnimator = (function (_super) {
    __extends(ArcDeltaAngleAnimator, _super);
    function ArcDeltaAngleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcDeltaAngleAnimator.prototype.update = function (value) {
        this.parent.arc.deltaAngle(value);
    };
    ArcDeltaAngleAnimator.get = function (self) {
        return self.arc.deltaAngle();
    };
    ArcDeltaAngleAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.deltaAngle = undefined;
        }
        else {
            self.arc.deltaAngle(value);
            self.arcAnimator.animate();
        }
    };
    ArcDeltaAngleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.deltaAngle) {
            self.arcAnimator.deltaAngle = new ArcDeltaAngleAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.deltaAngle;
    };
    return ArcDeltaAngleAnimator;
}(ChildFrameAnimator));
var ArcPadAngleAnimator = (function (_super) {
    __extends(ArcPadAngleAnimator, _super);
    function ArcPadAngleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcPadAngleAnimator.prototype.update = function (value) {
        this.parent.arc.padAngle(value);
    };
    ArcPadAngleAnimator.get = function (self) {
        return self.arc.padAngle();
    };
    ArcPadAngleAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.padAngle = undefined;
        }
        else {
            self.arc.padAngle(value);
            self.arcAnimator.animate();
        }
    };
    ArcPadAngleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.padAngle) {
            self.arcAnimator.padAngle = new ArcPadAngleAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.padAngle;
    };
    return ArcPadAngleAnimator;
}(ChildFrameAnimator));
var ArcPadRadiusAnimator = (function (_super) {
    __extends(ArcPadRadiusAnimator, _super);
    function ArcPadRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcPadRadiusAnimator.prototype.update = function (value) {
        this.parent.arc.padRadius(value);
    };
    ArcPadRadiusAnimator.get = function (self) {
        return self.arc.padRadius();
    };
    ArcPadRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.padRadius = undefined;
        }
        self.arc.padRadius(value);
        self.arcAnimator.animate();
    };
    ArcPadRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.padRadius) {
            self.arcAnimator.padRadius = new ArcPadRadiusAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.padRadius;
    };
    return ArcPadRadiusAnimator;
}(ChildFrameAnimator));
var ArcCornerRadiusAnimator = (function (_super) {
    __extends(ArcCornerRadiusAnimator, _super);
    function ArcCornerRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcCornerRadiusAnimator.prototype.update = function (value) {
        this.parent.arc.cornerRadius(value);
    };
    ArcCornerRadiusAnimator.get = function (self) {
        return self.arc.cornerRadius();
    };
    ArcCornerRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.cornerRadius = undefined;
        }
        else {
            self.arc.cornerRadius(value);
            self.arcAnimator.animate();
        }
    };
    ArcCornerRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.cornerRadius) {
            self.arcAnimator.cornerRadius = new ArcCornerRadiusAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.cornerRadius;
    };
    return ArcCornerRadiusAnimator;
}(ChildFrameAnimator));
var ArcView = (function (_super) {
    __extends(ArcView, _super);
    function ArcView(node, arc) {
        if (arc === void 0) { arc = new Arc(); }
        var _this = _super.call(this, node) || this;
        _this.arc = arc;
        _this.arcAnimator = new ArcAnimator(node, arc);
        return _this;
    }
    ArcView.prototype.innerRadius = function (value, trans) {
        return this.propertyNumber(ArcInnerRadiusAnimator, value, trans);
    };
    ArcView.prototype.outerRadius = function (value, trans) {
        return this.propertyNumber(ArcOuterRadiusAnimator, value, trans);
    };
    ArcView.prototype.startAngle = function (value, trans) {
        return this.propertyAngle(ArcStartAngleAnimator, value, trans);
    };
    ArcView.prototype.deltaAngle = function (value, trans) {
        return this.propertyAngle(ArcDeltaAngleAnimator, value, trans);
    };
    ArcView.prototype.padAngle = function (value, trans) {
        return this.propertyAngle(ArcPadAngleAnimator, value, trans);
    };
    ArcView.prototype.padRadius = function (value, trans) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.property(ArcPadRadiusAnimator, value, trans);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    ArcView.prototype.cornerRadius = function (value, trans) {
        return this.propertyNumber(ArcCornerRadiusAnimator, value, trans);
    };
    ArcView.create = function (node, arc) {
        if (node instanceof ArcView) {
            return node;
        }
        else if (node instanceof NodeView) {
            throw new TypeError('' + node);
        }
        else if (typeof node === 'string') {
            return new ArcView(document.createElementNS(SvgView.NS, 'path'), arc);
        }
        else if (node.view instanceof ArcView) {
            return node.view;
        }
        else if (node.view) {
            throw new TypeError('' + node.view);
        }
        else if (node instanceof SVGPathElement) {
            return new ArcView(node, arc);
        }
        else {
            throw new TypeError('' + node);
        }
    };
    return ArcView;
}(SvgView));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJjLXZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcmMtdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFDLGFBQWEsRUFBaUIsa0JBQWtCLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDNUUsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQVcsUUFBUSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBQzFDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFHOUI7SUFBaUMsdUNBQWE7SUFXNUMscUJBQVksTUFBc0IsRUFBRSxHQUFRO1FBQTVDLFlBQ0UsaUJBQU8sU0FVUjtRQVRDLEtBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLEtBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsS0FBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFDN0IsS0FBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFDN0IsS0FBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDNUIsS0FBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDNUIsS0FBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDMUIsS0FBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsS0FBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7O0lBQ2hDLENBQUM7SUFFRCw2QkFBTyxHQUFQLFVBQVEsQ0FBUztRQUNmLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QjtRQUNELElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QjtRQUNELElBQUksSUFBSSxDQUFDLFVB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

var ShadowBoxState;
(function (ShadowBoxState) {
    ShadowBoxState[ShadowBoxState["Hidden"] = 0] = "Hidden";
    ShadowBoxState[ShadowBoxState["Showing"] = 1] = "Showing";
    ShadowBoxState[ShadowBoxState["Visible"] = 2] = "Visible";
    ShadowBoxState[ShadowBoxState["Hiding"] = 3] = "Hiding";
})(ShadowBoxState || (ShadowBoxState = {}));
var ShadowBoxAnimator = (function (_super) {
    __extends(ShadowBoxAnimator, _super);
    function ShadowBoxAnimator(shadowBox, value, transition) {
        var _this = _super.call(this, value, transition) || this;
        _this.shadowBox = shadowBox;
        return _this;
    }
    ShadowBoxAnimator.prototype.update = function (value) {
        this.shadowBox.backgroundColor(this.shadowBox.shadowColor().alpha(value));
    };
    ShadowBoxAnimator.prototype.onEnd = function (value) {
        if (this.shadowBox.shadowBoxState === 1) {
            this.shadowBox.shadowBoxState = 2;
            this.shadowBox.didShow();
        }
        else if (this.shadowBox.shadowBoxState === 3) {
            this.shadowBox.shadowBoxState = 0;
            this.shadowBox.didHide();
        }
    };
    return ShadowBoxAnimator;
}(TweenFrameAnimator));
var ShadowBoxView = (function (_super) {
    __extends(ShadowBoxView, _super);
    function ShadowBoxView(node) {
        var _this = _super.call(this, node) || this;
        _this._shadowColor = Color.black();
        _this._shadowOpacity = 0.5;
        _this._shadowTransition = new Transition(250, Ease.quadOut).range(0);
        _this.shadowBoxState = 0;
        _this.shadowBoxAnimator = new ShadowBoxAnimator(_this, 0, _this._shadowTransition);
        return _this;
    }
    ShadowBoxView.prototype.isVisible = function () {
        return this.shadowBoxState === 2 ||
            this.shadowBoxState === 1;
    };
    ShadowBoxView.prototype.shadowColor = function (shadowColor) {
        if (shadowColor === undefined) {
            return this._shadowColor;
        }
        else {
            this._shadowColor = Color.fromAny(shadowColor);
            return this;
        }
    };
    ShadowBoxView.prototype.shadowOpacity = function (shadowOpacity) {
        if (shadowOpacity === undefined) {
            return this._shadowOpacity;
        }
        else {
            this._shadowOpacity = shadowOpacity;
            return this;
        }
    };
    ShadowBoxView.prototype.shadowTransition = function (shadowTransition) {
        if (shadowTransition === undefined) {
            return this._shadowTransition;
        }
        else {
            this._shadowTransition = Transition.fromAny(shadowTransition);
            return this;
        }
    };
    ShadowBoxView.prototype.show = function (trans) {
        if (this.shadowBoxState !== 2) {
            if (trans === undefined) {
                trans = this._shadowTransition;
            }
            else {
                trans = Transition.fromAny(trans || this._shadowTransition, 0);
            }
            this.willShow();
            this.shadowBoxState = 1;
            this.shadowBoxAnimator.set(this._shadowOpacity, trans);
        }
    };
    ShadowBoxView.prototype.hide = function (trans) {
        if (this.shadowBoxState !== 0) {
            if (trans === undefined) {
                trans = this._shadowTransition;
            }
            else {
                trans = Transition.fromAny(trans || this._shadowTransition, this._shadowOpacity);
            }
            this.willHide();
            this.shadowBoxState = 3;
            this.shadowBoxAnimator.set(0, trans);
        }
    };
    ShadowBoxView.prototype.willShow = function () {
    };
    ShadowBoxView.prototype.didShow = function () {
    };
    ShadowBoxView.prototype.willHide = function () {
    };
    ShadowBoxView.prototype.didHide = function () {
    };
    ShadowBoxView.create = function () {
        return new ShadowBoxView(document.createElement('div'))
            .className('shadow-box')
            .display('flex')
            .position('absolute')
            .top(0)
            .right(0)
            .bottom(0)
            .left(0)
            .pointerEvents('none')
            .zIndex(50);
    };
    return ShadowBoxView;
}(HtmlView));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhZG93LWJveC12aWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2hhZG93LWJveC12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQVcsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUF1QixVQUFVLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDOUQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQzlDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFHaEMsTUFBTSxDQUFOLElBQWtCLGNBS2pCO0FBTEQsV0FBa0IsY0FBYztJQUM5Qix1REFBTSxDQUFBO0lBQ04seURBQU8sQ0FBQTtJQUNQLHlEQUFPLENBQUE7SUFDUCx1REFBTSxDQUFBO0FBQ1IsQ0FBQyxFQUxpQixjQUFjLEtBQWQsY0FBYyxRQUsvQjtBQUVEO0lBQWdDLDZDQUEwQjtJQUd4RCwyQkFBWSxTQUF3QixFQUFFLEtBQWEsRUFBRSxVQUE4QjtRQUFuRixZQUNFLGtCQUFNLEtBQUssRUFBRSxVQUFVLENBQUMsU0FFekI7UUFEQyxLQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQzs7SUFDN0IsQ0FBQztJQUVELGtDQUFNLEdBQU4sVUFBTyxLQUFhO1FBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELGlDQUFLLEdBQUwsVUFBTSxLQUFhO1FBQ2pCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLE1BQTJCLEVBQUU7WUFDNUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLElBQXlCLENBQUM7WUFDdkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVB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

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLGNBQWMsQ0FBQztBQUM3QixjQUFjLE9BQU8sQ0FBQztBQUN0QixjQUFjLFFBQVEsQ0FBQztBQUN2QixjQUFjLFFBQVEsQ0FBQztBQUN2QixjQUFjLFFBQVEsQ0FBQztBQUN2QixjQUFjLFFBQVEsQ0FBQztBQUV2QixjQUFjLE9BQU8sQ0FBQztBQUN0QixjQUFjLFFBQVEsQ0FBQztBQUN2QixjQUFjLFFBQVEsQ0FBQztBQUN2QixjQUFjLE1BQU0sQ0FBQztBQUNyQixjQUFjLFNBQVMsQ0FBQztBQUN4QixjQUFjLFFBQVEsQ0FBQztBQUN2QixjQUFjLGFBQWEsQ0FBQztBQUU1QixPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQUNMLGNBQWMsR0FHZixNQUFNLG1CQUFtQixDQUFDO0FBRTNCLE9BQU8sRUFDTCxjQUFjLEVBQ2QsaUJBQWlCLEdBQ2xCLE1BQU0sbUJBQW1CLENBQUM7QUFFM0IsT0FBTyxFQUNMLFlBQVksRUFDWixjQUFjLEdBQ2YsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBR0wsS0FBSyxFQUNMLFFBQVEsRUFDUixTQUFTLEVBQ1QsUUFBUSxFQUNSLFNBQVMsRUFDVCxXQUFXLEdBQ1osTUFBTSxTQUFTLENBQUM7QUFFakIsT0FBTyxFQUdMLE1BQU0sRUFDTixRQUFRLEVBQ1IsUUFBUSxFQUNSLFNBQVMsRUFDVCxTQUFTLEVBQ1QsY0FBYyxFQUNkLFlBQVksR0FDYixNQUFNLFVBQVUsQ0FBQztBQUVsQixPQUFPLEVBS0wsS0FBSyxFQUNMLEdBQUcsRUFDSCxHQUFHLEVBQ0gsV0FBVyxHQUNaLE1BQU0sU0FBUyxDQUFDO0FBRWpCLE9BQU8sRUFHTCxTQUFTLEVBQ1QsZUFBZSxHQUNoQixNQUFNLGNBQWMsQ0FBQztBQUV0QixPQUFPLEVBR0wsSUFBSSxHQUNMLE1BQU0sUUFBUSxDQUFDO0FBRWhCLE9BQU8sRUFFTCxTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLGtCQUFrQixFQUNsQixjQUFjLEVBQ2QsZUFBZSxFQUNmLGFBQWEsRUFDYixlQUFlLEVBQ2YsYUFBYSxFQUNiLGVBQWUsRUFDZixtQkFBbUIsR0FDcEIsTUFBTSxhQUFhLENBQUM7QUFFckIsT0FBTyxFQUdMLFlBQVksRUFDWixrQkFBa0IsRUFDbEIsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNqQixrQkFBa0IsRUFDbEIsaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixlQUFlLEVBQ2YscUJBQXFCLEVBQ3JCLDhCQUE4QixFQUM5QiwwQkFBMEIsRUFDMUIsMkJBQTJCLEVBQzNCLHlCQUF5QixFQUN6QiwyQkFBMkIsRUFDM0IseUJBQXlCLEVBQ3pCLHlCQUF5QixFQUN6Qix3QkFBd0IsRUFDeEIsaUJBQWlCLEVBQ2pCLHVCQUF1QixFQUN2QixxQkFBcUIsR0FDdEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUV2RCxPQUFPLEVBRUwsS0FBSyxFQUNMLGVBQWUsRUFDZixXQUFXLEVBQ1gsU0FBUyxHQUNWLE1BQU0sU0FBUyxDQUFDO0FBRWpCLE9BQU8sRUFJTCxVQUFVLEdBQ1gsTUFBTSxjQUFjLENBQUM7QUFFdEIsT0FBTyxFQUVMLGlCQUFpQixFQUVqQixhQUFhLEdBQ2QsTUFBTSxTQUFTLENBQUM7QUFFakIsT0FBTyxFQUNMLFFBQVEsRUFDUixhQUFhLEVBQ2IsYUFBYSxFQUNiLGFBQWEsRUFDYixrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGlCQUFpQixFQUNqQixhQUFhLEVBQ2IsWUFBWSxFQUNaLGlCQUFpQixHQUNsQixNQUFNLFlBQVksQ0FBQztBQUVwQixPQUFPLEVBQ0wsY0FBYyxFQUNkLGNBQWMsRUFDZCxhQUFhLEVBQ2IsYUFBYSxHQUNkLE1BQU0saUJBQWlCLENBQUM7QUFNekIsT0FBTyxFQUdMLGNBQWMsRUFDZCxTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2hCLGNBQWMsRUFDZCxjQUFjLEdBQ2YsTUFBTSxhQUFhLENBQUM7QUFFckIsT0FBTyxFQUdMLG1CQUFtQixFQUNuQixjQUFjLEVBQ2Qsd0JBQXdCLEVBQ3hCLHNCQUFzQixHQUN2QixNQUFNLG1CQUFtQixDQUFDO0FBSTNCLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFFNUIsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLE9BQU8sQ0FBQztBQUUxQixPQUFPLEVBQ0wsVUFBVSxFQUNWLEtBQUssR0FDTixNQUFNLFNBQVMsQ0FBQztBQUVqQixPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRW5DLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUVoRCxjQUFjLE1BQU0sQ0FBQyJ9

var BoardController = (function (_super) {
    __extends(BoardController, _super);
    function BoardController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        _this.debug = false;
        if (_this.debug) {
            console.info('[BoardController] constructor ', { id: id, parentView: parentView });
        }
        return _this;
    }
    BoardController.prototype.create = function () {
        _super.prototype.create.call(this);
        if (this.debug) {
            console.info('[BoardController] create ', { getData: this._model.getData() });
        }
        var boardAttributes = this.model().getData();
        var view = this.view();
        var boardAttrs = boardAttributes.get('board');
        if (boardAttrs instanceof RecordMap) {
            boardAttrs.forEach(function (item) {
                view.node.setAttribute(item.key.stringValue(), item.value.stringValue());
            });
        }
        this.styleAttributes(view.node, boardAttributes.get('style'));
        this.setView('surface', view, boardAttributes.get('surface'));
        this.setView('top', view, boardAttributes.get('top'));
        this.setView('right', view, boardAttributes.get('right'));
        this.setView('bottom', view, boardAttributes.get('bottom'));
        this.setView('left', view, boardAttributes.get('left'));
        this.setViewAttributes(boardAttributes);
    };
    BoardController.prototype.setView = function (type, view, items) {
        var _this = this;
        if (items) {
            this.styleAttributes(view[type + "Element"], items.get('style'));
            items.forEach(function (surfaceItem) {
                if (surfaceItem instanceof Attr$1) {
                    _this.castView(type, view, items);
                }
                else if (surfaceItem instanceof RecordMap) {
                    _this.castView(type, view, surfaceItem);
                }
            });
        }
    };
    BoardController.prototype.castView = function (type, view, cloneAttr) {
        var castView = Utils.cast(view[type + "Element"].node, cloneAttr, this.stack(), this.eventManager());
        if (castView) {
            this._childComponents.push(castView);
            view[type + "Add"](castView.controller());
        }
    };
    BoardController.prototype.start = function () {
        _super.prototype.start.call(this);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this._childComponents.forEach(function (child) {
                child.start();
            });
        }
    };
    BoardController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        this._childComponents.forEach(function (child) {
            child.render(frameNumber);
        });
    };
    BoardController.prototype.setViewAttributes = function (newState) {
        var view = this.view();
        var skip = ['style', 'surface', 'top', 'right', 'bottom', 'left'];
        var surface = newState.get('surface');
        if (surface) {
            this.styleAttributes(view.surfaceElement, surface.get('style'));
        }
        var top = newState.get('top');
        if (top) {
            this.styleAttributes(view.topElement, top.get('style'));
        }
        var right = newState.get('right');
        if (right) {
            this.styleAttributes(view.rightElement, right.get('style'));
        }
        var bottom = newState.get('bottom');
        if (bottom) {
            this.styleAttributes(view.topElement, bottom.get('style'));
        }
        var left = newState.get('left');
        if (left) {
            this.styleAttributes(view.leftElement, left.get('style'));
        }
        this.styleAttributes(view.node, newState.get('style'));
        _super.prototype.setViewAttributes.call(this, newState, skip);
    };
    BoardController.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
    };
    BoardController.prototype.camelCase = function (str) {
        return str.toLowerCase().replace(/[-_\s]+([a-z])/g, function (g) { return g[1].toUpperCase(); });
    };
    BoardController.prototype.styleAttributes = function (node, styleItem) {
        var _this = this;
        if (!node || !styleItem) {
            return;
        }
        var trans = this.stack().get('transition').cast(Transition.Form);
        styleItem.forEach(function (item) {
            var key = _this.camelCase(item.key.stringValue());
            if (node[key]) {
                node[key](item.value.stringValue(), trans);
            }
        });
    };
    BoardController.prototype.onLinkData = function (linkData, eventUID) {
        _super.prototype.onLinkData.call(this, linkData, eventUID);
        var componentData = this._componentData.evaluate(linkData);
        var newState = componentData.evaluate(this._stack);
        if (this.debug) {
            console.info('[BoardController] onLinkData ', { newState: newState });
        }
        this.setViewAttributes(newState);
    };
    return BoardController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9hcmQtY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvYXJkLWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUdsQyxJQUFJLEdBQ0wsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUVMLFVBQVUsRUFFVixVQUFVLEVBRVYsS0FBSyxHQUVOLE1BQU0sVUFBVSxDQUFDO0FBR2xCO0lBQXFDLDJDQUFVO0lBRzdDLHlCQUFZLEVBQVUsRUFBRSxhQUFvQixFQUFFLGtCQUErQixFQUFFLFVBQWdCLEVBQUUsS0FBZ0IsRUFBRSxZQUE2QjtRQUFoSixZQUNFLGtCQUFNLEVBQUUsRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsU0FHOUU7UUFGQyxLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFHLEtBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEVBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztTQUFFOztJQUN0RyxDQUFDO0lBRUQsZ0NBQU0sR0FBTjtRQUNFLGlCQUFNLE1BQU0sV0FBRSxDQUFDO1FBQ2YsSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFDLENBQUUsQ0FBQztTQUFFO1FBQ2hHLElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMvQyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFlLENBQUM7UUFHdEMsSUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FB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

var BoardView = (function (_super) {
    __extends(BoardView, _super);
    function BoardView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._surface = [];
        _this._top = [];
        _this._right = [];
        _this._bottom = [];
        _this._left = [];
        _this.debug = false;
        return _this;
    }
    BoardView.prototype.create = function () {
        _super.prototype.create.call(this);
        this._mainElement = HtmlView.create('div')
            .className('board')
            .display('flex')
            .flexGrow(1)
            .height('100%');
        this._centerElement = this._mainElement.append('div')
            .className('center')
            .display('flex')
            .flexDirection('column')
            .flexGrow(4);
        this._surfaceElement = this._centerElement.append('main')
            .className('surface')
            .flexGrow(4);
        this._topElement = this._centerElement.prepend('header')
            .className('top')
            .pointerEvents('auto')
            .flexGrow(1);
        this._rightElement = this._mainElement.append('aside')
            .className('right')
            .pointerEvents('auto')
            .flexGrow(1);
        this._bottomElement = this._centerElement.append('footer')
            .className('bottom')
            .pointerEvents('auto')
            .flexGrow(1);
        this._leftElement = this._mainElement.prepend('aside')
            .className('left')
            .pointerEvents('auto')
            .flexGrow(1);
        this._parentView.node.appendChild(this._mainElement.node);
    };
    BoardView.prototype.start = function () {
        if (this.debug) {
            console.info('[BoardView] start ', { this: this });
        }
        if (!this._hasStarted) {
            this._hasStarted = true;
        }
    };
    BoardView.prototype.stop = function () {
        if (this.debug) {
            console.info('[BoardView] start ', { this: this });
        }
        _super.prototype.stop.call(this);
    };
    Object.defineProperty(BoardView.prototype, "node", {
        get: function () {
            return this._mainElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BoardView.prototype, "surfaceElement", {
        get: function () {
            return this._surfaceElement;
        },
        enumerable: true,
        configurable: true
    });
    BoardView.prototype.surfaceAdd = function (controller) {
        if (this._surface.indexOf(controller) < 0) {
            this._surface.push(controller);
        }
    };
    BoardView.prototype.surfaceRemove = function (controller) {
        var i = this._surface.indexOf(controller);
        if (i >= 0) {
            this._surface.splice(i, 1);
        }
    };
    Object.defineProperty(BoardView.prototype, "topElement", {
        get: function () {
            return this._topElement;
        },
        enumerable: true,
        configurable: true
    });
    BoardView.prototype.topAdd = function (controller) {
        if (this._top.indexOf(controller) < 0) {
            this._top.push(controller);
        }
    };
    BoardView.prototype.topRemove = function (controller) {
        var i = this._top.indexOf(controller);
        if (i >= 0) {
            this._top.splice(i, 1);
        }
    };
    Object.defineProperty(BoardView.prototype, "rightElement", {
        get: function () {
            return this._rightElement;
        },
        enumerable: true,
        configurable: true
    });
    BoardView.prototype.rightAdd = function (controller) {
        if (this._right.indexOf(controller) < 0) {
            this._right.push(controller);
        }
    };
    BoardView.prototype.rightRemove = function (controller) {
        var i = this._right.indexOf(controller);
        if (i >= 0) {
            this._right.splice(i, 1);
        }
    };
    Object.defineProperty(BoardView.prototype, "bottomElement", {
        get: function () {
            return this._bottomElement;
        },
        enumerable: true,
        configurable: true
    });
    BoardView.prototype.bottomAdd = function (controller) {
        if (this._bottom.indexOf(controller) < 0) {
            this._bottom.push(controller);
        }
    };
    BoardView.prototype.bottomRemove = function (controller) {
        var i = this._bottom.indexOf(controller);
        if (i >= 0) {
            this._bottom.splice(i, 1);
        }
    };
    Object.defineProperty(BoardView.prototype, "leftElement", {
        get: function () {
            return this._leftElement;
        },
        enumerable: true,
        configurable: true
    });
    BoardView.prototype.leftAdd = function (controller) {
        if (this._left.indexOf(controller) < 0) {
            this._left.push(controller);
        }
    };
    BoardView.prototype.leftRemove = function (controller) {
        var i = this._left.indexOf(controller);
        if (i >= 0) {
            this._left.splice(i, 1);
        }
    };
    BoardView.prototype.render = function (frameNumber) {
    };
    return BoardView;
}(View));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9hcmQtdmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvYXJkLXZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxRQUFRLEVBQUUsSUFBSSxHQUVmLE1BQU0sVUFBVSxDQUFDO0FBRWxCO0lBQStCLHFDQUFJO0lBa0JqQyxtQkFBWSxFQUFzQixFQUFFLFVBQWdCO1FBQXBELFlBQ0Usa0JBQU0sRUFBRSxFQUFFLFVBQVUsQ0FBQyxTQUd0QjtRQXJCUyxjQUFRLEdBQWlCLEVBQUUsQ0FBQztRQUs1QixVQUFJLEdBQWlCLEVBQUUsQ0FBQztRQUV4QixZQUFNLEdBQWlCLEVBQUUsQ0FBQztRQUUxQixhQUFPLEdBQWlCLEVBQUUsQ0FBQztRQUUzQixXQUFLLEdBQWlCLEVBQUUsQ0FBQztRQVFqQyxLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzs7SUFFckIsQ0FBQztJQUVELDBCQUFNLEdBQU47UUFDRSxpQkFBTSxNQUFNLFdBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDdkMsU0FBUyxDQUFDLE9BQU8sQ0FBQzthQUNsQixPQUFPLENBQUMsTUFBTSxDQUFDO2FBQ2YsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUNYLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUNsRCxTQUFTLENBQUMsUUFBUSxDQUFDO2FBQ25CLE9BQU8sQ0FBQyxNQUFNLENBQUM7YUFDZixhQUFhLENBQUMsUUFBUSxDQUFDO2FBQ3ZCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVmLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO2FBQ3RELFNBQVMsQ0FBQyxTQUFTLENBQUM7YUFD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

var BoardModel = (function (_super) {
    __extends(BoardModel, _super);
    function BoardModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BoardModel.Params = HtmlModel.Params.concat([]);
    return BoardModel;
}(HtmlModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9hcmQtbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJib2FyZC1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsR0FFVixNQUFNLFVBQVUsQ0FBQztBQUVsQjtJQUFnQyxzQ0FBUztJQUF6Qzs7SUFLQSxDQUFDO0lBSGlCLGlCQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFFaEQsQ0FBQyxDQUFDO0lBQ0wsaUJBQUM7Q0FBQSxBQUxELENBQWdDLFNBQVMsR0FLeEM7U0FMWSxVQUFVIn0=

var Board = (function (_super) {
    __extends(Board, _super);
    function Board() {
        var _this = _super.call(this) || this;
        _this.debug = false;
        return _this;
    }
    Object.defineProperty(Board.prototype, "tag", {
        get: function () {
            return 'board';
        },
        enumerable: true,
        configurable: true
    });
    Board.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Board needs a parent node or view', this.parentView());
        }
        if (this.debug) {
            console.info('[Board] create ', { id: this.id(), rootElement: this._rootElement, view: this.view(), value: value });
        }
        this.controller(new BoardController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new BoardModel(eventManager));
        this.view(new BoardView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Board.prototype.start = function () {
        if (this.debug) {
            console.info('[Board] start');
        }
        _super.prototype.start.call(this);
        if (this.debug) {
            console.info('[Board] started');
        }
    };
    return Board;
}(UiComponent));
UiComponent.Global.addComponent('board', Board);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9hcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJib2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFtQixXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQztJQUEyQixpQ0FBVztJQU9sQztRQUFBLFlBQ0ksaUJBQU8sU0FFVjtRQURHLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDOztJQUN2QixDQUFDO0lBUEQsc0JBQUksc0JBQUc7YUFBUDtZQUNJLE9BQU8sT0FBTyxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBT0Qsc0JBQU0sR0FBTixVQUFPLFdBQWtDLEVBQUUsS0FBWSxFQUFFLEtBQWdCLEVBQUUsWUFBNkIsRUFBRSxFQUFXO1FBQ2pILGlCQUFNLE1BQU0sWUFBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFO1FBQ0QsSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUUsQ0FBQztTQUFFO1FBR3hJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRzVHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUd6QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFjLENBQUMsQ0FBQyxDQUFDO1FBR25FLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUzQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQscUJBQUssR0FBTDtRQUNJLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FBRTtRQUNqRCxpQkFBTSxLQUFLLFdBQUUsQ0FBQztRQUNkLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUFFO0lBQ3ZELENBQUM7SUFFTCxZQUFDO0FBQUQsQ0FBQyxBQXhDRCxDQUEyQixXQUFXLEdBd0NyQzs7QUFFRCxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMifQ==

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUMifQ==

var ChartView = (function (_super) {
    __extends(ChartView, _super);
    function ChartView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._width = Length.pct(ChartDefaults.width, _this.parentView.node);
        _this._height = Length.pct(ChartDefaults.height, _this.parentView.node);
        _this._svgRoot = SvgView.create('svg')
            .setAttribute({
            width: _this._width,
            height: _this._height,
        })
            .setAttribute('id', id || _this.id || '');
        _this._gutterTop = Length.px(ChartDefaults.gutterTop, _this._svgRoot.node);
        _this._gutterRight = Length.px(ChartDefaults.gutterRight, _this._svgRoot.node);
        _this._gutterBottom = Length.px(ChartDefaults.gutterBottom, _this._svgRoot.node);
        _this._gutterLeft = Length.px(ChartDefaults.gutterLeft, _this._svgRoot.node);
        _this._dirty = false;
        return _this;
    }
    ChartView.prototype.create = function () {
        this._defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
        this._svgRoot.append(this._defs);
        this._clipPath = document.createElementNS('http://www.w3.org/2000/svg', 'clipPath');
        this._clipPath.setAttribute('id', Random.generateId());
        this._svgRoot.append(this._clipPath);
        this._clipRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        this._clipPath.append(this._clipRect);
        this._surfaceRect = SvgView.create('rect');
        this._surfaceRect.node.setAttribute('fill', 'none');
        this._surfaceRect.node.setAttribute('stroke', 'none');
        this._surfaceRect.node.setAttribute('pointer-events', 'all');
        this._surfaceRect.node.setAttribute('class', 'surfaceRect');
        this._svgRoot.append(this._surfaceRect);
        this._axesGroup = SvgView.create('g').className('axes');
        this._svgRoot.append(this._axesGroup);
        this._plotsGroup = HtmlView.create('div');
        this._plotsGroup.position('absolute');
        this._plotsGroup.node.setAttribute('class', 'plots');
        this.parentView.appendChildView(this._svgRoot);
        this.parentView.appendChildView(this._plotsGroup);
        this.parentView.node.style.position = 'relative';
    };
    ChartView.prototype.start = function () {
        console.info('ChartView.start', this);
        if (!this._hasStarted) {
            this._dirty = true;
            this._hasStarted = true;
        }
    };
    ChartView.prototype.render = function (frameNumber) {
        if (this._dirty) {
            this._svgRoot.setAttribute({
                width: this.width(),
                height: this.height(),
            });
            this._dirty = false;
            this.updateClipPath();
            this.updateSurface();
            console.info('chart view rendered', this._svgRoot.node.clientWidth);
        }
    };
    ChartView.prototype.resize = function () {
        this.updateClipPath();
        this.updateSurface();
    };
    ChartView.prototype.updateClipPath = function () {
        var width = Math.max(0, this.clientWidth() - this._gutterLeft.pxValue() - this._gutterRight.pxValue());
        var height = Math.max(0, this.clientHeight() - this._gutterTop.pxValue() - this._gutterBottom.pxValue());
        this._clipPath.setAttribute('x', '0');
        this._clipPath.setAttribute('y', '0');
        this._clipPath.setAttribute('width', '' + width);
        this._clipPath.setAttribute('height', '' + height);
    };
    ChartView.prototype.updateSurface = function () {
        var x = this._gutterLeft.pxValue();
        var y = this._gutterTop.pxValue();
        var width = Math.max(0, this.clientWidth() - x - this._gutterRight.pxValue());
        var height = Math.max(0, this.clientHeight() - y - this._gutterBottom.pxValue());
        this._surfaceRect.setAttribute('x', '' + x);
        this._surfaceRect.setAttribute('y', '' + y);
        this._surfaceRect.setAttribute('width', '' + width);
        this._surfaceRect.setAttribute('height', '' + height);
        this._plotsGroup.width(width);
        this._plotsGroup.height(height);
        this._plotsGroup.top(y);
        this._plotsGroup.left(x);
    };
    ChartView.prototype.axesGroup = function () {
        return this._axesGroup;
    };
    ChartView.prototype.plotsGroup = function () {
        return this._plotsGroup;
    };
    ChartView.prototype.clientWidth = function () {
        return this._svgRoot.node.clientWidth;
    };
    ChartView.prototype.clientHeight = function () {
        return this._svgRoot.node.clientHeight;
    };
    ChartView.prototype.gutterTop = function (gutterTop) {
        if (gutterTop === undefined) {
            return this._gutterTop;
        }
        gutterTop = Length.fromAny(gutterTop, this._svgRoot.node);
        if (!this._gutterTop.equals(gutterTop)) {
            console.info('chart view gutter top changed: ', gutterTop);
            this._gutterTop = gutterTop;
            this._dirty = true;
        }
        return this;
    };
    ChartView.prototype.gutterRight = function (gutterRight) {
        if (gutterRight === undefined) {
            return this._gutterRight;
        }
        gutterRight = Length.fromAny(gutterRight, this._svgRoot.node);
        if (!this._gutterRight.equals(gutterRight)) {
            this._gutterRight = gutterRight;
            this._dirty = true;
        }
        return this;
    };
    ChartView.prototype.gutterBottom = function (gutterBottom) {
        if (gutterBottom === undefined) {
            return this._gutterBottom;
        }
        gutterBottom = Length.fromAny(gutterBottom, this._svgRoot.node);
        if (!this._gutterBottom.equals(gutterBottom)) {
            this._gutterBottom = gutterBottom;
            this._dirty = true;
        }
        return this;
    };
    ChartView.prototype.gutterLeft = function (gutterLeft) {
        if (gutterLeft === undefined) {
            return this._gutterLeft;
        }
        gutterLeft = Length.fromAny(gutterLeft, this._svgRoot.node);
        if (!this._gutterLeft.equals(gutterLeft)) {
            this._gutterLeft = gutterLeft;
            this._dirty = true;
        }
        return this;
    };
    ChartView.prototype.width = function (width) {
        if (width === undefined) {
            return this._width;
        }
        width = Length.fromAny(width, this._svgRoot.node);
        if (!this._width.equals(width)) {
            console.info('chart view width changed: ', width);
            this._width = width;
            this._dirty = true;
        }
        return this;
    };
    ChartView.prototype.height = function (height) {
        if (height === undefined) {
            return this._height;
        }
        height = Length.fromAny(height, this._svgRoot.node);
        if (!this._height.equals(height)) {
            console.info('chart view height changed: ', height);
            this._height = height;
            this._dirty = true;
        }
        return this;
    };
    return ChartView;
}(View));

//# sourceMappingURL=data:application/json;base64,

var ChartController = (function (_super) {
    __extends(ChartController, _super);
    function ChartController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        _this._axisComponents = [];
        _this._domainRangeX = [0, 0];
        _this._domainRangeY = [0, 0];
        console.info('ChartController.constructor', id, parentView);
        return _this;
    }
    ChartController.prototype.create = function () {
        var _this = this;
        _super.prototype.create.call(this);
        console.info('ChartController.create', this._model.getData());
        this._plotComponents = [];
        this.setViewAttributes(this._componentInfo);
        this._componentData.forEach(function (componentAttr) {
            if (componentAttr instanceof RecordMap) {
                var newComponent = Utils.cast(_this.view().plotsGroup().node, componentAttr, _this.stack(), _this.eventManager());
                if (newComponent) {
                    _this._childComponents.push(newComponent);
                    if (componentAttr.head().key.toString() === 'plot') {
                        _this._plotComponents.push(newComponent);
                    }
                }
            }
        });
        this.setupChartAxes();
    };
    ChartController.prototype.start = function () {
        _super.prototype.start.call(this);
        console.info('ChartController.start', this._parentView, this._view);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this._view.start();
            this._view.resize();
        }
        this._childComponents.forEach(function (child) {
            child.start();
        });
        var leftAxisType = this._axisComponents["left"].controller().view().type();
        var bottomAxisType = this._axisComponents["bottom"].controller().view().type();
        this._scaleX = this.createStartingScale(bottomAxisType);
        this._scaleY = this.createStartingScale(leftAxisType);
        this.setScaleInAxes("x", this._scaleX);
        this.setScaleInAxes("y", this._scaleY);
        this.setScaleInPlots("x", this._scaleX);
        this.setScaleInPlots("y", this._scaleY);
        console.info('left', leftAxisType, 'bottom', bottomAxisType);
    };
    ChartController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        this.domainRangeX(this.findDomainRange("x"));
        this.domainRangeY(this.findDomainRange("y"));
        var leftAxisView = this._axisComponents["left"].view();
        var bottomAxisView = this._axisComponents["bottom"].view();
        this._scaleX = this._scaleX.domain(this.domainRangeX()[0], this.domainRangeX()[1]);
        this._scaleX = this._scaleX.range(bottomAxisView.x().pxValue(), bottomAxisView.width().pxValue());
        this.setScaleInAxes("x", this._scaleX);
        this._scaleX = this._scaleX.range(0, (bottomAxisView.width().pxValue() - bottomAxisView.x().pxValue()));
        this.setScaleInPlots("x", this._scaleX);
        this._scaleY = this._scaleY.domain(this.domainRangeY()[0], this.domainRangeY()[1]);
        this._scaleY = this._scaleY.range(leftAxisView.y().pxValue(), leftAxisView.height().pxValue());
        this.setScaleInAxes("y", this._scaleY);
        this._scaleY = this._scaleY.range(0, (leftAxisView.height().pxValue() - leftAxisView.y().pxValue()));
        this.setScaleInPlots("y", this._scaleY);
        this._childComponents.forEach(function (child) {
            child.render(frameNumber);
        });
        this.refreshAxisFrames();
    };
    ChartController.prototype.resize = function () {
        _super.prototype.resize.call(this);
        this.refreshAxisFrames();
    };
    ChartController.prototype.setViewAttributes = function (newState) {
        _super.prototype.setViewAttributes.call(this, newState);
    };
    ChartController.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
        if (newStateValue !== undefined) {
            if (type === Text$1) {
                if (name === 'valueUnit') {
                    if (newStateValue.value) {
                    }
                }
            }
            if (type === Value) {
                if (name === "valueWeight") {
                }
                else {
                    this.propertyKeyNumber(NumberAnimator, name, newStateValue, trans);
                }
            }
            if (type === Length.Form) {
                this.propertyKeyLength(LengthAnimator, name, newStateValue, trans);
            }
            if (type === Angle.Form) {
                this.propertyKeyAngle(AngleAnimator, name, newStateValue, trans);
            }
            if (type === Color.Form) {
                this.propertyKeyColor(ColorAnimator, name, newStateValue, trans);
            }
            if (type instanceof Array || type instanceof Transform) {
                this.view()[name](newStateValue);
            }
        }
    };
    ChartController.prototype.onLinkData = function (linkData) {
        _super.prototype.onLinkData.call(this, linkData);
    };
    ChartController.prototype.setScaleInAxes = function (axis, newScale) {
        if (axis === "x") {
            this._axisComponents["top"].view().scale(newScale);
            this._axisComponents["bottom"].view().scale(newScale);
        }
        else {
            this._axisComponents["left"].view().scale(newScale);
            this._axisComponents["right"].view().scale(newScale);
        }
    };
    ChartController.prototype.setScaleInPlots = function (axis, newScale) {
        if (axis === "x") {
            for (var i = 0; i < this._plotComponents.length; i++) {
                this._plotComponents[i].controller().setXScale(newScale);
            }
        }
        else {
            for (var i = 0; i < this._plotComponents.length; i++) {
                this._plotComponents[i].controller().setYScale(newScale);
            }
        }
    };
    ChartController.prototype.domainRangeX = function (newRange) {
        if (newRange === undefined) {
            return this._domainRangeX;
        }
        if (newRange && (newRange[0] !== this._domainRangeX[0] || newRange[1] !== this._domainRangeX[1])) {
            this._domainRangeX = newRange;
            this._axisComponents["top"].view().domainRange(this._domainRangeX);
            this._axisComponents["bottom"].view().domainRange(this._domainRangeX);
            console.info('ChartController _domainRange x set: ', this._domainRangeX);
        }
        return this;
    };
    ChartController.prototype.domainRangeY = function (newRange) {
        if (newRange === undefined) {
            return this._domainRangeY;
        }
        if (newRange && (newRange[0] !== this._domainRangeY[0] || newRange[1] !== this._domainRangeY[1])) {
            this._domainRangeY = newRange;
            this._axisComponents["left"].controller().view().domainRange(this._domainRangeY);
            this._axisComponents["right"].controller().view().domainRange(this._domainRangeY);
            console.info('ChartController _domainRange y set: ', this._domainRangeY);
        }
        return this;
    };
    ChartController.prototype.scaleX = function (newScale) {
        if (newScale === undefined) {
            return this._scaleX;
        }
        if (newScale !== undefined && newScale instanceof ContinuousScale && this._scaleX !== newScale) {
            this._scaleX = newScale;
        }
        return this;
    };
    ChartController.prototype.scaleY = function (newScale) {
        if (newScale === undefined) {
            return this._scaleY;
        }
        if (newScale !== undefined && newScale instanceof ContinuousScale && this._scaleY !== newScale) {
            this._scaleY = newScale;
        }
        return this;
    };
    ChartController.prototype.findDomainRange = function (axis) {
        var startingPlot = this._plotComponents[0].controller();
        var startingPoint = startingPlot.plotPoints()[0].controller();
        var startingValues = startingPoint.getCurrentValues();
        var rangeStart = startingValues[0];
        var rangeEnd = startingValues[1];
        for (var i = 0; i < this._plotComponents.length; i++) {
            var currPlot = this._plotComponents[i].controller();
            for (var x = 0; x < currPlot.plotPoints().length; x++) {
                var currPoint = currPlot.plotPoints()[x].controller();
                var pointValues = currPoint.getCurrentValues();
                if (axis === "x") {
                    if (pointValues[0] < rangeStart) {
                        rangeStart = pointValues[0];
                    }
                    if (pointValues[0] > rangeEnd) {
                        rangeEnd = pointValues[0];
                    }
                }
                else {
                    if (pointValues[1] > rangeStart) {
                        rangeStart = pointValues[1];
                    }
                    if (pointValues[1] < rangeEnd) {
                        rangeEnd = pointValues[1];
                    }
                }
            }
        }
        return [rangeStart, rangeEnd];
    };
    ChartController.prototype.createStartingScale = function (value) {
        if (value instanceof ContinuousScale) {
            return value;
        }
        else if (typeof value === 'string') {
            if (value === 'linear') {
                return new LinearScale(0, 1, new NumberInterpolator(0, 1));
            }
            else if (value === 'time') {
                var d1 = DateTime.current();
                var d0 = new DateTime(+d1, d1.zone());
                d0.day(d0.day() - 1);
                return new TimeScale(d0, d1, new NumberInterpolator(d0.time(), d1.time()));
            }
            else {
                var domain = value.split('...');
                var x0 = UiValue.parse(domain[0]);
                var x1 = UiValue.parse(domain[1]);
                if (typeof x0 === 'number' && typeof x1 === 'number') {
                    return new LinearScale(x0, x1, new NumberInterpolator(x0, x1));
                }
                else if (x0 instanceof DateTime && x1 instanceof DateTime) {
                    return new TimeScale(x0, x1, new NumberInterpolator(x0.time(), x1.time()));
                }
            }
        }
        throw new TypeError(value);
    };
    ChartController.prototype.setupChartAxes = function () {
        var axisListRecordMap = this._componentData.get('axisList');
        var defaultAxisParamValues = RecordMap.empty();
        for (var i = 0; i < AxisModel.Params.length; i++) {
            var currParam = AxisModel.Params[i];
            var paramCompData = axisListRecordMap.get(currParam.getName());
            if (!paramCompData.isEmpty()) {
                defaultAxisParamValues.push(new Slot(Item.Text.valueOf(currParam.getName()), paramCompData));
            }
        }
        var _loop_1 = function (i) {
            var currAxisKey = AxisKeyList[i];
            var axisInfo = axisListRecordMap.get(currAxisKey);
            var currAxisParams = defaultAxisParamValues.clone();
            currAxisParams.push(new Slot(Item.Text.valueOf('placement'), Item.Text.valueOf(currAxisKey)));
            axisInfo.forEach(function (param) {
                if (!currAxisParams.get(param.key).isEmpty()) {
                    currAxisParams.set(param.key, param.value);
                }
                else {
                    currAxisParams.push(param);
                }
            });
            var newAxis = new Axis();
            var axisComponent = newAxis.create(this_1.view().axesGroup().node, currAxisParams, this_1.stack(), this_1.eventManager());
            this_1._childComponents.push(axisComponent);
            this_1._axisComponents[currAxisKey] = axisComponent;
        };
        var this_1 = this;
        for (var i = 0; i < AxisKeyList.length; i++) {
            _loop_1(i);
        }
    };
    ChartController.prototype.refreshAxisFrames = function () {
        var chartView = this.view();
        for (var i = 0; i < AxisKeyList.length; i++) {
            var currAxisKey = AxisKeyList[i];
            var currAxisView = this._axisComponents[currAxisKey].view();
            if (this._axisComponents['top'].view().type() !== 'hidden') {
                chartView.gutterTop(this._axisComponents['top'].view().gutter());
            }
            if (this._axisComponents['bottom'].view().type() !== 'hidden') {
                chartView.gutterBottom(this._axisComponents['bottom'].view().gutter());
            }
            if (this._axisComponents['left'].view().type() !== 'hidden') {
                chartView.gutterLeft(this._axisComponents['left'].view().gutter());
            }
            if (this._axisComponents['right'].view().type() !== 'hidden') {
                chartView.gutterRight(this._axisComponents['right'].view().gutter());
            }
            var axisTop = Length.zero();
            var axisLeft = Length.zero();
            var axisWidth = Length.zero();
            var axisHeight = Length.zero();
            if (currAxisView.type() !== 'hidden') {
                switch (currAxisKey) {
                    case 'top':
                        axisTop = Length.zero();
                        axisLeft = chartView.gutterLeft();
                        axisHeight = chartView.gutterTop();
                        axisWidth = Length.fromAny(chartView.clientWidth() - (chartView.gutterRight().pxValue()));
                        break;
                    case 'bottom':
                        axisTop = Length.fromAny((chartView.clientHeight() - chartView.gutterBottom().pxValue()), 'px');
                        axisLeft = chartView.gutterLeft();
                        axisHeight = chartView.gutterBottom();
                        axisWidth = Length.fromAny(chartView.clientWidth() - (chartView.gutterRight().pxValue()));
                        break;
                    case 'left':
                        axisTop = chartView.gutterTop();
                        axisLeft = Length.zero();
                        axisHeight = Length.fromAny(chartView.clientHeight() - (chartView.gutterBottom().pxValue()), 'px');
                        axisWidth = chartView.gutterLeft();
                        break;
                    case 'right':
                        axisTop = chartView.gutterTop();
                        axisLeft = Length.fromAny((chartView.clientWidth() - (chartView.gutterRight().pxValue())), 'px');
                        axisHeight = Length.fromAny(chartView.clientHeight() - (chartView.gutterBottom().pxValue()), 'px');
                        axisWidth = chartView.gutterRight();
                        break;
                }
            }
            currAxisView.x(axisLeft);
            currAxisView.y(axisTop);
            currAxisView.width(axisWidth);
            currAxisView.height(axisHeight);
        }
    };
    return ChartController;
}(Controller));

var ChartModel = (function (_super) {
    __extends(ChartModel, _super);
    function ChartModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChartModel.PaddingParams = SvgModel.Params.concat([
        new ModelParam('top', Length.Form),
        new ModelParam('right', Length.Form),
        new ModelParam('bottom', Length.Form),
        new ModelParam('left', Length.Form),
    ]);
    ChartModel.BoundParams = SvgModel.Params.concat([
        new ModelParam('top', Value),
        new ModelParam('right', Value),
        new ModelParam('bottom', Value),
        new ModelParam('left', Value),
    ]);
    ChartModel.Params = SvgModel.Params.concat([
        new ModelParam('width', Length.Form),
        new ModelParam('height', Length.Form),
        new ModelParam('domainPadding', ChartModel.PaddingParams),
        new ModelParam('gutter', ChartModel.PaddingParams),
    ]);
    return ChartModel;
}(SvgModel));
var ChartDefaults = (function () {
    function ChartDefaults() {
    }
    ChartDefaults.width = 100;
    ChartDefaults.height = 100;
    ChartDefaults.gutterTop = 0;
    ChartDefaults.gutterBottom = 0;
    ChartDefaults.gutterLeft = 0;
    ChartDefaults.gutterRight = 0;
    return ChartDefaults;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFydC1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQ0wsVUFBVSxFQUNWLFFBQVEsRUFFUixNQUFNLEdBQ1AsTUFBTSxVQUFVLENBQUM7QUFFbEI7SUFBZ0Msc0NBQVE7SUFBeEM7O0lBc0NBLENBQUM7SUFwQ2lCLHdCQUFhLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDckQsSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDbEMsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDcEMsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDckMsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7S0FDcEMsQ0FBQyxDQUFDO0lBRWEsc0JBQVcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNuRCxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO1FBQzVCLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7UUFDOUIsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQztRQUMvQixJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO0tBQzlCLENBQUMsQ0FBQztJQUVhLGlCQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDOUMsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDcEMsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFFckMsSUFBSSxVQUFVLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDekQsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxhQUFhLENBQUM7S0FlbkQsQ0FBQyxDQUFDO0lBRUwsaUJBQUM7Q0FBQSxBQXRDRCxDQUFnQyxRQUFRLEdBc0N2QztTQXRDWSxVQUFVO0FBd0N2QjtJQUFBO0lBT0EsQ0FBQztJQU5pQixtQkFBSyxHQUFXLEdBQUcsQ0FBQztJQUNwQixvQkFBTSxHQUFXLEdBQUcsQ0FBQztJQUNyQix1QkFBUyxHQUFXLENBQUMsQ0FBQztJQUN0QiwwQkFBWSxHQUFXLENBQUMsQ0FBQztJQUN6Qix3QkFBVSxHQUFXLENBQUMsQ0FBQztJQUN2Qix5QkFBVyxHQUFXLENBQUMsQ0FBQztJQUMxQyxvQkFBQztDQUFBLEFBUEQsSUFPQztTQVBZLGFBQWEifQ==

var Chart = (function (_super) {
    __extends(Chart, _super);
    function Chart() {
        return _super.call(this) || this;
    }
    Object.defineProperty(Chart.prototype, "tag", {
        get: function () {
            return 'chart';
        },
        enumerable: true,
        configurable: true
    });
    Chart.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Chart needs a parent node or view', this.parentView());
        }
        this.controller(new ChartController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new ChartModel(eventManager));
        this.view(new ChartView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Chart.prototype.start = function () {
        console.info('Chart.start');
        _super.prototype.start.call(this);
        console.info('Chart.started');
    };
    return Chart;
}(UiComponent));
UiComponent.Global.addComponent('chart', Chart);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLGVBQWUsRUFDZixTQUFTLEVBQ1QsVUFBVSxHQUNYLE1BQU0sVUFBVSxDQUFDO0FBQ2xCLE9BQU8sRUFFTCxXQUFXLEdBQ1osTUFBTSxVQUFVLENBQUM7QUFNbEI7SUFBMkIsaUNBQVc7SUFNbEM7ZUFDSSxpQkFBTztJQUNYLENBQUM7SUFORCxzQkFBSSxzQkFBRzthQUFQO1lBQ0ksT0FBTyxPQUFPLENBQUM7UUFDbkIsQ0FBQzs7O09BQUE7SUFNRCxzQkFBTSxHQUFOLFVBQU8sV0FBa0MsRUFBRSxLQUFZLEVBQUUsS0FBZ0IsRUFBRSxZQUE2QixFQUFFLEVBQVc7UUFDakgsaUJBQU0sTUFBTSxZQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDekU7UUFJRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUc1RyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFHekMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUd2RCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFM0IsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELHFCQUFLLEdBQUw7UUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzVCLGlCQUFNLEtBQUssV0FBRSxDQUFDO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUwsWUFBQztBQUFELENBQUMsQUF0Q0QsQ0FBMkIsV0FBVyxHQXNDckM7O0FBRUQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDIn0=

var AxisController = (function (_super) {
    __extends(AxisController, _super);
    function AxisController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = this;
        console.info('AxisController.constructor', id, parentView);
        _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        return _this;
    }
    AxisController.prototype.create = function () {
        _super.prototype.create.call(this);
        console.info('AxisController.create', this._model.getData());
    };
    AxisController.prototype.start = function () {
        _super.prototype.start.call(this);
        console.info('AxisController.start', this._componentInfo);
        this.setViewAttributes(this._componentInfo);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this.view().start();
        }
    };
    AxisController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
    };
    AxisController.prototype.setViewAttributes = function (newState) {
        _super.prototype.setViewAttributes.call(this, newState);
    };
    AxisController.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
        if (newStateValue !== undefined) {
            if (type === Value) {
                this.propertyKeyNumber(NumberAnimator, name, newStateValue, trans);
            }
            if (type === Length.Form) {
                this.view()[name](newStateValue);
            }
            if (type === Angle.Form) {
                this.propertyKeyAngle(AngleAnimator, name, newStateValue, trans);
            }
            if (type === Color.Form) {
                this.propertyKeyColor(ColorAnimator, name, newStateValue, trans);
            }
            if (type === Text$1) {
                this.view()[name](newStateValue.toString());
            }
            if (type instanceof Array || type === Transform) {
                this.view()[name](newStateValue);
            }
        }
    };
    AxisController.prototype.onLinkData = function (linkData) {
        _super.prototype.onLinkData.call(this, linkData);
        var componentData = this._componentData.evaluate(linkData);
        var newState = componentData.evaluate(this._stack);
        this.setViewAttributes(newState);
    };
    return AxisController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXhpcy1jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXhpcy1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFhLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNyRCxPQUFPLEVBRUwsVUFBVSxFQUNWLGNBQWMsRUFBRSxNQUFNLEVBRXRCLEtBQUssRUFDTCxhQUFhLEVBRWIsS0FBSyxFQUNMLGFBQWEsRUFDYixTQUFTLEdBQ1YsTUFBTSxVQUFVLENBQUM7QUFLbEI7SUFBb0MsMENBQVU7SUFJNUMsd0JBQVksRUFBVSxFQUFFLGFBQW9CLEVBQUUsa0JBQStCLEVBQUUsVUFBZ0IsRUFBRSxLQUFnQixFQUFFLFlBQTZCO1FBQWhKLGlCQUdDO1FBRkMsT0FBTyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDM0QsUUFBQSxrQkFBTSxFQUFFLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLFNBQUM7O0lBQ2hGLENBQUM7SUFFRCwrQkFBTSxHQUFOO1FBQ0UsaUJBQU0sTUFBTSxXQUFFLENBQUM7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUcvRCxDQUFDO0lBRUQsOEJBQUssR0FBTDtRQUNFLGlCQUFNLEtBQUssV0FBRSxDQUFDO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1QyxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLElBQUksRUFBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3RCO0lBR0gsQ0FBQztJQUVELCtCQUFNLEdBQU4sVUFBTyxXQUFtQjtRQUN4QixpQkFBTSxNQUFNLFlBQUMsV0FBVyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELDBDQUFpQixHQUFqQixVQUFrQixRQUFhO1FBTTdCLGlCQUFNLGlCQUFpQixZQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCw4Q0FBcUIsR0FBckIsVUFBc0IsYUFBa0IsRUFBRSxJQUFTLEVBQUUsSUFBUyxFQUFFLEtBQVU7UUFHeEUsSUFBSSxhQUFhLEtBQUssU0FBUyxFQUFFO1lBQy9CLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtnQkFDbEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3BFO1lBQ0QsSUFBSSxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRTtnQkFDdkIsSUFBSSxDQUFDLElBQUksRUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBRTNDO1lBQ0QsSUFBSSxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksRUFBRTtnQkFFdkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ2xFO1lBQ0QsSUFBSSxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksRUFBRTtnQkFFdkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ2xFO1lBQ0QsSUFBRyxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUNmLElBQUksQ0FBQyxJQUFJLEVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQzthQUN0RDtZQUNELElBQUcsSUFBSSxZQUFZLEtBQUssSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO2dCQUM3QyxJQUFJLENBQUMsSUFBSSxFQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDM0M7U0FDRjtJQUNILENBQUM7SUFFRCxtQ0FBVSxHQUFWLFVBQVcsUUFBZTtRQUN4QixpQkFBTSxVQUFVLFlBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0IsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0QsSUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFckQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRW5DLENBQUM7SUFFSCxxQkFBQztBQUFELENBQUMsQUE5RUQsQ0FBb0MsVUFBVSxHQThFN0MifQ==

var AxisKeyList = ['left', 'right', 'top', 'bottom'];
var AxisDefaults = (function () {
    function AxisDefaults() {
    }
    AxisDefaults.gutterSize = 0;
    AxisDefaults.type = 'hidden';
    AxisDefaults.x = 0;
    AxisDefaults.y = 0;
    AxisDefaults.width = 0;
    AxisDefaults.height = 0;
    AxisDefaults.transform = Transform.translate(AxisDefaults.x, AxisDefaults.y);
    AxisDefaults.domainWidth = 1;
    AxisDefaults.domainColor = new Rgb(0, 0, 0, 0.75);
    AxisDefaults.domainSerif = 5;
    AxisDefaults.domainLinecap = "butt";
    AxisDefaults.domainLineJoin = "miter";
    AxisDefaults.domainDashArray = "0";
    AxisDefaults.domainRange = [0, 1];
    AxisDefaults.tickMarkColor = Color.black();
    AxisDefaults.tickMarkWidth = 1;
    AxisDefaults.tickMarkLength = 6;
    AxisDefaults.tickLabelColor = Color.black();
    AxisDefaults.tickLabelPadding = 5;
    AxisDefaults.tickLabelWeight = 200;
    AxisDefaults.tickSpacingX = 100;
    AxisDefaults.tickSpacingY = 0;
    return AxisDefaults;
}());
var AxisModel = (function (_super) {
    __extends(AxisModel, _super);
    function AxisModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AxisModel.DomainParams = SvgModel.Params.concat([
        new ModelParam('color', Color.Form),
        new ModelParam('width', Length.Form),
        new ModelParam('serif', Length.Form),
        new ModelParam('linecap', Text$1),
        new ModelParam('linejoin', Text$1),
        new ModelParam('dashArray', Text$1),
        new ModelParam('range', Text$1),
    ]);
    AxisModel.TickMarkParams = SvgModel.Params.concat([
        new ModelParam('color', Color.Form),
        new ModelParam('width', Length.Form),
        new ModelParam('length', Length.Form),
    ]);
    AxisModel.LabelParams = SvgModel.Params.concat([
        new ModelParam('color', Color.Form),
        new ModelParam('padding', Length.Form),
        new ModelParam('weight', Length.Form),
    ]);
    AxisModel.Params = SvgModel.Params.concat([
        new ModelParam('width', Length.Form),
        new ModelParam('height', Length.Form),
        new ModelParam('x', Length.Form),
        new ModelParam('y', Length.Form),
        new ModelParam('gutter', Length.Form),
        new ModelParam('type', Text$1),
        new ModelParam('placement', Text$1),
        new ModelParam('transform', Text$1),
        new ModelParam('domain', AxisModel.DomainParams),
        new ModelParam('tickMark', AxisModel.TickMarkParams),
        new ModelParam('tickLabel', AxisModel.LabelParams),
    ]);
    return AxisModel;
}(SvgModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXhpcy1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF4aXMtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxJQUFJLEdBQ0wsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUNMLFVBQVUsRUFDVixRQUFRLEVBQ1IsS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1QsR0FBRyxHQUNKLE1BQU0sVUFBVSxDQUFDO0FBRWxCLE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBYSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBRXhFO0lBQUE7SUF1QkEsQ0FBQztJQXRCaUIsdUJBQVUsR0FBVyxDQUFDLENBQUM7SUFDdkIsaUJBQUksR0FBVyxRQUFRLENBQUM7SUFDeEIsY0FBQyxHQUFXLENBQUMsQ0FBQztJQUNkLGNBQUMsR0FBVyxDQUFDLENBQUM7SUFDZCxrQkFBSyxHQUFXLENBQUMsQ0FBQztJQUNsQixtQkFBTSxHQUFXLENBQUMsQ0FBQztJQUNuQixzQkFBUyxHQUFjLFNBQVMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0Usd0JBQVcsR0FBVyxDQUFDLENBQUM7SUFDeEIsd0JBQVcsR0FBVSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQztJQUN6Qyx3QkFBVyxHQUFXLENBQUMsQ0FBQztJQUN4QiwwQkFBYSxHQUFXLE1BQU0sQ0FBQztJQUMvQiwyQkFBYyxHQUFXLE9BQU8sQ0FBQztJQUNqQyw0QkFBZSxHQUFXLEdBQUcsQ0FBQztJQUM5Qix3QkFBVyxHQUFxQixDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztJQUN0QywwQkFBYSxHQUFVLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQywwQkFBYSxHQUFXLENB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

var ERROR_10 = Math.sqrt(50);
var ERROR_5 = Math.sqrt(10);
var ERROR_2 = Math.sqrt(2);
var SECOND$2 = 1000;
var MINUTE$2 = 60 * SECOND$2;
var HOUR$2 = 60 * MINUTE$2;
var DAY$1 = 24 * HOUR$2;
var WEEK$1 = 7 * DAY$1;
var MONTH = 30 * DAY$1;
var YEAR = 365 * DAY$1;
var TIME_TICK_INTERVALS = new BTree()
    .set(SECOND$2, TimeInterval.seconds())
    .set(5 * SECOND$2, TimeInterval.seconds(5))
    .set(15 * SECOND$2, TimeInterval.seconds(15))
    .set(30 * SECOND$2, TimeInterval.seconds(30))
    .set(MINUTE$2, TimeInterval.minutes(1))
    .set(5 * MINUTE$2, TimeInterval.minutes(5))
    .set(15 * MINUTE$2, TimeInterval.minutes(15))
    .set(30 * MINUTE$2, TimeInterval.minutes(30))
    .set(HOUR$2, TimeInterval.hours())
    .set(3 * HOUR$2, TimeInterval.hours(3))
    .set(6 * HOUR$2, TimeInterval.hours(6))
    .set(12 * HOUR$2, TimeInterval.hours(12))
    .set(DAY$1, TimeInterval.days())
    .set(2 * DAY$1, TimeInterval.days(2))
    .set(WEEK$1, TimeInterval.weeks())
    .set(MONTH, TimeInterval.months())
    .set(3 * MONTH, TimeInterval.months(3))
    .set(YEAR, TimeInterval.years());
var MILLISECOND_FORMAT = DateTimeFormat.pattern('.%L');
var SECOND_FORMAT = DateTimeFormat.pattern(':%S');
var MINUTE_FORMAT = DateTimeFormat.pattern('%I:%M');
var HOUR_FORMAT = DateTimeFormat.pattern('%I %p');
var WEEKDAY_FORMAT = DateTimeFormat.pattern('%a %d');
var MONTHDAY_FORMAT = DateTimeFormat.pattern('%b %d');
var MONTH_FORMAT = DateTimeFormat.pattern('%B');
var YEAR_FORMAT = DateTimeFormat.pattern('%Y');
var TickState;
(function (TickState) {
    TickState[TickState["Excluded"] = 0] = "Excluded";
    TickState[TickState["Entering"] = 1] = "Entering";
    TickState[TickState["Included"] = 2] = "Included";
    TickState[TickState["Leaving"] = 3] = "Leaving";
})(TickState || (TickState = {}));
var TickAnimator = (function (_super) {
    __extends(TickAnimator, _super);
    function TickAnimator(parent, node, tickValue) {
        var _this = _super.call(this, parent) || this;
        _this.node = node;
        _this.tickValue = tickValue;
        _this.tickState = 0;
        _this.opacity = null;
        _this.coord0 = NaN;
        return _this;
    }
    TickAnimator.prototype.onFrame = function (t) {
        if (this.opacity) {
            this.opacity.onFrame(t);
        }
    };
    TickAnimator.prototype.remove = function () {
    };
    TickAnimator.prototype.fadeIn = function (trans) {
        if (this.tickState === 0 || this.tickState === 3) {
            this.coord0 = NaN;
            var animator = this.opacity;
            if (!animator) {
                if (!trans.f) {
                    trans = trans.range(0);
                }
                animator = new TickOpacityAnimator(this, 0, trans);
                this.opacity = animator;
            }
            this.tickState = 1;
            animator.set(1, trans);
        }
    };
    TickAnimator.prototype.fadeOut = function (trans) {
        if (this.tickState === 1 || this.tickState === 2) {
            this.coord0 = NaN;
            var animator = this.opacity;
            if (!animator) {
                if (!trans.f) {
                    trans = trans.range(1);
                }
                animator = new TickOpacityAnimator(this, 1, trans);
                this.opacity = animator;
            }
            this.tickState = 3;
            animator.set(0, trans);
        }
    };
    return TickAnimator;
}(ChildAnimator));
var TickOpacityAnimator = (function (_super) {
    __extends(TickOpacityAnimator, _super);
    function TickOpacityAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    TickOpacityAnimator.prototype.map = function (u) {
        var coord = +this.parent.node.tickCoord;
        if (isNaN(this.parent.coord0)) {
            this.parent.coord0 = coord;
        }
        var tickSpacing = 40;
        var v = Math.min(Math.abs(coord - this.parent.coord0) / tickSpacing, 1) || 0;
        return this.f.map(Math.max(u, v));
    };
    TickOpacityAnimator.prototype.update = function (value) {
        this.parent.node.style.setProperty('opacity', '' + value);
    };
    TickOpacityAnimator.prototype.onEnd = function (value) {
        this.parent.coord0 = NaN;
        if (value === 0) {
            this.parent.tickState = 0;
            this.parent.remove();
        }
        else if (value === 1) {
            this.parent.tickState = 2;
        }
    };
    return TickOpacityAnimator;
}(ChildFrameAnimator));
var TickGenerator = (function () {
    function TickGenerator() {
    }
    TickGenerator.prototype.format = function (tickValue) {
        return '' + tickValue;
    };
    TickGenerator.prototype.createElement = function (tickValue) {
        var tick = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        tick.setAttribute('class', 'tick');
        tick.tickValue = tickValue;
        var tickMark = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        tickMark.setAttribute('slot', 'tick-mark');
        tickMark.setAttribute('class', 'tick-mark');
        tick.appendChild(tickMark);
        var tickLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        tickLabel.setAttribute('slot', 'tick-label');
        tickLabel.setAttribute('class', 'tick-label');
        tickLabel.textContent = this.format(tickValue);
        tick.appendChild(tickLabel);
        return tick;
    };
    TickGenerator.scale = function (fx, n) {
        if (n === undefined) {
            n = 10;
        }
        if (fx instanceof TimeScale) {
            var domain = fx.domain();
            return new TimeTickGenerator(domain[0], domain[1], n);
        }
        else {
            var domain = fx.domain();
            return new NumberTickGenerator(domain[0], domain[1], n);
        }
    };
    TickGenerator.step = function (dx, n) {
        var step0 = Math.abs(dx) / n;
        var step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10));
        var error = step0 / step1;
        if (error >= ERROR_10) {
            step1 *= 10;
        }
        else if (error >= ERROR_5) {
            step1 *= 5;
        }
        else if (error >= ERROR_2) {
            step1 *= 2;
        }
        return dx < 0 ? -step1 : step1;
    };
    return TickGenerator;
}());
var NumberTickGenerator = (function (_super) {
    __extends(NumberTickGenerator, _super);
    function NumberTickGenerator(x0, x1, n) {
        var _this = _super.call(this) || this;
        _this.x0 = x0;
        _this.dx = x1 - _this.x0;
        _this.n = Math.max(0, n);
        return _this;
    }
    NumberTickGenerator.prototype.count = function (n) {
        if (n === undefined) {
            return this.n;
        }
        else {
            this.n = Math.max(0, n);
            return this;
        }
    };
    NumberTickGenerator.prototype.domain = function (x0, x1) {
        if (x0 === undefined) {
            return [this.x0, this.x0 + this.dx];
        }
        else if (x1 === undefined) {
            x0 = x0;
            this.x0 = x0[0];
            this.dx = x0[1] - this.x0;
            return this;
        }
        else {
            this.x0 = x0;
            this.dx = x1 - this.x0;
            return this;
        }
    };
    NumberTickGenerator.prototype.generate = function () {
        var x0;
        var x1;
        if (this.dx < 0) {
            x1 = this.x0;
            x0 = x1 + this.dx;
        }
        else {
            x0 = this.x0;
            x1 = x0 + this.dx;
        }
        var step = NumberTickGenerator.interval(x1 - x0, this.n);
        if (step === 0 || !isFinite(step)) {
            return [];
        }
        var ticks;
        if (step > 0) {
            x0 = Math.ceil(x0 / step);
            x1 = Math.floor(x1 / step);
            var n = Math.ceil(x1 - x0 + 1);
            ticks = new Array(n);
            for (var i = 0; i < n; i += 1) {
                ticks[i] = (x0 + i) * step;
            }
        }
        else {
            x0 = Math.floor(x0 * step);
            x1 = Math.ceil(x1 * step);
            var n = Math.ceil(x0 - x1 + 1);
            ticks = new Array(n);
            for (var i = 0; i < n; i += 1) {
                ticks[i] = (x0 - i) / step;
            }
        }
        if (this.dx < 0) {
            ticks.reverse();
        }
        return ticks;
    };
    NumberTickGenerator.interval = function (dx, n) {
        if (n === void 0) { n = 10; }
        var step = dx / n;
        var power = Math.floor(Math.log(step) / Math.LN10);
        var power10 = Math.pow(10, power);
        var error = step / power10;
        var base = error >= ERROR_10 ? 10 : error >= ERROR_5 ? 5 : error >= ERROR_2 ? 2 : 1;
        return power >= 0 ? power10 * base : -Math.pow(10, -power) / base;
    };
    return NumberTickGenerator;
}(TickGenerator));
var TimeTickGenerator = (function (_super) {
    __extends(TimeTickGenerator, _super);
    function TimeTickGenerator(d0, d1, n, zone) {
        var _this = _super.call(this) || this;
        d0 = DateTime.fromAny(d0);
        d1 = DateTime.fromAny(d1);
        _this.t0 = d0.time();
        _this.dt = d1.time() - _this.t0;
        _this.zone = zone || d0.zone();
        _this.n = Math.max(0, n);
        return _this;
    }
    TimeTickGenerator.prototype.count = function (n) {
        if (n === undefined) {
            return this.n;
        }
        else {
            this.n = Math.max(0, n);
            return this;
        }
    };
    TimeTickGenerator.prototype.domain = function (d0, d1) {
        if (d0 === undefined) {
            return [new DateTime(this.t0, this.zone), new DateTime(this.t0 + this.dt, this.zone)];
        }
        else {
            if (d1 === undefined) {
                d0 = d0;
                d1 = d0[1];
                d0 = d0[0];
            }
            else {
                d0 = d0;
            }
            d0 = DateTime.fromAny(d0);
            d1 = DateTime.fromAny(d1);
            this.t0 = d0.time();
            this.dt = d1.time() - this.t0;
            return this;
        }
    };
    TimeTickGenerator.prototype.generate = function (interval) {
        var t0;
        var t1;
        if (this.dt < 0) {
            t1 = this.t0;
            t0 = t1 + this.dt;
        }
        else {
            t0 = this.t0;
            t1 = t0 + this.dt;
        }
        if (interval === undefined) {
            interval = this.n;
        }
        interval = TimeTickGenerator.interval(t1 - t0, interval);
        var ticks = interval.range(new DateTime(t0, this.zone), new DateTime(t1 + 1, this.zone));
        if (this.dt < 0) {
            ticks.reverse();
        }
        return ticks;
    };
    TimeTickGenerator.prototype.format = function (tickValue) {
        if (TimeInterval.seconds().floor(tickValue) < tickValue) {
            return MILLISECOND_FORMAT.format(tickValue);
        }
        else if (TimeInterval.minutes().floor(tickValue) < tickValue) {
            return SECOND_FORMAT.format(tickValue);
        }
        else if (TimeInterval.hours().floor(tickValue) < tickValue) {
            return MINUTE_FORMAT.format(tickValue);
        }
        else if (TimeInterval.days().floor(tickValue) < tickValue) {
            return HOUR_FORMAT.format(tickValue);
        }
        else if (TimeInterval.months().floor(tickValue) < tickValue) {
            if (TimeInterval.weeks().floor(tickValue) < tickValue) {
                return WEEKDAY_FORMAT.format(tickValue);
            }
            else {
                return MONTHDAY_FORMAT.format(tickValue);
            }
        }
        else if (TimeInterval.years().floor(tickValue) < tickValue) {
            return MONTH_FORMAT.format(tickValue);
        }
        else {
            return YEAR_FORMAT.format(tickValue);
        }
    };
    TimeTickGenerator.interval = function (dt, interval) {
        if (interval === void 0) { interval = 10; }
        if (typeof interval === 'number') {
            var t = Math.abs(dt) / interval;
            var duration = TIME_TICK_INTERVALS.nextKey(t);
            if (duration === undefined) {
                var k = TickGenerator.step(dt / YEAR, interval);
                interval = TimeInterval.years(k);
            }
            else if (duration > SECOND$2) {
                if (t / TIME_TICK_INTERVALS.previousKey(t) < duration / t) {
                    interval = TIME_TICK_INTERVALS.previousValue(t);
                }
                else {
                    interval = TIME_TICK_INTERVALS.nextValue(t);
                }
            }
            else {
                var k = Math.max(1, TickGenerator.step(dt, interval));
                interval = TimeInterval.milliseconds(k);
            }
        }
        return interval;
    };
    return TimeTickGenerator;
}(TickGenerator));

//# sourceMappingURL=data:application/json;base64,

var AxisView = (function (_super) {
    __extends(AxisView, _super);
    function AxisView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._ticks = new BTree();
        _this._transform = AxisDefaults.transform.toString();
        _this._gutter = Length.fromAny(AxisDefaults.gutterSize);
        _this._type = AxisDefaults.type;
        _this._x = Length.fromAny(AxisDefaults.x);
        _this._y = Length.fromAny(AxisDefaults.y);
        _this._xPosition = Length.fromAny(0);
        _this._yPosition = Length.fromAny(0);
        _this._width = Length.fromAny(AxisDefaults.width);
        _this._height = Length.fromAny(AxisDefaults.height);
        _this._domainWidth = Length.fromAny(AxisDefaults.domainWidth);
        _this._domainColor = AxisDefaults.domainColor;
        _this._domainSerif = Length.fromAny(AxisDefaults.domainSerif);
        _this._domainLinecap = AxisDefaults.domainLinecap;
        _this._domainLinejoin = AxisDefaults.domainLineJoin;
        _this._domainDashArray = AxisDefaults.domainDashArray;
        _this._domainRange = AxisDefaults.domainRange;
        _this._tickMarkColor = AxisDefaults.tickLabelColor;
        _this._tickMarkWidth = Length.fromAny(AxisDefaults.tickMarkWidth);
        _this._tickMarkLength = Length.fromAny(AxisDefaults.tickMarkLength);
        _this._tickLabelColor = AxisDefaults.tickLabelColor;
        _this._tickLabelPadding = Length.fromAny(AxisDefaults.tickLabelPadding);
        _this._tickLabelWeight = Length.fromAny(AxisDefaults.tickLabelWeight);
        _this._frame = null;
        _this._debugFrames = false;
        return _this;
    }
    AxisView.prototype.create = function () {
        _super.prototype.create.call(this);
        console.info('AxisView.create', this._frame, this._scale);
        this._axisRoot = SvgView.create('g');
        if (this._debugFrames) {
            this._debugPath = SvgView.create('path');
            this._debugPath.setAttribute('class', 'debug');
            this._debugPath.setAttribute('fill', 'none');
            this._axisRoot.append(this._debugPath);
        }
        this._domainPath = SvgView.create('path');
        this._domainPath.setAttribute('class', 'domain');
        this._domainPath.setAttribute('fill', 'none');
        this._axisRoot.append(this._domainPath);
        this._parentView.append(this._axisRoot);
    };
    AxisView.prototype.start = function () {
        _super.prototype.start.call(this);
        this._axisRoot.className("axis " + this._placement);
        if (this._type !== 'hidden') {
            this._tickSpacing = this._placement === 'left' || this._placement === 'right' ? AxisDefaults.tickSpacingY : AxisDefaults.tickSpacingX;
        }
    };
    AxisView.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        if (this._dirty) {
            if (this.width().pxValue() === 0 || this.height().pxValue() === 0) {
                this._dirty = false;
                return;
            }
            if (this._debugFrames) {
                var x1 = Math.round(this.x().pxValue());
                var y1 = Math.round(this.y().pxValue());
                var x2 = Math.round(this.x().pxValue() + this.width().pxValue());
                var y2 = Math.round(this.y().pxValue() + this.height().pxValue());
                var newPath = new Path();
                newPath.moveTo(x1, y1);
                newPath.lineTo(x2, y1);
                newPath.lineTo(x2, y2);
                newPath.lineTo(x1, y2);
                newPath.lineTo(x1, y1);
                this._debugPath.stroke(Color.rgb(100, 100, 255, 0.5));
                this._debugPath.strokeWidth(1);
                this._debugPath.d(newPath.toString());
            }
            this._tickGenerator = TickGenerator.scale(this.scale());
            if (this._type !== 'hidden') {
                this.renderDomainPath();
                this.updateTicks();
                this.renderTicks();
            }
            this._dirty = false;
        }
    };
    AxisView.prototype.renderDomainPath = function () {
        if (this.type() === 'hidden') {
            return;
        }
        var y0 = 0;
        var y1 = 0;
        var x0 = 0;
        var x1 = 0;
        var path = new Path();
        if (this._type !== 'hidden') {
            if (this.placement() === 'left' || this.placement() === 'right') {
                y0 = this.y().toValue('px');
                y1 = this.height().toValue('px');
                if (this.placement() === 'left') {
                    x0 = this.width().toValue('px') - this._domainSerif.toValue('px') - this._domainWidth.toValue('px');
                    x1 = this.width().toValue('px');
                }
                else {
                    x0 = this.x().toValue('px') + this._domainWidth.toValue('px') + this._domainSerif.toValue('px');
                    x1 = this.x().toValue('px');
                }
                path.moveTo(x0, y0);
                path.lineTo(x1, y0);
                path.lineTo(x1, y1);
                path.lineTo(x0, y1);
            }
            if (this.placement() === 'bottom' || this.placement() === 'top') {
                x0 = (this.x().toValue('px'));
                x1 = this.width().toValue('px');
                if (this.placement() === 'bottom') {
                    y0 = this.y().toValue('px') + this._domainSerif.toValue('px') + this._domainWidth.toValue('px');
                    y1 = this.y().toValue('px');
                }
                else {
                    y0 = this.height().toValue('px') - this._domainSerif.toValue('px') - this._domainWidth.toValue('px');
                    y1 = this.height().toValue('px');
                }
                path.moveTo(x0, y0);
                path.lineTo(x0, y1);
                path.lineTo(x1, y1);
                path.lineTo(x1, y0);
            }
        }
        this._domainPath.setAttribute('d', path.toString());
        this._domainPath.setAttribute('stroke-linejoin', this._domainLinejoin);
        this._domainPath.setAttribute('stroke-linecap', this._domainLinecap);
        this._domainPath.setAttribute('stroke-dasharray', this._domainDashArray);
        this._domainPath.stroke(this._domainColor);
        this._domainPath.strokeWidth(this._domainWidth.pxValue());
    };
    AxisView.prototype.x = function (newX) {
        if (newX === undefined) {
            return this._x;
        }
        else if (newX && !this._x.equals(newX)) {
            this._x = newX;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.y = function (newY) {
        if (newY === undefined) {
            return this._y;
        }
        else if (newY && !this._y.equals(newY)) {
            this._y = newY;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.width = function (newWidth) {
        if (newWidth === undefined) {
            return this._width;
        }
        else if (newWidth && !this._width.equals(newWidth)) {
            this._width = newWidth;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.height = function (newHeight) {
        if (newHeight === undefined) {
            return this._height;
        }
        else if (newHeight && !this._height.equals(newHeight)) {
            this._height = newHeight;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.placement = function (newPlacement) {
        if (newPlacement === undefined) {
            return this._placement;
        }
        if (newPlacement && newPlacement !== this._placement) {
            this._placement = newPlacement;
            this._dirty = true;
            console.info('AxisView placement set: ', this._placement);
        }
        return this;
    };
    AxisView.prototype.transform = function (newTransform) {
        if (newTransform === undefined) {
            return this._transform;
        }
        if (newTransform && this._transform !== newTransform) {
            console.info('AxisView transform set: ', this._transform);
            this._transform = newTransform;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.type = function (newType) {
        if (newType === undefined || newType === 'absent') {
            return this._type;
        }
        if (newType && newType !== this._type) {
            console.info('AxisView type set: ', newType);
            this._type = newType;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.domainLinecap = function (capType) {
        if (capType === undefined || capType === 'absent') {
            return this._domainLinecap;
        }
        if (capType && capType !== this._domainLinecap) {
            console.info('AxisView capType set: ', capType);
            this._domainLinecap = capType;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.domainLinejoin = function (joinType) {
        if (joinType === undefined || joinType === 'absent') {
            return this._domainLinejoin;
        }
        if (joinType && joinType !== this._domainLinejoin) {
            console.info('AxisView joinType set: ', joinType);
            this._domainLinejoin = joinType;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.domainDashArray = function (dashArray) {
        if (dashArray === undefined || dashArray === 'absent') {
            return this._domainDashArray;
        }
        if (dashArray && dashArray !== this._domainDashArray) {
            console.info('AxisView dashArray set: ', dashArray);
            this._domainDashArray = dashArray;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.domainRange = function (newRange) {
        if (newRange === undefined || newRange === 'absent') {
            return this._domainRange;
        }
        if (newRange && (newRange[0] !== this._domainRange[0] || newRange[1] !== this._domainRange[1])) {
            if (typeof newRange === 'string') {
                var rangeSplit = newRange.split('...');
                this._domainRange = [parseInt(rangeSplit[0], undefined), parseInt(rangeSplit[1], undefined)];
            }
            else {
                this._domainRange = newRange;
            }
            this._dirty = true;
            console.info('AxisView _domainRange set: ', this._domainRange);
        }
        return this;
    };
    AxisView.prototype.gutter = function (gutterSize) {
        if (gutterSize === undefined) {
            return this._gutter;
        }
        gutterSize = Length.fromAny(gutterSize, this._axisRoot.node);
        if (!this._gutter.equals(gutterSize)) {
            console.info('axis view gutter size changed: ', gutterSize);
            this._gutter = gutterSize;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.domainColor = function (newColor) {
        if (newColor === undefined) {
            return this._domainColor;
        }
        if (!this._domainColor.equals(newColor)) {
            console.info('axis view domain color changed: ', newColor);
            this._domainColor = newColor;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.domainWidth = function (newWidth) {
        if (newWidth === undefined) {
            return this._gutter;
        }
        newWidth = Length.fromAny(newWidth, this._axisRoot.node);
        if (!this._domainWidth.equals(newWidth)) {
            console.info('axis view domain width changed: ', newWidth);
            this._domainWidth = newWidth;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.domainSerif = function (newSerif) {
        if (newSerif === undefined) {
            return this._gutter;
        }
        newSerif = Length.fromAny(newSerif, this._axisRoot.node);
        if (!this._domainSerif.equals(newSerif)) {
            console.info('axis view domain serif changed: ', newSerif);
            this._domainSerif = newSerif;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.scale = function (newScale) {
        if (newScale === undefined) {
            return this._scale;
        }
        if (newScale !== undefined && newScale instanceof ContinuousScale && this._scale !== newScale) {
            this._scale = newScale;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.tickMarkColor = function (tickMarkColor) {
        if (tickMarkColor === undefined) {
            return this._tickMarkColor;
        }
        tickMarkColor = Color.fromAny(tickMarkColor);
        if (!this._tickMarkColor.equals(tickMarkColor)) {
            this._tickMarkColor = tickMarkColor;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.tickMarkWidth = function (tickMarkWidth) {
        if (tickMarkWidth === undefined) {
            return this._tickMarkWidth;
        }
        if (this._tickMarkWidth !== tickMarkWidth) {
            this._tickMarkWidth = tickMarkWidth;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.tickMarkLength = function (tickMarkLength) {
        if (tickMarkLength === undefined) {
            return this._tickMarkLength;
        }
        if (this._tickMarkLength !== tickMarkLength) {
            this._tickMarkLength = tickMarkLength;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.tickLabelColor = function (tickLabelColor) {
        if (tickLabelColor === undefined) {
            return this._tickLabelColor;
        }
        tickLabelColor = Color.fromAny(tickLabelColor);
        if (!this._tickLabelColor.equals(tickLabelColor)) {
            this._tickLabelColor = tickLabelColor;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.tickLabelPadding = function (tickLabelPadding) {
        if (tickLabelPadding === undefined) {
            return this._tickLabelPadding;
        }
        if (this._tickLabelPadding !== tickLabelPadding) {
            this._tickLabelPadding = tickLabelPadding;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.tickLabelWeight = function (tickLabelWeight) {
        if (tickLabelWeight === undefined) {
            return this._tickLabelWeight;
        }
        if (this._tickLabelWeight !== tickLabelWeight) {
            this._tickLabelWeight = tickLabelWeight;
            this._dirty = true;
        }
        return this;
    };
    AxisView.prototype.renderTicks = function () {
        this._ticks.forEach(function (tickValue, tick) {
            this.renderTick(tick);
        }, this);
    };
    AxisView.prototype.renderTick = function (tick) {
        if (this._placement === "left" || this._placement === "right") {
            var y = this._scale.scale(tick.tickValue);
            tick.tickCoord = y + this._y.pxValue();
            var transform = Transform.translate(this._x.pxValue(), y);
            tick.setAttribute('transform', transform.toAttributeString());
        }
        else {
            var y = this._scale.scale(tick.tickValue);
            var transform = Transform.translate(y, 0);
            tick.setAttribute('transform', transform.toAttributeString());
        }
        for (var i = 0; i < tick.childNodes.length; i += 1) {
            var child = tick.childNodes[i];
            if (child instanceof Element) {
                if (child.getAttribute('slot') === 'tick-mark') {
                    this.renderTickMark(child, tick);
                }
                else if (child.getAttribute('slot') === 'tick-label') {
                    this.renderTickLabel(child, tick);
                }
            }
        }
    };
    AxisView.prototype.renderTickMark = function (tickMark, tick) {
        if (this._placement === 'left' || this._placement === 'right') {
            var x = (this._placement === 'left' && this._width.pxValue()) ? this._width.pxValue() : 0;
            tickMark.setAttribute('x1', x.toString());
            tickMark.setAttribute('y1', '0');
            if (this._placement === 'left') {
                tickMark.setAttribute('x2', '' + (x - this._tickMarkLength.pxValue()));
            }
            else {
                tickMark.setAttribute('x2', '' + (this._tickMarkLength));
            }
            tickMark.setAttribute('y2', '0');
        }
        else {
            var y = (this._placement === 'top' && this._height.pxValue()) ? this._height.pxValue() : this._y.pxValue();
            tickMark.setAttribute('x1', '0');
            tickMark.setAttribute('y1', '' + (y));
            if (this._placement === 'top') {
                tickMark.setAttribute('y2', '' + (y - this._tickMarkLength.pxValue()));
            }
            else {
                tickMark.setAttribute('y2', '' + (y + this._tickMarkLength.pxValue()));
            }
            tickMark.setAttribute('x2', '0');
        }
        tickMark.setAttribute('stroke', '' + this._tickMarkColor);
        tickMark.setAttribute('stroke-width', '' + this._tickMarkWidth);
    };
    AxisView.prototype.renderTickLabel = function (tickLabel, tick) {
        var x = (this._placement === 'left') ? this._width.pxValue() : 0;
        var y = (this._placement === 'bottom') ? this._y.pxValue() : this._height.pxValue();
        switch (this._placement) {
            case 'left':
                tickLabel.setAttribute('x', '' + (x - this._tickMarkLength.pxValue() - this._tickLabelPadding.pxValue()));
                tickLabel.setAttribute('text-anchor', 'end');
                tickLabel.setAttribute('dominant-baseline', 'central');
                break;
            case 'right':
                tickLabel.setAttribute('x', '' + (x + this._tickMarkLength.pxValue() + this._tickLabelPadding.pxValue()));
                tickLabel.setAttribute('text-anchor', 'start');
                tickLabel.setAttribute('dominant-baseline', 'central');
                break;
            case 'top':
                tickLabel.setAttribute('y', '' + (y - this._tickMarkLength.pxValue() - this._tickLabelPadding.pxValue()));
                tickLabel.setAttribute('text-anchor', 'middle');
                tickLabel.setAttribute('dominant-baseline', 'baseline');
                break;
            case 'bottom':
                tickLabel.setAttribute('y', '' + (y + this._tickMarkLength.pxValue() + this._tickLabelPadding.pxValue()));
                tickLabel.setAttribute('text-anchor', 'middle');
                tickLabel.setAttribute('dominant-baseline', 'hanging');
                break;
        }
        tickLabel.setAttribute('font-weight', '' + this._tickLabelWeight);
        tickLabel.setAttribute('fill', '' + this._tickLabelColor);
    };
    AxisView.prototype.updateTicks = function () {
        var scale = this.scale();
        if (this._tickSpacing) {
            var range = scale.range();
            var dy = Math.abs(range[1] - range[0]);
            var n = Math.max(1, Math.floor(dy / this._tickSpacing));
            this._tickGenerator.count(n);
        }
        this._tickGenerator.domain(scale.domain());
        var oldTicks = this._ticks.clone();
        var newTickValues = this._tickGenerator.generate();
        var i = 0;
        outer: while (i < newTickValues.length) {
            var newTickValue = newTickValues[i];
            var oldTickValue = oldTicks.firstKey();
            while (oldTickValue !== undefined) {
                if (+newTickValue === +oldTickValue) {
                    oldTicks.delete(oldTickValue);
                    newTickValues.splice(i, 1);
                    continue outer;
                }
                oldTickValue = oldTicks.nextKey(oldTickValue);
            }
            var newTick = this._tickGenerator.createElement(newTickValue);
            if (newTick) {
                this.insertTickElement(newTick);
            }
            i += 1;
        }
    };
    AxisView.prototype.getTickElement = function (tickValue) {
        return this._ticks.get(tickValue);
    };
    AxisView.prototype.insertTickElement = function (newTick) {
        this._ticks.set(newTick.tickValue, newTick);
        this._axisRoot.node.insertBefore(newTick, this._ticks.nextValue(newTick.tickValue) || null);
        this.renderTick(newTick);
    };
    AxisView.prototype.removeTickElement = function (oldTick) {
        this._axisRoot.node.removeChild(oldTick);
        this._ticks.delete(oldTick.tickValue);
    };
    return AxisView;
}(View));

//# sourceMappingURL=data:application/json;base64,

var Axis = (function (_super) {
    __extends(Axis, _super);
    function Axis() {
        return _super.call(this) || this;
    }
    Object.defineProperty(Axis.prototype, "tag", {
        get: function () {
            return 'axis';
        },
        enumerable: true,
        configurable: true
    });
    Axis.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Axis needs a parent node or view', this.parentView());
        }
        this.controller(new AxisController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new AxisModel(eventManager));
        this.view(new AxisView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Axis.prototype.start = function () {
        _super.prototype.start.call(this);
    };
    return Axis;
}(UiComponent));
UiComponent.Global.addComponent('axis', Axis);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXhpcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF4aXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxjQUFjLEVBQ2QsUUFBUSxFQUNSLFNBQVMsR0FDVixNQUFNLFVBQVUsQ0FBQztBQUNsQixPQUFPLEVBQW1CLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUd4RDtJQUEwQixnQ0FBVztJQU1qQztlQUNJLGlCQUFPO0lBQ1gsQ0FBQztJQU5ELHNCQUFJLHFCQUFHO2FBQVA7WUFDSSxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDOzs7T0FBQTtJQU1ELHFCQUFNLEdBQU4sVUFBTyxXQUFrQyxFQUFFLEtBQVksRUFBRSxLQUFnQixFQUFFLFlBQTZCLEVBQUUsRUFBVztRQUNqSCxpQkFBTSxNQUFNLFlBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUN4RTtRQUlELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRzNHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUd4QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBR3RELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUzQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsb0JBQUssR0FBTDtRQUVJLGlCQUFNLEtBQUssV0FBRSxDQUFDO0lBRWxCLENBQUM7SUFFTCxXQUFDO0FBQUQsQ0FBQyxBQXRDRCxDQUEwQixXQUFXLEdBc0NwQzs7QUFFRCxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMifQ==

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsY0FBYyxHQVFmLE1BQU0sbUJBQW1CLENBQUM7QUFFM0IsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV2QyxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFcEUsT0FBTyxFQUVMLGFBQWEsRUFDYixtQkFBbUIsRUFDbkIsaUJBQWlCLEdBQ2xCLE1BQU0sa0JBQWtCLENBQUM7QUFFMUIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQyJ9

var PlotController = (function (_super) {
    __extends(PlotController, _super);
    function PlotController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = this;
        console.info('PlotController.constructor', id, parentView);
        _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        _this._plotPoints = [];
        return _this;
    }
    PlotController.prototype.create = function () {
        _super.prototype.create.call(this);
        console.info('PlotController.create', this._parentView.node);
    };
    PlotController.prototype.start = function () {
        var _this = this;
        console.info('PlotController.start', this._componentData);
        this._componentData.forEach(function (componentAttr) {
            if (componentAttr instanceof RecordMap) {
                console.info('PlotController.componentAttr', componentAttr.head().key.toString());
                var parentView = _this._parentView.node;
                if (componentAttr.head().key.toString().toLocaleLowerCase() === 'plotpoint') {
                    parentView = _this.view().canvas().node;
                }
                var newComponent = Utils.cast(parentView, componentAttr, _this.stack(), _this.eventManager());
                if (newComponent) {
                    if (componentAttr.head().key.toString().toLocaleLowerCase() === 'plotpoint') {
                        _this._plotPoints.push(newComponent);
                    }
                    _this._childComponents.push(newComponent);
                    newComponent.start();
                }
            }
        });
        this.setViewAttributes(this._componentInfo);
        this._isRunning = true;
        this.view().start();
        console.info('PlotController._plotPoints', this._plotPoints);
    };
    PlotController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        this.view().render(frameNumber);
        var path = [];
        for (var i = 0; i < this._plotPoints.length; i++) {
            var nodeData = this._plotPoints[i].controller().getCurrentCoordinates();
            path.push([nodeData[0], nodeData[1]]);
        }
        if (this.view().type() === "area") {
            for (var i = (path.length - 1); i >= 0; i--) {
                var nodeData = this._plotPoints[i].controller().getCurrentCoordinates();
                path.push([nodeData[0], nodeData[2]]);
            }
        }
        this.view().plotData(path);
        for (var i = 0; i < this._plotPoints.length; i++) {
            this._plotPoints[i].controller().render(frameNumber);
        }
    };
    PlotController.prototype.setViewAttributes = function (newState) {
        _super.prototype.setViewAttributes.call(this, newState);
    };
    PlotController.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
        if (newStateValue !== undefined) {
            if (type === Value || type === Text$1) {
                this.view()[name](newStateValue.value);
            }
            if (type === Length.Form) {
                this.propertyKeyLength(LengthAnimator, name, newStateValue, trans);
            }
            if (type === Angle.Form) {
                this.propertyKeyAngle(AngleAnimator, name, newStateValue, trans);
            }
            if (type === Color.Form) {
                this.propertyKeyColor(ColorAnimator, name, newStateValue, trans);
            }
            if (type instanceof Array || type instanceof Text$1) {
                this.view()[name](newStateValue);
            }
        }
    };
    PlotController.prototype.onLinkData = function (linkData) {
        _super.prototype.onLinkData.call(this, linkData);
        var componentData = this._componentData.evaluate(linkData);
        var newState = componentData.evaluate(this._stack);
        this.setViewAttributes(newState);
    };
    PlotController.prototype.plotPoints = function () {
        return this._plotPoints;
    };
    PlotController.prototype.setYScale = function (newScale) {
        if (newScale !== undefined && newScale instanceof ContinuousScale && this._scaleY !== newScale) {
            this._scaleY = newScale;
            this.view().scaleY(this._scaleY);
            for (var i = 0; i < this._plotPoints.length; i++) {
                this._plotPoints[i].view().scaleY(this._scaleY);
            }
        }
    };
    PlotController.prototype.setXScale = function (newScale) {
        if (newScale !== undefined && newScale instanceof ContinuousScale && this._scaleX !== newScale) {
            this._scaleX = newScale;
            this.view().scaleX(this._scaleX);
            for (var i = 0; i < this._plotPoints.length; i++) {
                this._plotPoints[i].view().scaleX(this._scaleX);
            }
        }
    };
    return PlotController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdC1jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGxvdC1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFhLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDaEUsT0FBTyxFQUVMLFVBQVUsRUFDVixNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFDN0IsYUFBYSxFQUViLEtBQUssRUFDTCxhQUFhLEVBRWIsS0FBSyxFQUNMLGVBQWUsR0FDaEIsTUFBTSxVQUFVLENBQUM7QUFJbEI7SUFBb0MsMENBQVU7SUFNNUMsd0JBQVksRUFBVSxFQUFFLGFBQW9CLEVBQUUsa0JBQStCLEVBQUUsVUFBZ0IsRUFBRSxLQUFnQixFQUFFLFlBQTZCO1FBQWhKLGlCQUlDO1FBSEMsT0FBTyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDM0QsUUFBQSxrQkFBTSxFQUFFLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLFNBQUM7UUFDOUUsS0FBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7O0lBQ3hCLENBQUM7SUFFRCwrQkFBTSxHQUFOO1FBQ0UsaUJBQU0sTUFBTSxXQUFFLENBQUM7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFHLElBQUksQ0FBQyxXQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTVFLENBQUM7SUFFRCw4QkFBSyxHQUFMO1FBQUEsaUJBNEJDO1FBMUJDLE9BQU8sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTFELElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQUMsYUFBYTtZQUN4QyxJQUFJLGFBQWEsWUFBWSxTQUFTLEVBQUU7Z0JBQ3RDLE9BQU8s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

var PlotView = (function (_super) {
    __extends(PlotView, _super);
    function PlotView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._dirty = true;
        _this._canvasDirty = true;
        console.info('PlotView.constructor', id, parentView);
        _this._plotCanvas = HtmlView.create("canvas");
        _this._plotData = [];
        _this._type = PlotDefaults.type;
        _this._fillColor = PlotDefaults.fillColor;
        _this._strokeColor = PlotDefaults.strokeColor;
        _this._strokeSize = Length.fromAny(PlotDefaults.strokeSize);
        _this._linecap = PlotDefaults.lineCap;
        _this._linejoin = PlotDefaults.lineJoin;
        _this._dashArray = PlotDefaults.dashArray;
        return _this;
    }
    PlotView.prototype.create = function () {
        _super.prototype.create.call(this);
        console.info('PlotView.create', this._parentView);
        this._plotCanvas.node.setAttribute('id', this._id);
        this._plotCanvas.position('absolute');
        this._plotCanvas.top(0);
        this._plotCanvas.left(0);
        this._canvasContext = this._plotCanvas.node.getContext('2d');
        if (this._parentView && this._canvasContext) {
            this._parentView.appendChildView(this._plotCanvas);
        }
    };
    PlotView.prototype.setupCanvas = function () {
        var canvas = this._plotCanvas.node;
        var dpr = window.devicePixelRatio || 1;
        canvas.width = this._parentView.node.offsetWidth;
        canvas.height = this._parentView.node.offsetHeight;
        if (this._canvasContext) {
            this._canvasContext.scale(dpr, dpr);
        }
        this._dirty = true;
    };
    PlotView.prototype.mapFromRange = function (value, rangeStart, rangeEnd) {
        var returnValue = 0;
        console.info('PlotView.mapFromRange', value, rangeStart, rangeEnd);
        if (value > rangeEnd) {
            return 1;
        }
        if (value < rangeStart) {
            return 0;
        }
        returnValue = (value - rangeStart) / (rangeEnd - rangeStart);
        console.info('PlotView.mapFromRange:pct', returnValue);
        returnValue = returnValue * rangeEnd;
        console.info('PlotView.mapFromRange:fnl', returnValue);
        return returnValue;
    };
    PlotView.prototype.start = function () {
        console.info('PlotView.start');
        _super.prototype.start.call(this);
        this.resize();
    };
    PlotView.prototype.plotData = function (newData) {
        if (newData === undefined || newData === null) {
            return this._plotData;
        }
        if (newData) {
            this._plotData = newData;
            this._dirty = true;
        }
        return this;
    };
    PlotView.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        var canvas = this._plotCanvas.node;
        if (canvas.width !== (this._parentView.node.offsetWidth)) {
            this.resize();
        }
        if (this._dirty) {
            if (this._parentView && this._canvasContext) {
                this.clearCanvas();
                if (this._canvasContext) {
                    if (this._type !== 'circle') {
                        this._canvasContext.lineWidth = this._strokeSize.pxValue();
                        this._canvasContext.lineCap = this._linecap;
                        this._canvasContext.lineJoin = this._linejoin;
                        var dashStrArray = this._dashArray.split(',');
                        var dashNumArr = [];
                        for (var i = 0; i < dashStrArray.length; i++) {
                            dashNumArr.push(parseInt(dashStrArray[i], undefined));
                        }
                        this._canvasContext.strokeStyle = this._strokeColor.toString();
                        this._canvasContext.beginPath();
                        this._canvasContext.setLineDash(dashNumArr);
                        for (var i = 0; i < this._plotData.length; i++) {
                            var currPathNode = this._plotData[i];
                            if (i === 0) {
                                this._canvasContext.moveTo(currPathNode[0], currPathNode[1]);
                            }
                            else {
                                this._canvasContext.lineTo(currPathNode[0], currPathNode[1]);
                            }
                        }
                        if (this._type === 'area') {
                            this._canvasContext.fillStyle = this._fillColor.toString();
                            this._canvasContext.fill();
                        }
                        this._canvasContext.stroke();
                    }
                }
            }
        }
    };
    PlotView.prototype.resize = function () {
        this.setupCanvas();
    };
    PlotView.prototype.canvas = function () {
        return this._plotCanvas;
    };
    PlotView.prototype.canvasContext = function () {
        return this._canvasContext;
    };
    PlotView.prototype.clearCanvas = function () {
        if (this._canvasContext) {
            var canvas = this._plotCanvas.node;
            this._canvasContext.clearRect(0, 0, canvas.width, canvas.height);
            var w = canvas.width;
            canvas.width = 1;
            canvas.width = w;
        }
    };
    PlotView.prototype.type = function (newType) {
        if (newType === undefined || newType === 'absent') {
            return this._type;
        }
        if (newType && newType !== this._type) {
            console.info('PlotView type set', newType);
            this._type = newType;
            this._dirty = true;
        }
        return this;
    };
    PlotView.prototype.fillColor = function (value) {
        if (value === undefined) {
            return this._fillColor;
        }
        if (!this._fillColor.equals(value)) {
            this._fillColor = (value instanceof Color) ? value : Color.rgb(PlotDefaults.fillColor);
            this._dirty = true;
        }
        return this;
    };
    PlotView.prototype.strokeSize = function (value) {
        if (value === undefined) {
            return this._strokeSize;
        }
        this._strokeSize = (value instanceof Length) ? value : Length.px(PlotDefaults.strokeSize);
        this._dirty = true;
        return this;
    };
    PlotView.prototype.strokeColor = function (value) {
        if (value === undefined) {
            return this._strokeColor;
        }
        if (!this._strokeColor.equals(value)) {
            this._strokeColor = (value instanceof Color) ? value : Color.rgb(PlotDefaults.strokeColor);
            this._dirty = true;
        }
        return this;
    };
    PlotView.prototype.linecap = function (capType) {
        if (capType === undefined || capType === 'absent') {
            return this._linecap;
        }
        if (capType && capType !== this._linecap) {
            this._linecap = capType;
            this._dirty = true;
        }
        return this;
    };
    PlotView.prototype.linejoin = function (joinType) {
        if (joinType === undefined || joinType === 'absent') {
            return this._linejoin;
        }
        if (joinType && joinType !== this._linejoin) {
            this._linejoin = joinType;
            this._dirty = true;
        }
        return this;
    };
    PlotView.prototype.dashArray = function (dashArray) {
        if (dashArray === undefined || dashArray === 'absent') {
            return this._dashArray;
        }
        if (dashArray && dashArray !== this._dashArray) {
            this._dashArray = dashArray;
            this._dirty = true;
        }
        return this;
    };
    PlotView.prototype.scaleX = function (newScale) {
        if (newScale === undefined) {
            return this._scaleX;
        }
        if (newScale !== undefined && newScale instanceof ContinuousScale && this._scaleX !== newScale) {
            this._scaleX = newScale;
            this._dirty = true;
        }
        return this;
    };
    PlotView.prototype.scaleY = function (newScale) {
        if (newScale === undefined) {
            return this._scaleY;
        }
        if (newScale !== undefined && newScale instanceof ContinuousScale && this._scaleY !== newScale) {
            this._scaleY = newScale;
            this._dirty = true;
        }
        return this;
    };
    return PlotView;
}(View));

//# sourceMappingURL=data:application/json;base64,

var PlotDefaults = (function () {
    function PlotDefaults() {
    }
    PlotDefaults.type = 'circle';
    PlotDefaults.fillColor = new Rgb(0, 0, 0, 0);
    PlotDefaults.strokeColor = new Rgb(0, 0, 0, 0.5);
    PlotDefaults.strokeSize = 1;
    PlotDefaults.lineCap = 'butt';
    PlotDefaults.lineJoin = 'miter';
    PlotDefaults.dashArray = '0';
    return PlotDefaults;
}());
var PlotModel = (function (_super) {
    __extends(PlotModel, _super);
    function PlotModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PlotModel.Params = SvgModel.Params.concat([
        new ModelParam('type', Text$1),
        new ModelParam('fillColor', Color.Form),
        new ModelParam('strokeColor', Color.Form),
        new ModelParam('strokeSize', Length.Form),
        new ModelParam('linecap', Text$1),
        new ModelParam('linejoin', Text$1),
        new ModelParam('dashArray', Text$1),
    ]);
    return PlotModel;
}(SvgModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdC1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBsb3QtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxJQUFJLEdBQ0wsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUNMLFVBQVUsRUFDVixRQUFRLEVBQ1IsS0FBSyxFQUNMLE1BQU0sRUFDTixHQUFHLEdBQ0osTUFBTSxVQUFVLENBQUM7QUFFbEI7SUFBQTtJQVFBLENBQUM7SUFQaUIsaUJBQUksR0FBVyxRQUFRLENBQUM7SUFDeEIsc0JBQVMsR0FBVSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztJQUNwQyx3QkFBVyxHQUFVLElBQUksR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLHVCQUFVLEdBQVcsQ0FBQyxDQUFDO0lBQ3ZCLG9CQUFPLEdBQVcsTUFBTSxDQUFDO0lBQ3pCLHFCQUFRLEdBQVcsT0FBTyxDQUFDO0lBQzNCLHNCQUFTLEdBQVcsR0FBRyxDQUFDO0lBQzFDLG1CQUFDO0NBQUEsQUFSRCxJQVFDO1NBUlksWUFBWTtBQVV6QjtJQUErQixxQ0FBUTtJQUF2Qzs7SUFZQSxDQUFDO0lBWGlCLGdCQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFFOUMsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQztRQUM1QixJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QyxJQUFJLFVBQVUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN6QyxJQUFJLFVBQVUsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN6QyxJQUFJLFVBQVUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDO1FBQy9CLElBQUksVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUM7UUFDaEMsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQztLQUVsQyxDQUFDLENBQUM7SUFDTCxnQkFBQztDQUFBLEFBWkQsQ0FBK0IsUUFBUSxHQVl0QztTQVpZLFNBQVMifQ==

var Plot = (function (_super) {
    __extends(Plot, _super);
    function Plot() {
        return _super.call(this) || this;
    }
    Object.defineProperty(Plot.prototype, "tag", {
        get: function () {
            return 'plot';
        },
        enumerable: true,
        configurable: true
    });
    Plot.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Plot needs a parent node or view', this.parentView());
        }
        this.controller(new PlotController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new PlotModel(eventManager));
        this.view(new PlotView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Plot.prototype.start = function () {
        _super.prototype.start.call(this);
    };
    return Plot;
}(UiComponent));
UiComponent.Global.addComponent('plot', Plot);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBsb3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxjQUFjLEVBQ2QsUUFBUSxFQUNSLFNBQVMsR0FDVixNQUFNLFVBQVUsQ0FBQztBQUNsQixPQUFPLEVBQW1CLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUd4RDtJQUEwQixnQ0FBVztJQU1qQztlQUNJLGlCQUFPO0lBQ1gsQ0FBQztJQU5ELHNCQUFJLHFCQUFHO2FBQVA7WUFDSSxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDOzs7T0FBQTtJQU1ELHFCQUFNLEdBQU4sVUFBTyxXQUFrQyxFQUFFLEtBQVksRUFBRSxLQUFnQixFQUFFLFlBQTZCLEVBQUUsRUFBVztRQUNqSCxpQkFBTSxNQUFNLFlBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUN4RTtRQUlELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRzNHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUd4QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBR3RELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUzQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsb0JBQUssR0FBTDtRQUVJLGlCQUFNLEtBQUssV0FBRSxDQUFDO0lBRWxCLENBQUM7SUFFTCxXQUFDO0FBQUQsQ0FBQyxBQXRDRCxDQUEwQixXQUFXLEdBc0NwQzs7QUFFRCxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMifQ==

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsY0FBYyxHQUNmLE1BQU0sbUJBQW1CLENBQUM7QUFFM0IsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV2QyxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV2RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDIn0=

var PlotPointController = (function (_super) {
    __extends(PlotPointController, _super);
    function PlotPointController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = this;
        console.info('PlotPointController.constructor', id, parentView);
        _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        return _this;
    }
    PlotPointController.prototype.create = function () {
        _super.prototype.create.call(this);
        console.info('PlotPointController.create', this._parentView.node);
    };
    PlotPointController.prototype.start = function () {
        console.info('PlotPointController.start', this._componentData);
        this.setViewAttributes(this._componentInfo);
        this._isRunning = true;
    };
    PlotPointController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
    };
    PlotPointController.prototype.setViewAttributes = function (newState) {
        _super.prototype.setViewAttributes.call(this, newState);
    };
    PlotPointController.prototype.getCurrentCoordinates = function () {
        var plotPointView = this.view();
        var returnX = 0;
        var returnY = 0;
        var returnDY = 0;
        if (plotPointView) {
            returnX = plotPointView.xPosition().value;
            returnY = plotPointView.yPosition().value;
            returnDY = plotPointView.domainYPosition().value;
        }
        return [returnX, returnY, returnDY];
    };
    PlotPointController.prototype.getCurrentValues = function () {
        var plotPointView = this.view();
        var returnX = 0;
        var returnY = 0;
        var returnDY = 0;
        if (plotPointView) {
            returnX = plotPointView.x().value;
            returnY = plotPointView.y().value;
            returnDY = plotPointView.domainY().value;
        }
        return [returnX, returnY, returnDY];
    };
    PlotPointController.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
        if (newStateValue !== undefined) {
            if (type === Text$1) {
                if (name === 'valueUnit') {
                    if (newStateValue.value) {
                    }
                }
            }
            if (type === Value) {
                if (name === "valueWeight") {
                }
                else {
                    this.propertyKeyNumber(NumberAnimator, name, newStateValue, trans);
                }
            }
            if (type === Length.Form) {
                this.propertyKeyLength(LengthAnimator, name, newStateValue, trans);
            }
            if (type === Angle.Form) {
                this.propertyKeyAngle(AngleAnimator, name, newStateValue, trans);
            }
            if (type === Color.Form) {
                this.propertyKeyColor(ColorAnimator, name, newStateValue, trans);
            }
            if (type instanceof Array) {
                this.view()[name](newStateValue);
            }
        }
    };
    PlotPointController.prototype.onLinkData = function (linkData) {
        _super.prototype.onLinkData.call(this, linkData);
        var componentData = this._componentData.evaluate(linkData);
        var newState = componentData.evaluate(this._stack);
        this.setViewAttributes(newState);
    };
    return PlotPointController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdC1wb2ludC1jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGxvdC1wb2ludC1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFhLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNyRCxPQUFPLEVBRUwsVUFBVSxFQUNWLGNBQWMsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFDN0MsYUFBYSxFQUViLEtBQUssRUFDTCxhQUFhLEdBR2QsTUFBTSxVQUFVLENBQUM7QUFJbEI7SUFBeUMsK0NBQVU7SUFFakQsNkJBQVksRUFBVSxFQUFFLGFBQW9CLEVBQUUsa0JBQStCLEVBQUUsVUFBZ0IsRUFBRSxLQUFnQixFQUFFLFlBQTZCO1FBQWhKLGlCQUdDO1FBRkMsT0FBTyxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDaEUsUUFBQSxrQkFBTSxFQUFFLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLFNBQUM7O0lBQ2hGLENBQUM7SUFFRCxvQ0FBTSxHQUFOO1FBQ0UsaUJBQU0sTUFBTSxXQUFFLENBQUM7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFHLElBQUksQ0FBQyxXQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWpGLENBQUM7SUFFRCxtQ0FBSyxHQUFMO1FBRUUsT0FBTyxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRUQsb0NBQU0sR0FBTixVQUFPLFdBQW1CO1FBRXhCLGlCQUFNLE1BQU0sWUFB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

var PlotPointView = (function (_super) {
    __extends(PlotPointView, _super);
    function PlotPointView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._dirty = true;
        _this._canvasDirty = true;
        console.info('PlotPointView.constructor', id, parentView);
        _this._canvasContext = parentView.node.getContext('2d');
        _this._x = Length.px(PlotPointDefaults.X);
        _this._y = Length.px(PlotPointDefaults.Y);
        _this._yPosition = Length.zero();
        _this._xPosition = Length.zero();
        _this._radius = Length.px(PlotPointDefaults.Radius);
        _this._fillColor = Color.rgb(PlotPointDefaults.FillColor);
        _this._strokeColor = Color.rgb(PlotPointDefaults.StrokeColor);
        _this._strokeSize = Length.px(PlotPointDefaults.StrokeSize);
        _this._value = PlotPointDefaults.Value;
        _this._domainY = Length.px(PlotPointDefaults.DomainY);
        _this._domainYPosition = Length.zero();
        return _this;
    }
    PlotPointView.prototype.create = function () {
        _super.prototype.create.call(this);
        console.info('PlotPointView.create', this._canvasContext);
    };
    PlotPointView.prototype.start = function () {
        console.info('PlotPointView.start', this._parentView);
        _super.prototype.start.call(this);
        this.resize();
    };
    PlotPointView.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        if (this._canvasContext && this._dirty) {
            this.xPosition(Length.fromAny(this._scaleX.scale(this._x.pxValue())));
            this.yPosition(Length.fromAny(this._scaleY.scale(this._y.pxValue())));
            this.domainYPosition(Length.fromAny(this._scaleY.scale(this._domainY.pxValue())));
            this._canvasContext.beginPath();
            this._canvasContext.arc(this._xPosition.value, this._yPosition.value, this._radius.value, 0, 2 * Math.PI, false);
            this._canvasContext.fillStyle = this._fillColor.toString();
            this._canvasContext.fill();
            if (this._strokeSize.value !== 0) {
                this._canvasContext.lineWidth = this._strokeSize.value;
                this._canvasContext.strokeStyle = this._strokeColor.toString();
                this._canvasContext.stroke();
            }
        }
    };
    PlotPointView.prototype.resize = function () {
    };
    PlotPointView.prototype.x = function (newX) {
        if (newX === undefined) {
            return this._x;
        }
        else if (newX && !this._x.equals(newX)) {
            this._x = newX;
            this._dirty = true;
        }
        return this;
    };
    PlotPointView.prototype.y = function (newY) {
        if (newY === undefined) {
            return this._y;
        }
        else if (newY && !this._y.equals(newY)) {
            this._y = newY;
            this._dirty = true;
        }
        return this;
    };
    PlotPointView.prototype.xPosition = function (newX) {
        if (newX === undefined) {
            return this._xPosition;
        }
        else if (newX && !this._xPosition.equals(newX)) {
            this._xPosition = newX;
            this._dirty = true;
        }
        return this;
    };
    PlotPointView.prototype.yPosition = function (newY) {
        if (newY === undefined) {
            return this._yPosition;
        }
        else if (newY && !this._yPosition.equals(newY)) {
            this._yPosition = newY;
            this._dirty = true;
        }
        return this;
    };
    PlotPointView.prototype.domainY = function (newY) {
        if (newY === undefined) {
            return this._domainY;
        }
        else if (newY && !this._domainY.equals(newY)) {
            this._domainY = newY;
            this._dirty = true;
        }
        return this;
    };
    PlotPointView.prototype.domainYPosition = function (newY) {
        if (newY === undefined) {
            return this._domainYPosition;
        }
        else if (newY && !this._domainYPosition.equals(newY)) {
            this._domainYPosition = newY;
            this._dirty = true;
        }
        return this;
    };
    PlotPointView.prototype.fillColor = function (newColor) {
        if (newColor === undefined) {
            return this._fillColor;
        }
        if (!this._fillColor.equals(newColor)) {
            console.info('plot point view fill color changed: ', newColor);
            this._fillColor = newColor;
            this._dirty = true;
        }
        return this;
    };
    PlotPointView.prototype.strokeColor = function (newColor) {
        if (newColor === undefined) {
            return this._strokeColor;
        }
        if (!this._strokeColor.equals(newColor)) {
            console.info('plot point view stroke color changed: ', newColor);
            this._strokeColor = newColor;
            this._dirty = true;
        }
        return this;
    };
    PlotPointView.prototype.radius = function (value) {
        if (value === undefined) {
            return this._radius;
        }
        this._radius = (value instanceof Length) ? value : Length.fromAny(3);
        return this;
    };
    PlotPointView.prototype.strokeSize = function (value) {
        if (value === undefined) {
            return this._strokeSize;
        }
        this._strokeSize = (value instanceof Length) ? value : Length.fromAny(3);
        return this;
    };
    PlotPointView.prototype.value = function (value) {
        if (value === undefined) {
            return this._value;
        }
        if (this._value !== value) {
            if (typeof value === 'number') {
                value = value.toFixed(0);
            }
            this._value = value;
        }
        return this;
    };
    PlotPointView.prototype.scaleX = function (newScale) {
        if (newScale === undefined) {
            return this._scaleX;
        }
        if (newScale !== undefined && newScale instanceof ContinuousScale && this._scaleX !== newScale) {
            this._scaleX = newScale;
            this._dirty = true;
        }
        return this;
    };
    PlotPointView.prototype.scaleY = function (newScale) {
        if (newScale === undefined) {
            return this._scaleY;
        }
        if (newScale !== undefined && newScale instanceof ContinuousScale && this._scaleY !== newScale) {
            this._scaleY = newScale;
            this._dirty = true;
        }
        return this;
    };
    PlotPointView.prototype.domainRangeX = function (newRange) {
        if (newRange === undefined || newRange === 'absent') {
            return this._domainRangeX;
        }
        if (newRange && (newRange[0] !== this._domainRangeX[0] || newRange[1] !== this._domainRangeX[1])) {
            if (typeof newRange === 'string') {
                var rangeSplit = newRange.split('...');
                this._domainRangeX = [parseInt(rangeSplit[0], undefined), parseInt(rangeSplit[1], undefined)];
            }
            else {
                this._domainRangeX = newRange;
            }
            this._dirty = true;
            console.info('PlotPointView _domainRangeX set: ', this._domainRangeX);
        }
        return this;
    };
    PlotPointView.prototype.domainRangeY = function (newRange) {
        if (newRange === undefined || newRange === 'absent') {
            return this._domainRangeY;
        }
        if (newRange && (newRange[0] !== this._domainRangeY[0] || newRange[1] !== this._domainRangeY[1])) {
            if (typeof newRange === 'string') {
                var rangeSplit = newRange.split('...');
                this._domainRangeY = [parseInt(rangeSplit[0], undefined), parseInt(rangeSplit[1], undefined)];
            }
            else {
                this._domainRangeY = newRange;
            }
            this._dirty = true;
            console.info('PlotPointView _domainRangeY set: ', this._domainRangeY);
        }
        return this;
    };
    return PlotPointView;
}(View));

//# sourceMappingURL=data:application/json;base64,

var PlotPointDefaults = (function () {
    function PlotPointDefaults() {
    }
    PlotPointDefaults.X = 0;
    PlotPointDefaults.Y = 0;
    PlotPointDefaults.Radius = 5;
    PlotPointDefaults.FillColor = new Rgb(0, 0, 0, 0.25);
    PlotPointDefaults.StrokeColor = new Rgb(0, 0, 0, 0.5);
    PlotPointDefaults.StrokeSize = 0;
    PlotPointDefaults.Value = 0;
    PlotPointDefaults.DomainY = 0;
    PlotPointDefaults.DomainRangeX = [0, 1];
    PlotPointDefaults.DomainRangeY = [0, 1];
    return PlotPointDefaults;
}());
var PlotPointModel = (function (_super) {
    __extends(PlotPointModel, _super);
    function PlotPointModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PlotPointModel.Params = SvgModel.Params.concat([
        new ModelParam('x', Length.Form),
        new ModelParam('y', Length.Form),
        new ModelParam('radius', Length.Form),
        new ModelParam('value', Value),
        new ModelParam('domainY', Length.Form),
        new ModelParam('fillColor', Color.Form),
        new ModelParam('strokeColor', Color.Form),
        new ModelParam('strokeSize', Length.Form),
    ]);
    return PlotPointModel;
}(SvgModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdC1wb2ludC1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBsb3QtcG9pbnQtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxFQUNMLFVBQVUsRUFDVixRQUFRLEVBQ1IsS0FBSyxFQUNMLE1BQU0sRUFDTixHQUFHLEdBQ0osTUFBTSxVQUFVLENBQUM7QUFFbEI7SUFBQTtJQVdBLENBQUM7SUFWaUIsbUJBQUMsR0FBVyxDQUFDLENBQUM7SUFDZCxtQkFBQyxHQUFXLENBQUMsQ0FBQztJQUNkLHdCQUFNLEdBQVcsQ0FBQyxDQUFDO0lBQ25CLDJCQUFTLEdBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkMsNkJBQVcsR0FBVSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQztJQUN4Qyw0QkFBVSxHQUFXLENBQUMsQ0FBQztJQUN2Qix1QkFBSyxHQUFXLENBQUMsQ0FBQztJQUNsQix5QkFBTyxHQUFXLENBQUMsQ0FBQztJQUNwQiw4QkFBWSxHQUFxQixDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztJQUN2Qyw4QkFBWSxHQUFxQixDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCx3QkFBQztDQUFBLEFBWEQsSUFXQztTQVhZLGlCQUFpQjtBQWE5QjtJQUFvQywwQ0FBUTtJQUE1Qzs7SUFXQSxDQUFDO0lBVmlCLHFCQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDOUMsSUFBSSxVQUFVLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEMsSUFBSSxVQUFVLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEMsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDckMsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztRQUM5QixJQUFJLFVBQVUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN0QyxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QyxJQUFJLFVBQVUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN6QyxJQUFJLFVBQVUsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQztLQUMxQyxDQUFDLENBQUM7SUFDTCxxQkFBQztDQUFBLEFBWEQsQ0FBb0MsUUFBUSxHQVczQztTQVhZLGNBQWMifQ==

var PlotPoint = (function (_super) {
    __extends(PlotPoint, _super);
    function PlotPoint() {
        return _super.call(this) || this;
    }
    Object.defineProperty(PlotPoint.prototype, "tag", {
        get: function () {
            return 'plotPoint';
        },
        enumerable: true,
        configurable: true
    });
    PlotPoint.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('point needs a parent node or view', this.parentView());
        }
        this.controller(new PlotPointController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new PlotPointModel(eventManager));
        this.view(new PlotPointView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    PlotPoint.prototype.start = function () {
        _super.prototype.start.call(this);
    };
    return PlotPoint;
}(UiComponent));
UiComponent.Global.addComponent('plotPoint', PlotPoint);
UiComponent.Global.addComponent('plotpoint', PlotPoint);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdC1wb2ludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBsb3QtcG9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsYUFBYSxFQUNiLGNBQWMsR0FDZixNQUFNLFVBQVUsQ0FBQztBQUNsQixPQUFPLEVBQW1CLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUd4RDtJQUErQixxQ0FBVztJQU10QztlQUNJLGlCQUFPO0lBQ1gsQ0FBQztJQU5ELHNCQUFJLDBCQUFHO2FBQVA7WUFDSSxPQUFPLFdBQVcsQ0FBQztRQUN2QixDQUFDOzs7T0FBQTtJQU1ELDBCQUFNLEdBQU4sVUFBTyxXQUFrQyxFQUFFLEtBQVksRUFBRSxLQUFnQixFQUFFLFlBQTZCLEVBQUUsRUFBVztRQUNqSCxpQkFBTSxNQUFNLFlBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUN6RTtRQUlELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFHaEgsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRzdDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFHM0QsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRTNCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCx5QkFBSyxHQUFMO1FBRUksaUJBQU0sS0FBSyxXQUFFLENBQUM7SUFFbEIsQ0FBQztJQUVMLGdCQUFDO0FBQUQsQ0FBQyxBQXRDRCxDQUErQixXQUFXLEdBc0N6Qzs7QUFFRCxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDeEQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDIn0=

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsbUJBQW1CLEdBQ3BCLE1BQU0seUJBQXlCLENBQUM7QUFFakMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRWxELE9BQU8sRUFBRSxjQUFjLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV2RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDIn0=

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXFCLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUU1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxjQUFjLFFBQVEsQ0FBQztBQUN2QixjQUFjLFFBQVEsQ0FBQztBQUN2QixjQUFjLGNBQWMsQ0FBQyJ9

var GaugeView = (function (_super) {
    __extends(GaugeView, _super);
    function GaugeView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._dialEventsAdded = false;
        _this._faceEventsAdded = false;
        _this._activeEvent = null;
        _this._eventTargetElem = null;
        _this._svgRoot = SvgView.create('svg')
            .setAttribute({
            width: '100%',
            height: '100%',
        })
            .setAttribute('id', id || _this.id || '');
        _this._meter = GaugeDefaults.Meter;
        _this._innerRadius = Length.pct(GaugeDefaults.InnerRadius, _this._svgRoot.node);
        _this._outerRadius = Length.pct(GaugeDefaults.OuterRadius, _this._svgRoot.node);
        _this._faceColor = { value: GaugeDefaults.FaceColor, dirty: true };
        _this._dialColor = { value: GaugeDefaults.DialColor, dirty: true };
        _this._faceHoverColor = { value: GaugeDefaults.FaceColor, dirty: true };
        _this._dialHoverColor = { value: GaugeDefaults.DialColor, dirty: true };
        _this._valueColor = Color.rgb(GaugeDefaults.ValueColor);
        _this._valueUnit = GaugeDefaults.ValueUnit;
        _this._faceStrokeColor = { value: GaugeDefaults.FaceStrokeColor, dirty: true };
        _this._dialStrokeColor = { value: GaugeDefaults.DialStrokeColor, dirty: true };
        _this._dialCornerRadius = { value: Length.pct(GaugeDefaults.DialCornerRadius), dirty: true };
        _this._valueElement = null;
        _this._value = null;
        _this._faceStrokeSize = Length.px(GaugeDefaults.FaceStrokeSize);
        _this._dialStrokeSize = Length.px(GaugeDefaults.DialStrokeSize);
        _this._dialEvents = null;
        _this._dialStrokeHoverColor = { value: GaugeDefaults.DialStrokeColor, dirty: true };
        _this._dialStrokeHoverSize = null;
        _this._faceStrokeHoverColor = { value: GaugeDefaults.FaceColor, dirty: true };
        _this._faceStrokeHoverSize = null;
        _this._valueSize = Length.pct(GaugeDefaults.ValueSize);
        return _this;
    }
    GaugeView.prototype.start = function () {
        if (!this._hasStarted) {
            this.parentView.appendChildView(this._svgRoot);
            this._gaugeBox = SvgView.create('g')
                .className('gauge-box');
            this._svgRoot.append(this._gaugeBox);
            this._arcGroup = SvgView.create('g')
                .className('arc-group');
            this._gaugeBox.append(this._arcGroup);
            this._face = ArcView.create('face')
                .setAttribute('class', 'face');
            this._face.deltaAngle(2 * Math.PI * 1, undefined);
            this._arcGroup.append(this._face);
            this._dial = ArcView.create('dial')
                .setAttribute('class', 'dial');
            this._dial.deltaAngle(2 * Math.PI * 0, undefined);
            this._arcGroup.append(this._dial);
            this._valueElement = SvgView.create('text').className('value');
            this._arcGroup.append(this._valueElement);
        }
        this.resize();
        this._hasStarted = true;
    };
    GaugeView.prototype.stop = function () {
        _super.prototype.stop.call(this);
    };
    GaugeView.prototype.dialEvents = function (eventList) {
        var _this = this;
        if (eventList && !this._dialEventsAdded) {
            this._dialEvents = eventList;
            if (this._dialEvents !== null) {
                this._dialEvents.forEach(function (dialEvent) {
                    var eventKey = dialEvent.key.toString();
                    var eventFunctName = dialEvent.value.toString();
                    var eventFunct = function () {
                        _this._activeEvent = eventKey;
                        _this._eventTargetElem = _this._dial;
                        window[eventFunctName](_this._dial, _this.value());
                    };
                    _this._dial.node.addEventListener(eventKey, eventFunct);
                });
                this._dialEventsAdded = true;
            }
        }
        return this._dialEvents;
    };
    GaugeView.prototype.faceEvents = function (eventList) {
        var _this = this;
        if (eventList && !this._faceEventsAdded) {
            this._faceEvents = eventList;
            if (this._faceEvents !== null) {
                this._faceEvents.forEach(function (faceEvent) {
                    var eventKey = faceEvent.key.toString();
                    var eventFunctName = faceEvent.value.toString();
                    var eventFunct = function () {
                        _this._activeEvent = eventKey;
                        _this._eventTargetElem = _this._face;
                        window[eventFunctName](_this._face, _this.value());
                    };
                    _this._face.node.addEventListener(eventKey, eventFunct);
                });
                this._faceEventsAdded = true;
            }
        }
        return this._dialEvents;
    };
    GaugeView.prototype.trans = function (value) {
        if (value === undefined) {
            return this._trans;
        }
        this._trans = value || undefined;
        return this;
    };
    GaugeView.prototype.meter = function (value) {
        if (value === undefined) {
            return this._meter;
        }
        this._meter = (value) ? value : GaugeDefaults.Meter;
        return this;
    };
    GaugeView.prototype.width = function (value, parentNode) {
        if (value === undefined) {
            return this._width;
        }
        if (value === null) {
            this._width = Length.zero(this.parentView.node);
        }
        else {
            this._width = (value instanceof Length) ? value : Length.fromAny(value, parentNode);
        }
        return this;
    };
    GaugeView.prototype.height = function (value, parentNode) {
        if (value === undefined) {
            return this._height;
        }
        if (value === null) {
            this._height = Length.zero(this.parentView.node);
        }
        else {
            this._height = (value instanceof Length) ? value : Length.fromAny(value, parentNode);
        }
        return this;
    };
    GaugeView.prototype.innerRadius = function (value) {
        if (value === undefined) {
            return this._innerRadius;
        }
        this._innerRadius = (value instanceof Length) ? value : Length.pct(GaugeDefaults.InnerRadius, this.parentView.node);
        return this;
    };
    GaugeView.prototype.outerRadius = function (value) {
        if (value === undefined) {
            return this._outerRadius;
        }
        this._outerRadius = (value instanceof Length) ? value : Length.pct(GaugeDefaults.OuterRadius, this.parentView.node);
        return this;
    };
    GaugeView.prototype.faceColor = function (value) {
        if (value === undefined) {
            return this._faceColor.value;
        }
        if (!this._faceColor.value.equals(value)) {
            this._faceColor.value = (value instanceof Color) ? value : Color.rgb(GaugeDefaults.FaceColor);
            this._faceColor.dirty = true;
        }
        return this;
    };
    GaugeView.prototype.faceStrokeSize = function (value) {
        if (value === undefined) {
            return this._faceStrokeSize;
        }
        this._faceStrokeSize = (value instanceof Length) ? value : Length.pct(GaugeDefaults.FaceStrokeSize, this.parentView.node);
        return this;
    };
    GaugeView.prototype.faceStrokeHoverSize = function (value) {
        if (value === undefined) {
            return this._faceStrokeHoverSize;
        }
        this._faceStrokeHoverSize = (value instanceof Length) ? value : Length.pct(GaugeDefaults.FaceStrokeSize, this.parentView.node);
        return this;
    };
    GaugeView.prototype.faceStrokeHoverColor = function (value) {
        if (value === undefined) {
            return this._faceStrokeHoverColor.value;
        }
        if (!this._faceStrokeHoverColor.value.equals(value)) {
            this._faceStrokeHoverColor.value = (value instanceof Color) ? value : Color.rgb(GaugeDefaults.FaceStrokeColor);
            this._faceStrokeHoverColor.dirty = true;
        }
        return this;
    };
    GaugeView.prototype.faceStrokeColor = function (value) {
        if (value === undefined) {
            return this._faceStrokeColor.value;
        }
        if (!this._faceStrokeColor.value.equals(value)) {
            this._faceStrokeColor.value = (value instanceof Color) ? value : Color.rgb(GaugeDefaults.FaceStrokeColor);
            this._faceStrokeColor.dirty = true;
        }
        return this;
    };
    GaugeView.prototype.faceHoverColor = function (value) {
        if (value === undefined) {
            return this._dialHoverColor.value;
        }
        if (!this._faceHoverColor.value.equals(value)) {
            this._faceHoverColor.value = (value instanceof Color) ? value : Color.rgb(GaugeDefaults.FaceColor);
            this._faceHoverColor.dirty = true;
        }
        return this;
    };
    GaugeView.prototype.dialColor = function (value) {
        if (value === undefined) {
            return this._dialColor.value;
        }
        if (!this._dialColor.value.equals(value)) {
            this._dialColor.value = (value instanceof Color) ? value : Color.rgb(GaugeDefaults.DialColor);
            this._dialColor.dirty = true;
        }
        return this;
    };
    GaugeView.prototype.dialStrokeSize = function (value) {
        if (value === undefined) {
            return this._dialStrokeSize;
        }
        this._dialStrokeSize = (value instanceof Length) ? value : Length.pct(GaugeDefaults.DialStrokeSize, this.parentView.node);
        return this;
    };
    GaugeView.prototype.dialStrokeColor = function (value) {
        if (value === undefined) {
            return this._dialStrokeColor.value;
        }
        if (!this._dialStrokeColor.value.equals(value)) {
            this._dialStrokeColor.value = (value instanceof Color) ? value : Color.rgb(GaugeDefaults.DialStrokeColor);
            this._dialStrokeColor.dirty = true;
        }
        return this;
    };
    GaugeView.prototype.dialHoverColor = function (value) {
        if (value === undefined) {
            return this._dialHoverColor.value;
        }
        if (!this._dialHoverColor.value.equals(value)) {
            this._dialHoverColor.value = (value instanceof Color) ? value : Color.rgb(GaugeDefaults.DialColor);
            this._dialHoverColor.dirty = true;
        }
        return this;
    };
    GaugeView.prototype.dialStrokeHoverSize = function (value) {
        if (value === undefined) {
            return this._dialStrokeHoverSize;
        }
        this._dialStrokeHoverSize = (value instanceof Length) ? value : Length.pct(GaugeDefaults.DialStrokeSize, this.parentView.node);
        return this;
    };
    GaugeView.prototype.dialStrokeHoverColor = function (value) {
        if (value === undefined) {
            return this._dialStrokeHoverColor.value;
        }
        if (!this._dialStrokeHoverColor.value.equals(value)) {
            this._dialStrokeHoverColor.value = (value instanceof Color) ? value : Color.rgb(GaugeDefaults.DialStrokeColor);
            this._dialStrokeHoverColor.dirty = true;
        }
        return this;
    };
    GaugeView.prototype.dialCornerRadius = function (value) {
        if (value === undefined) {
            return this._dialCornerRadius.value;
        }
        if (!this._dialCornerRadius.value.equals(value)) {
            this._dialCornerRadius.value = (value instanceof Length) ? value : Length.pct(GaugeDefaults.DialCornerRadius);
            this._dialCornerRadius.dirty = true;
        }
        return this;
    };
    GaugeView.prototype.value = function (value) {
        if (value === undefined) {
            return this._value;
        }
        if (this._value !== value) {
            if (typeof value === 'number') {
                value = value.toFixed(0);
            }
            this._value = value;
        }
        return this;
    };
    GaugeView.prototype.valueUnit = function (value) {
        if (value === undefined || value === null) {
            return this._valueUnit;
        }
        if (this._valueUnit !== value) {
            this._valueUnit = value;
        }
        return this;
    };
    GaugeView.prototype.valueColor = function (value, trans) {
        if (value === undefined) {
            return this._valueColor;
        }
        if (this._valueColor !== value) {
            this._valueColor = value;
        }
        return this;
    };
    GaugeView.prototype.valueSize = function (value, trans) {
        if (value === undefined) {
            return this._valueSize;
        }
        if (value !== null) {
            value = Length.fromAny(value);
        }
        if (this._valueSize ? !this._valueSize.equals(value) : this._valueSize !== value) {
            this._valueSize = value;
        }
        return this;
    };
    GaugeView.prototype.parentResize = function () {
        var node = this._svgRoot.node;
        do {
            var parentNode = node.parentNode;
            if (parentNode) {
                if (parentNode instanceof HTMLElement && parentNode.offsetWidth) {
                    var width = parentNode.offsetWidth;
                    var height = width;
                    this._svgRoot.width(width);
                    this._svgRoot.height(height);
                    this.width(width, parentNode);
                    this.height(height, parentNode);
                    return;
                }
                node = parentNode;
                continue;
            }
            return;
        } while (true);
    };
    GaugeView.prototype.childSize = function () {
        var width = this._width.pxValue();
        var height = this._height.pxValue();
        var faceStrokeSize = this._faceStrokeSize.pxValue();
        var dialStrokeSize = this._dialStrokeSize.pxValue();
        faceStrokeSize = faceStrokeSize + dialStrokeSize;
        if (this._activeEvent === "mouseover" && this._eventTargetElem === this._face) {
            var hoverStrokeSize = (this._faceStrokeHoverSize) ? this._faceStrokeHoverSize.pxValue() : 0;
            faceStrokeSize = faceStrokeSize + hoverStrokeSize;
        }
        if (this._activeEvent === "mouseover" && this._eventTargetElem === this._dial) {
            var hoverStrokeSize = (this._dialStrokeHoverSize) ? this._dialStrokeHoverSize.pxValue() : 0;
            faceStrokeSize = faceStrokeSize + hoverStrokeSize;
        }
        var diameter = Math.min(width, height) - faceStrokeSize;
        if (!diameter) {
            return;
        }
        var r0 = this._outerRadius.pxValue(diameter / 2);
        var r1 = this._innerRadius.pxValue(r0);
        var gaugeBoxTransform = Transform.translate(width / 2 - r0, height / 2 - r0);
        this._gaugeBox.setProperty('transform', gaugeBoxTransform.toString());
        var arcTransform = Transform.translate(r0, r0);
        this._arcGroup.setProperty('transform', arcTransform.toString());
        this._face.innerRadius(r1).outerRadius(r0);
        this._dial.innerRadius(r1).outerRadius(r0);
        if (this._dialCornerRadius.dirty) {
            this._dial.cornerRadius(this._dialCornerRadius.value.pxValue(r0 - r1 / 2));
            this._dialCornerRadius.dirty = false;
        }
        if (this._valueElement && this._valueSize) {
            this._valueElement.setAttribute("text-anchor", "middle");
            this._valueElement.setAttribute("alignment-baseline", "middle");
            this._valueElement.setAttribute('font-size', '' + Math.ceil(this._valueSize.pxValue(r1)));
            this._valueElement.setAttribute('fill', this._valueColor.toHexString());
        }
    };
    GaugeView.prototype.resize = function () {
        if (this._width) {
            this._svgRoot.width(this._width);
        }
        if (this._height) {
            this._svgRoot.height(this._height);
        }
        this.parentResize();
        this.childSize();
    };
    GaugeView.prototype.render = function (frameNumber) {
        this.childSize();
        if (this._activeEvent === "mouseout" || this._activeEvent === "click" || this._activeEvent === "mouseup") {
            this._activeEvent = null;
            this._eventTargetElem = null;
        }
        if (this._faceColor.dirty && this._faceHoverColor.dirty) {
            if (this._activeEvent === "mouseover" && this._eventTargetElem === this._face) {
                this._face.fill(this._faceHoverColor.value);
            }
            else {
                this._face.fill(this._faceColor.value);
            }
        }
        if (this._faceStrokeSize) {
            if (this._activeEvent === "mouseover" && this._eventTargetElem === this._face) {
                if (this._faceStrokeHoverSize !== null) {
                    this._face.node.style.strokeWidth = Length.px(this._faceStrokeHoverSize.value).toString();
                }
            }
            else {
                this._face.node.style.strokeWidth = Length.px(this._faceStrokeSize.value).toString();
            }
        }
        if (this._faceStrokeColor) {
            if (this._activeEvent === "mouseover" && this._eventTargetElem === this._face) {
                this._face.node.style.stroke = this._faceStrokeHoverColor.value.toString();
            }
            else {
                this._face.node.style.stroke = this._faceStrokeColor.value.toString();
            }
        }
        if (this._dialColor.dirty && this._dialHoverColor.dirty) {
            if (this._activeEvent === "mouseover" && this._eventTargetElem === this._dial) {
                this._dial.fill(this._dialHoverColor.value);
            }
            else {
                this._dial.fill(this._dialColor.value);
            }
        }
        if (this._dialStrokeColor) {
            if (this._activeEvent === "mouseover" && this._eventTargetElem === this._dial) {
                this._dial.node.style.stroke = this._dialStrokeHoverColor.value.toString();
            }
            else {
                this._dial.node.style.stroke = this._dialStrokeColor.value.toString();
            }
        }
        if (this._dialStrokeSize) {
            if (this._activeEvent === "mouseover" && this._eventTargetElem === this._dial) {
                if (this._dialStrokeHoverSize) {
                    this._dial.node.style.strokeWidth = Length.px(this._dialStrokeHoverSize.value).toString();
                }
            }
            else {
                this._dial.node.style.strokeWidth = Length.px(this._dialStrokeSize.value).toString();
            }
        }
        if (this._valueUnit === null) {
            this._valueUnit = '';
        }
        if (this._value !== undefined && this._value !== null) {
            this._valueElement.node.innerHTML = "" + this._value + (this._valueUnit || '');
        }
        var value = Math.min(Math.max(0, this._meter), 1) || 0;
        this._dial.deltaAngle(2 * Math.PI * value, undefined);
    };
    return GaugeView;
}(View));

//# sourceMappingURL=data:application/json;base64,

var GaugeController = (function (_super) {
    __extends(GaugeController, _super);
    function GaugeController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        return _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
    }
    GaugeController.prototype.create = function () {
        _super.prototype.create.call(this);
    };
    GaugeController.prototype.start = function () {
        _super.prototype.start.call(this);
        this.setViewAttributes(this._componentInfo);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this.view().start();
        }
        this.view().resize();
    };
    GaugeController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
    };
    GaugeController.prototype.setViewAttributes = function (newState) {
        _super.prototype.setViewAttributes.call(this, newState);
    };
    GaugeController.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
        if (newStateValue !== undefined) {
            if (type === Text$1) {
                if (name === 'valueUnit') {
                    if (newStateValue.value) {
                        this.view().valueUnit(newStateValue.toString());
                    }
                }
            }
            if (type === Value) {
                if (name === "valueWeight") {
                    this.view().value(newStateValue.toString());
                }
                else {
                    this.propertyKeyNumber(NumberAnimator, name, newStateValue, trans);
                }
            }
            if (type === Length.Form) {
                if (name === 'gaugeWidth') {
                    this.view().width(newStateValue);
                }
                else if (name === 'gaugeHeight') {
                    this.view().height(newStateValue);
                }
                else {
                    this.propertyKeyLength(LengthAnimator, name, newStateValue, trans);
                }
            }
            if (type === Angle.Form) {
                this.propertyKeyAngle(AngleAnimator, name, newStateValue, trans);
            }
            if (type === Color.Form) {
                this.propertyKeyColor(ColorAnimator, name, newStateValue, trans);
            }
            if (type instanceof Array) {
                this.view()[name](newStateValue);
            }
        }
    };
    GaugeController.prototype.onLinkData = function (linkData) {
        _super.prototype.onLinkData.call(this, linkData);
        var componentData = this._componentData.evaluate(linkData);
        var newState = componentData.evaluate(this._stack);
        this.setViewAttributes(newState);
    };
    return GaugeController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UtY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdhdWdlLWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQWEsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3JELE9BQU8sRUFFTCxVQUFVLEVBQ1YsY0FBYyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUM3QyxhQUFhLEVBRWIsS0FBSyxFQUNMLGFBQWEsR0FDZCxNQUFNLFVBQVUsQ0FBQztBQUlsQjtJQUFxQywyQ0FBVTtJQUU3Qyx5QkFBWSxFQUFVLEVBQUUsYUFBb0IsRUFBRSxrQkFBK0IsRUFBRSxVQUFnQixFQUFFLEtBQWdCLEVBQUUsWUFBNkI7ZUFFOUksa0JBQU0sRUFBRSxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQztJQUMvRSxDQUFDO0lBRUQsZ0NBQU0sR0FBTjtRQUNFLGlCQUFNLE1BQU0sV0FBRSxDQUFDO0lBR2pCLENBQUM7SUFFRCwrQkFBSyxHQUFMO1FBQ0UsaUJBQU0sS0FBSyxXQUFFLENBQUM7UUFFZCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzVDLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsSUFBSSxFQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDdEI7UUFFQSxJQUFJLENBQUMsSUFBSSxFQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxnQ0FBTSxHQUFOLFVBQU8sV0FBbUI7UUFDeEIsaUJBQU0sTUFBTSxZQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFF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

var GaugeDefaults = (function () {
    function GaugeDefaults() {
    }
    GaugeDefaults.Value = 0;
    GaugeDefaults.Meter = 0;
    GaugeDefaults.InnerRadius = 90;
    GaugeDefaults.OuterRadius = 100;
    GaugeDefaults.FaceColor = new Rgb(0, 0, 0, 0.25);
    GaugeDefaults.DialColor = new Rgb(0, 0, 0, 0.75);
    GaugeDefaults.DialCornerRadius = 100;
    GaugeDefaults.ValueSize = 100;
    GaugeDefaults.ValueUnit = '';
    GaugeDefaults.ValueColor = '#000000';
    GaugeDefaults.FaceStrokeColor = new Rgb(0, 0, 0, 0.5);
    GaugeDefaults.DialStrokeColor = new Rgb(0, 0, 0, 0.5);
    GaugeDefaults.FaceStrokeSize = 0;
    GaugeDefaults.DialStrokeSize = 0;
    return GaugeDefaults;
}());
var GaugeModel = (function (_super) {
    __extends(GaugeModel, _super);
    function GaugeModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GaugeModel.EventParams = Model.Params.concat([
        new ModelParam('mouseover', Text$1),
        new ModelParam('mouseout', Text$1),
        new ModelParam('mousedown', Text$1),
        new ModelParam('mouseup', Text$1),
        new ModelParam('click', Text$1),
    ]);
    GaugeModel.DialParams = Model.Params.concat([
        new ModelParam('color', Color.Form),
        new ModelParam('strokeColor', Color.Form),
        new ModelParam('strokeHoverColor', Color.Form),
        new ModelParam('strokeHoverSize', Length.Form),
        new ModelParam('hoverColor', Color.Form),
        new ModelParam('strokeSize', Length.Form),
        new ModelParam('cornerRadius', Length.Form),
        new ModelParam('events', GaugeModel.EventParams),
    ]);
    GaugeModel.FaceParams = Model.Params.concat([
        new ModelParam('color', Color.Form),
        new ModelParam('hoverColor', Color.Form),
        new ModelParam('strokeColor', Color.Form),
        new ModelParam('strokeSize', Length.Form),
        new ModelParam('strokeHoverColor', Color.Form),
        new ModelParam('strokeHoverSize', Length.Form),
        new ModelParam('events', GaugeModel.EventParams),
    ]);
    GaugeModel.ValueParams = Model.Params.concat([
        new ModelParam('color', Color.Form),
        new ModelParam('size', Length.Form),
        new ModelParam('unit', Text$1),
    ]);
    GaugeModel.Params = Model.Params.concat([
        new ModelParam('meter', Value),
        new ModelParam('value', Value),
        new ModelParam('gaugeWidth', Length.Form),
        new ModelParam('gaugeHeight', Length.Form),
        new ModelParam('innerRadius', Length.Form),
        new ModelParam('outerRadius', Length.Form),
        new ModelParam('dialStyle', GaugeModel.DialParams),
        new ModelParam('faceStyle', GaugeModel.FaceParams),
        new ModelParam('valueStyle', GaugeModel.ValueParams),
    ]);
    return GaugeModel;
}(SvgModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UtbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnYXVnZS1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTNFO0lBQUE7SUFlQSxDQUFDO0lBZGlCLG1CQUFLLEdBQVcsQ0FBQyxDQUFDO0lBQ2xCLG1CQUFLLEdBQVcsQ0FBQyxDQUFDO0lBQ2xCLHlCQUFXLEdBQVcsRUFBRSxDQUFDO0lBQ3pCLHlCQUFXLEdBQVcsR0FBRyxDQUFDO0lBQzFCLHVCQUFTLEdBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkMsdUJBQVMsR0FBVSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQztJQUN2Qyw4QkFBZ0IsR0FBVyxHQUFHLENBQUM7SUFDL0IsdUJBQVMsR0FBVyxHQUFHLENBQUM7SUFDeEIsdUJBQVMsR0FBVyxFQUFFLENBQUM7SUFDdkIsd0JBQVUsR0FBVyxTQUFTLENBQUM7SUFDL0IsNkJBQWUsR0FBVSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM3Qyw2QkFBZSxHQUFVLElBQUksR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLDRCQUFjLEdBQVcsQ0FBQyxDQUFDO0lBQzNCLDRCQUFjLEdBQVcsQ0FBQyxDQUFDO0lBQzdDLG9CQUFDO0NBQUEsQUFmRCxJQWVDO1NBZlksYUFBYTtBQWlCMUI7SUFBZ0Msc0NB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

var Gauge = (function (_super) {
    __extends(Gauge, _super);
    function Gauge() {
        return _super.call(this) || this;
    }
    Object.defineProperty(Gauge.prototype, "tag", {
        get: function () {
            return 'gauge';
        },
        enumerable: true,
        configurable: true
    });
    Gauge.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Gauge needs a parent node or view', this.parentView());
        }
        this.controller(new GaugeController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new GaugeModel(eventManager));
        this.view(new GaugeView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Gauge.prototype.start = function () {
        _super.prototype.start.call(this);
    };
    return Gauge;
}(UiComponent));
UiComponent.Global.addComponent('gauge', Gauge);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnYXVnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xFLE9BQU8sRUFBbUIsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR3hEO0lBQTJCLGlDQUFXO0lBTWxDO2VBQ0ksaUJBQU87SUFDWCxDQUFDO0lBTkQsc0JBQUksc0JBQUc7YUFBUDtZQUNJLE9BQU8sT0FBTyxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBTUQsc0JBQU0sR0FBTixVQUFPLFdBQWtDLEVBQUUsS0FBWSxFQUFFLEtBQWdCLEVBQUUsWUFBNkIsRUFBRSxFQUFXO1FBQ2pILGlCQUFNLE1BQU0sWUFBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFO1FBSUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFHNUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBR3pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFHdkQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRTNCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxxQkFBSyxHQUFMO1FBRUksaUJBQU0sS0FBSyxXQUFFLENBQUM7SUFFbEIsQ0FBQztJQUVMLFlBQUM7QUFBRCxDQUFDLEFBdENELENBQTJCLFdBQVcsR0FzQ3JDOztBQUVELFdBQVcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyJ9

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXpDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDIn0=

var Pie = (function (_super) {
    __extends(Pie, _super);
    function Pie() {
        return _super.call(this) || this;
    }
    Object.defineProperty(Pie.prototype, "tag", {
        get: function () {
            return 'pie';
        },
        enumerable: true,
        configurable: true
    });
    Pie.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Pie needs a parent node or view', this.parentView());
        }
        this.controller(new PieController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new PieModel(eventManager));
        this.view(new PieView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Pie.prototype.start = function () {
        _super.prototype.start.call(this);
    };
    return Pie;
}(UiComponent));
UiComponent.Global.addComponent('pie', Pie);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGllLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDNUQsT0FBTyxFQUFtQixXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHeEQ7SUFBeUIsK0JBQVc7SUFNaEM7ZUFDSSxpQkFBTztJQUNYLENBQUM7SUFORCxzQkFBSSxvQkFBRzthQUFQO1lBQ0ksT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQzs7O09BQUE7SUFNRCxvQkFBTSxHQUFOLFVBQU8sV0FBa0MsRUFBRSxLQUFZLEVBQUUsS0FBZ0IsRUFBRSxZQUE2QixFQUFFLEVBQVc7UUFDakgsaUJBQU0sTUFBTSxZQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUNBQWlDLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDdkU7UUFJRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUcxRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFHdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUdyRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFM0IsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELG1CQUFLLEdBQUw7UUFFSSxpQkFBTSxLQUFLLFdBQUUsQ0FBQztJQUVsQixDQUFDO0lBRUwsVUFBQztBQUFELENBQUMsQUF0Q0QsQ0FBeUIsV0FBVyxHQXNDbkM7O0FBRUQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDIn0=

var PieModel = (function (_super) {
    __extends(PieModel, _super);
    function PieModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PieModel.EventParams = Model.Params.concat([
        new ModelParam('mouseover', Text),
        new ModelParam('mouseout', Text),
        new ModelParam('mousedown', Text),
        new ModelParam('mouseup', Text),
        new ModelParam('click', Text),
    ]);
    PieModel.TitleParams = Model.Params.concat([
        new ModelParam('size', Length.Form),
        new ModelParam('color', Color.Form),
        new ModelParam('weight', Value),
    ]);
    PieModel.Params = SvgModel.Params.concat([
        new ModelParam('transition', Transition.Form),
        new ModelParam('value', Value),
        new ModelParam('total', Value),
        new ModelParam('limit', Value),
        new ModelParam('originAngle', Angle.Form),
        new ModelParam('pieWidth', Length.Form),
        new ModelParam('pieHeight', Length.Form),
        new ModelParam('titleStyle', PieModel.TitleParams),
        new ModelParam('events', PieModel.EventParams),
    ]);
    return PieModel;
}(SvgModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGllLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFekY7SUFBOEIsb0NBQVE7SUFBdEM7O0lBMkJBLENBQUM7SUF6QmlCLG9CQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDaEQsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQztRQUNqQyxJQUFJLFVBQVUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDO1FBQ2hDLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUM7UUFDakMsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQztRQUMvQixJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDO0tBQzlCLENBQUMsQ0FBQztJQUVhLG9CQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDaEQsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDbkMsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDbkMsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQztLQUNoQyxDQUFDLENBQUM7SUFFYSxlQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDOUMsSUFBSSxVQUFVLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDN0MsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQztRQUM5QixJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO1FBQzlCLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7UUFDOUIsSUFBSSxVQUFVLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDekMsSUFBSSxVQUFVLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDdkMsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDeEMsSUFBSSxVQUFVLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDbEQsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUM7S0FDL0MsQ0FBQyxDQUFDO0lBQ0wsZUFBQztDQUFBLEFBM0JELENBQThCLFFBQVEsR0EyQnJDO1NBM0JZLFFBQVEifQ==

var PieView = (function (_super) {
    __extends(PieView, _super);
    function PieView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._wedges = [];
        _this._total = 1000;
        _this._limit = 0;
        _this._originAngle = Angle.zero();
        _this._width = Length.zero();
        _this._height = Length.zero();
        _this._titleValue = '';
        _this._titleElement = null;
        _this._titleSize = null;
        _this._titleColor = null;
        return _this;
    }
    PieView.prototype.create = function () {
        _super.prototype.create.call(this);
        this._svgRoot = SvgView.create('svg')
            .className('pie')
            .elemId(this._id || '')
            .cursor('default')
            .setAttribute({
            width: '100%',
            height: '100%',
        })
            .setProperty({
            'flex-grow': 1,
            'flex-basis': 0,
            '-webkit-user-select': 'none',
            '-moz-user-select': 'none',
            '-ms-user-select': 'none',
            'user-select': 'none',
        });
        this._wedgesGroup = SvgView.create('g').className('wedges');
        this._svgRoot.append(this._wedgesGroup);
        this._titleElement = SvgView.create('text')
            .className('title')
            .textAnchor('middle')
            .alignmentBaseline('middle');
        this._svgRoot.append(this._titleElement);
        this._parentView.node.appendChild(this._svgRoot.node);
        this.resize();
    };
    PieView.prototype.start = function () {
        if (!this._hasStarted) {
            this._hasStarted = true;
        }
    };
    PieView.prototype.stop = function () {
        _super.prototype.stop.call(this);
    };
    Object.defineProperty(PieView.prototype, "wedgesGroup", {
        get: function () {
            return this._wedgesGroup;
        },
        enumerable: true,
        configurable: true
    });
    PieView.prototype.addWedge = function (newWedge) {
        if (this._wedges.indexOf(newWedge) < 0) {
            this._wedges.push(newWedge);
        }
    };
    PieView.prototype.removeWedge = function (oldWedge) {
        var i = this._wedges.indexOf(oldWedge);
        if (i >= 0) {
            this._wedges.splice(i, 1);
        }
    };
    PieView.prototype.total = function (value) {
        if (value) {
            this._total = value;
        }
        return this._total;
    };
    PieView.prototype.trans = function (value) {
        if (value === undefined) {
            return this._trans;
        }
        this._trans = (value) ? value : undefined;
        return this;
    };
    PieView.prototype.limit = function (value) {
        if (value === undefined) {
            return this._limit;
        }
        if (this._limit !== value) {
            this._limit = value;
            this._total = value;
        }
        return this;
    };
    PieView.prototype.originAngle = function (originAngle) {
        if (originAngle === undefined) {
            return this._originAngle;
        }
        originAngle = Angle.fromAny(originAngle);
        if (!this._originAngle.equals(originAngle)) {
            this._originAngle = originAngle;
        }
        return this;
    };
    PieView.prototype.width = function (value, parentNode) {
        if (value === undefined) {
            return this._width;
        }
        if (value === null) {
            this._width = Length.zero(parentNode);
        }
        else {
            this._width = (value instanceof Length) ? value : Length.fromAny(value, parentNode);
        }
        return this;
    };
    PieView.prototype.height = function (value, parentNode) {
        if (value === undefined) {
            return this._height;
        }
        if (value === null) {
            this._height = Length.zero(parentNode);
        }
        else {
            this._height = (value instanceof Length) ? value : Length.fromAny(value, parentNode);
        }
        return this;
    };
    PieView.prototype.title = function (value) {
        if (value === undefined) {
            return this._titleValue;
        }
        if (this._titleValue !== value) {
            this._titleValue = value;
        }
        return this;
    };
    PieView.prototype.titleWeight = function (value) {
        if (value === undefined) {
            return this._titleWeight;
        }
        if (this._titleWeight !== value) {
            this._titleWeight = value;
        }
        return this;
    };
    PieView.prototype.titleSize = function (size) {
        if (size === undefined) {
            return this._titleSize;
        }
        if (size !== null) {
            size = Length.fromAny(size);
        }
        if (this._titleSize ? !this._titleSize.equals(size) : this._titleSize !== size) {
            this._titleSize = size;
        }
        return this;
    };
    PieView.prototype.titleColor = function (color) {
        if (color === undefined) {
            return this._titleColor;
        }
        if (color !== null) {
            color = Color.fromAny(color);
        }
        if (this._titleColor ? !this._titleColor.equals(color) : this._titleColor !== color) {
            this._titleColor = color;
        }
        return this;
    };
    PieView.prototype.updateTitle = function () {
        var titleElement = this._titleElement;
        var titleValue = this._titleValue;
        if (titleElement && titleValue) {
            var width = this._width.pxValue();
            var height = this._height.pxValue();
            titleElement.text(titleValue, this._trans);
            titleElement.x(width / 2).y(height / 2);
            if (this._titleSize) {
                var size = Math.min(width, height);
                titleElement.setProperty('font-size', "" + Math.ceil(this._titleSize.pxValue(size)));
            }
            if (this._titleWeight) {
                titleElement.setProperty('font-weight', "" + this._titleWeight);
            }
            if (this._titleColor) {
                titleElement.fill(this._titleColor);
            }
        }
    };
    PieView.prototype.updateWedge = function (wedge) {
        wedge.width(this._width).height(this._height);
    };
    PieView.prototype.render = function (frameNumber) {
        var transform = Transform.translate(this._width.pxValue() / 2, this._height.pxValue() / 2);
        this._wedgesGroup.setAttribute('transform', transform.toAttributeString());
        this.parentResize();
        this.updateTitle();
    };
    PieView.prototype.resize = function () {
        if (this._width) {
            this._svgRoot.width(this._width);
        }
        if (this._height) {
            this._svgRoot.height(this._height);
        }
        this.parentResize();
    };
    PieView.prototype.parentResize = function () {
        var node = this._svgRoot.node;
        do {
            var parentNode = node.parentNode;
            if (parentNode) {
                if (parentNode instanceof HTMLElement && parentNode.offsetWidth) {
                    var width = parentNode.offsetWidth;
                    var height = width;
                    this._svgRoot.width(width);
                    this._svgRoot.height(height);
                    this.width(width, parentNode);
                    this.height(height, parentNode);
                    return;
                }
                node = parentNode;
                continue;
            }
            return;
        } while (true);
    };
    return PieView;
}(View));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllLXZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwaWUtdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNLLEtBQUssRUFDSixNQUFNLEVBQ1AsS0FBSyxFQUNmLElBQUksRUFBWSxPQUFPLEVBRXZCLFNBQVMsR0FHVixNQUFNLFVBQVUsQ0FBQztBQUlsQjtJQUE2QixtQ0FBSTtJQWdCL0IsaUJBQVksRUFBc0IsRUFBRSxVQUFnQjtRQUFwRCxZQUNFLGtCQUFNLEVBQUUsRUFBRSxVQUFVLENBQUMsU0FXdEI7UUExQlEsYUFBTyxHQUFzQixFQUFFLENBQUM7UUFpQnZDLEtBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLEtBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLEtBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pDLEtBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzVCLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLEtBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLEtBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFCLEtBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLEtBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDOztJQUMxQixDQUFDO0lBRUQsd0JBQU0sR0FBTjtRQUNFLGlCQUFNLE1BQU0sV0FBRSxDQUFDO1FBRWYsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUNsQyxTQUFTLENBQUMsS0FBSyxDQUFDO2FBQ2hCLE1BQU0sQ0FBRSxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBRTthQUN4QixNQUFNLENBQUMsU0FBUyxDQUFDO2FBQ2pCLFlBQVksQ0FBQztZQUNaLEtBQUssRUFBRSxNQUFNO1lBQ2IsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDO2FBQ0QsV0FBVyxDQUFDO1lBQ1gsV0FBVyxFQUFFLENBQUM7WUFDZCxZQUFZLEVBQUUsQ0FBQztZQUNmLHFCQUFxQixFQUFFLE1BQU07WUFDN0Isa0JBQWtCLEVBQUUsTUFBTTtZQUMxQixpQkFBaUIsRUFBRSxNQUFNO1lBQ3pCLGFBQWEsRUFBRSxNQUFNO1NBQ3RCLENBQUMsQ0FBQztRQUVMLElBQUksQ0FBQyxZQUFZLEdBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXhDLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7YUFDeEMsU0FBUyxDQUFDLE9BQU8sQ0FBQzthQUNsQixVQUFVLENBQUMsUUFBUSxDQUFDO2FBQ3BCLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV4QyxJQUFJLENBQUMsV0FBd0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBRWhCLENBQUM7SUFFRCx1QkFBSyxHQUFMO1FBRUUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFFckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBRUQsc0JBQUksR0FBSjtRQUVFLGlCQUFNLElBQUksV0FBRSxDQUFDO0lBQ2YsQ0FBQztJQUVELHNCQUFJLGdDQUFXO2FBQWY7WUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDM0IsQ0FBQzs7O09BQUE7SUFFRCwwQkFBUSxHQUFSLFVBQVMsUUFBeUI7UUFDaEMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRUQsNkJBQVcsR0FBWCxVQUFZLFFBQXlCO1FBQ25DLElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNWLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7SUFJRCx1QkFBSyxHQUFMLFVBQU0sS0FBYztRQUNsQixJQUFHLEtBQUssRUFBRTtZQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFJRCx1QkFBSyxHQUFMLFVBQU0sS0FBMEM7UUFDOUMsSUFBRyxLQUFLLEtBQU0sU0FBUyxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQUU7UUFDaEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUN6QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFJRCx1QkFBSyxHQUFMLFVBQU0sS0FBYztRQUNsQixJQUFHLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFBRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7U0FBRTtRQUMvQyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBSUQsNkJBQVcsR0FBWCxVQUFZLFdBQXNCO1FBQ2hDLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztTQUFFO1FBQzVELFdBQVcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUMxQyxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztTQUNqQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUlELHVCQUFLLEdBQUwsVUFBTSxLQUFpQixFQUFFLFVBQWlCO1FBQ3hDLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUFFO1FBQ2hELElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtZQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDdkM7YUFBTTtZQUNMLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLFlBQVksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDckY7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFJRCx3QkFBTSxHQUFOLFVBQU8sS0FBaUIsRUFBRSxVQUFpQjtRQUN6QyxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7U0FBRTtRQUNqRCxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3hDO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSyxZQUFZLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ3RGO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBSUQsdUJBQUssR0FBTCxVQUFNLEtBQWM7UUFDbEIsSUFBRyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQUU7UUFDcEQsSUFBRyxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtZQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztTQUMxQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUlELDZCQUFXLEdBQVgsVUFBWSxLQUF1QjtRQUNqQyxJQUFHLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFBRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7U0FBRTtRQUNyRCxJQUFHLElBQUksQ0FBQyxZQUFZLEtBQUssS0FBSyxFQUFFO1lBQzlCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBSUQsMkJBQVMsR0FBVCxVQUFVLElBQXVCO1FBQy9CLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUFFO1FBQ25ELElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtZQUNqQixJQUFJLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjtRQUNELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLEVBQUU7WUFDOUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7U0FDeEI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFJRCw0QkFBVSxHQUFWLFVBQVcsS0FBdUI7UUFDaEMsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQUU7UUFDckQsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ2xCLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlCO1FBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFLLEtBQUssRUFBRTtZQUNuRixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztTQUMxQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUdELDZCQUFXLEdBQVg7UUFDRSxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ3hDLElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDcEMsSUFBSSxZQUFZLElBQUksVUFBVSxFQUFFO1lBQzlCLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDcEMsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUV0QyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDM0MsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUV4QyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ25CLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNyQyxZQUFZLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxLQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUcsQ0FBQyxDQUFDO2FBQ3RGO1lBRUQsSUFBRyxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUNwQixZQUFZLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxLQUFHLElBQUksQ0FBQyxZQUFjLENBQUMsQ0FBQzthQUNqRTtZQUVELElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDcEIsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDckM7U0FDRjtJQUNILENBQUM7SUFrRUQsNkJBQVcsR0FBWCxVQUFZLEtBQWdCO1FBQzFCLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELHdCQUFNLEdBQU4sVUFBTyxXQUFtQjtRQUN4QixJQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsd0JBQU0sR0FBTjtRQUVFLElBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNsQztRQUVELElBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNwQztRQUVELElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsOEJBQVksR0FBWjtRQUNFLElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBRXBDLEdBQUc7WUFDRCxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBRW5DLElBQUksVUFBVSxFQUFFO2dCQUNkLElBQUksVUFBVSxZQUFZLFdBQVcsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFO29CQUUvRCxJQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO29CQUNyQyxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUM7b0JBRXJCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFFN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7b0JBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUNoQyxPQUFPO2lCQUNSO2dCQUNELElBQUksR0FBRyxVQUFVLENBQUM7Z0JBQ2xCLFNBQVM7YUFDVjtZQUNELE9BQU87U0FDUixRQUFRLElBQUksRUFBRTtJQUNqQixDQUFDO0lBWUgsY0FBQztBQUFELENBQUMsQUFsV0QsQ0FBNkIsSUFBSSxHQWtXaEMifQ==

var PI$3 = Math.PI;
var TAU$3 = 2 * PI$3;
var PI_OVER_2$1 = PI$3 / 2;
var EPSILON$2 = 1e-12;
var WedgeDefaults = (function () {
    function WedgeDefaults() {
    }
    WedgeDefaults.Width = Length.fromAny(100);
    WedgeDefaults.Height = Length.fromAny(100);
    WedgeDefaults.InnerRadius = Length.fromAny('5%');
    WedgeDefaults.OuterRadius = Length.fromAny('25%');
    WedgeDefaults.MinAngle = Angle.fromAny('2deg');
    WedgeDefaults.ArcColor = new Rgb(0, 0, 0, 0.5);
    WedgeDefaults.StartingValue = 0;
    WedgeDefaults.StartingTotal = 0;
    WedgeDefaults.TickAlign = 0.5;
    WedgeDefaults.TickRadius = Length.fromAny('30%');
    WedgeDefaults.TickLength = Length.fromAny('50%');
    WedgeDefaults.TickWidth = Length.px(1);
    WedgeDefaults.TickPadding = Length.px(3);
    WedgeDefaults.TickColor = Color.black();
    WedgeDefaults.Label = null;
    WedgeDefaults.LabelRadius = Length.fromAny('50%');
    WedgeDefaults.LabelSize = null;
    WedgeDefaults.LabelColor = null;
    WedgeDefaults.LabelWeight = 500;
    WedgeDefaults.LegendValue = null;
    WedgeDefaults.LegendSize = null;
    WedgeDefaults.LegendColor = null;
    WedgeDefaults.LegendWeight = 500;
    WedgeDefaults.StrokeSize = 0;
    WedgeDefaults.StrokeColor = new Rgb(0, 0, 0, 0.5);
    return WedgeDefaults;
}());
var WedgeView = (function (_super) {
    __extends(WedgeView, _super);
    function WedgeView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._eventsAdded = false;
        _this._activeEvent = null;
        _this._eventTargetElem = null;
        _this._value = WedgeDefaults.StartingValue;
        _this._total = WedgeDefaults.StartingTotal;
        _this._width = WedgeDefaults.Width;
        _this._height = WedgeDefaults.Height;
        _this._minAngle = WedgeDefaults.MinAngle;
        _this._innerRadius = WedgeDefaults.InnerRadius;
        _this._outerRadius = WedgeDefaults.OuterRadius;
        _this._arcColor = WedgeDefaults.ArcColor;
        _this._tickAlign = WedgeDefaults.TickAlign;
        _this._tickRadius = WedgeDefaults.TickRadius;
        _this._tickLength = WedgeDefaults.TickLength;
        _this._tickWidth = WedgeDefaults.TickWidth;
        _this._tickPadding = WedgeDefaults.TickPadding;
        _this._tickColor = WedgeDefaults.TickColor;
        _this._labelElement = WedgeDefaults.Label;
        _this._labelRadius = WedgeDefaults.LabelRadius;
        _this._labelSize = WedgeDefaults.LabelSize;
        _this._labelColor = WedgeDefaults.LabelColor;
        _this._labelWeight = WedgeDefaults.LabelWeight;
        _this._legendValue = WedgeDefaults.LegendValue;
        _this._legendSize = WedgeDefaults.LegendSize;
        _this._legendColor = WedgeDefaults.LegendColor;
        _this._legendWeight = WedgeDefaults.LegendWeight;
        _this._strokeColor = { value: WedgeDefaults.StrokeColor, dirty: true };
        _this._strokeSize = Length.px(WedgeDefaults.StrokeSize);
        _this._strokeHoverColor = { value: WedgeDefaults.StrokeColor, dirty: true };
        _this._strokeHoverSize = Length.px(WedgeDefaults.StrokeSize);
        _this._arc = new Arc();
        return _this;
    }
    WedgeView.prototype.create = function () {
        _super.prototype.create.call(this);
        this._node = SvgView.create('g')
            .className('wedge')
            .elemId(this._id || '');
        this.arcPath = SvgView.create('path')
            .className('arc');
        this._node.append(this.arcPath.node);
        this.tickPath = SvgView.create('path')
            .className('tick')
            .fill('none');
        this._node.append(this.tickPath.node);
        this._labelElement = SvgView.create('text').className('label')
            .style('pointer-events', 'none');
        this._node.append(this._labelElement.node);
        this._legendElement = SvgView.create('text').className('legend');
        this._node.append(this._legendElement.node);
        this._parentView.node.appendChild(this._node.node);
        this._hasStarted = true;
    };
    WedgeView.prototype.start = function () {
        if (!this._hasStarted) {
            this._hasStarted = true;
        }
    };
    WedgeView.prototype.value = function (newValue) {
        if (newValue === undefined) {
            return this._value;
        }
        var oldValue = this._value;
        if (oldValue !== newValue) {
            this._value = newValue;
        }
        return this;
    };
    WedgeView.prototype.total = function (total) {
        if (total === undefined) {
            return this._total;
        }
        if (this._total !== total) {
            this._total = total;
        }
        return this;
    };
    WedgeView.prototype.trans = function (value) {
        if (value === undefined) {
            return this._trans;
        }
        this._trans = (value) ? value : undefined;
        return this;
    };
    WedgeView.prototype.width = function (width) {
        if (width === undefined) {
            return this._width;
        }
        width = Length.fromAny(width, this._node.node);
        if (!this._width.equals(width)) {
            this._width = width;
        }
        return this;
    };
    WedgeView.prototype.height = function (height) {
        if (height === undefined) {
            return this._height;
        }
        height = Length.fromAny(height, this._node.node);
        if (!this._height.equals(height)) {
            this._height = height;
        }
        return this;
    };
    WedgeView.prototype.arc = function (arc) {
        if (arc === undefined) {
            return this._arc;
        }
        if (this._arc !== arc) {
            this._arc = arc;
        }
        return this;
    };
    WedgeView.prototype.strokeSize = function (value) {
        if (value === undefined) {
            return this._strokeSize;
        }
        this._strokeSize = (value instanceof Length) ? value : Length.pct(WedgeDefaults.StrokeSize);
        return this;
    };
    WedgeView.prototype.strokeColor = function (value) {
        if (value === undefined) {
            return this._strokeColor.value;
        }
        if (!this._strokeColor.value.equals(value)) {
            this._strokeColor.value = (value instanceof Color) ? value : Color.rgb(WedgeDefaults.StrokeColor);
            this._strokeColor.dirty = true;
        }
        return this;
    };
    WedgeView.prototype.strokeHoverSize = function (value) {
        if (value === undefined) {
            return this._strokeHoverSize;
        }
        this._strokeHoverSize = (value instanceof Length) ? value : Length.pct(WedgeDefaults.StrokeSize);
        return this;
    };
    WedgeView.prototype.strokeHoverColor = function (value) {
        if (value === undefined) {
            return this._strokeHoverColor.value;
        }
        this._strokeHoverColor.value = (value instanceof Color) ? value : Color.rgb(WedgeDefaults.StrokeColor);
        this._strokeHoverColor.dirty = true;
        return this;
    };
    WedgeView.prototype.eventsList = function (eventList) {
        var _this = this;
        if (eventList && !this._eventsAdded) {
            this._eventsList = eventList;
            if (this._eventsList !== null) {
                this._eventsList.forEach(function (wedgeEvent) {
                    var eventKey = wedgeEvent.key.toString();
                    var eventFunctName = wedgeEvent.value.toString();
                    var eventFunct = function () {
                        _this._activeEvent = eventKey;
                        _this._eventTargetElem = _this.arcPath;
                        window[eventFunctName](_this, _this.value());
                    };
                    _this.arcPath.node.addEventListener(eventKey, eventFunct, false);
                });
                this._eventsAdded = true;
            }
        }
        return this;
    };
    WedgeView.prototype.arcColor = function (arcColor) {
        if (arcColor === undefined) {
            return this._arcColor;
        }
        arcColor = Color.fromAny(arcColor);
        if (!this._arcColor.equals(arcColor)) {
            this._arcColor = arcColor;
        }
        return this;
    };
    WedgeView.prototype.arcHoverColor = function (arcHoverColor) {
        if (arcHoverColor === undefined) {
            return this._arcHoverColor;
        }
        arcHoverColor = Color.fromAny(arcHoverColor);
        if (!this._arcHoverColor || !this._arcHoverColor.equals(arcHoverColor)) {
            this._arcHoverColor = arcHoverColor;
        }
        return this;
    };
    WedgeView.prototype.innerRadius = function (innerRadius) {
        if (innerRadius === undefined) {
            return this._innerRadius;
        }
        innerRadius = Length.fromAny(innerRadius);
        if (!this._innerRadius.equals(innerRadius)) {
            this._innerRadius = innerRadius;
        }
        return this;
    };
    WedgeView.prototype.outerRadius = function (outerRadius) {
        if (outerRadius === undefined) {
            return this._outerRadius;
        }
        outerRadius = Length.fromAny(outerRadius);
        if (!this._outerRadius.equals(outerRadius)) {
            this._outerRadius = outerRadius;
        }
        return this;
    };
    WedgeView.prototype.startAngle = function (startAngle) {
        if (startAngle === undefined) {
            return this._arc.startAngle();
        }
        startAngle = Angle.fromAny(startAngle);
        if (!this._arc.startAngle().equals(startAngle)) {
            this._arc.startAngle(startAngle);
        }
        return this;
    };
    WedgeView.prototype.deltaAngle = function (deltaAngle) {
        if (deltaAngle === undefined) {
            return this._arc.deltaAngle();
        }
        deltaAngle = Angle.fromAny(deltaAngle);
        if (!this._arc.deltaAngle().equals(deltaAngle)) {
            this._arc.deltaAngle(deltaAngle);
        }
        return this;
    };
    WedgeView.prototype.minAngle = function (minAngle) {
        if (minAngle === undefined) {
            return this._minAngle;
        }
        minAngle = Angle.fromAny(minAngle);
        if (!this._minAngle.equals(minAngle)) {
            this._minAngle = minAngle;
        }
        return this;
    };
    WedgeView.prototype.padAngle = function (padAngle) {
        if (padAngle === undefined) {
            return this._arc.padAngle();
        }
        padAngle = Angle.fromAny(padAngle);
        if (!this._arc.padAngle().equals(padAngle)) {
            this._arc.padAngle(padAngle);
        }
        return this;
    };
    WedgeView.prototype.padRadius = function (padRadius) {
        if (padRadius === undefined) {
            return this._arc.padRadius();
        }
        if (this._arc.padRadius() !== padRadius) {
            this._arc.padRadius(padRadius);
        }
        return this;
    };
    WedgeView.prototype.cornerRadius = function (cornerRadius) {
        if (cornerRadius === undefined) {
            return this._arc.cornerRadius();
        }
        if (this._arc.cornerRadius() !== cornerRadius) {
            this._arc.cornerRadius(cornerRadius);
        }
        return this;
    };
    WedgeView.prototype.tickAlign = function (tickAlign) {
        if (tickAlign === undefined) {
            return this._tickAlign;
        }
        if (this._tickAlign !== tickAlign) {
            this._tickAlign = tickAlign;
        }
        return this;
    };
    WedgeView.prototype.tickRadius = function (tickRadius) {
        if (tickRadius === undefined) {
            return this._tickRadius;
        }
        tickRadius = Length.fromAny(tickRadius);
        if (!this._tickRadius.equals(tickRadius)) {
            this._tickRadius = tickRadius;
        }
        return this;
    };
    WedgeView.prototype.tickLength = function (tickLength) {
        if (tickLength === undefined) {
            return this._tickLength;
        }
        tickLength = Length.fromAny(tickLength);
        if (!this._tickLength.equals(tickLength)) {
            this._tickLength = tickLength;
        }
        return this;
    };
    WedgeView.prototype.tickWidth = function (tickWidth) {
        if (tickWidth === undefined) {
            return this._tickWidth;
        }
        tickWidth = Length.fromAny(tickWidth);
        if (this._tickWidth !== tickWidth) {
            this._tickWidth = tickWidth;
        }
        return this;
    };
    WedgeView.prototype.tickPadding = function (tickPadding) {
        if (tickPadding === undefined) {
            return this._tickPadding;
        }
        tickPadding = Length.fromAny(tickPadding);
        if (this._tickPadding !== tickPadding) {
            this._tickPadding = tickPadding;
        }
        return this;
    };
    WedgeView.prototype.tickColor = function (tickColor) {
        if (tickColor === undefined) {
            return this._tickColor;
        }
        tickColor = Color.fromAny(tickColor);
        if (!this._tickColor.equals(tickColor)) {
            this._tickColor = tickColor;
        }
        return this;
    };
    WedgeView.prototype.label = function (value) {
        if (value === undefined) {
            return this._labelValue;
        }
        if (this._labelValue !== value) {
            this._labelValue = (value) ? value : '';
        }
        return this;
    };
    WedgeView.prototype.labelRadius = function (labelRadius) {
        if (labelRadius === undefined) {
            return this._labelRadius;
        }
        else {
            labelRadius = Length.fromAny(labelRadius);
            if (!this._labelRadius.equals(labelRadius)) {
                this._labelRadius = labelRadius;
            }
            return this;
        }
    };
    WedgeView.prototype.labelSize = function (labelSize) {
        if (labelSize === undefined) {
            return this._labelSize;
        }
        else {
            if (labelSize !== null) {
                labelSize = Length.fromAny(labelSize);
            }
            if (this._labelSize ? !this._labelSize.equals(labelSize) : this._labelSize !== labelSize) {
                this._labelSize = labelSize;
            }
            return this;
        }
    };
    WedgeView.prototype.labelColor = function (labelColor) {
        if (labelColor === undefined) {
            return this._labelColor;
        }
        if (labelColor !== null) {
            labelColor = Color.fromAny(labelColor);
        }
        if (this._labelColor ? !this._labelColor.equals(labelColor) : this._labelColor !== labelColor) {
            this._labelColor = labelColor;
        }
        return this;
    };
    WedgeView.prototype.labelWeight = function (value) {
        if (value === undefined) {
            return this._labelWeight;
        }
        if (this._labelWeight !== value) {
            this._labelWeight = value;
        }
        return this;
    };
    WedgeView.prototype.legend = function (value) {
        if (value === undefined || value === null) {
            return this._legendValue;
        }
        if (this._legendValue !== value) {
            this._legendValue = (value) ? value : null;
        }
        return this;
    };
    WedgeView.prototype.legendSize = function (legendSize) {
        if (legendSize === undefined) {
            return this._legendSize;
        }
        if (legendSize !== null) {
            legendSize = Length.fromAny(legendSize);
        }
        if (this._legendSize ? !this._legendSize.equals(legendSize) : this._legendSize !== legendSize) {
            this._legendSize = legendSize;
        }
        return this;
    };
    WedgeView.prototype.legendColor = function (legendColor) {
        if (legendColor === undefined) {
            return this._legendColor;
        }
        if (legendColor !== null) {
            legendColor = Color.fromAny(legendColor);
        }
        if (this._legendColor ? !this._legendColor.equals(legendColor) : this._legendColor !== legendColor) {
            this._legendColor = legendColor;
        }
        return this;
    };
    WedgeView.prototype.legendWeight = function (value) {
        if (value === undefined) {
            return this._legendWeight;
        }
        if (this._legendWeight !== value) {
            this._legendWeight = value;
        }
        return this;
    };
    WedgeView.prototype.render = function () {
        if (this._activeEvent === "mouseout" || this._activeEvent === "click" || this._activeEvent === "mouseup") {
            this._activeEvent = null;
            this._eventTargetElem = null;
        }
        if (this._activeEvent === "mouseover") {
            if (this._arcHoverColor) {
                this.arcPath.setAttribute('fill', this._arcHoverColor.toString());
            }
            if (this._strokeHoverSize) {
                this.arcPath.node.style.strokeWidth = Length.px(this._strokeHoverSize.value).toString();
            }
            if (this._strokeHoverColor) {
                this.arcPath.node.style.stroke = this._strokeHoverColor.value.toString();
            }
        }
        else {
            this.arcPath.setAttribute('fill', this._arcColor.toString());
            if (this._strokeSize) {
                this.arcPath.node.style.strokeWidth = Length.px(this._strokeSize.value).toString();
            }
            if (this._strokeColor) {
                this.arcPath.node.style.stroke = this._strokeColor.value.toString();
            }
        }
        this.renderArc();
        this.renderTick();
    };
    WedgeView.prototype.renderArc = function () {
        var da = this._arc.deltaAngle().radValue();
        var aMin = Math.max(EPSILON$2, this._minAngle.radValue());
        var labelValue = this._labelValue;
        var labelElement = this._labelElement;
        if (da > aMin) {
            var width = this._width.pxValue();
            var height = this._height.pxValue();
            var size = Math.min(width, height);
            var r0 = this._innerRadius.pxValue(size);
            var r1 = this._outerRadius.pxValue(size);
            this._arc.innerRadius(r0).outerRadius(r1);
            this.arcPath.setAttribute('d', this._arc.draw());
            if (labelValue && labelElement) {
                var a0 = this._arc.startAngle().radValue() - PI_OVER_2$1;
                var a = a0 + da / 2;
                var r = r0 + this._labelRadius.pxValue(r1 - r0);
                var rx = r * Math.cos(a);
                var ry = r * Math.sin(a);
                labelElement.removeAttribute('visibility');
                labelElement.text(labelValue, this._trans);
                if (labelElement.node instanceof SVGGElement) {
                    var transform = Transform.translate(rx, ry);
                    labelElement.node.setAttribute('transform', transform.toAttributeString());
                }
                else if (labelElement.node instanceof SVGTextElement) {
                    labelElement.x(rx).y(ry).textAnchor('middle')
                        .setProperty('dominant-baseline', 'central');
                    if (this._labelSize) {
                        labelElement.node.setAttribute('font-size', "" + Math.ceil(this._labelSize.pxValue(size)));
                    }
                    if (this._labelSize) {
                        labelElement.node.setAttribute('font-weight', this._labelWeight.toString());
                    }
                }
                if (this._labelColor) {
                    labelElement.fill(this._labelColor);
                }
            }
        }
        else {
            this.arcPath.removeAttribute('d');
            this.arcPath.removeAttribute('fill');
            if (labelElement) {
                labelElement.setAttribute('visibility', 'hidden');
            }
        }
    };
    WedgeView.prototype.renderTick = function () {
        var da = Math.min(this._arc.deltaAngle().radValue(), TAU$3);
        var aMin = Math.max(EPSILON$2, this._minAngle.radValue());
        var legendElement = this._legendElement;
        var legendValue = this._legendValue;
        if (da > aMin) {
            legendElement.text(legendValue, this._trans);
            var width = this._width.pxValue();
            var height = this._height.pxValue();
            var size = Math.min(width, height);
            var a0 = this._arc.startAngle().radValue() - PI_OVER_2$1;
            var a = a0 + da * this._tickAlign;
            var r1 = this._arc.outerRadius();
            var r2 = this._tickRadius.pxValue(size);
            var r3 = this._tickLength.pxValue(width);
            var path = new Path();
            var r1x = r1 * Math.cos(a + EPSILON$2);
            var r1y = r1 * Math.sin(a + EPSILON$2);
            var r2x = r2 * Math.cos(a + EPSILON$2);
            var r2y = r2 * Math.sin(a + EPSILON$2);
            var l = 0;
            path.moveTo(r1x, r1y);
            path.lineTo(r2x, r2y);
            if (r3) {
                if (r2x >= 0) {
                    path.lineTo(r3, r2y);
                    l = r3 - r2x;
                }
                else if (r2x < 0) {
                    path.lineTo(-r3, r2y);
                    l = r3 + r2x;
                }
            }
            this.tickPath.setAttribute('d', path.toString());
            this.tickPath.setAttribute('stroke', this._tickColor.toString());
            this.tickPath.setAttribute('stroke-width', '' + this._tickWidth.pxValue(size));
            if (legendElement.node instanceof SVGGElement) {
                var transform = Transform.translate(r2x, r2y);
                legendElement.node.setAttribute('transform', transform.toAttributeString());
                legendElement.node.setAttribute('width', '' + l);
            }
            else if (legendElement.node instanceof SVGTextElement) {
                var dx = void 0;
                var anchor = void 0;
                if (r2x >= 0) {
                    dx = l;
                    if (r2y >= 0) {
                        anchor = 'end';
                    }
                    else {
                        anchor = 'end';
                    }
                }
                else {
                    dx = -l;
                    if (r2y < 0) {
                        anchor = 'start';
                    }
                    else {
                        anchor = 'start';
                    }
                }
                legendElement.removeAttribute('visibility');
                legendElement.x(r2x).y(r2y)
                    .dx(dx).dy(-this._tickPadding.pxValue(size))
                    .textAnchor(anchor);
                if (this._legendSize) {
                    legendElement.setAttribute('font-size', '' + Math.ceil(this._legendSize.pxValue(size)));
                }
                if (this._legendWeight) {
                    legendElement.setAttribute('font-weight', this._legendWeight.toString());
                }
            }
            if (this._legendColor) {
                legendElement.fill(this._legendColor.toString());
            }
        }
        else {
            this.tickPath.removeAttribute('d');
            this.tickPath.removeAttribute('stroke');
            this.tickPath.removeAttribute('stroke-width');
            if (legendElement) {
                legendElement.node.setAttribute('visibility', 'hidden');
            }
        }
    };
    return WedgeView;
}(View));

//# sourceMappingURL=data:application/json;base64,

var PieController = (function (_super) {
    __extends(PieController, _super);
    function PieController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        _this._currentTotal = 0;
        _this._lastStartAngle = Angle.zero('deg');
        return _this;
    }
    PieController.prototype.create = function () {
        var _this = this;
        _super.prototype.create.call(this);
        var pieAttributes = this.model().getData();
        pieAttributes.forEach(function (pieAttr) {
            if (pieAttr instanceof RecordMap) {
                pieAttr.pushMutable(new Slot(Item.Text.valueOf('wedgeStyle'), _this._componentInfo.get('wedgeStyle')));
                pieAttr.pushMutable(new Slot(Item.Text.valueOf('events'), _this._componentInfo.get('events')));
                var newWedge = Utils.cast(_this.view().wedgesGroup.node, pieAttr, _this.stack(), _this.eventManager());
                if (newWedge) {
                    _this._childComponents.push(newWedge);
                    if (pieAttr.tag === 'wedge') {
                        _this.view().addWedge(newWedge.controller());
                        newWedge.controller().setViewAttributes(_this._componentInfo.get('wedgeStyle'));
                        newWedge.view().eventsList(_this._componentInfo.get('events')._array);
                    }
                    else {
                        newWedge.parentComponent(_this._mainComponent);
                    }
                }
            }
        });
        this.setViewAttributes(pieAttributes);
    };
    PieController.prototype.start = function () {
        _super.prototype.start.call(this);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this._childComponents.forEach(function (child) {
                child.start();
            });
        }
    };
    PieController.prototype.setViewAttributes = function (newState) {
        var skip = ['total', 'value', 'events'];
        _super.prototype.setViewAttributes.call(this, newState, skip);
    };
    PieController.prototype.render = function (frameNumber) {
        this._currentTotal = this.sumChildValues(this._childComponents);
        this.setTotalInChildren(this._childComponents, this._currentTotal);
        _super.prototype.render.call(this, frameNumber);
        if (this._lastNewState) {
            this._lastNewState.push(new Slot(Item.Text.valueOf('total'), Value.parseRecon("" + this._currentTotal)));
            this.handleTextField('title', this._componentData.get('title'), this._lastNewState);
            var view = this.view();
            var trans = this._lastNewState.get('transition').cast(Transition.Form);
            view.trans(trans);
            view.title(this._lastNewState.get('title'));
        }
        this._lastStartAngle = this.view().originAngle();
        this.updateWedges(this._childComponents);
        this._childComponents.forEach(function (child) {
            child.render(frameNumber);
        });
    };
    PieController.prototype.sumChildValues = function (children) {
        var total = 0;
        for (var i = 0; i < children.length; i++) {
            var currChild = children[i];
            if (currChild.controller().childComponents().length > 0) {
                total += this.sumChildValues(currChild.controller().childComponents());
            }
            if (currChild.view() && currChild.view().value()) {
                total += currChild.view().value();
            }
        }
        return total;
    };
    PieController.prototype.setTotalInChildren = function (children, total) {
        if (total === void 0) { total = 0; }
        for (var i = 0; i < children.length; i++) {
            var currChild = children[i];
            if (currChild.controller().childComponents().length > 0) {
                this.setTotalInChildren(currChild.controller().childComponents(), total);
            }
            if (currChild.view() && currChild.view().total) {
                currChild.view().total(total);
            }
        }
    };
    PieController.prototype.updateWedges = function (children) {
        for (var i = 0; i < children.length; i++) {
            var currChild = children[i];
            if (currChild.controller().childComponents().length > 0) {
                this.updateWedges(currChild.controller().childComponents());
            }
            var wedge = currChild.view();
            if (wedge instanceof WedgeView && this._currentTotal) {
                var delta = 2 * Math.PI * wedge.value() / (this._currentTotal || 1);
                wedge.startAngle(this._lastStartAngle).deltaAngle(Angle.rad(delta));
                this._lastStartAngle = Angle.rad(this._lastStartAngle.radValue() + delta);
            }
            this.view().updateWedge(wedge);
        }
    };
    PieController.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
        if (newStateValue !== undefined && newStateValue !== null) {
            if (type === Text) {
                if (newStateValue.value) {
                    if (this.view()[name]) {
                        this.view()[name](newStateValue.toString());
                    }
                    else {
                    }
                }
            }
            if (type === Value) {
                if (name === "limit") {
                    this.view().limit(newStateValue);
                }
                else {
                    this.view()[name](newStateValue);
                }
            }
            if (type === Length.Form) {
                if (name === 'pieWidth') {
                    this.view().width(newStateValue);
                }
                else if (name === 'pieHeight') {
                    this.view().height(newStateValue);
                }
                else {
                    this.view()[name](newStateValue);
                }
            }
            if (type === Angle.Form) {
                this.view()[name](newStateValue);
            }
            if (type === Color.Form) {
                this.view()[name](newStateValue);
            }
            if (type instanceof Array) {
                this.view()[name](newStateValue);
            }
        }
        else {
        }
    };
    PieController.prototype.onLinkData = function (linkData, eventUID) {
        _super.prototype.onLinkData.call(this, linkData, eventUID);
        var componentData = this._componentData.evaluate(linkData);
        var newState = componentData.evaluate(this._stack);
        if (this._childComponents) {
            newState.push(new Slot(Item.Text.valueOf('total'), Value.parseRecon("" + this._currentTotal)));
            newState.push(new Slot(Item.Text.valueOf('events'), this._componentInfo.get('events')));
            for (var i = 0; i < this._childComponents.length; i++) {
                var child = this._childComponents[i];
                if (child.tag !== 'each2') {
                    var controller = child.controller();
                    var valueSelector = controller.componentData().get('value');
                    var linkInfo = controller.stack().get(valueSelector._key.toString());
                    var currUid = controller.getLinkUID(linkInfo);
                    if (currUid === eventUID) {
                        var parsedValue = valueSelector.then.evaluate(linkData);
                        if (parsedValue) {
                            newState.push(new Slot(Item.Text.valueOf('value'), Value.parseRecon("" + parsedValue.numberValue())));
                        }
                    }
                }
                child.controller().onLinkData(newState, eventUID);
            }
        }
        this._lastNewState = newState;
        this.setViewAttributes(newState);
    };
    return PieController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,

var Wedge = (function (_super) {
    __extends(Wedge, _super);
    function Wedge() {
        return _super.call(this) || this;
    }
    Object.defineProperty(Wedge.prototype, "tag", {
        get: function () {
            return 'wedge';
        },
        enumerable: true,
        configurable: true
    });
    Wedge.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Wedge needs a parent node or view', this.parentView());
        }
        this.controller(new WedgeController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new WedgeModel(eventManager));
        this.view(new WedgeView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Wedge.prototype.start = function () {
        _super.prototype.start.call(this);
    };
    return Wedge;
}(UiComponent));
UiComponent.Global.addComponent('wedge', Wedge);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VkZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xFLE9BQU8sRUFBbUIsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR3hEO0lBQTJCLGlDQUFXO0lBTWxDO2VBQ0ksaUJBQU87SUFDWCxDQUFDO0lBTkQsc0JBQUksc0JBQUc7YUFBUDtZQUNJLE9BQU8sT0FBTyxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBTUQsc0JBQU0sR0FBTixVQUFPLFdBQWtDLEVBQUUsS0FBWSxFQUFFLEtBQWdCLEVBQUUsWUFBNkIsRUFBRSxFQUFXO1FBQ2pILGlCQUFNLE1BQU0sWUFBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFO1FBSUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFHNUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBR3pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQWEsQ0FBQyxDQUFDLENBQUM7UUFHbEUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRTNCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxxQkFBSyxHQUFMO1FBRUksaUJBQU0sS0FBSyxXQUFFLENBQUM7SUFFbEIsQ0FBQztJQUVMLFlBQUM7QUFBRCxDQUFDLEFBdENELENBQTJCLFdBQVcsR0FzQ3JDOztBQUVELFdBQVcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyJ9

var WedgeModel = (function (_super) {
    __extends(WedgeModel, _super);
    function WedgeModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WedgeModel.EventParams = Model.Params.concat([
        new ModelParam('mouseover', Text$1),
        new ModelParam('mouseout', Text$1),
        new ModelParam('mousedown', Text$1),
        new ModelParam('mouseup', Text$1),
        new ModelParam('click', Text$1),
    ]);
    WedgeModel.TickParams = Model.Params.concat([
        new ModelParam('align', Value),
        new ModelParam('radius', Length.Form),
        new ModelParam('length', Length.Form),
        new ModelParam('width', Length.Form),
        new ModelParam('padding', Length.Form),
        new ModelParam('color', Color.Form),
    ]);
    WedgeModel.LabelParams = Model.Params.concat([
        new ModelParam('radius', Length.Form),
        new ModelParam('size', Length.Form),
        new ModelParam('color', Color.Form),
        new ModelParam('weight', Value),
    ]);
    WedgeModel.LegendParams = Model.Params.concat([
        new ModelParam('size', Length.Form),
        new ModelParam('color', Color.Form),
        new ModelParam('weight', Value),
    ]);
    WedgeModel.Params = SvgModel.Params.concat([
        new ModelParam('transition', Transition.Form),
        new ModelParam('value', Value),
        new ModelParam('total', Value),
        new ModelParam('innerRadius', Length.Form),
        new ModelParam('outerRadius', Length.Form),
        new ModelParam('startAngle', Angle.Form),
        new ModelParam('deltaAngle', Angle.Form),
        new ModelParam('minAngle', Angle.Form),
        new ModelParam('padAngle', Angle.Form),
        new ModelParam('padRadius', Value),
        new ModelParam('cornerRadius', Length.Form),
        new ModelParam('arcColor', Color.Form),
        new ModelParam('arcHoverColor', Color.Form),
        new ModelParam('tickStyle', WedgeModel.TickParams),
        new ModelParam('labelStyle', WedgeModel.LabelParams),
        new ModelParam('legendStyle', WedgeModel.LegendParams),
        new ModelParam('strokeColor', Color.Form),
        new ModelParam('strokeSize', Length.Form),
        new ModelParam('strokeHoverColor', Color.Form),
        new ModelParam('strokeHoverSize', Length.Form),
    ]);
    return WedgeModel;
}(SvgModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VkZ2UtbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWRnZS1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUV6RjtJQUFnQyxzQ0FBUTtJQUF4Qzs7SUF5REEsQ0FBQztJQXREaUIsc0JBQVcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNoRCxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDO1FBQ2pDLElBQUksVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUM7UUFDaEMsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQztRQUNqQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDO1FBQy9CLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7S0FDOUIsQ0FBQyxDQUFDO0lBRWEscUJBQVUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUUvQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO1FBQzlCLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3JDLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3JDLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3BDLElBQUksVUFBVSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxD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

var WedgeController = (function (_super) {
    __extends(WedgeController, _super);
    function WedgeController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        _this._expressionList = [];
        return _this;
    }
    WedgeController.prototype.create = function () {
        _super.prototype.create.call(this);
        var wedgeAttributes = this.model().getData();
        this.setViewAttributes(wedgeAttributes);
    };
    WedgeController.prototype.start = function () {
        _super.prototype.start.call(this);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this.view().start();
        }
    };
    WedgeController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
    };
    WedgeController.prototype.setViewAttributes = function (newState) {
        var view = this.view();
        var trans = this.stack().get('transition').cast(Transition.Form);
        view.trans(trans);
        view.legend(newState.get('legend'));
        view.label(newState.get('label'));
        _super.prototype.setViewAttributes.call(this, newState);
    };
    WedgeController.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
        trans = this.stack().get('transition').cast(Transition.Form);
        if (type === Value) {
            if (name === 'value') {
                if (trans) {
                    this.propertyKeyNumber(NumberAnimator, name, newStateValue, trans);
                }
                else {
                    this.view()[name](newStateValue);
                }
            }
            else {
                this.view()[name](newStateValue);
            }
        }
        else {
            if (type === Length.Form) {
                this.propertyKeyLength(LengthAnimator, name, newStateValue, trans);
            }
            if (type === Angle.Form) {
                this.propertyKeyAngle(AngleAnimator, name, newStateValue, trans);
            }
            if (type === Color.Form) {
                this.view()[name](newStateValue);
            }
            if (type instanceof Array) {
                this.view()[name](newStateValue);
            }
        }
    };
    WedgeController.prototype.onLinkData = function (linkData, eventUID) {
        _super.prototype.onLinkData.call(this, linkData, eventUID);
        var componentData = this._componentData.evaluate(linkData);
        var newState = componentData.evaluate(this._stack);
        var valueSelector = this._componentData.get('value');
        var legendSelector = this._componentData.get('legend');
        var labelSelector = this._componentData.get('label');
        var rowNumberSelector = linkData.get('rowNumber');
        var keySelector = linkData.get('key');
        var maxRowsSelector = linkData.get('maxRows');
        var valueSelectorStr = valueSelector._key.toString();
        var linkInfo = this.stack().get(valueSelectorStr);
        var currUid = this.getLinkUID(linkInfo);
        if (currUid === eventUID) {
            if (valueSelector) {
                var linkDataValue = linkData.get('value');
                if (!linkDataValue.isEmpty()) {
                    newState.push(new Slot(Value.parseRecon('value'), linkDataValue));
                }
                else {
                    var parsedValue = valueSelector.evaluate(linkData);
                    newState.push(new Slot(Value.parseRecon('value'), parsedValue.toValue()));
                }
            }
            if (keySelector) {
                newState.push(new Slot(Value.parseRecon('key'), keySelector.toValue()));
            }
            if (maxRowsSelector) {
                newState.push(new Slot(Value.parseRecon('maxRows'), maxRowsSelector.toValue()));
            }
            if (rowNumberSelector) {
                newState.push(new Slot(Value.parseRecon('rowNumber'), rowNumberSelector.toValue()));
            }
            newState.push(new Slot(Value.parseRecon('total'), Value.fromAny(this.view().total())));
            this.handleTextField('legend', legendSelector, newState);
            this.handleTextField('label', labelSelector, newState);
            this.processLinkDataValues(this._componentData, newState, ['value', 'label', 'legend']);
            this.setViewAttributes(newState);
        }
    };
    return WedgeController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VkZ2UtY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlZGdlLWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxLQUFLLEVBSUwsSUFBSSxHQUlMLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFDTCxVQUFVLEVBQXNDLFVBQVUsRUFDMUQsS0FBSyxFQUFFLGFBQWEsRUFDcEIsS0FBSyxFQUVMLE1BQU0sRUFBRSxjQUFjLEVBQ3RCLGNBQWMsR0FFZixNQUFNLFVBQVUsQ0FBQztBQUdsQjtJQUFxQywyQ0FBVTtJQUk3Qyx5QkFBWSxFQUFVLEVBQUUsYUFBb0IsRUFBRSxrQkFBK0IsRUFBRSxVQUFnQixFQUFFLEtBQWdCLEVBQUUsWUFBNkI7UUFBaEosWUFFRSxrQkFBTSxFQUFFLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLFNBQzlFO1FBTFMscUJBQWUsR0FBNkMsRUFBRSxDQUFDOztJQUt6RSxDQUFDO0lBRUQsZ0NBQU0sR0FBTjtRQUNFLGlCQUFNLE1BQU0sV0FBRSxDQUFDO1FBRWYsSUFBTSxlQUFlLEdBQWMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBZSxDQUFDO1FBRXZFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsK0JBQUssR0FBTDtRQUNFLGlCQUFNLEtBQUssV0FBRSxDQUFDO1FBRWQsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxJQUFJLEVBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN0QjtJQUVILENBQUM7SUFFRCxnQ0FBTSxHQUFOLFVBQU8sV0FBbUI7UUFDeEIsaUJBQU0sTUFBTSxZQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCwyQ0FBaUIsR0FBakIsVUFBa0IsUUFBYTtRQUU3QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFlLENBQUM7UUFDdEMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFHbEMsaUJBQU0saUJBQWlCLFlBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELCtDQUFxQixHQUFyQixVQUFzQixhQUFrQixFQUFFLElBQVMsRUFBRSxJQUFTLEVBQUUsS0FBVTtRQUN4RSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdELElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtZQUNsQixJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7Z0JBQ3BCLElBQUcsS0FBSyxFQUFFO29CQUNSLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDcEU7cUJBQU07b0JBQ0osSUFBSSxDQUFDLElBQUksRUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2lCQUMzQzthQUNGO2lCQUFNO2dCQUNKLElBQUksQ0FBQyxJQUFJLEVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUMzQztTQUNGO2FBQU07WUFHTCxJQUFJLElBQUksS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFO2dCQUN4QixJQUFJLENBQUMsaUJBQWlCLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDcEU7WUFDRCxJQUFJLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxFQUFFO2dCQUN2QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDbEU7WUFDRCxJQUFJLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxFQUFFO2dCQUN0QixJQUFJLENBQUMsSUFBSSxFQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7YUFFM0M7WUFDRCxJQUFJLElBQUksWUFBWSxLQUFLLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxJQUFJLEVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUMzQztTQUVGO0lBQ0gsQ0FBQztJQUVELG9DQUFVLEdBQVYsVUFBVyxRQUFlLEVBQUUsUUFBaUI7UUFDM0MsaUJBQU0sVUFBVSxZQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyQyxJQUFNLGFBQWEsR0FBUyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVuRSxJQUFNLFFBQVEsR0FBUyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzRCxJQUFNLGFBQWEsR0FBaUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFpQixDQUFDO1FBQ3JGLElBQU0sY0FBYyxHQUFpQixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQWlCLENBQUM7UUFDdkYsSUFBTSxhQUFhLEdBQWlCLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBaUIsQ0FBQztRQUNyRixJQUFNLGlCQUFpQixHQUFpQixRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBaUIsQ0FBQztRQUNsRixJQUFNLFdBQVcsR0FBaUIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQWlCLENBQUM7UUFDdEUsSUFBTSxlQUFlLEdBQWlCLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFpQixDQUFDO1FBQzlFLElBQU0sZ0JBQWdCLEdBQVcsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMvRCxJQUFNLFFBQVEsR0FBVSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDM0QsSUFBTSxPQUFPLEdBQVcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUlsRCxJQUFJLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFFeEIsSUFBSSxhQUFhLEVBQUU7Z0JBRWpCLElBQU0sYUFBYSxHQUFVLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ25ELElBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQzFCLFFBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztpQkFDbEY7cUJBQU07b0JBQ0wsSUFBTSxXQUFXLEdBQVUsYUFBNkIsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQzNFLFFBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDMUY7YUFDRjtZQUVELElBQUksV0FBVyxFQUFFO2dCQUNkLFFBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQzthQUN4RjtZQUVELElBQUksZUFBZSxFQUFFO2dCQUNsQixRQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDaEc7WUFFRCxJQUFJLGlCQUFpQixFQUFFO2dCQUNwQixRQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNwRztZQUVBLFFBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUMsSUFBSSxFQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JILElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLGNBQWMsRUFBRyxRQUFzQixDQUFDLENBQUM7WUFDeEUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsYUFBYSxFQUFHLFFBQXNCLENBQUMsQ0FBQztZQUV0RSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDeEYsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQztJQUVILHNCQUFDO0FBQUQsQ0FBQyxBQTlIRCxDQUFxQyxVQUFVLEdBOEg5QyJ9

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRTVCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFdkMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVyQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFekMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDIn0=

var QuiltController = (function (_super) {
    __extends(QuiltController, _super);
    function QuiltController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        _this.debug = false;
        if (_this.debug) {
            console.info('[QuiltController] constructor ', { id: id, parentView: parentView });
        }
        return _this;
    }
    QuiltController.prototype.create = function () {
        var _this = this;
        _super.prototype.create.call(this);
        if (this.debug) {
            console.info('[QuiltController] create ', { getData: this._model.getData() });
        }
        var quiltAttributes = this.model().getData();
        quiltAttributes.forEach(function (quiltAttr) {
            if (quiltAttr instanceof RecordMap && quiltAttr.tag === 'block') {
                var buildAttr_1 = RecordMap.empty();
                quiltAttr.forEach(function (attr, i) {
                    buildAttr_1.push(attr);
                    if (i === 0) {
                        quiltAttributes.forEach(function (parentAttr) {
                            if (parentAttr instanceof Slot) {
                                buildAttr_1.push(parentAttr);
                            }
                        });
                    }
                });
                var newBlock = Utils.cast(_this.view().node.node, buildAttr_1, _this.stack(), _this.eventManager());
                if (newBlock) {
                    _this._childComponents.push(newBlock);
                    _this.view().addBlock(newBlock.controller());
                }
            }
        });
        this.setViewAttributes(quiltAttributes);
    };
    QuiltController.prototype.start = function () {
        _super.prototype.start.call(this);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this._childComponents.forEach(function (child) {
                child.start();
            });
        }
    };
    QuiltController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        this._childComponents.forEach(function (child) {
            child.render(frameNumber);
        });
    };
    QuiltController.prototype.setViewAttributes = function (newState) {
        var view = this.view();
        var trans = this.stack().get('transition').cast(Transition.Form);
        view.trans(trans);
    };
    QuiltController.prototype.onLinkData = function (linkData, eventUID) {
        _super.prototype.onLinkData.call(this, linkData, eventUID);
        var componentData = this._componentData.evaluate(linkData);
        var newState = componentData.evaluate(this._stack);
        if (this.debug) {
            console.info('[QuiltController] onLinkData ', { newState: newState });
        }
        this.setViewAttributes(newState);
    };
    return QuiltController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbHQtY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInF1aWx0LWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNoRSxPQUFPLEVBRUwsVUFBVSxFQUNWLFVBQVUsRUFDRyxLQUFLLEdBRW5CLE1BQU0sVUFBVSxDQUFDO0FBS2xCO0lBQXFDLDJDQUFVO0lBRzdDLHlCQUFZLEVBQVUsRUFBRSxhQUFvQixFQUFFLGtCQUErQixFQUFFLFVBQWdCLEVBQUUsS0FBZ0IsRUFBRSxZQUE2QjtRQUFoSixZQUNFLGtCQUFNLEVBQUUsRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsU0FHOUU7UUFGQyxLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFHLEtBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEVBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztTQUFFOztJQUN0RyxDQUFDO0lBRUQsZ0NBQU0sR0FBTjtRQUFBLGlCQWlDQztRQWhDQyxpQkFBTSxNQUFNLFdBQUUsQ0FBQztRQUNmLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsRUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBQyxDQUFFLENBQUM7U0FBRTtRQUNoRyxJQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFHL0MsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFNBQVM7WUFHaEMsSUFBRyxTQUFTLFlBQVksU0FBUyxJQUFJLFNBQVMs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

var QuiltView = (function (_super) {
    __extends(QuiltView, _super);
    function QuiltView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._blockMargin = NaN;
        _this._blockWidth = NaN;
        _this._blockHeight = NaN;
        _this._colCount = NaN;
        _this._blocks = [];
        _this.debug = false;
        _this._blockMarginScale = Scale.linear(320, 540, 8, 16);
        _this._blockAspectRatio = Math.sqrt(1.33);
        _this._minBlockWidth = 480;
        _this._maxColCount = 4;
        _this._reflowTransition = new Transition(250, Ease.quadOut);
        _this._transitionEnd = 0;
        return _this;
    }
    QuiltView.prototype.create = function () {
        _super.prototype.create.call(this);
        this._quiltElement = HtmlView.create('div')
            .className('quilt')
            .elemId(this._id || '')
            .position('relative')
            .flexGrow(1);
        this._parentView.node.appendChild(this._quiltElement.node);
    };
    QuiltView.prototype.start = function () {
        if (this.debug) {
            console.info('[QuiltView] start ', { this: this });
        }
        if (!this._hasStarted) {
            this._hasStarted = true;
        }
    };
    QuiltView.prototype.stop = function () {
        if (this.debug) {
            console.info('[QuiltView] start ', { this: this });
        }
        _super.prototype.stop.call(this);
    };
    Object.defineProperty(QuiltView.prototype, "node", {
        get: function () {
            return this._quiltElement;
        },
        enumerable: true,
        configurable: true
    });
    QuiltView.prototype.addBlock = function (controller) {
        if (this._blocks.indexOf(controller) < 0) {
            this._blocks.push(controller);
        }
    };
    QuiltView.prototype.removeBlock = function (controller) {
        var i = this._blocks.indexOf(controller);
        if (i >= 0) {
            this._blocks.splice(i, 1);
        }
    };
    QuiltView.prototype.trans = function (value) {
        if (value === undefined) {
            return this._trans;
        }
        this._trans = (value) ? value : undefined;
        return this;
    };
    QuiltView.prototype.blockMarginScale = function (blockMarginScale) {
        if (blockMarginScale === undefined) {
            return this._blockMarginScale;
        }
        if (this._blockMarginScale !== blockMarginScale) {
            this._blockMarginScale = blockMarginScale;
        }
        return this;
    };
    QuiltView.prototype.blockAspectRatio = function (blockAspectRatio) {
        if (blockAspectRatio === undefined) {
            return this._blockAspectRatio;
        }
        if (this._blockAspectRatio !== blockAspectRatio) {
            this._blockAspectRatio = blockAspectRatio;
        }
        return this;
    };
    QuiltView.prototype.minBlockWidth = function (minBlockWidth) {
        if (minBlockWidth === undefined) {
            return this._minBlockWidth;
        }
        if (this._minBlockWidth !== minBlockWidth) {
            this._minBlockWidth = minBlockWidth;
        }
        return this;
    };
    QuiltView.prototype.maxColCount = function (maxColCount) {
        if (maxColCount === undefined) {
            return this._maxColCount;
        }
        if (this._maxColCount !== maxColCount) {
            this._maxColCount = maxColCount;
        }
        return this;
    };
    QuiltView.prototype.render = function (frameNumber) {
        this.reflow();
    };
    QuiltView.prototype.reflow = function () {
        var width = this._quiltElement.node.offsetWidth;
        var blockMargin = Math.round(this._blockMarginScale.clampScale(width));
        var blockWidth = NaN;
        var colCount = 1;
        do {
            var prevBlockWidth = blockWidth;
            blockWidth = Math.round((width - blockMargin * (colCount + 1)) / colCount);
            if (blockWidth >= this._minBlockWidth && colCount < this._maxColCount) {
                colCount += 1;
            }
            else {
                if (colCount > 1) {
                    blockWidth = prevBlockWidth;
                    colCount -= 1;
                }
                break;
            }
        } while (true);
        if (isFinite(blockMargin) && isFinite(blockWidth)) {
            var blockHeight = Math.round(blockWidth * this._blockAspectRatio);
            var trans = void 0;
            if (this._reflowTransition) {
                var t = Date.now();
                if (this._colCount !== colCount) {
                    this._transitionEnd = t + (this._reflowTransition.duration() || 0);
                }
                if (t < this._transitionEnd) {
                    trans = this._reflowTransition.duration(this._transitionEnd - t);
                }
            }
            this._blockMargin = blockMargin;
            this._blockWidth = blockWidth;
            this._blockHeight = blockHeight;
            this._colCount = colCount;
            var left = blockMargin;
            var top_1 = blockMargin;
            var i = 0;
            while (i < this._blocks.length) {
                var block = this._blocks[i].view();
                block.node.left(left, trans)
                    .top(top_1, trans)
                    .width(blockWidth, trans)
                    .height(blockHeight, trans);
                block.blockMargin(blockMargin, trans)
                    .blockWidth(blockWidth)
                    .blockHeight(blockHeight)
                    .trans(trans || null);
                i += 1;
                if (i % colCount !== 0) {
                    left += blockWidth + blockMargin;
                }
                else {
                    left = blockMargin;
                    top_1 += blockHeight + blockMargin;
                }
            }
            if (i % colCount !== 0) {
                top_1 += blockHeight + blockMargin;
            }
            this._quiltElement.height(top_1);
        }
    };
    return QuiltView;
}(View));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbHQtdmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInF1aWx0LXZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFFTCxJQUFJLEVBQ0osUUFBUSxFQUFFLElBQUksRUFDZCxLQUFLLEVBQ0wsVUFBVSxHQUNYLE1BQU0sVUFBVSxDQUFDO0FBR2xCO0lBQStCLHFDQUFJO0lBaUJqQyxtQkFBWSxFQUFzQixFQUFFLFVBQWdCO1FBQXBELFlBQ0Usa0JBQU0sRUFBRSxFQUFFLFVBQVUsQ0FBQyxTQVN0QjtRQXBCUyxrQkFBWSxHQUFXLEdBQUcsQ0FBQztRQUMzQixpQkFBVyxHQUFXLEdBQUcsQ0FBQztRQUMxQixrQkFBWSxHQUFXLEdBQUcsQ0FBQztRQUMzQixlQUFTLEdBQVcsR0FBRyxDQUFDO1FBR3pCLGFBQU8sR0FBc0IsRUFBRSxDQUFDO1FBTXZDLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLEtBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDO1FBQzFCLEtBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLEtBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNELEtBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDOztJQUMxQixDQUFDO0lBRUQsMEJBQU0sR0FBTjtRQUNFLGlCQUFNLE1BQU0sV0FBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUN4QyxTQUFTLENBQUMsT0FBTyxDQUFDO2FBQ2xCLE1BQU0sQ0FBRSxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQzthQUN2QixRQUFRLENBQUMsVUFBVSxDQUFDO2FBQ3BCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVkLElBQUksQ0FBQyxXQUF3QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUczRSxDQUFDO0lBRUQseUJBQUssR0FBTDtRQUNFLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUUsQ0FBQztTQUFFO1FBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVELHdCQUFJLEdBQUo7UUFDRSxJQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFFLENBQUM7U0FBRTtRQUNyRSxpQkFBTSxJQUFJLFdBQUUsQ0FBQztJQUNmLENBQUM7SUFFRCxzQkFBSSwyQkFBSTthQUFSO1lBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzVCLENBQUM7OztPQUFBO0lBRUQsNEJBQVEsR0FBUixVQUFTLFVBQTJCO1FBQ2xDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUVELCtCQUFXLEdBQVgsVUFBWSxVQUEyQjtRQUNyQyxJQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBSUQseUJBQUssR0FBTCxVQUFNLEtBQTBDO1FBQzlDLElBQUcsS0FBSyxLQUFNLFNBQVMsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUFFO1FBQ2hELElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDekMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBS0Qsb0NBQWdCLEdBQWhCLFVBQWlCLGdCQUFrRDtRQUNqRSxJQUFJLGdCQUFnQixLQUFLLFNBQVMsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO1NBQUU7UUFDdEUsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEtBQUssZ0JBQWdCLEVBQUU7WUFDL0MsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDO1NBRTNDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBSUQsb0NBQWdCLEdBQWhCLFVBQWlCLGdCQUF5QjtRQUN4QyxJQUFJLGdCQUFnQixLQUFLLFNBQVMsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO1NBQUU7UUFDdEUsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEtBQUssZ0JBQWdCLEVBQUU7WUFDL0MsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDO1NBRTNDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBSUQsaUNBQWEsR0FBYixVQUFjLGFBQXNCO1FBQ2xDLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztTQUFFO1FBQ2hFLElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxhQUFhLEVBQUU7WUFDekMsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7U0FFckM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFJRCwrQkFBVyxHQUFYLFVBQVksV0FBb0I7UUFDOUIsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQUU7UUFDNUQsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFdBQVcsRUFBRTtZQUNyQyxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztTQUVqQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDBCQUFNLEdBQU4sVUFBTyxXQUFtQjtRQUN4QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELDBCQUFNLEdBQU47UUFDRSxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDbEQsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFekUsSUFBSSxVQUFVLEdBQUcsR0FBRyxDQUFDO1FBQ3JCLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNqQixHQUFHO1lBQ0QsSUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDO1lBQ2xDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxHQUFHLFdBQVcsR0FBRyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1lBQzNFLElBQUksVUFBVSxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3JFLFFBQVEsSUFBSSxDQUFDLENBQUM7YUFDZjtpQkFBTTtnQkFDTCxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUU7b0JBQ2hCLFVBQVUsR0FBRyxjQUFjLENBQUM7b0JBQzVCLFFBQVEsSUFBSSxDQUFDLENBQUM7aUJBQ2Y7Z0JBQ0QsTUFBTTthQUNQO1NBQ0YsUUFBUSxJQUFJLEVBQUU7UUFFZixJQUFJLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDakQsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDcEUsSUFBSSxLQUFLLFNBQUEsQ0FBQztZQUNWLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO2dCQUMxQixJQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ3JCLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxRQUFRLEVBQUU7b0JBQy9CLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO2lCQUNwRTtnQkFDRCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFO29CQUMzQixLQUFLLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUNsRTthQUNGO1lBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7WUFDaEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7WUFDOUIsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7WUFDaEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7WUFFMUIsSUFBSSxJQUFJLEdBQUcsV0FBVyxDQUFDO1lBQ3ZCLElBQUksS0FBRyxHQUFHLFdBQVcsQ0FBQztZQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDVixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtnQkFDOUIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQWUsQ0FBQztnQkFDbEQsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztxQkFDekIsR0FBRyxDQUFDLEtBQUcsRUFBRSxLQUFLLENBQUM7cUJBQ2YsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUM7cUJBQ3hCLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQzlCLEtBQUssQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQztxQkFDbEMsVUFBVSxDQUFDLFVBQVUsQ0FBQztxQkFDdEIsV0FBVyxDQUFDLFdBQVcsQ0FBQztxQkFDeEIsS0FBSyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQztnQkFFeEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDUCxJQUFJLENBQUMsR0FBRyxRQUFRLEtBQUssQ0FBQyxFQUFFO29CQUN0QixJQUFJLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztpQkFDbEM7cUJBQU07b0JBQ0wsSUFBSSxHQUFHLFdBQVcsQ0FBQztvQkFDbkIsS0FBRyxJQUFJLFdBQVcsR0FBRyxXQUFXLENBQUM7aUJBQ2xDO2FBQ0Y7WUFFRCxJQUFJLENBQUMsR0FBRyxRQUFRLEtBQUssQ0FBQyxFQUFFO2dCQUN0QixLQUFHLElBQUksV0FBVyxHQUFHLFdBQVcsQ0FBQzthQUNsQztZQUVELElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUcsQ0FBQyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQztJQUVILGdCQUFDO0FBQUQsQ0FBQyxBQXJNRCxDQUErQixJQUFJLEdBcU1sQyJ9

var QuiltModel = (function (_super) {
    __extends(QuiltModel, _super);
    function QuiltModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QuiltModel.Params = HtmlModel.Params.concat([
        new ModelParam('blockMarginScale', ContinuousScale.Form),
        new ModelParam('blockAspectRatio', Value),
        new ModelParam('minBlockWidth', Value),
        new ModelParam('maxColCount', Value),
        new ModelParam('reflowTransition', Transition.Form),
    ]);
    return QuiltModel;
}(HtmlModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbHQtbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJxdWlsdC1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQ0wsZUFBZSxFQUNmLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxHQUNYLE1BQU0sVUFBVSxDQUFDO0FBRWxCO0lBQWdDLHNDQUFTO0lBQXpDOztJQVNBLENBQUM7SUFQaUIsaUJBQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUMvQyxJQUFJLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxlQUFlLENBQUMsSUFBSSxDQUFFO1FBQ3pELElBQUksVUFBVSxDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBRTtRQUMxQyxJQUFJLFVBQVUsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFFO1FBQ3ZDLElBQUksVUFBVSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUU7UUFDckMsSUFBSSxVQUFVLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBRTtLQUNyRCxDQUFDLENBQUM7SUFDTCxpQkFBQztDQUFBLEFBVEQsQ0FBZ0MsU0FBUyxHQVN4QztTQVRZLFVBQVUifQ==

var Quilt = (function (_super) {
    __extends(Quilt, _super);
    function Quilt() {
        var _this = _super.call(this) || this;
        _this.debug = false;
        return _this;
    }
    Object.defineProperty(Quilt.prototype, "tag", {
        get: function () {
            return 'quilt';
        },
        enumerable: true,
        configurable: true
    });
    Quilt.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Quilt needs a parent node or view', this.parentView());
        }
        if (this.debug) {
            console.info('[Quilt] create ', { id: this.id(), rootElement: this._rootElement, view: this.view(), value: value });
        }
        this.controller(new QuiltController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new QuiltModel(eventManager));
        this.view(new QuiltView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Quilt.prototype.start = function () {
        if (this.debug) {
            console.info('[Quilt] start');
        }
        _super.prototype.start.call(this);
        if (this.debug) {
            console.info('[Quilt] started');
        }
    };
    return Quilt;
}(UiComponent));
UiComponent.Global.addComponent('quilt', Quilt);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJxdWlsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFtQixXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQztJQUEyQixpQ0FBVztJQU9sQztRQUFBLFlBQ0ksaUJBQU8sU0FFVjtRQURHLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDOztJQUN2QixDQUFDO0lBUEQsc0JBQUksc0JBQUc7YUFBUDtZQUNJLE9BQU8sT0FBTyxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBT0Qsc0JBQU0sR0FBTixVQUFPLFdBQWtDLEVBQUUsS0FBWSxFQUFFLEtBQWdCLEVBQUUsWUFBNkIsRUFBRSxFQUFXO1FBQ2pILGlCQUFNLE1BQU0sWUFBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFO1FBQ0QsSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUUsQ0FBQztTQUFFO1FBR3hJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRzVHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUd6QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFjLENBQUMsQ0FBQyxDQUFDO1FBR25FLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUzQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQscUJBQUssR0FBTDtRQUNJLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FBRTtRQUNqRCxpQkFBTSxLQUFLLFdBQUUsQ0FBQztRQUNkLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUFFO0lBQ3ZELENBQUM7SUFFTCxZQUFDO0FBQUQsQ0FBQyxBQXhDRCxDQUEyQixXQUFXLEdBd0NyQzs7QUFFRCxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMifQ==

var BlockController = (function (_super) {
    __extends(BlockController, _super);
    function BlockController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        _this.debug = false;
        _this.debug = false;
        if (_this.debug) {
            console.info('[BlockController] constructor', { id: id, parentView: parentView });
        }
        return _this;
    }
    BlockController.prototype.create = function () {
        var _this = this;
        _super.prototype.create.call(this);
        if (this.debug) {
            console.info('[BlockController] create ', { getData: this._model.getData() });
        }
        var blockAttributes = this.model().getData();
        blockAttributes.forEach(function (blockAttr) {
            if (blockAttr instanceof RecordMap && blockAttr.tag === 'card') {
                var buildAttr_1 = RecordMap.empty();
                blockAttr.forEach(function (attr, i) {
                    buildAttr_1.push(attr);
                    if (i === 0) {
                        blockAttributes.forEach(function (parentAttr) {
                            if (parentAttr instanceof Slot) {
                                buildAttr_1.push(parentAttr);
                            }
                        });
                    }
                });
                var newCard = Utils.cast(_this.view().node.node, buildAttr_1, _this.stack(), _this.eventManager());
                if (newCard) {
                    _this._childComponents.push(newCard);
                    _this.view().addBlock(newCard.controller());
                }
            }
        });
        this.setViewAttributes(blockAttributes);
    };
    BlockController.prototype.start = function () {
        _super.prototype.start.call(this);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this._childComponents.forEach(function (child) {
                child.start();
            });
        }
    };
    BlockController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        this._childComponents.forEach(function (child) {
            child.render(frameNumber);
        });
    };
    BlockController.prototype.setViewAttributes = function (newState) {
        var view = this.view();
        var trans = this.stack().get('transition').cast(Transition.Form);
        view.trans(trans);
    };
    BlockController.prototype.onLinkData = function (linkData, eventUID) {
        _super.prototype.onLinkData.call(this, linkData, eventUID);
        var componentData = this._componentData.evaluate(linkData);
        var newState = componentData.evaluate(this._stack);
        if (this.debug) {
            console.info('[BlockController] onLinkData ', { newState: newState });
        }
        this.setViewAttributes(newState);
    };
    return BlockController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJsb2NrLWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNoRSxPQUFPLEVBRUwsVUFBVSxFQUNWLFVBQVUsRUFDRyxLQUFLLEdBRW5CLE1BQU0sVUFBVSxDQUFDO0FBSWxCO0lBQXFDLDJDQUFVO0lBRzdDLHlCQUFZLEVBQVUsRUFBRSxhQUFvQixFQUFFLGtCQUErQixFQUFFLFVBQWdCLEVBQUUsS0FBZ0IsRUFBRSxZQUE2QjtRQUFoSixZQUNFLGtCQUFNLEVBQUUsRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsU0FHOUU7UUFOTSxXQUFLLEdBQVksS0FBSyxDQUFDO1FBSTVCLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUcsS0FBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsK0JBQStCLEVBQUUsRUFBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUMsQ0FBRSxDQUFDO1NBQUU7O0lBQ3RHLENBQUM7SUFFRCxnQ0FBTSxHQUFOO1FBQUEsaUJBaUNDO1FBaENDLGlCQUFNLE1BQU0sV0FBRSxDQUFDO1FBQ2YsSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFDLENBQUUsQ0FBQztTQUFFO1FBQ2hHLElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUcvQyxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQUMsU0FBUztZQUdoQyxJQUFH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

var BlockView = (function (_super) {
    __extends(BlockView, _super);
    function BlockView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._cards = [];
        _this.debug = false;
        _this._blockMargin = 0;
        _this._blockWidth = 0;
        _this._blockHeight = 0;
        return _this;
    }
    BlockView.prototype.create = function () {
        _super.prototype.create.call(this);
        this._blockElement = HtmlView.create('div')
            .className('block')
            .position('absolute');
        this._parentView.node.appendChild(this._blockElement.node);
    };
    BlockView.prototype.start = function () {
        if (this.debug) {
            console.info('[BlockView] start ', { this: this });
        }
        if (!this._hasStarted) {
            this._hasStarted = true;
        }
    };
    BlockView.prototype.stop = function () {
        if (this.debug) {
            console.info('[BlockView] start ', { this: this });
        }
        _super.prototype.stop.call(this);
    };
    Object.defineProperty(BlockView.prototype, "node", {
        get: function () {
            return this._blockElement;
        },
        enumerable: true,
        configurable: true
    });
    BlockView.prototype.addBlock = function (controller) {
        if (this._cards.indexOf(controller) < 0) {
            this._cards.push(controller);
        }
    };
    BlockView.prototype.removeBlock = function (controller) {
        var i = this._cards.indexOf(controller);
        if (i >= 0) {
            this._cards.splice(i, 1);
        }
    };
    BlockView.prototype.trans = function (value) {
        if (value === undefined) {
            return this._trans;
        }
        this._trans = (value) ? value : undefined;
        return this;
    };
    BlockView.prototype.blockMargin = function (blockMargin, trans) {
        if (blockMargin === undefined) {
            return this._blockMargin;
        }
        this._blockMargin = blockMargin;
        return this;
    };
    BlockView.prototype.blockWidth = function (blockWidth, trans) {
        if (blockWidth === undefined) {
            return this._blockWidth;
        }
        this._blockWidth = blockWidth;
        return this;
    };
    BlockView.prototype.blockHeight = function (blockHeight, trans) {
        if (blockHeight === undefined) {
            return this._blockHeight;
        }
        this._blockHeight = blockHeight;
        return this;
    };
    BlockView.prototype.render = function (frameNumber) {
        this.reflow();
    };
    BlockView.prototype.reflow = function () {
        var topCard;
        var middleCard;
        var bottomCard;
        var topLeftCard;
        var topRightCard;
        var middleLeftCard;
        var middleRightCard;
        var bottomLeftCard;
        var bottomRightCard;
        var leftoverPlacement = this._cards.filter(function (cardController, i) {
            var card = cardController.view();
            var placement = card.placement();
            if (!placement) {
                return true;
            }
            if (!topCard && !topLeftCard && !topRightCard && placement === 'top') {
                topCard = card;
                return false;
            }
            else if (!middleCard && !middleLeftCard && !middleRightCard && placement === 'middle') {
                middleCard = card;
                return false;
            }
            else if (!bottomCard && !bottomLeftCard && !bottomRightCard && placement === 'bottom') {
                bottomCard = card;
                return false;
            }
            else if (!topLeftCard && !topCard && (!middleLeftCard && !middleRightCard || !bottomLeftCard && bottomRightCard) && placement === 'top-left') {
                topLeftCard = card;
                return false;
            }
            else if (!topRightCard && !topCard && (!middleLeftCard && !middleRightCard || !bottomLeftCard && bottomRightCard) && placement === 'top-right') {
                topRightCard = card;
                return false;
            }
            else if (!middleLeftCard && !middleCard && (!topLeftCard && !topRightCard || !bottomLeftCard && !bottomRightCard) && placement === 'middle-left') {
                middleLeftCard = card;
                return false;
            }
            else if (!middleRightCard && !middleCard && (!topLeftCard && !topRightCard || !bottomLeftCard && !bottomRightCard) && placement === 'middle-right') {
                middleRightCard = card;
                return false;
            }
            else if (!bottomLeftCard && !bottomCard && (!middleLeftCard && !middleRightCard || !topLeftCard && !topRightCard) && placement === 'bottom-left') {
                bottomLeftCard = card;
                return false;
            }
            else if (!bottomRightCard && !bottomCard && (!middleLeftCard && !middleRightCard || !topLeftCard && !topRightCard) && placement === 'bottom-right') {
                bottomRightCard = card;
                return false;
            }
            return true;
        });
        var leftoverPosition = leftoverPlacement.filter(function (cardController, i) {
            var card = cardController.view();
            var proportion = card.proportion();
            if (proportion !== 'square') {
                return true;
            }
            if (!topLeftCard && topRightCard) {
                topLeftCard = card;
                return false;
            }
            else if (!topRightCard && topLeftCard) {
                topRightCard = card;
                return false;
            }
            else if (!middleLeftCard && middleRightCard) {
                middleLeftCard = card;
                return false;
            }
            else if (!middleRightCard && middleLeftCard) {
                middleRightCard = card;
                return false;
            }
            else if (!bottomLeftCard && bottomRightCard) {
                bottomLeftCard = card;
                return false;
            }
            else if (!bottomRightCard && bottomLeftCard) {
                bottomRightCard = card;
                return false;
            }
            else if (!topLeftCard && !topCard) {
                topLeftCard = card;
                return false;
            }
            else if (!bottomLeftCard && !bottomCard) {
                bottomLeftCard = card;
                return false;
            }
            else if (!middleLeftCard && !middleCard) {
                middleLeftCard = card;
                return false;
            }
            return true;
        });
        while (leftoverPosition.length) {
            var card = leftoverPosition.shift();
            if (!topCard && !topLeftCard && !topRightCard) {
                topCard = card.view();
            }
            else if (!bottomCard && !bottomLeftCard && !bottomRightCard) {
                bottomCard = card.view();
            }
            else if (!middleCard && !middleLeftCard && !middleRightCard) {
                middleCard = card.view();
            }
        }
        if ((topLeftCard || topRightCard) && (middleLeftCard || middleRightCard)) {
            this.layout221(topLeftCard, topRightCard, middleLeftCard, middleRightCard, bottomCard);
        }
        else if ((topLeftCard || topRightCard) && (bottomLeftCard || bottomRightCard)) {
            this.layout212(topLeftCard, topRightCard, middleCard, bottomLeftCard, bottomRightCard);
        }
        else if ((middleLeftCard || middleRightCard) && (bottomLeftCard || bottomRightCard)) {
            this.layout122(topCard, middleLeftCard, middleRightCard, bottomLeftCard, bottomRightCard);
        }
        else if ((topLeftCard || topRightCard) && middleCard && bottomCard) {
            this.layout211(topLeftCard, topRightCard, middleCard, bottomCard);
        }
        else if (topCard && (middleLeftCard || middleRightCard) && bottomCard) {
            this.layout121(topCard, middleLeftCard, middleRightCard, bottomCard);
        }
        else if (topCard && middleCard && (bottomLeftCard || bottomRightCard)) {
            this.layout112(topCard, middleCard, bottomLeftCard, bottomRightCard);
        }
        else if (topLeftCard || topRightCard) {
            this.layout21(topLeftCard, topRightCard, bottomCard || middleCard);
        }
        else if (bottomLeftCard || bottomRightCard) {
            this.layout12(topCard || middleCard, bottomLeftCard, bottomRightCard);
        }
        else if (middleLeftCard || middleRightCard) {
            this.layout121(topCard, middleLeftCard, middleRightCard, bottomCard);
        }
        else if (topCard && middleCard && bottomCard) {
            this.layout111(topCard, middleCard, bottomCard);
        }
        else if (topCard && (middleCard || bottomCard) || bottomCard) {
            this.layout11(topCard, middleCard || bottomCard);
        }
        else if (middleCard && bottomCard) {
            this.layout11(middleCard, bottomCard);
        }
        else if (topCard || middleCard || bottomCard) {
            this.layout1(topCard || middleCard || bottomCard);
        }
    };
    BlockView.prototype.layout1 = function (card) {
        if (card) {
            card.node.left(0)
                .top(0)
                .width(this._blockWidth, this._trans)
                .height(this._blockHeight, this._trans);
            card.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(this._blockHeight)
                .trans(this._trans);
        }
    };
    BlockView.prototype.layout11 = function (topCard, bottomCard) {
        var cardHeight = Math.round((this._blockHeight - this._blockMargin) / 2);
        if (topCard) {
            topCard.node.position('absolute')
                .left(0, this._trans)
                .top(0, this._trans)
                .width(this._blockWidth, this._trans)
                .height(cardHeight, this._trans);
            topCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(cardHeight)
                .trans(this._trans);
        }
        if (bottomCard) {
            bottomCard.node.left(0, this._trans)
                .top(this._blockHeight - cardHeight, this._trans)
                .width(this._blockWidth, this._trans)
                .height(cardHeight, this._trans);
            bottomCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(cardHeight)
                .trans(this._trans);
        }
    };
    BlockView.prototype.layout111 = function (topCard, middleCard, bottomCard) {
        var cardHeight = Math.round((this._blockHeight - 2 * this._blockMargin) / 3);
        if (topCard) {
            topCard.node.left(0, this._trans)
                .top(0, this._trans)
                .width(this._blockWidth, this._trans)
                .height(cardHeight, this._trans);
            topCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(cardHeight)
                .trans(this._trans);
        }
        if (middleCard) {
            middleCard.node.left(0, this._trans)
                .top(cardHeight + this._blockMargin, this._trans)
                .width(this._blockWidth, this._trans)
                .height(cardHeight, this._trans);
            middleCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(cardHeight)
                .trans(this._trans);
        }
        if (bottomCard) {
            bottomCard.node.left(0, this._trans)
                .top(this._blockHeight - cardHeight, this._trans)
                .width(this._blockWidth, this._trans)
                .height(cardHeight, this._trans);
            bottomCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(cardHeight)
                .trans(this._trans);
        }
    };
    BlockView.prototype.layout12 = function (topCard, bottomLeftCard, bottomRightCard) {
        var lowerCardSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        if (topCard) {
            topCard.node.left(0, this._trans)
                .top(0, this._trans)
                .width(this._blockWidth, this._trans)
                .height(this._blockHeight - lowerCardSize - this._blockMargin, this._trans);
            topCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(this._blockHeight - lowerCardSize - this._blockMargin)
                .trans(this._trans);
        }
        if (bottomLeftCard) {
            bottomLeftCard.node.left(0, this._trans)
                .top(this._blockHeight - lowerCardSize, this._trans)
                .width(lowerCardSize, this._trans)
                .height(lowerCardSize, this._trans);
            bottomLeftCard.cardMargin(this._blockMargin)
                .cardWidth(lowerCardSize)
                .cardHeight(lowerCardSize)
                .trans(this._trans);
        }
        if (bottomRightCard) {
            bottomRightCard.node.left(this._blockWidth - lowerCardSize, this._trans)
                .top(this._blockHeight - lowerCardSize, this._trans)
                .width(lowerCardSize, this._trans)
                .height(lowerCardSize, this._trans);
            bottomRightCard.cardMargin(this._blockMargin)
                .cardWidth(lowerCardSize)
                .cardHeight(lowerCardSize)
                .trans(this._trans);
        }
    };
    BlockView.prototype.layout21 = function (topLeftCard, topRightCard, bottomCard) {
        var upperPieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        if (topLeftCard) {
            topLeftCard.node.left(0, this._trans)
                .top(0, this._trans)
                .width(upperPieceSize, this._trans)
                .height(upperPieceSize, this._trans);
            topLeftCard.cardMargin(this._blockMargin)
                .cardWidth(upperPieceSize)
                .cardHeight(upperPieceSize)
                .trans(this._trans);
        }
        if (topRightCard) {
            topRightCard.node.left(this._blockWidth - upperPieceSize, this._trans)
                .top(0, this._trans)
                .width(upperPieceSize, this._trans)
                .height(upperPieceSize, this._trans);
            topRightCard.cardMargin(this._blockMargin)
                .cardWidth(upperPieceSize)
                .cardHeight(upperPieceSize)
                .trans(this._trans);
        }
        if (bottomCard) {
            bottomCard.node.left(0, this._trans)
                .top(upperPieceSize + this._blockMargin, this._trans)
                .width(this._blockWidth, this._trans)
                .height(this._blockHeight - (upperPieceSize + this._blockMargin), this._trans);
            bottomCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(this._blockHeight - (upperPieceSize + this._blockMargin))
                .trans(this._trans);
        }
    };
    BlockView.prototype.layout112 = function (topCard, middleCard, bottomLeftCard, bottomRightCard) {
        var lowerCardSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var upperCardHeight = Math.round((this._blockHeight - lowerCardSize - 2 * this._blockMargin) / 2);
        if (topCard) {
            topCard.node.left(0, this._trans)
                .top(0, this._trans)
                .width(this._blockWidth, this._trans)
                .height(upperCardHeight, this._trans);
            topCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(upperCardHeight)
                .trans(this._trans);
        }
        if (middleCard) {
            middleCard.node.left(0, this._trans)
                .top(upperCardHeight + this._blockMargin, this._trans)
                .width(this._blockWidth, this._trans)
                .height(upperCardHeight, this._trans);
            middleCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(upperCardHeight)
                .trans(this._trans);
        }
        if (bottomLeftCard) {
            bottomLeftCard.node.left(0, this._trans)
                .top(this._blockHeight - lowerCardSize, this._trans)
                .width(lowerCardSize, this._trans)
                .height(lowerCardSize, this._trans);
            bottomLeftCard.cardMargin(this._blockMargin)
                .cardWidth(lowerCardSize)
                .cardHeight(lowerCardSize)
                .trans(this._trans);
        }
        if (bottomRightCard) {
            bottomRightCard.node.left(this._blockWidth - lowerCardSize, this._trans)
                .top(this._blockHeight - lowerCardSize, this._trans)
                .width(lowerCardSize, this._trans)
                .height(lowerCardSize, this._trans);
            bottomRightCard.cardMargin(this._blockMargin)
                .cardWidth(lowerCardSize)
                .cardHeight(lowerCardSize)
                .trans(this._trans);
        }
    };
    BlockView.prototype.layout121 = function (topCard, middleLeftCard, middleRightCard, bottomCard) {
        var middleCardSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var outercardHeight = Math.round((this._blockHeight - middleCardSize - 2 * this._blockMargin) / 2);
        if (topCard) {
            topCard.node.left(0, this._trans)
                .top(0, this._trans)
                .width(this._blockWidth, this._trans)
                .height(outercardHeight, this._trans);
            topCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(outercardHeight)
                .trans(this._trans);
        }
        if (middleLeftCard) {
            middleLeftCard.node.left(0, this._trans)
                .top(outercardHeight + this._blockMargin, this._trans)
                .width(middleCardSize, this._trans)
                .height(middleCardSize, this._trans);
            middleLeftCard.cardMargin(this._blockMargin)
                .cardWidth(middleCardSize)
                .cardHeight(middleCardSize)
                .trans(this._trans);
        }
        if (middleRightCard) {
            middleRightCard.node.left(this._blockWidth - middleCardSize, this._trans)
                .top(outercardHeight + this._blockMargin, this._trans)
                .width(middleCardSize, this._trans)
                .height(middleCardSize, this._trans);
            middleRightCard.cardMargin(this._blockMargin)
                .cardWidth(middleCardSize)
                .cardHeight(middleCardSize)
                .trans(this._trans);
        }
        if (bottomCard) {
            bottomCard.node.left(0, this._trans)
                .top(this._blockHeight - outercardHeight, this._trans)
                .width(this._blockWidth, this._trans)
                .height(outercardHeight, this._trans);
            bottomCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(outercardHeight)
                .trans(this._trans);
        }
    };
    BlockView.prototype.layout211 = function (topLeftCard, topRightCard, middleCard, bottomCard) {
        var upperPieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var lowerCardHeight = Math.round((this._blockHeight - upperPieceSize - 2 * this._blockMargin) / 2);
        if (topLeftCard) {
            topLeftCard.node.left(0, this._trans)
                .top(0, this._trans)
                .width(upperPieceSize, this._trans)
                .height(upperPieceSize, this._trans);
            topLeftCard.cardMargin(this._blockMargin)
                .cardWidth(upperPieceSize)
                .cardHeight(upperPieceSize)
                .trans(this._trans);
        }
        if (topRightCard) {
            topRightCard.node.left(this._blockWidth - upperPieceSize, this._trans)
                .top(0, this._trans)
                .width(upperPieceSize, this._trans)
                .height(upperPieceSize, this._trans);
            topRightCard.cardMargin(this._blockMargin)
                .cardWidth(upperPieceSize)
                .cardHeight(upperPieceSize)
                .trans(this._trans);
        }
        if (middleCard) {
            middleCard.node.left(0, this._trans)
                .top(upperPieceSize + this._blockMargin, this._trans)
                .width(this._blockWidth, this._trans)
                .height(lowerCardHeight, this._trans);
            middleCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(lowerCardHeight)
                .trans(this._trans);
        }
        if (bottomCard) {
            bottomCard.node.left(0, this._trans)
                .top(this._blockHeight - lowerCardHeight, this._trans)
                .width(this._blockWidth, this._trans)
                .height(lowerCardHeight, this._trans);
            bottomCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(lowerCardHeight)
                .trans(this._trans);
        }
    };
    BlockView.prototype.layout122 = function (topCard, middleLeftCard, middleRightCard, bottomLeftCard, bottomRightCard) {
        var squarePieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var upperCardHeight = Math.round(this._blockHeight - 2 * squarePieceSize - 2 * this._blockMargin);
        if (topCard) {
            topCard.node.left(0, this._trans)
                .top(0, this._trans)
                .width(this._blockWidth, this._trans)
                .height(upperCardHeight, this._trans);
            topCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(upperCardHeight)
                .trans(this._trans);
        }
        if (middleLeftCard) {
            middleLeftCard.node.left(0, this._trans)
                .top(upperCardHeight + this._blockMargin, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            middleLeftCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
        if (middleRightCard) {
            middleRightCard.node.left(this._blockWidth - squarePieceSize, this._trans)
                .top(upperCardHeight + this._blockMargin, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            middleRightCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
        if (bottomLeftCard) {
            bottomLeftCard.node.left(0, this._trans)
                .top(this._blockHeight - squarePieceSize, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            bottomLeftCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
        if (bottomRightCard) {
            bottomRightCard.node.left(this._blockWidth - squarePieceSize, this._trans)
                .top(this._blockHeight - squarePieceSize, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            bottomRightCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
    };
    BlockView.prototype.layout212 = function (topLeftCard, topRightCard, middleCard, bottomLeftCard, bottomRightCard) {
        var squarePieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var middlecardHeight = Math.round(this._blockHeight - 2 * squarePieceSize - 2 * this._blockMargin);
        if (topLeftCard) {
            topLeftCard.node.left(0, this._trans)
                .top(0, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            topLeftCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
        if (topRightCard) {
            topRightCard.node.left(this._blockWidth - squarePieceSize, this._trans)
                .top(0, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            topRightCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
        if (middleCard) {
            middleCard.node.left(0, this._trans)
                .top(squarePieceSize + this._blockMargin, this._trans)
                .width(this._blockWidth, this._trans)
                .height(middlecardHeight, this._trans);
            middleCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(middlecardHeight)
                .trans(this._trans);
        }
        if (bottomLeftCard) {
            bottomLeftCard.node.left(0, this._trans)
                .top(this._blockHeight - squarePieceSize, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            bottomLeftCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
        if (bottomRightCard) {
            bottomRightCard.node.left(this._blockWidth - squarePieceSize, this._trans)
                .top(this._blockHeight - squarePieceSize, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            bottomRightCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
    };
    BlockView.prototype.layout221 = function (topLeftCard, topRightCard, middleLeftCard, middleRightCard, bottomCard) {
        var squarePieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var lowerCardHeight = Math.round(this._blockHeight - 2 * squarePieceSize - 2 * this._blockMargin);
        if (topLeftCard) {
            topLeftCard.node.left(0, this._trans)
                .top(0, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            topLeftCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
        if (topRightCard) {
            topRightCard.node.left(this._blockWidth - squarePieceSize, this._trans)
                .top(0, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            topRightCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
        if (middleLeftCard) {
            middleLeftCard.node.left(0, this._trans)
                .top(squarePieceSize + this._blockMargin, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            middleLeftCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
        if (middleRightCard) {
            middleRightCard.node.left(this._blockWidth - squarePieceSize, this._trans)
                .top(squarePieceSize + this._blockMargin, this._trans)
                .width(squarePieceSize, this._trans)
                .height(squarePieceSize, this._trans);
            middleRightCard.cardMargin(this._blockMargin)
                .cardWidth(squarePieceSize)
                .cardHeight(squarePieceSize)
                .trans(this._trans);
        }
        if (bottomCard) {
            bottomCard.node.left(0, this._trans)
                .top(this._blockHeight - lowerCardHeight, this._trans)
                .width(this._blockWidth, this._trans)
                .height(lowerCardHeight, this._trans);
            bottomCard.cardMargin(this._blockMargin)
                .cardWidth(this._blockWidth)
                .cardHeight(lowerCardHeight)
                .trans(this._trans);
        }
    };
    return BlockView;
}(View));

//# sourceMappingURL=data:application/json;base64,

var BlockModel = (function (_super) {
    __extends(BlockModel, _super);
    function BlockModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BlockModel;
}(HtmlModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJibG9jay1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsR0FDVixNQUFNLFVBQVUsQ0FBQztBQUVsQjtJQUFnQyxzQ0FBUztJQUF6Qzs7SUFHQSxDQUFDO0lBQUQsaUJBQUM7QUFBRCxDQUFDLEFBSEQsQ0FBZ0MsU0FBUyxHQUd4QyJ9

var Block = (function (_super) {
    __extends(Block, _super);
    function Block() {
        var _this = _super.call(this) || this;
        _this.debug = false;
        _this.debug = false;
        return _this;
    }
    Object.defineProperty(Block.prototype, "tag", {
        get: function () {
            return 'block';
        },
        enumerable: true,
        configurable: true
    });
    Block.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Block needs a parent node or view', this.parentView());
        }
        if (this.debug) {
            console.info('[Block] create ', { id: this.id(), rootElement: this._rootElement, view: this.view(), value: value });
        }
        this.controller(new BlockController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new BlockModel(eventManager));
        this.view(new BlockView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Block.prototype.start = function () {
        if (this.debug) {
            console.info('[Block] start');
        }
        _super.prototype.start.call(this);
        if (this.debug) {
            console.info('[Block] started');
        }
    };
    return Block;
}(UiComponent));
UiComponent.Global.addComponent('block', Block);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJibG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFtQixXQUFXLEVBQVksTUFBTSxVQUFVLENBQUM7QUFDbEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQztJQUEyQixpQ0FBVztJQU9sQztRQUFBLFlBQ0ksaUJBQU8sU0FFVjtRQVRNLFdBQUssR0FBWSxLQUFLLENBQUM7UUFRMUIsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7O0lBQ3ZCLENBQUM7SUFQRCxzQkFBSSxzQkFBRzthQUFQO1lBQ0ksT0FBTyxPQUFPLENBQUM7UUFDbkIsQ0FBQzs7O09BQUE7SUFPRCxzQkFBTSxHQUFOLFVBQU8sV0FBa0MsRUFBRSxLQUFZLEVBQUUsS0FBZ0IsRUFBRSxZQUE2QixFQUFFLEVBQVc7UUFDakgsaUJBQU0sTUFBTSxZQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDekU7UUFDRCxJQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBRSxDQUFDO1NBQUU7UUFHdkksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFHNUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBR3pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQWMsQ0FBQyxDQUFDLENBQUM7UUFHbkUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRTNCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxxQkFBSyxHQUFMO1FBQ0ksSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUFFO1FBQ2pELGlCQUFNLEtBQUssV0FBRSxDQUFDO1FBQ2QsSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQUU7SUFDdkQsQ0FBQztJQUVMLFlBQUM7QUFBRCxDQUFDLEFBeENELENBQTJCLFdBQVcsR0F3Q3JDOztBQUVELFdBQVcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyJ9

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUMifQ==

var CardController = (function (_super) {
    __extends(CardController, _super);
    function CardController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        _this.debug = true;
        if (_this.debug) {
            console.info('[CardController] constructor ', { id: id, parentView: parentView });
        }
        return _this;
    }
    CardController.prototype.create = function () {
        var _this = this;
        _super.prototype.create.call(this);
        if (this.debug) {
            console.info('[CardController] create ', { getData: this._model.getData() });
        }
        var cardAttributes = this.model().getData();
        cardAttributes.forEach(function (cardAttr) {
            if (cardAttr instanceof Slot && cardAttr.key.value === 'body') {
                var bodyAttr = cardAttr.value.clone();
                var newCard = Utils.cast(_this.view().body.node, bodyAttr, _this.stack(), _this.eventManager());
                if (newCard) {
                    _this._childComponents.push(newCard);
                    _this.view().addBody(newCard.controller());
                }
            }
        });
        this.setViewAttributes(cardAttributes);
    };
    CardController.prototype.start = function () {
        _super.prototype.start.call(this);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this._childComponents.forEach(function (child) {
                child.start();
            });
        }
    };
    CardController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        this._childComponents.forEach(function (child) {
            child.render(frameNumber);
        });
    };
    CardController.prototype.setViewAttributes = function (newState) {
        var view = this.view();
        var trans = this.stack().get('transition').cast(Transition.Form);
        view.trans(trans);
        view.placement(newState.get('placement').stringValue());
        view.proportion(newState.get('proportion').stringValue());
        view.title(newState.get('title'));
        view.subtitle(newState.get('subtitle'));
        var skip = ['placement', 'proportion'];
        _super.prototype.setViewAttributes.call(this, newState, skip);
    };
    CardController.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
    };
    CardController.prototype.onLinkData = function (linkData, eventUID) {
        var _this = this;
        _super.prototype.onLinkData.call(this, linkData, eventUID);
        console.log('componentData: ', this._componentData.toString());
        var newData = RecordMap.empty();
        this._componentData.forEach(function (attr) {
            if (attr.value instanceof GetSelector) {
                newData.push(attr);
            }
        });
        console.log('newData: ', newData.toString());
        var newRecord = RecordMap.empty();
        this._componentData.forEach(function (attr) {
            if (attr.value instanceof GetSelector) {
                var linkInfo = _this.stack().get(attr.key);
                var currUid = _this.getLinkUID(linkInfo);
                if (currUid === eventUID) {
                    newRecord.push(new Slot(attr.key, linkData));
                }
                else {
                    var parsedValue = attr.value.then.evaluate(linkData);
                    newRecord.push(new Slot(attr.key, parsedValue.toValue()));
                }
            }
        });
        var newStack = this._localStack;
        console.log('stack: ', this._localStack.toString());
        console.log('newStack: ', newStack.toString());
        var newState = newData.evaluate(newStack);
        console.log('evaluate: ', newState.toString());
        this.setViewAttributes(newState);
        console.log('==================');
    };
    return CardController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2FyZC1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQW9CLFNBQVMsRUFBRSxJQUFJLEVBRXhDLFdBQVcsR0FDWixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBRUwsVUFBVSxFQUNWLFVBQVUsRUFFVixLQUFLLEdBR04sTUFBTSxVQUFVLENBQUM7QUFHbEI7SUFBb0MsMENBQVU7SUFJNUMsd0JBQVksRUFBVSxFQUFFLGFBQW9CLEVBQUUsa0JBQStCLEVBQUUsVUFBZ0IsRUFBRSxLQUFnQixFQUFFLFlBQTZCO1FBQWhKLFlBQ0Usa0JBQU0sRUFBRSxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxTQUc5RTtRQUZDLEtBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUcsS0FBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsK0JBQStCLEVBQUUsRUFBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDO1NBQUU7O0lBQ3JHLENBQUM7SUFFRCwrQkFBTSxHQUFOO1FBQUEsaUJBbUJDO1FBbEJDLGlCQUFNLE1BQU0sV0FBRSxDQUFDO1FBQ2YsSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFDLENBQUUsQ0FBQztTQUFFO1FBQy9GLElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUU5QyxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBUTtZQUM5QixJQUFHLFFBQVEsWUFBWSxJQUFJLElB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

var CardView = (function (_super) {
    __extends(CardView, _super);
    function CardView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._bodys = [];
        _this._proportion = 'any';
        _this._proportion = 'any';
        _this._cardMargin = 0;
        _this._cardWidth = 0;
        _this._cardHeight = 0;
        return _this;
    }
    CardView.prototype.create = function () {
        _super.prototype.create.call(this);
        this._cardElement = HtmlView.create('div')
            .className('card')
            .elemId(this._id || '')
            .display('flex')
            .flexDirection('column')
            .flexGrow(1)
            .borderRadius(8)
            .backgroundColor(Color.white())
            .position('absolute')
            .padding([4, 8, 4, 8]);
        this._header = HtmlView.create('div')
            .className('header')
            .display('none')
            .justifyContent('space-between')
            .alignItems('baseline')
            .flexShrink(0)
            .marginBottom(4);
        this._cardElement.append(this._header);
        this._title = HtmlView.create('span')
            .className('title');
        this._header.append(this._title);
        this._subtitle = HtmlView.create('span')
            .className('subtitle');
        this._header.append(this._subtitle);
        this._body = HtmlView.create('div')
            .className('body')
            .display('flex')
            .position('relative')
            .flexGrow(1);
        this._cardElement.append(this._body);
        this._parentView.node.appendChild(this._cardElement.node);
    };
    CardView.prototype.start = function () {
        if (this.debug) {
            console.info('[CardView] start ', { this: this });
        }
        if (!this._hasStarted) {
            this._hasStarted = true;
        }
    };
    CardView.prototype.stop = function () {
        if (this.debug) {
            console.info('[CardView] stop ', { this: this });
        }
        _super.prototype.stop.call(this);
    };
    Object.defineProperty(CardView.prototype, "node", {
        get: function () {
            return this._cardElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardView.prototype, "body", {
        get: function () {
            return this._body;
        },
        enumerable: true,
        configurable: true
    });
    CardView.prototype.addBody = function (controller) {
        if (this._bodys.indexOf(controller) < 0) {
            this._bodys.push(controller);
        }
    };
    CardView.prototype.removeBody = function (controller) {
        var i = this._bodys.indexOf(controller);
        if (i >= 0) {
            this._bodys.splice(i, 1);
        }
    };
    CardView.prototype.trans = function (value) {
        if (value === undefined) {
            return this._trans;
        }
        this._trans = (value) ? value : undefined;
        return this;
    };
    CardView.prototype.proportion = function (proportion) {
        if (proportion === undefined) {
            return this._proportion;
        }
        if (this._proportion !== proportion) {
            this._proportion = proportion;
        }
        return this;
    };
    CardView.prototype.placement = function (placement) {
        if (placement === undefined) {
            return this._placement;
        }
        if (this._placement !== placement) {
            this._placement = placement;
        }
        return this;
    };
    CardView.prototype.cardMargin = function (value) {
        if (value === undefined) {
            return this._cardMargin;
        }
        this._cardMargin = value;
        return this;
    };
    CardView.prototype.cardWidth = function (value) {
        if (value === undefined) {
            return this._cardWidth;
        }
        this._cardWidth = value;
        return this;
    };
    CardView.prototype.cardHeight = function (value) {
        if (value === undefined) {
            return this._cardHeight;
        }
        this._cardHeight = value;
        return this;
    };
    CardView.prototype.title = function (value) {
        if (value === undefined) {
            return this._titleValue;
        }
        if (this._titleValue !== value) {
            this._titleValue = value;
        }
        return this;
    };
    CardView.prototype.titleSize = function (size) {
        if (size === undefined) {
            return this._titleSize;
        }
        if (size !== null) {
            size = Length.fromAny(size);
        }
        if (this._titleSize ? !this._titleSize.equals(size) : this._titleSize !== size) {
            this._titleSize = size;
        }
        return this;
    };
    CardView.prototype.titleColor = function (color) {
        if (color === undefined) {
            return this._titleColor;
        }
        if (color !== null) {
            color = Color.fromAny(color);
        }
        if (this._titleColor ? !this._titleColor.equals(color) : this._titleColor !== color) {
            this._titleColor = color;
        }
        return this;
    };
    CardView.prototype.titleWeight = function (value) {
        if (value === undefined) {
            return this._titleWeight;
        }
        if (this._titleWeight !== value) {
            this._titleWeight = value;
        }
        return this;
    };
    CardView.prototype.subtitle = function (value) {
        if (value === undefined) {
            return this._subtitleValue;
        }
        if (this._subtitleValue !== value) {
            this._subtitleValue = value;
        }
        return this;
    };
    CardView.prototype.render = function (frameNumber) {
        var headerOn = false;
        if (this._titleValue && !(this._titleValue instanceof Absent)) {
            var element = this._title;
            element.text(this._titleValue);
            if (this._titleSize) {
                element.fontSize(this._titleSize, this._trans);
            }
            if (this._titleColor) {
                element.color(this._titleColor, this._trans);
            }
            if (this._titleWeight) {
                element.setProperty(this._titleWeight);
            }
            headerOn = true;
        }
        if (this._subtitleValue && !(this._subtitleValue instanceof Absent)) {
            this._subtitle.text(this._subtitleValue);
            var element = this._subtitle;
            element.text(this._subtitleValue);
            if (this._subtitleSize) {
                element.fontSize(this._subtitleSize, this._trans);
            }
            if (this._subtitleColor) {
                element.color(this._subtitleColor, this._trans);
            }
            if (this._subtitleWeight) {
                element.setProperty(this._subtitleWeight);
            }
            headerOn = true;
        }
        this._header.display((headerOn) ? 'flex' : 'none');
    };
    return CardView;
}(View));

//# sourceMappingURL=data:application/json;base64,

var CardModel = (function (_super) {
    __extends(CardModel, _super);
    function CardModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardModel.TextParams = Model.Params.concat([
        new ModelParam('size', Length.Form),
        new ModelParam('color', Color.Form),
        new ModelParam('weight', Value),
    ]);
    CardModel.Params = HtmlModel.Params.concat([
        new ModelParam('proportion', Text),
        new ModelParam('placement', Text),
        new ModelParam('paddingTop', Length.Form),
        new ModelParam('paddingRight', Length.Form),
        new ModelParam('paddingBottom', Length.Form),
        new ModelParam('paddingLeft', Length.Form),
        new ModelParam('backgroundColor', Color.Form),
        new ModelParam('titleStyle', CardModel.TextParams),
        new ModelParam('subtitleStyle', CardModel.TextParams),
    ]);
    return CardModel;
}(HtmlModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhcmQtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxFQUNMLEtBQUssRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLEtBQUssRUFBRSxVQUFVLEdBQ2xCLE1BQU0sVUFBVSxDQUFDO0FBRWxCO0lBQStCLHFDQUFTO0lBQXhDOztJQWtCQSxDQUFDO0lBakJpQixvQkFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQy9DLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ25DLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ25DLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7S0FDaEMsQ0FBQyxDQUFDO0lBRWEsZ0JBQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUMvQyxJQUFJLFVBQVUsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDO1FBQ2xDLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUM7UUFDakMsSUFBSSxVQUFVLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDekMsSUFBSSxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDM0MsSUFBSSxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDNUMsSUFBSSxVQUFVLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDMUMsSUFBSSxVQUFVLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQztRQUM3QyxJQUFJLFVBQVUsQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQztRQUNsRCxJQUFJLFVBQVUsQ0FBQyxlQUFlLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQztLQUN0RCxDQUFDLENBQUM7SUFDTCxnQkFBQztDQUFBLEFBbEJELENBQStCLFNBQVMsR0FrQnZDO1NBbEJZLFNBQVMifQ==

var Card = (function (_super) {
    __extends(Card, _super);
    function Card() {
        var _this = _super.call(this) || this;
        _this.debug = false;
        return _this;
    }
    Object.defineProperty(Card.prototype, "tag", {
        get: function () {
            return 'card';
        },
        enumerable: true,
        configurable: true
    });
    Card.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Card needs a parent node or view', this.parentView());
        }
        if (this.debug) {
            console.info('[Card] create ', { id: this.id(), rootElement: this._rootElement, view: this.view(), value: value });
        }
        this.controller(new CardController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new CardModel(eventManager));
        this.view(new CardView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Card.prototype.start = function () {
        if (this.debug) {
            console.info('[Card] start');
        }
        _super.prototype.start.call(this);
        if (this.debug) {
            console.info('[Card] started');
        }
    };
    return Card;
}(UiComponent));
UiComponent.Global.addComponent('card', Card);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBbUIsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXhELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFekM7SUFBMEIsZ0NBQVc7SUFPakM7UUFBQSxZQUNJLGlCQUFPLFNBRVY7UUFERyxLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzs7SUFDdkIsQ0FBQztJQVBELHNCQUFJLHFCQUFHO2FBQVA7WUFDSSxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDOzs7T0FBQTtJQU9ELHFCQUFNLEdBQU4sVUFBTyxXQUFrQyxFQUFFLEtBQVksRUFBRSxLQUFnQixFQUFFLFlBQTZCLEVBQUUsRUFBVztRQUNqSCxpQkFBTSxNQUFNLFlBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUN4RTtRQUNELElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFFLENBQUM7U0FBRTtRQUd2SSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUczRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFHeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBYyxDQUFDLENBQUMsQ0FBQztRQUdsRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFM0IsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELG9CQUFLLEdBQUw7UUFDSSxJQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQUU7UUFDaEQsaUJBQU0sS0FBSyxXQUFFLENBQUM7UUFDZCxJQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FBRTtJQUN0RCxDQUFDO0lBRUwsV0FBQztBQUFELENBQUMsQUF4Q0QsQ0FBMEIsV0FBVyxHQXdDcEM7O0FBRUQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDIn0=

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFekMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUMifQ==

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFckQsY0FBYyxTQUFTLENBQUM7QUFFeEIsY0FBYyxRQUFRLENBQUMifQ==

var TotemController = (function (_super) {
    __extends(TotemController, _super);
    function TotemController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        _this.debug = false;
        if (_this.debug) {
            console.info('[TotemController] constructor ', { id: id, parentView: parentView });
        }
        return _this;
    }
    TotemController.prototype.create = function () {
        var _this = this;
        _super.prototype.create.call(this);
        if (this.debug) {
            console.info('[TotemController] create ', { getData: this._model.getData() });
        }
        var totemAttributes = this.model().getData();
        var totemAttrs = totemAttributes.get('totem');
        if (totemAttrs instanceof RecordMap) {
            totemAttrs.forEach(function (item) {
                _this.view().node.setAttribute(item.key.stringValue(), item.value.stringValue());
            });
        }
        totemAttributes.forEach(function (attr) {
            if (attr instanceof RecordMap) {
                var castView = Utils.cast(_this.view().node.node, attr, _this.stack(), _this.eventManager());
                if (castView) {
                    _this._childComponents.push(castView);
                    _this.view().addTile(castView.controller());
                }
            }
        });
        this.styleAttributes(this.view().node, totemAttributes.get('style'));
        this.setViewAttributes(totemAttributes);
    };
    TotemController.prototype.start = function () {
        _super.prototype.start.call(this);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this._childComponents.forEach(function (child) {
                child.start();
            });
        }
    };
    TotemController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        this._childComponents.forEach(function (child) {
            child.render(frameNumber);
        });
    };
    TotemController.prototype.setViewAttributes = function (newState) {
        var view = this.view();
        var trans = this.stack().get('transition').cast(Transition.Form);
        view.trans(trans);
        var skip = ['style'];
        this.styleAttributes(view.node, newState.get('style'));
        _super.prototype.setViewAttributes.call(this, newState, skip);
    };
    TotemController.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
    };
    TotemController.prototype.camelCase = function (str) {
        return str.toLowerCase().replace(/[-_\s]+([a-z])/g, function (g) { return g[1].toUpperCase(); });
    };
    TotemController.prototype.styleAttributes = function (node, styleItem) {
        var _this = this;
        if (!node || !styleItem) {
            return;
        }
        var trans = this.stack().get('transition').cast(Transition.Form);
        styleItem.forEach(function (item) {
            var key = _this.camelCase(item.key.stringValue());
            if (node[key]) {
                node[key](item.value.stringValue(), trans);
            }
        });
    };
    TotemController.prototype.onLinkData = function (linkData, eventUID) {
        _super.prototype.onLinkData.call(this, linkData, eventUID);
        var componentData = this._componentData.evaluate(linkData);
        var newState = componentData.evaluate(this._stack);
        if (this.debug) {
            console.info('[TotemController] onLinkData ', { newState: newState });
        }
        this.setViewAttributes(newState);
    };
    return TotemController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90ZW0tY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRvdGVtLWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBb0IsU0FBUyxHQUduQyxNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBRUwsVUFBVSxFQUVWLFVBQVUsRUFFVixLQUFLLEdBRU4sTUFBTSxVQUFVLENBQUM7QUFHbEI7SUFBcUMsMkNBQVU7SUFHN0MseUJBQVksRUFBVSxFQUFFLGFBQW9CLEVBQUUsa0JBQStCLEVBQUUsVUFBZ0IsRUFBRSxLQUFnQixFQUFFLFlBQTZCO1FBQWhKLFlBQ0Usa0JBQU0sRUFBRSxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxTQUc5RTtRQUZDLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUcsS0FBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsRUFBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDO1NBQUU7O0lBQ3RHLENBQUM7SUFFRCxnQ0FBTSxHQUFOO1FBQUEsaUJBeUJDO1FBeEJDLGlCQUFNLE1BQU0sV0FBRSxDQUFDO1FBQ2YsSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFDLENBQUUsQ0FBQztTQUFFO1FBQ2hHLElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUcvQyxJQUFNLFVBQVUsR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hELElBQUcsVUFBVSxZQUFZLFNBQVMs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

var TotemDefaults = (function () {
    function TotemDefaults() {
    }
    TotemDefaults.Spacing = Length.zero();
    TotemDefaults.DesiredWidth = Length.fromAny('100%');
    TotemDefaults.MinVisibleWidth = Length.zero();
    return TotemDefaults;
}());
var TotemView = (function (_super) {
    __extends(TotemView, _super);
    function TotemView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._tiles = [];
        _this.debug = false;
        _this._spacing = TotemDefaults.Spacing;
        _this._desiredWidth = TotemDefaults.DesiredWidth;
        _this._minVisibleWidth = TotemDefaults.MinVisibleWidth;
        return _this;
    }
    TotemView.prototype.create = function () {
        _super.prototype.create.call(this);
        this._mainElement = HtmlView.create('div')
            .className('totem')
            .display('none')
            .position('relative');
        this._parentView.node.appendChild(this._mainElement.node);
    };
    TotemView.prototype.start = function () {
        if (this.debug) {
            console.info('[TotemView] start ', { this: this });
        }
        if (!this._hasStarted) {
            this._hasStarted = true;
        }
    };
    TotemView.prototype.stop = function () {
        if (this.debug) {
            console.info('[TotemView] start ', { this: this });
        }
        _super.prototype.stop.call(this);
    };
    Object.defineProperty(TotemView.prototype, "node", {
        get: function () {
            return this._mainElement;
        },
        enumerable: true,
        configurable: true
    });
    TotemView.prototype.addTile = function (controller) {
        if (this._tiles.indexOf(controller) < 0) {
            this._tiles.push(controller);
        }
    };
    TotemView.prototype.removeTile = function (controller) {
        var i = this._tiles.indexOf(controller);
        if (i >= 0) {
            this._tiles.splice(i, 1);
        }
    };
    TotemView.prototype.trans = function (value) {
        if (value === undefined) {
            return this._trans;
        }
        this._trans = (value) ? value : undefined;
        return this;
    };
    TotemView.prototype.spacing = function (spacing) {
        if (spacing === undefined) {
            return this._spacing;
        }
        spacing = Length.fromAny(spacing);
        if (!this._spacing.equals(spacing)) {
            this._spacing = spacing;
        }
        return this;
    };
    TotemView.prototype.desiredWidth = function (desiredWidth) {
        if (desiredWidth === undefined) {
            return this._desiredWidth;
        }
        desiredWidth = Length.fromAny(desiredWidth);
        if (!this._desiredWidth.equals(desiredWidth)) {
            this._desiredWidth = desiredWidth;
        }
        return this;
    };
    TotemView.prototype.minVisibleWidth = function (minVisibleWidth) {
        if (minVisibleWidth === undefined) {
            return this._minVisibleWidth;
        }
        minVisibleWidth = Length.fromAny(minVisibleWidth);
        if (!this._minVisibleWidth.equals(minVisibleWidth)) {
            this._minVisibleWidth = minVisibleWidth;
            this.requireResize();
        }
        return this;
    };
    TotemView.prototype.render = function (frameNumber) {
        this.reflow();
    };
    TotemView.prototype.reflow = function () {
        var childCount = this._tiles.length;
        if (childCount > 0) {
            var parentNode = this._mainElement.node.parentNode;
            var parentWidth = parentNode instanceof HTMLElement ? parentNode.offsetWidth : 0;
            var parentHeight = parentNode instanceof HTMLElement ? parentNode.offsetHeight : 0;
            var desiredWidth = this._desiredWidth.pxValue(parentWidth);
            var spacing_1 = this._spacing.pxValue(desiredWidth);
            var childWidth_1 = Math.max(0, desiredWidth - 2 * spacing_1);
            if (childWidth_1 * childCount + spacing_1 * (childCount + 1) > parentHeight) {
                childWidth_1 = Math.max(0, (parentHeight - spacing_1 * (childCount + 1)) / childCount);
                desiredWidth = childWidth_1 + 2 * spacing_1;
            }
            var minVisibleWidth = this._minVisibleWidth.pxValue(parentWidth);
            if (desiredWidth >= minVisibleWidth) {
                this._mainElement.display('block')
                    .width(desiredWidth)
                    .flexBasis(null);
                this._tiles.forEach(function (tile, i) {
                    var tileView = tile.view().node;
                    if (tileView instanceof HtmlView) {
                        tileView.position('absolute')
                            .top(i * childWidth_1 + i * spacing_1)
                            .right(spacing_1)
                            .left(spacing_1)
                            .width(childWidth_1)
                            .height(childWidth_1)
                            .boxSizing('border-box');
                    }
                });
            }
            else {
                this._mainElement.display('none');
            }
        }
    };
    return TotemView;
}(View));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90ZW0tdmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRvdGVtLXZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTSxNQUFNLEVBRWpCLFFBQVEsRUFBRSxJQUFJLEdBRWYsTUFBTSxVQUFVLENBQUM7QUFHbEI7SUFBQTtJQUlBLENBQUM7SUFIaUIscUJBQU8sR0FBVyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEMsMEJBQVksR0FBVyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlDLDZCQUFlLEdBQVcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFELG9CQUFDO0NBQUEsQUFKRCxJQUlDO1NBSlksYUFBYTtBQU0xQjtJQUErQixxQ0FBSTtJQVVqQyxtQkFBWSxFQUFzQixFQUFFLFVBQWdCO1FBQXBELFlBQ0Usa0JBQU0sRUFBRSxFQUFFLFVBQVUsQ0FBQyxTQU10QjtRQVhRLFlBQU0sR0FBaUIsRUFBRSxDQUFDO1FBTWpDLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLEtBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQztRQUN0QyxLQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUM7UUFDaEQsS0FBSSxDQUFDLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxlQUFlLENBQUM7O0lBQ3hELENBQUM7SUFFRCwwQkFBTSxHQUFOO1FBQ0UsaUJBQU0sTUFBTSxXQUFFLENBQUM7UUFDZixJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ3ZDLFNBQVMsQ0FBQyxPQUFPLENBQUM7YUFDbEIsT0FBTyxDQUFDLE1BQU0sQ0FBQzthQUNmLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV2QixJQUFJLENBQUMsV0FBd0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZ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

var TotemModel = (function (_super) {
    __extends(TotemModel, _super);
    function TotemModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TotemModel.Params = HtmlModel.Params.concat([
        new ModelParam('spacing', Length.Form),
        new ModelParam('desiredWidth', Length.Form),
        new ModelParam('minVisibleWidth', Length.Form),
    ]);
    return TotemModel;
}(HtmlModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90ZW0tbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0b3RlbS1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxHQUNQLE1BQU0sVUFBVSxDQUFDO0FBRWxCO0lBQWdDLHNDQUFTO0lBQXpDOztJQU9BLENBQUM7SUFMaUIsaUJBQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUMvQyxJQUFJLFVBQVUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBRTtRQUN2QyxJQUFJLFVBQVUsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBRTtRQUM1QyxJQUFJLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFFO0tBQ2hELENBQUMsQ0FBQztJQUNMLGlCQUFDO0NBQUEsQUFQRCxDQUFnQyxTQUFTLEdBT3hDO1NBUFksVUFBVSJ9

var Totem = (function (_super) {
    __extends(Totem, _super);
    function Totem() {
        var _this = _super.call(this) || this;
        _this.debug = false;
        return _this;
    }
    Object.defineProperty(Totem.prototype, "tag", {
        get: function () {
            return 'totem';
        },
        enumerable: true,
        configurable: true
    });
    Totem.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Totem needs a parent node or view', this.parentView());
        }
        if (this.debug) {
            console.info('[Totem] create ', { id: this.id(), rootElement: this._rootElement, view: this.view(), value: value });
        }
        this.controller(new TotemController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new TotemModel(eventManager));
        this.view(new TotemView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Totem.prototype.start = function () {
        if (this.debug) {
            console.info('[Totem] start');
        }
        _super.prototype.start.call(this);
        if (this.debug) {
            console.info('[Totem] started');
        }
    };
    return Totem;
}(UiComponent));
UiComponent.Global.addComponent('totem', Totem);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0b3RlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFtQixXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQztJQUEyQixpQ0FBVztJQU9sQztRQUFBLFlBQ0ksaUJBQU8sU0FFVjtRQURHLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDOztJQUN2QixDQUFDO0lBUEQsc0JBQUksc0JBQUc7YUFBUDtZQUNJLE9BQU8sT0FBTyxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBT0Qsc0JBQU0sR0FBTixVQUFPLFdBQWtDLEVBQUUsS0FBWSxFQUFFLEtBQWdCLEVBQUUsWUFBNkIsRUFBRSxFQUFXO1FBQ2pILGlCQUFNLE1BQU0sWUFBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFO1FBQ0QsSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUUsQ0FBQztTQUFFO1FBR3hJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRzVHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUd6QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFjLENBQUMsQ0FBQyxDQUFDO1FBR25FLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUzQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQscUJBQUssR0FBTDtRQUNJLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FBRTtRQUNqRCxpQkFBTSxLQUFLLFdBQUUsQ0FBQztRQUNkLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUFFO0lBQ3ZELENBQUM7SUFFTCxZQUFDO0FBQUQsQ0FBQyxBQXhDRCxDQUEyQixXQUFXLEdBd0NyQzs7QUFFRCxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMifQ==

var TileController = (function (_super) {
    __extends(TileController, _super);
    function TileController(id, componentInfo, componentReference, parentView, stack, eventManager) {
        var _this = _super.call(this, id, componentInfo, componentReference, parentView, stack, eventManager) || this;
        _this.debug = false;
        if (_this.debug) {
            console.info('[TileController] constructor ', { id: id, parentView: parentView });
        }
        return _this;
    }
    TileController.prototype.create = function () {
        var _this = this;
        _super.prototype.create.call(this);
        if (this.debug) {
            console.info('[TileController] create ', { getData: this._model.getData() });
        }
        var tileAttributes = this.model().getData();
        var tileAttrs = tileAttributes.get('tile');
        if (tileAttrs instanceof RecordMap) {
            tileAttrs.forEach(function (item) {
                _this.view().node.setAttribute(item.key.stringValue(), item.value.stringValue());
            });
        }
        var bodyItem = tileAttributes.get('body');
        if (bodyItem instanceof RecordMap) {
            var cloneAttr = bodyItem.clone();
            var castView = Utils.cast(this.view().content.node, cloneAttr, this.stack(), this.eventManager());
            if (castView) {
                this._childComponents.push(castView);
                this.view().addBody(castView.controller());
            }
        }
        this.styleAttributes(this.view().node, tileAttributes.get('style'));
        this.setViewAttributes(tileAttributes);
    };
    TileController.prototype.start = function () {
        _super.prototype.start.call(this);
        if (this._parentView && this._view) {
            this._parentView.appendChildView(this._view);
            this._childComponents.forEach(function (child) {
                child.start();
            });
        }
    };
    TileController.prototype.render = function (frameNumber) {
        _super.prototype.render.call(this, frameNumber);
        this._childComponents.forEach(function (child) {
            child.render(frameNumber);
        });
    };
    TileController.prototype.setViewAttributes = function (newState) {
        var view = this.view();
        var trans = this.stack().get('transition').cast(Transition.Form);
        view.trans(trans);
        var skip = ['style'];
        this.styleAttributes(this.view().node, newState.get('style'));
        _super.prototype.setViewAttributes.call(this, newState, skip);
    };
    TileController.prototype.processViewAttributes = function (newStateValue, name, type, trans) {
    };
    TileController.prototype.camelCase = function (str) {
        return str.toLowerCase().replace(/[-_\s]+([a-z])/g, function (g) { return g[1].toUpperCase(); });
    };
    TileController.prototype.styleAttributes = function (node, styleItem) {
        var _this = this;
        if (!node || !styleItem) {
            return;
        }
        var trans = this.stack().get('transition').cast(Transition.Form);
        styleItem.forEach(function (item) {
            var key = _this.camelCase(item.key.stringValue());
            if (node[key]) {
                node[key](item.value.stringValue(), trans);
            }
        });
    };
    TileController.prototype.onLinkData = function (linkData, eventUID) {
        _super.prototype.onLinkData.call(this, linkData, eventUID);
        var componentData = this._componentData.evaluate(linkData);
        var newState = componentData.evaluate(this._stack);
        if (this.debug) {
            console.info('[TileController] onLinkData ', { newState: newState });
        }
        this.setViewAttributes(newState);
    };
    return TileController;
}(Controller));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS1jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGlsZS1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQW9CLFNBQVMsR0FHbkMsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUVMLFVBQVUsRUFDVixVQUFVLEVBRVYsS0FBSyxHQUdOLE1BQU0sVUFBVSxDQUFDO0FBR2xCO0lBQW9DLDBDQUFVO0lBRzVDLHdCQUFZLEVBQVUsRUFBRSxhQUFvQixFQUFFLGtCQUErQixFQUFFLFVBQWdCLEVBQUUsS0FBZ0IsRUFBRSxZQUE2QjtRQUFoSixZQUNFLGtCQUFNLEVBQUUsRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsU0FHOUU7UUFGQyxLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFHLEtBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLCtCQUErQixFQUFFLEVBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztTQUFFOztJQUNyRyxDQUFDO0lBRUQsK0JBQU0sR0FBTjtRQUFBLGlCQTRCQztRQTNCQyxpQkFBTSxNQUFNLFdBQUUsQ0FBQztRQUNmLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsRUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBQyxDQUFFLENBQUM7U0FBRTtRQUMvRixJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFHOUMsSUFBTSxTQUFTLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFHLFNBQVMsWUFBWSxTQUFTLEVB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

var TileView = (function (_super) {
    __extends(TileView, _super);
    function TileView(id, parentView) {
        var _this = _super.call(this, id, parentView) || this;
        _this._bodys = [];
        _this.debug = false;
        return _this;
    }
    TileView.prototype.create = function () {
        _super.prototype.create.call(this);
        this._mainElement = HtmlView.create('div')
            .className('tile')
            .position('relative')
            .display('flex')
            .flexDirection('column')
            .flexGrow(1)
            .flexBasis(0)
            .width('100%')
            .height('100%')
            .padding(8);
        this._contentView = this._mainElement.append('div')
            .className('content')
            .display('flex')
            .position('relative')
            .flexGrow(1)
            .flexBasis(0);
        this._parentView.node.appendChild(this._mainElement.node);
    };
    TileView.prototype.start = function () {
        if (this.debug) {
            console.info('[TileView] start ', { this: this });
        }
        if (!this._hasStarted) {
            this._hasStarted = true;
        }
    };
    TileView.prototype.stop = function () {
        if (this.debug) {
            console.info('[TileView] start ', { this: this });
        }
        _super.prototype.stop.call(this);
    };
    Object.defineProperty(TileView.prototype, "node", {
        get: function () {
            return this._mainElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TileView.prototype, "content", {
        get: function () {
            return this._contentView;
        },
        enumerable: true,
        configurable: true
    });
    TileView.prototype.addBody = function (controller) {
        if (this._bodys.indexOf(controller) < 0) {
            this._bodys.push(controller);
        }
    };
    TileView.prototype.removeBody = function (controller) {
        var i = this._bodys.indexOf(controller);
        if (i >= 0) {
            this._bodys.splice(i, 1);
        }
    };
    TileView.prototype.trans = function (value) {
        if (value === undefined) {
            return this._trans;
        }
        this._trans = (value) ? value : undefined;
        return this;
    };
    TileView.prototype.render = function (frameNumber) {
    };
    return TileView;
}(View));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS12aWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGlsZS12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUwsUUFBUSxFQUFFLElBQUksR0FFZixNQUFNLFVBQVUsQ0FBQztBQUVsQjtJQUE4QixvQ0FBSTtJQU9oQyxrQkFBWSxFQUFzQixFQUFFLFVBQWdCO1FBQXBELFlBQ0Usa0JBQU0sRUFBRSxFQUFFLFVBQVUsQ0FBQyxTQUd0QjtRQVJRLFlBQU0sR0FBaUIsRUFBRSxDQUFDO1FBTWpDLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDOztJQUVyQixDQUFDO0lBRUQseUJBQU0sR0FBTjtRQUNFLGlCQUFNLE1BQU0sV0FBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUN2QyxTQUFTLENBQUMsTUFBTSxDQUFDO2FBQ2pCLFFBQVEsQ0FBQyxVQUFVLENBQUM7YUFDcEIsT0FBTyxDQUFDLE1BQU0sQ0FBQzthQUNmLGFBQWEsQ0FBQyxRQUFRLENBQUM7YUFDdkIsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUNYLFNBQVMsQ0FBQyxDQUFDLENBQUM7YUFDWixLQUFLLENBQUMsTUFBTSxDQUFDO2FBQ2IsTUFBTSxDQUFDLE1BQU0sQ0FBQzthQUNkLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVkLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ2hELFNBQVMsQ0FBQyxTQUFTLENBQUM7YUFDcEIsT0FBTyxDQUFDLE1BQU0sQ0FBQzthQUNmLFFBQVEsQ0FBQyxVQUFVLENBQUM7YUFDcEIsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUNYLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVmLElBQUksQ0FBQyxXQUF3QixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUcxRSxDQUFDO0lBRUQsd0JBQUssR0FBTDtRQUNFLElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUUsQ0FBQztTQUFFO1FBQ3BFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVELHVCQUFJLEdBQUo7UUFDRSxJQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFFLENBQUM7U0FBRTtRQUNwRSxpQkFBTSxJQUFJLFdBQUUsQ0FBQztJQUNmLENBQUM7SUFFRCxzQkFBSSwwQkFBSTthQUFSO1lBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksNkJBQU87YUFBWDtZQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMzQixDQUFDOzs7T0FBQTtJQUVELDBCQUFPLEdBQVAsVUFBUSxVQUFzQjtRQUM1QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFRCw2QkFBVSxHQUFWLFVBQVcsVUFBc0I7UUFDL0IsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUlELHdCQUFLLEdBQUwsVUFBTSxLQUEwQztRQUM5QyxJQUFHLEtBQUssS0FBTSxTQUFTLEVBQUU7WUFBRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7U0FBRTtRQUNoRCxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3pDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELHlCQUFNLEdBQU4sVUFBTyxXQUFtQjtJQUUxQixDQUFDO0lBRUgsZUFBQztBQUFELENBQUMsQUFuRkQsQ0FBOEIsSUFBSSxHQW1GakMifQ==

var TileModel = (function (_super) {
    __extends(TileModel, _super);
    function TileModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TileModel.Params = HtmlModel.Params.concat([
        new ModelParam('backgroundColor', Color.Form),
        new ModelParam('paddingTop', Length.Form),
        new ModelParam('paddingRight', Length.Form),
        new ModelParam('paddingBottom', Length.Form),
        new ModelParam('paddingLeft', Length.Form),
    ]);
    return TileModel;
}(HtmlModel));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRpbGUtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxLQUFLLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixNQUFNLEdBQ1AsTUFBTSxVQUFVLENBQUM7QUFFbEI7SUFBK0IscUNBQVM7SUFBeEM7O0lBU0EsQ0FBQztJQVBpQixnQkFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQy9DLElBQUksVUFBVSxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUU7UUFDOUMsSUFBSSxVQUFVLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUU7UUFDMUMsSUFBSSxVQUFVLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUU7UUFDNUMsSUFBSSxVQUFVLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUU7UUFDN0MsSUFBSSxVQUFVLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUU7S0FDNUMsQ0FBQyxDQUFDO0lBQ0wsZ0JBQUM7Q0FBQSxBQVRELENBQStCLFNBQVMsR0FTdkM7U0FUWSxTQUFTIn0=

var Tile = (function (_super) {
    __extends(Tile, _super);
    function Tile() {
        var _this = _super.call(this) || this;
        _this.debug = false;
        return _this;
    }
    Object.defineProperty(Tile.prototype, "tag", {
        get: function () {
            return 'tile';
        },
        enumerable: true,
        configurable: true
    });
    Tile.prototype.create = function (rootElement, value, stack, eventManager, id) {
        _super.prototype.create.call(this, rootElement, value, stack, eventManager, id);
        if (!this.parentView()) {
            console.error('Tile needs a parent node or view', this.parentView());
        }
        if (this.debug) {
            console.info('[Tile] create ', { id: this.id(), rootElement: this._rootElement, view: this.view(), value: value });
        }
        this.controller(new TileController(this.id(), value, this, this.parentView(), this.stack(), eventManager));
        this.model(new TileModel(eventManager));
        this.view(new TileView(this.id(), this.parentView()));
        this.controller().create();
        return this;
    };
    Tile.prototype.start = function () {
        if (this.debug) {
            console.info('[Tile] start');
        }
        _super.prototype.start.call(this);
        if (this.debug) {
            console.info('[Tile] started');
        }
    };
    return Tile;
}(UiComponent));
UiComponent.Global.addComponent('tile', Tile);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBbUIsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXhELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFekM7SUFBMEIsZ0NBQVc7SUFPakM7UUFBQSxZQUNJLGlCQUFPLFNBRVY7UUFERyxLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzs7SUFDdkIsQ0FBQztJQVBELHNCQUFJLHFCQUFHO2FBQVA7WUFDSSxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDOzs7T0FBQTtJQU9ELHFCQUFNLEdBQU4sVUFBTyxXQUFrQyxFQUFFLEtBQVksRUFBRSxLQUFnQixFQUFFLFlBQTZCLEVBQUUsRUFBVztRQUNqSCxpQkFBTSxNQUFNLFlBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUN4RTtRQUNELElBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFFLENBQUM7U0FBRTtRQUd2SSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUczRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFHeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBYyxDQUFDLENBQUMsQ0FBQztRQUdsRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFM0IsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELG9CQUFLLEdBQUw7UUFDSSxJQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQUU7UUFDaEQsaUJBQU0sS0FBSyxXQUFFLENBQUM7UUFDZCxJQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FBRTtJQUN0RCxDQUFDO0lBRUwsV0FBQztBQUFELENBQUMsQUF4Q0QsQ0FBMEIsV0FBVyxHQXdDcEM7O0FBRUQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDIn0=

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFekMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUMifQ==

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFckQsY0FBYyxRQUFRLENBQUMifQ==

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFNBQVMsQ0FBQztBQUV4QixjQUFjLFNBQVMsQ0FBQztBQUV4QixjQUFjLFNBQVMsQ0FBQztBQU14QixjQUFjLE9BQU8sQ0FBQztBQU10QixjQUFjLFNBQVMsQ0FBQztBQUl4QixjQUFjLFNBQVMsQ0FBQyJ9

if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', function (event) {
        var app = new App();
        app.create();
        app.start();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxjQUFjLGFBQWEsQ0FBQztBQUU1QixjQUFjLGNBQWMsQ0FBQztBQUU3QixjQUFjLFVBQVUsQ0FBQztBQUV6QixjQUFjLFVBQVUsQ0FBQztBQUV6QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRy9CLElBQUksT0FBTyxRQUFRLEtBQUssV0FBVyxFQUFFO0lBQ25DLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLEtBQVk7UUFFbEUsSUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUN0QixHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFYixHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFZCxDQUFDLENBQUMsQ0FBQztDQUNKIn0=

exports.Murmur3 = Murmur3;
exports.Random = Random;
exports.equal = equal;
exports.compare = compare;
exports.Cursor = Cursor;
exports.Input = Input;
exports.StringInput = StringInput;
exports.StringOutput = StringOutput;
exports.Iteratee = Iteratee;
exports.EvalStack = EvalStack;
exports.Item = Item;
exports.Field = Field;
exports.Attr = Attr$1;
exports.Slot = Slot;
exports.Value = Value;
exports.Record = Record;
exports.RecordMap = RecordMap;
exports.RecordMapView = RecordMapView;
exports.Data = Data;
exports.Text = Text$1;
exports.Num = Num;
exports.Bool = Bool;
exports.DynamicValue = DynamicValue;
exports.Func = Func;
exports.Extant = Extant;
exports.Absent = Absent;
exports.Form = Form;
exports.FormCursor = FormCursor;
exports.FormPairCursor = FormPairCursor;
exports.Recon = Recon;
exports.RecordScope = RecordScope;
exports.BTree = BTree;
exports.BTreePage = BTreePage;
exports.STree = STree;
exports.STreePage = STreePage;
exports.HashGenCacheMap = HashGenCacheMap;
exports.Uri = Uri;
exports.UriScheme = UriScheme;
exports.UriAuthority = UriAuthority;
exports.UriUser = UriUser;
exports.UriHost = UriHost;
exports.UriPort = UriPort;
exports.UriPath = UriPath;
exports.UriPathBuilder = UriPathBuilder;
exports.UriQuery = UriQuery;
exports.UriQueryBuilder = UriQueryBuilder;
exports.UriFragment = UriFragment;
exports.UriParser = UriParser;
exports.UriCache = UriCache;
exports.Selector = Selector;
exports.IdentitySelector = IdentitySelector;
exports.LiteralSelector = LiteralSelector;
exports.GetSelector = GetSelector;
exports.GetAttrSelector = GetAttrSelector;
exports.GetItemSelector = GetItemSelector;
exports.KeysSelector = KeysSelector;
exports.ChildrenSelector = ChildrenSelector;
exports.DescendantsSelector = DescendantsSelector;
exports.FilterSelector = FilterSelector;
exports.Expr = Expr;
exports.InfixExpr = InfixExpr;
exports.PrefixExpr = PrefixExpr;
exports.CondExpr = CondExpr;
exports.LorExpr = LorExpr;
exports.LandExpr = LandExpr;
exports.BorExpr = BorExpr;
exports.BxorExpr = BxorExpr;
exports.BandExpr = BandExpr;
exports.LtExpr = LtExpr;
exports.LeExpr = LeExpr;
exports.EqExpr = EqExpr;
exports.NeExpr = NeExpr;
exports.GeExpr = GeExpr;
exports.GtExpr = GtExpr;
exports.AddExpr = AddExpr;
exports.SubExpr = SubExpr;
exports.MulExpr = MulExpr;
exports.DivExpr = DivExpr;
exports.ModExpr = ModExpr;
exports.LnotExpr = LnotExpr;
exports.BnotExpr = BnotExpr;
exports.NegExpr = NegExpr;
exports.PosExpr = PosExpr;
exports.InvokeExpr = InvokeExpr;
exports.client = client;
exports.isOnline = isOnline;
exports.keepOnline = keepOnline;
exports.downlink = downlink;
exports.downlinkList = downlinkList;
exports.downlinkMap = downlinkMap;
exports.downlinkValue = downlinkValue;
exports.hostRef = hostRef;
exports.nodeRef = nodeRef;
exports.laneRef = laneRef;
exports.authenticate = authenticate;
exports.command = command;
exports.Envelope = Envelope;
exports.EventMessage = EventMessage;
exports.CommandMessage = CommandMessage;
exports.LinkRequest = LinkRequest;
exports.LinkedResponse = LinkedResponse;
exports.SyncRequest = SyncRequest;
exports.SyncedResponse = SyncedResponse;
exports.UnlinkRequest = UnlinkRequest;
exports.UnlinkedResponse = UnlinkedResponse;
exports.AuthRequest = AuthRequest;
exports.AuthedResponse = AuthedResponse;
exports.DeauthRequest = DeauthRequest;
exports.DeauthedResponse = DeauthedResponse;
exports.RemoteHost = RemoteHost;
exports.Downlink = Downlink;
exports.EventDownlink = EventDownlink;
exports.ListDownlink = ListDownlink;
exports.ListDownlinkRecord = ListDownlinkRecord;
exports.MapDownlink = MapDownlink;
exports.MapDownlinkRecord = MapDownlinkRecord;
exports.ValueDownlink = ValueDownlink;
exports.ValueDownlinkRecord = ValueDownlinkRecord;
exports.HostRef = HostRef;
exports.NodeRef = NodeRef;
exports.LaneRef = LaneRef;
exports.DownlinkScope = DownlinkScope;
exports.Client = Client;
exports.CustomEvent = CustomEventConstructor;
exports.ResizeObserver = ResizeObserver;
exports.DurationFormat = DurationFormat;
exports.HMSDurationFormat = HMSDurationFormat;
exports.NumberFormat = NumberFormat;
exports.SINumberFormat = SINumberFormat;
exports.Angle = Angle;
exports.DegAngle = DegAngle;
exports.GradAngle = GradAngle;
exports.RadAngle = RadAngle;
exports.TurnAngle = TurnAngle;
exports.AngleParser = AngleParser;
exports.Length = Length;
exports.PxLength = PxLength;
exports.EmLength = EmLength;
exports.RemLength = RemLength;
exports.PctLength = PctLength;
exports.UnitlessLength = UnitlessLength;
exports.LengthParser = LengthParser;
exports.Color = Color;
exports.Rgb = Rgb;
exports.Hsl = Hsl;
exports.ColorParser = ColorParser;
exports.BoxShadow = BoxShadow;
exports.BoxShadowParser = BoxShadowParser;
exports.Ease = Ease;
exports.Transform = Transform;
exports.IdentityTransform = IdentityTransform;
exports.TranslateTransform = TranslateTransform;
exports.ScaleTransform = ScaleTransform;
exports.RotateTransform = RotateTransform;
exports.SkewTransform = SkewTransform;
exports.MatrixTransform = MatrixTransform;
exports.TransformList = TransformList;
exports.TransformParser = TransformParser;
exports.TransformListParser = TransformListParser;
exports.Interpolator = Interpolator;
exports.NumberInterpolator = NumberInterpolator;
exports.DateInterpolator = DateInterpolator;
exports.AngleInterpolator = AngleInterpolator;
exports.LengthInterpolator = LengthInterpolator;
exports.ColorInterpolator = ColorInterpolator;
exports.RgbInterpolator = RgbInterpolator;
exports.HslInterpolator = HslInterpolator;
exports.TransformInterpolator = TransformInterpolator;
exports.TranslateTransformInterpolator = TranslateTransformInterpolator;
exports.ScaleTransformInterpolator = ScaleTransformInterpolator;
exports.RotateTransformInterpolator = RotateTransformInterpolator;
exports.SkewTransformInterpolator = SkewTransformInterpolator;
exports.MatrixTransformInterpolator = MatrixTransformInterpolator;
exports.TransformListInterpolator = TransformListInterpolator;
exports.TransformPathInterpolator = TransformPathInterpolator;
exports.InterpolatorInterpolator = InterpolatorInterpolator;
exports.ScaleInterpolator = ScaleInterpolator;
exports.LinearScaleInterpolator = LinearScaleInterpolator;
exports.TimeScaleInterpolator = TimeScaleInterpolator;
exports.ReconInterpolator = ReconInterpolator;
exports.Scale = Scale;
exports.ContinuousScale = ContinuousScale;
exports.LinearScale = LinearScale;
exports.TimeScale = TimeScale;
exports.Transition = Transition;
exports.toAttributeString = toAttributeString;
exports.toStyleString = toStyleString;
exports.Animator = Animator;
exports.FrameAnimator = FrameAnimator;
exports.ChildAnimator = ChildAnimator;
exports.TweenAnimator = TweenAnimator;
exports.ChildFrameAnimator = ChildFrameAnimator;
exports.TweenFrameAnimator = TweenFrameAnimator;
exports.AttributeAnimator = AttributeAnimator;
exports.StyleAnimator = StyleAnimator;
exports.TextAnimator = TextAnimator;
exports.ComponentAnimator = ComponentAnimator;
exports.NumberAnimator = NumberAnimator;
exports.LengthAnimator = LengthAnimator;
exports.ColorAnimator = ColorAnimator;
exports.AngleAnimator = AngleAnimator;
exports.KinematicEvent = KinematicEvent;
exports.Kinematic = Kinematic;
exports.PointerKinematic = PointerKinematic;
exports.TouchKinematic = TouchKinematic;
exports.MouseKinematic = MouseKinematic;
exports.KinematicScaleEvent = KinematicScaleEvent;
exports.KinematicScale = KinematicScale;
exports.KinematicScaleHorizontal = KinematicScaleHorizontal;
exports.KinematicScaleVertical = KinematicScaleVertical;
exports.Path = Path;
exports.Arc = Arc;
exports.ModelParam = ModelParam;
exports.Model = Model;
exports.ArcView = ArcView;
exports.ShadowBoxView = ShadowBoxView;
exports.Controller = Controller;
exports.App = App;
exports.AppEventManager = AppEventManager;
exports.AppEventTypes = AppEventTypes;
exports.AppModel = AppModel;
exports.AppController = AppController;
exports.EachComponent = EachComponent;
exports.EachModel = EachModel;
exports.EachController = EachController;
exports.ElemView = ElemView;
exports.ElemModel = ElemModel;
exports.HtmlView = HtmlView;
exports.HtmlModel = HtmlModel;
exports.Html = Html;
exports.HtmlTags = HtmlTags;
exports.NodeView = NodeView;
exports.NodeModel = NodeModel;
exports.SvgView = SvgView;
exports.SvgModel = SvgModel;
exports.TextView = TextView;
exports.TextModel = TextModel;
exports.TextComponent = TextComponent;
exports.TextController = TextController;
exports.DateTimeLocale = DateTimeLocale;
exports.DateTime = DateTime;
exports.DateTimeFormat = DateTimeFormat;
exports.TimeInterval = TimeInterval;
exports.UnitTimeInterval = UnitTimeInterval;
exports.TimeZone = TimeZone;
exports.UiValue = UiValue;
exports.UiFunc = UiFunc;
exports.UiEnvelope = UiEnvelope;
exports.UiTreeEnvelope = UiTreeEnvelope;
exports.UiViewEnvelope = UiViewEnvelope;
exports.UiAppendEnvelope = UiAppendEnvelope;
exports.UiPrependEnvelope = UiPrependEnvelope;
exports.UiInsertEnvelope = UiInsertEnvelope;
exports.UiRemoveEnvelope = UiRemoveEnvelope;
exports.UiStateEnvelope = UiStateEnvelope;
exports.UiModelEnvelope = UiModelEnvelope;
exports.UiComponent = UiComponent;
exports.PolyUiComponent = PolyUiComponent;
exports.ParentElement = ParentElement;
exports.Utils = Utils;
exports.SwimLink = SwimLink;
exports.View = View;
exports.AttrsDirective = AttrsDirective;
exports.AttrsForm = AttrsForm;
exports.Directive = Directive;
exports.DirectiveForm = DirectiveForm;
exports.PolyDirectiveForm = PolyDirectiveForm;
exports.EachDirective = EachDirective;
exports.EachForm = EachForm;
exports.EventHandlerDirective = EventHandlerDirective;
exports.EventHandlerForm = EventHandlerForm;
exports.InjectDirective = InjectDirective;
exports.InjectForm = InjectForm;
exports.LetDirective = LetDirective;
exports.LetForm = LetForm;
exports.StyleDirective = StyleDirective;
exports.StyleForm = StyleForm;
exports.TickDirective = TickDirective;
exports.TickForm = TickForm;
exports.Board = Board;
exports.BoardModel = BoardModel;
exports.BoardView = BoardView;
exports.BoardController = BoardController;
exports.ChartView = ChartView;
exports.ChartController = ChartController;
exports.ChartModel = ChartModel;
exports.ChartDefaults = ChartDefaults;
exports.Chart = Chart;
exports.AxisController = AxisController;
exports.AxisView = AxisView;
exports.AxisModel = AxisModel;
exports.AxisKeyList = AxisKeyList;
exports.AxisDefaults = AxisDefaults;
exports.TickGenerator = TickGenerator;
exports.NumberTickGenerator = NumberTickGenerator;
exports.TimeTickGenerator = TimeTickGenerator;
exports.Axis = Axis;
exports.PlotController = PlotController;
exports.PlotView = PlotView;
exports.PlotModel = PlotModel;
exports.PlotDefaults = PlotDefaults;
exports.Plot = Plot;
exports.PlotPointController = PlotPointController;
exports.PlotPointView = PlotPointView;
exports.PlotPointModel = PlotPointModel;
exports.PlotPointDefaults = PlotPointDefaults;
exports.PlotPoint = PlotPoint;
exports.GaugeView = GaugeView;
exports.GaugeController = GaugeController;
exports.GaugeDefaults = GaugeDefaults;
exports.GaugeModel = GaugeModel;
exports.Gauge = Gauge;
exports.Pie = Pie;
exports.PieModel = PieModel;
exports.PieView = PieView;
exports.PieController = PieController;
exports.Wedge = Wedge;
exports.WedgeModel = WedgeModel;
exports.WedgeView = WedgeView;
exports.WedgeController = WedgeController;
exports.Quilt = Quilt;
exports.QuiltModel = QuiltModel;
exports.QuiltView = QuiltView;
exports.QuiltController = QuiltController;
exports.Block = Block;
exports.BlockModel = BlockModel;
exports.BlockView = BlockView;
exports.BlockController = BlockController;
exports.Card = Card;
exports.CardModel = CardModel;
exports.CardView = CardView;
exports.CardController = CardController;
exports.Totem = Totem;
exports.TotemModel = TotemModel;
exports.TotemView = TotemView;
exports.TotemController = TotemController;
exports.Tile = Tile;
exports.TileModel = TileModel;
exports.TileView = TileView;
exports.TileController = TileController;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=swim-app.js.map
